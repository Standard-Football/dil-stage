[
    {
        "id": "bd0a3a7ba071477e",
        "type": "tab",
        "label": "DOMINANCE INGESTION",
        "disabled": false,
        "info": ""
    },
    {
        "id": "521d26a7dba2b3ee",
        "type": "tab",
        "label": "DATA ELABORATION",
        "disabled": false,
        "info": ""
    },
    {
        "id": "da3f380d47320561",
        "type": "tab",
        "label": "DATA STORAGE",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8fc0d41fdfa4de60",
        "type": "tab",
        "label": "ORCHESTRATOR",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "b59ecb5ade20da39",
        "type": "tab",
        "label": "DATA PROMOTION",
        "disabled": false,
        "info": ""
    },
    {
        "id": "4483aeb6f4838169",
        "type": "tab",
        "label": "DATA ACCESS",
        "disabled": false,
        "info": ""
    },
    {
        "id": "44dad47cc131c3d9",
        "type": "tab",
        "label": "SIMULATOR",
        "disabled": false,
        "info": ""
    },
    {
        "id": "0baf25388be781c5",
        "type": "tab",
        "label": "Redis",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ce0610525350f227",
        "type": "tab",
        "label": "PROD: SIMULATOR",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "c7a1f882aac10d26",
        "type": "tab",
        "label": "STATISTICHE",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "fe8bd8efceb20d5b",
        "type": "tab",
        "label": "CAPOLOGY",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "0e387015cbd38445",
        "type": "tab",
        "label": "OPTA",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "051eacec663484e5",
        "type": "tab",
        "label": "VIRTUAL",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "338f2da8419b9555",
        "type": "tab",
        "label": "PROD:  API LAYER",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "da26e15afb7659ec",
        "type": "tab",
        "label": "SPORTSMONK",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "82045ad13ed5120a",
        "type": "tab",
        "label": "Vallone",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "a2e67b8cc1136522",
        "type": "subflow",
        "name": "Runs & Week",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 40,
                "y": 80,
                "wires": [
                    {
                        "id": "d4fcb7c9977a5347"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 760,
                "y": 80,
                "wires": [
                    {
                        "id": "1ea6fecd4b068e5e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "1b980fd89607dc71",
        "type": "subflow",
        "name": "The Model",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 720,
                "y": 140,
                "wires": [
                    {
                        "id": "da0faef491c3634d"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 2540,
                "y": 140,
                "wires": [
                    {
                        "id": "520743619190519e",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "14f41b2b.4deca5",
        "type": "MySQLdatabase",
        "name": "Stage",
        "host": "stdfootball-db-stage.lan",
        "port": "3306",
        "db": "stdfoot",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "92ae0a43.5b13e8",
        "type": "mongodb",
        "hostname": "cluster0.8xruu.mongodb.net",
        "topology": "dnscluster",
        "connectOptions": "retryWrites=true&w=majority",
        "port": "",
        "db": "StandardFootball",
        "name": "MongoDB"
    },
    {
        "id": "ea1e5103bb9e91ad",
        "type": "MySQLdatabase",
        "name": "Produzione",
        "host": "stdfootball-db.lan",
        "port": "3306",
        "db": "stdfoot",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "9ccf549a2f05cdc5",
        "type": "redis-config",
        "name": "\"4e:57:f6:00:09:75\":6379",
        "options": "{\"port\":\"6379\",\"host\":\"stdfootball-redis.lan\"}",
        "cluster": false,
        "optionsType": "json"
    },
    {
        "id": "0d8143c0cb6f2873",
        "type": "redis-config",
        "name": "Local",
        "options": "{}",
        "cluster": false,
        "optionsType": "json"
    },
    {
        "id": "29ea1cb9598eed0f",
        "type": "mqtt-broker",
        "name": "",
        "broker": "public.mqtthq.com",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "payload",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    },
    {
        "id": "89228048a2cb3c4c",
        "type": "websocket-listener",
        "path": "/ws/opta",
        "wholemsg": "false"
    },
    {
        "id": "141047d21d3809b5",
        "type": "redis-config",
        "name": "\"4e:57:f6:00:09:75\":6379",
        "options": "{\"port\":\"6379\",\"host\":\"stdfootball-redis.lan\"}",
        "cluster": false,
        "optionsType": "json"
    },
    {
        "id": "d4fcb7c9977a5347",
        "type": "function",
        "z": "a2e67b8cc1136522",
        "name": "Max Runs Query",
        "func": "msg.topic = \"select \"\n            +\"(select max(run) from dominanceplayerstats) as maxrunds, \"\n            +\"(select max(run) from dominanceplayerinfo) as maxruninfo, \"\n            //+\"(select max(run) from dominanceplayersparams) as maxrunparams, \"\n            +\"(select max(run) from dominanceplayersparamsuniq) as maxrununiq, \"\n            +\"(select max(run) from dominanceplayersparamsvol) as maxrunvol, \"\n            +\"(select max(run) from dominanceplayerdata) as maxrundata, \"\n            +\"(select max(run) from dominanceplayerminutes) as maxrunminutes, \"\n            +\"(select max(run) from dominanceteampoints) as maxrunpoints \"\n            +\"from dual;\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 190,
        "y": 80,
        "wires": [
            [
                "a17f4e82631619d7"
            ]
        ]
    },
    {
        "id": "a17f4e82631619d7",
        "type": "mysql",
        "z": "a2e67b8cc1136522",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 420,
        "y": 80,
        "wires": [
            [
                "1ea6fecd4b068e5e"
            ]
        ]
    },
    {
        "id": "1ea6fecd4b068e5e",
        "type": "function",
        "z": "a2e67b8cc1136522",
        "name": "Set FlowVars",
        "func": "var maxrunds = msg.payload[0][\"maxrunds\"] || 0;\nvar maxruninfo = msg.payload[0][\"maxruninfo\"] || 0;\nvar maxrunparams = msg.payload[0][\"maxrunparams\"] || 0;\nvar maxrununiq = msg.payload[0][\"maxrununiq\"] || 0;\nvar maxrunvol = msg.payload[0][\"maxrunvol\"] || 0;\n\nvar maxrundata = msg.payload[0][\"maxrundata\"] || 0;\nvar maxrunminutes = msg.payload[0][\"maxrunminutes\"] || 0;\nvar maxrunpoints = msg.payload[0][\"maxrunpoints\"] || 0;\n\nmsg.maxrunds=maxrunds+1;\nmsg.maxrunparams = maxrunparams +1;\nmsg.maxruninfo = maxruninfo+1;\nmsg.maxrununiq = maxrununiq +1;\nmsg.maxrunvol = maxrunvol+1;\n\nmsg.maxrundata = maxrundata+1;\nmsg.maxrunminutes = maxrunminutes +1;\nmsg.maxrunpoints = maxrunpoints+1;\n\n\nfunction ISO8601_week_no(dt) \n  {\n     var tdt = new Date(dt.valueOf());\n     var dayn = (dt.getDay() + 6) % 7;\n     tdt.setDate(tdt.getDate() - dayn + 3);\n     var firstThursday = tdt.valueOf();\n     tdt.setMonth(0, 1);\n     if (tdt.getDay() !== 4) \n       {\n      tdt.setMonth(0, 1 + ((4 - tdt.getDay()) + 7) % 7);\n        }\n     return 1 + Math.ceil((firstThursday - tdt) / 604800000);\n        }\n\n\n\n\nmsg.week = ISO8601_week_no(new Date());\n\n//console.log(msg);\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "1af8d8c68bc8394f",
        "type": "catch",
        "z": "a2e67b8cc1136522",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 480,
        "y": 360,
        "wires": [
            [
                "8fcab939f950c221"
            ]
        ]
    },
    {
        "id": "02c0ca063cd14f53",
        "type": "debug",
        "z": "a2e67b8cc1136522",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 770,
        "y": 360,
        "wires": []
    },
    {
        "id": "8fcab939f950c221",
        "type": "function",
        "z": "a2e67b8cc1136522",
        "name": "Log",
        "func": "\nflow.get(\"logmsg\").message = mgs.error\nnode.log(flow.get(\"logmsg\"))\n//return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 360,
        "wires": [
            [
                "02c0ca063cd14f53"
            ]
        ]
    },
    {
        "id": "da0faef491c3634d",
        "type": "function",
        "z": "1b980fd89607dc71",
        "name": "Valori di performance ",
        "func": "console.log(\"PLAYER  ECONOMIC ANALYSIS BEGINS\");\n\nlet TheFootballTree = msg.payload\n//let PlayersErrors = msg.PlayersErrors;\n\n/** IMPORTO LE DEFINIZIONI DEGLI OGGETTI CHE VERRANNO CREATI **/\n//const Player = global.get(\"ThePlayerObject\");\n//const Error = global.get(\"TheErrorObject\");\n//const PlayerError = global.get(\"ThePlayerErrorObject\");\n//const Utils = global.get(\"UTILS\");\n\n\n\n\nconsole.log(\"CALCOLO VALORI DI PERFORMANCE\");\n\nlet maxAbsind = 0; //usata nel calcolo del fatmol\nlet maxMinutes = 0; //usata nel calcolo della performance\nlet totFatmol = 0; //usata nel calcolo dell'effectiveness\nlet maxFatmol = 0; //usata nel calcolo dell'effectiveness\nlet numOfValidPlayers = 0;\n\ntry {\n    \n   console.log(\"Calculating maxMinutes\");\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            club.Players.forEach( player => {\n                \n                maxMinutes = player.minutes > maxMinutes ? player.minutes : maxMinutes\n    \n     \n            })\n        })\n        \n    })\n    \n    console.log(\"maxMinutes: \"+maxMinutes);\n    \n    maxMinutes = 5130;\n    \n\n    console.log(\"Calculating Performance, Absing, Rising Star, MAXABSIND\");\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            club.Players.forEach( player => {\n                \n                let minuteShare = ( player.minutes / maxMinutes ) * 100;\n                \n                \n                //Performance\n                /*player.age>24 \n                    ? ( minuteShare > 20 \n                        ? player.performance = player.avgMicroIndex\n                        : player.performance =  (player.avgMicroIndex * player.minutes ) / maxMinutes)\n                    : ( player.minutes > 600 \n                        ? player.performance = player.avgMicroIndex \n                       : player.performance =  (player.avgMicroIndex * player.minutes ) / maxMinutes)*/\n                       \n                let ageThreshold =  player.simulating == true ? 16 : 23\n                let mixedMicroMacroIndex = player.avgMicroIndex * 0.9 + player.avgMacroIndex * 0.1;\n                \n\n                player.performance = mixedMicroMacroIndex;\n                \n                if (player.age >= ageThreshold) {\n                    \n                    if (minuteShare < 10) {\n                        player.performance =  (mixedMicroMacroIndex * player.minutes ) / maxMinutes\n                    }\n                    else if( minuteShare >= 10 && minuteShare < 15) {\n                        player.performance = mixedMicroMacroIndex * 0.2\n                    }\n                    else if( minuteShare >= 15 && minuteShare < 20) {\n                        player.performance = mixedMicroMacroIndex * 0.4\n                    }\n                    else if( minuteShare >= 20 && minuteShare < 25) {\n                        player.performance = mixedMicroMacroIndex * 0.65\n                    }\n                    else if ( minuteShare >= 25 && minuteShare < 30 ){\n                        player.performance = mixedMicroMacroIndex * 0.85\n                    }\n                    \n                    else if(minuteShare >= 30 ) {\n                        player.performance = mixedMicroMacroIndex\n                    } else {\n                        player.performance =  (mixedMicroMacroIndex * player.minutes ) / maxMinutes\n                    }\n                } else {\n                    \n                    if (player.minutes < 200) {\n                        \n                        player.performance = (mixedMicroMacroIndex * player.minutes ) / maxMinutes\n                        \n                    }\n                    else if (player.minutes >= 200 && player.minutes < 300 ) {\n                        player.performance = mixedMicroMacroIndex * 0.3\n                    }\n                    else if (player.minutes >= 300 && player.minutes < 400 ) {\n                        player.performance = mixedMicroMacroIndex * 0.5\n                    }\n                    else if (player.minutes >= 400 && player.minutes < 500 ) {\n                        player.performance = mixedMicroMacroIndex * 0.8\n                    }\n                    else if ( player.minutes > 500 ) {\n                         player.performance = mixedMicroMacroIndex\n                    } else {\n                        player.performance =  (mixedMicroMacroIndex * player.minutes ) / maxMinutes\n                    }\n                }\n                \n                //SOLO per i portieri \n                \n                /*if (player.latestRoleGroup == 0) {\n                    \n                     if(minuteShare > 40 ) {\n                        player.performance = mixedMicroMacroIndex\n                    } else {\n                        player.performance =  (mixedMicroMacroIndex * player.minutes ) / maxMinutes\n                    }\n                    \n                    \n                }*/\n                \n                if (player.performance === undefined || player.performance === null) {\n                    player.performance = 0;\n                }\n                \n                //ABSIND\n                //player.absind = ( ( player.performance *  player.latestRoleWeight)/39 ) +1;\n                player.absind =( ( ( ( player.performance*0.9 ) + ( player.experience*0.1 ) ) *  player.latestRoleWeight)/39 ) +1;\n                \n                \n                //MaxAbsind\n                maxAbsind = maxAbsind > player.absind ? maxAbsind : player.absind;\n                \n                numOfValidPlayers++;\n                \n                \n            \n            })\n        })\n        \n    })\n    \n    playersByGroupAndCluster = {}\n    \n    //DIVIDO I GIOCATORI IN GRUPPI e CLUSTER\n     console.log(\"Calculating  avg performance for groups and clusters\");\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            club.Players.forEach( player => {\n                \n                \n                let playerID = player.playerId\n                \n                //PLAYERS BY GROUP\n                playersByGroupAndCluster[player.latestRoleGroup] === undefined ?  playersByGroupAndCluster[player.latestRoleGroup] = {} : true ;\n                playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster] === undefined ?  playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster] = { performance : 0, count : 0, avgPerformance : 0} : true ;\n                \n                playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].performance = player.performance + playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].performance\n               \n                playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].count++\n                \n                playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].avgPerformance = playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].performance / playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].count\n                \n            \n                \n                \n            })\n        })\n        \n    })\n    \n   //console.log(playersByGroupAndCluster)\n   \n   let maxPartialRisingStar = 0;\n   let maxPartialEmerging = 0;\n    \n      console.log(\"Calculating  Emerging\");\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            club.Players.forEach( player => {\n                \n                \n                //RISINGSTAR\n                //nuova regola rising star: se cluster =1; se età <24; se performance >60; se %minutigiocati>0,175 metti 1, altrimenti 0\n                // dove %mingiocati= calcola numero di settimane su stats (to - from) e calcola (38/numerosettimane calcolato*minutes)/(38*90)\n\n            \n\n                player.risingStar = ( player.performance > 60 && player.age < 24 && player.latestLeagueCluster < 4 && player.avgPlayedMinuteShare > 0.175 ) ? true : false ;\n               \n                //vecchia regola player.risingStar = ( player.performance > 70 && player.currentClubCluster < 6 && player.age < 24 && player.currentLeagueCluster == 1) ? true : false ;\n    \n                //PARTIAL RISING START\n                /*RSpar: Se rising star; 0\n                Se cluster=1; età <24;\n                se performance >1,25 performance media group e cluster; metti (performance/(performance media group e cluster*1.25))-1\n                altrimenti metti 0*/\n\n                player.tentativePartialRisingStar = 0;\n                \n                if (! player.risingStar && player.age < 24 && player.latestLeagueCluster == 1 ) {\n                \n                    let perfRatio = ( player.performance/playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].avgPerformance )\n                    player.tentativePartialRisingStar = perfRatio > 1.25 ? ( perfRatio/1.25 ) -1 : 0\n                }\n                    \n                \n                \n                maxPartialRisingStar = maxPartialRisingStar > player.tentativePartialRisingStar ? maxPartialRisingStar : player.tentativePartialRisingStar;\n                \n                \n                \n            //EMERGING\n                /*emerging: se superstar metti 0; se rising star metti 0; se età >30 metti 0; se microalter =>3;1; se cluster =1; se performance player>2*media performance player stesso cluster e group; se %mingiocati>0,35;1, altrimenti 0\n                   \n                   se superstar => 0 ; STOP\n\n                se risingstart => 0; STOP\n                \n                se età > 30 => 0; STOP\n                \n                se microalert >= 3 => 1; STOP\n                \n                se cluster =1 e performance>2*media performance player dello stesso cluster e gruop e %mingiocati>0.35 => 1; STOP\n                \n                in tutti gli altri casi => 0\n                   \n                   }*/\n                      \n                      \n                player.emerging = false;\n                \n                if (player.superStar) {\n                    player.emerging = false;\n                } else if (player.risingStar) {\n                    player.emerging = false;\n                } else if (player.age >= 30 ) {\n                    player.emerging = false;\n                } else if (player.latestLeagueCluster < 4 && player.alert > 3) {\n                    player.emerging = true;\n                } else if (player.currentClubCluster < 5 && (player.performance * player.latestRoleWeight) > 55 && player.avgPlayedMinuteShare > 0.35) {\n                        player.emerging = true;\n                } else if ( player.latestLeagueCluster == 1  && player.avgPlayedMinuteShare > 0.35 && player.performance > 2*playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].avgPerformance ) {\n                    player.emerging = true;\n                } else if ( player.latestLeagueCluster == 2  && player.avgPlayedMinuteShare > 0.35 && player.performance > 3*playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].avgPerformance ) {\n                    player.emerging = true;\n                } else if ( player.latestLeagueCluster == 3  && player.avgPlayedMinuteShare > 0.35 && player.performance > 4*playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].avgPerformance ) {\n                    player.emerging = true;\n                } else {\n                    player.emerging = false;\n                }\n                      \n                      \n                      \n                 /* vecchia regola        \n                player.emerging = player.superStar \n                    ? false \n                    : ( !player.risingStar && player.age < 30 && player.currentLeagueCluster == 1 && player.currentClubCluster < 6  && (player.performance >  75 || player.alert > 3) \n                        ? true \n                        : false ) */\n                            \n                /*Empar: Se emerging; 0\n                        Se superstar; 0\n                        Se età >30; 0\n                        Se cluster =1;  se performance >1,25 performance media group e cluster; metti (performance/(performance media group e cluster*1.25))-1\n                        altrimenti metti 0\n                        */\n                player.tentativePartialEmerging = 0;\n                \n                if (!player.emerging && !player.superStar && player.age < 30 && player.latestLeagueCluster == 1 ) {\n                \n                    let perfRatio = ( player.performance/playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].avgPerformance )\n                    //player.tentativePartialEmerging = perfRatio > 1.25 ? ( perfRatio/1.25 ) -1 : 0\n                    player.tentativePartialEmerging = perfRatio > 1.25 ? perfRatio -1 : 0\n                }\n                    \n                \n                \n                maxPartialEmerging = maxPartialEmerging > player.tentativePartialEmerging ? maxPartialEmerging : player.tentativePartialEmerging;\n                \n                                \n               \n            })\n        })\n        \n    })\n    \n\n    console.log(\"Calculating FATMOL, Final Emerging and Rising\");\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            club.Players.forEach( player => {\n                \n                player.partialEmerging = ( player.tentativePartialEmerging / maxPartialEmerging) \n                player.partialEmerging = player.partialEmerging > 1 ? 1 : player.partialEmerging;\n                \n                player.partialRisingStar = ( player.tentativePartialRisingStar / maxPartialRisingStar )\n                player.partialRisingStar = player.partialRisingStar > 1 ? 1 : player.partialRisingStar;\n                \n                let nteamAward = player.nationalTeamPlayer == 1 ? 0.33 : 0; \n                let emergingAward = player.emerging == 1 ? 0.33 : 0; \n                let partialEmergingAward = player.partialEmerging / 3\n                let risingStarAward = player.risingStar == 1 ? 0.33 : 0; \n                let partialRisingStarAward =  player.partialRisingStar / 3\n                let superStarAward = player.superStar == 1 ? 0.667 : 0; \n                \n                let tmpFatmol = player.absind + nteamAward   + emergingAward + partialEmergingAward + risingStarAward + partialRisingStarAward +superStarAward;\n        \n                //absind + national team/3 +(rising star + rising star parziale)/3 e (emerging + emerging parziale)/3 + superstar\n                \n                player.fatmol = tmpFatmol;\n        \n                totFatmol = totFatmol + player.fatmol;\n                \n                maxFatmol = maxFatmol > player.fatmol ? maxFatmol : player.fatmol;\n                \n                \n            })\n        })\n        \n    })\n   \n\n    //EFFECTIVENESS & MATURITY\n    const avgFatmol = totFatmol / numOfValidPlayers;\n    \n    let minNotZeroEffectivness = 100;\n\n    console.log(\"Calculating EFFECTIVENESS AND MATURITY\");\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            club.Players.forEach( player => {\n        \n               \n                \n                //EFFECTIVENESS\n        \n                player.effectiveness = ( player.fatmol / maxFatmol ) * 100;\n                \n                minNotZeroEffectivness = player.effectiveness > 0 && player.effectiveness < minNotZeroEffectivness ? player.effectiveness : minNotZeroEffectivness;\n        \n                //MATURITY\n                let emergingReward = player.emerging==1 ? 0.5 :0;\n                let risingStarReward = player.risingStar==1 ? 2 :0;\n                \n                player.maturity = ( player.age > 33 ) \n                                    ? 0 \n                                    :   ( \n                                            ( \n                                                (player.fatmol < 1.75 ) \n                                                ? ( \n                                                    (player.age<23) \n                                                    ? 3 \n                                                    : 1 ) \n                                                :  ( \n                                                        (player.age<29) \n                                                        ? 4 \n                                                        : (33-player.age) \n                                                    ) \n                                            ) + emergingReward + risingStarReward \n                                        )\n                \n                \n            })\n        })\n        \n    })\n    \n    msg.minNotZeroEffectivness = minNotZeroEffectivness;\n    \n        console.log(\"Calculating MOD EFFECTIVENESS\");\n        \n        let minNotZeroUniqueness = 100\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            club.Players.forEach( player => {\n        \n               \n                \n                //EFFECTIVENESS\n        \n                player.modEffectiveness = ( (  player.effectiveness - minNotZeroEffectivness )/(100-minNotZeroEffectivness) ) * 100;\n                \n\n                player.latestUniqueness = player.effectiveness > 0 ? ( 0.7 *  player.modEffectiveness) +  ( player.latestUniqueness * 0.3 ) : ( 0.7 *  player.modEffectiveness);\n                \n                \n                \n                if (player.latestUniqueness >  79.1) {\n        \n                        player.latestUniqueness = 100\n                        \n                    } else if ( player.latestUniqueness > 0 &&  player.latestUniqueness <= 79.1 ) {\n                        \n                        player.latestUniqueness = Math.sqrt(player.latestUniqueness / 79.1)*100;\n                    }\n                \n                \n                \n                minNotZeroUniqueness = player.latestUniqueness > 0 && player.latestUniqueness < minNotZeroUniqueness ? player.latestUniqueness : minNotZeroUniqueness;\n            })\n        })\n        \n    })\n    \n    msg.minNotZeroUniqueness = minNotZeroUniqueness;\n\n    //RELATIVE WEIGHT IN CLUB SECOND VERSION\n    console.log(\"Calculating RELATIVE WEIGHT IN CLUB\");\n    \n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n           \n            \n            club.totFatmol = 0;\n            club.exponentialTotFatmol = 0;\n            \n             club.Players.forEach( player => { \n                \n                      club.totFatmol =  club.totFatmol + player.fatmol;\n                      club.exponentialTotFatmol = club.exponentialTotFatmol + Math.pow(player.fatmol,1.7)\n                \n            })\n        })\n    })\n\n} catch (e) {\n    console.log(e)\n}\n\n\n\n\nmsg.payload = TheFootballTree;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 140,
        "wires": [
            [
                "a0b667a84b4f56b1"
            ]
        ]
    },
    {
        "id": "ce0ce09b9716b7b0",
        "type": "function",
        "z": "1b980fd89607dc71",
        "name": "Potential Price",
        "func": "\nlet TheFootballTree = msg.payload;\n//let PlayersErrors = msg.PlayersErrors;\nlet playersByGroup = msg.playersByGroup;\nlet avgGlobalFatmol = msg.avgGlobalFatmol;\nlet globalMaxFatmol = msg.globalMaxFatmol;\n\n/** IMPORTO LE DEFINIZIONI DEGLI OGGETTI CHE VERRANNO CREATI\nconst Player = global.get(\"ThePlayerObject\");\nconst Error = global.get(\"TheErrorObject\");\nconst PlayerError = global.get(\"ThePlayerErrorObject\");\nconst Utils = global.get(\"UTILS\"); **/\n\n\nconsole.log(\"PLAYER PRICES BEGINS\");\n/** FUNZIONE CALCOLO MEDIE VALNOVAN e MAX VALNOVAN **/\n\nlet avgValNoVanGroupAgeRangeClubCluster = {}\nlet maxValNoVan = 0;\nlet maxwVANVNV = 0;\nlet maxwVANVNV_CL = 0;\n\n\n    \n\n\nconst avgsValNoVan = function() {\n    try {\n    \n    console.log(\"CALCOLO avgsValNoVan\");\n    /*MediaDelVanNoVan = tutti i player dello stesso gruppo e dello stesso cluster di squadra ed età maggiore o minore di 30\n                \n                se il club.cluster >= 2 && ( player.valNoVan * 0.6 + player.van * 0.4) > 55 => allora il giocatre deve andare nel sottoinsieme del club.cluster - 1;*/\n    \n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            club.Players.forEach( player => {\n                \n                maxValNoVan = player.valNoVan > maxValNoVan ? player.valNoVan : maxValNoVan;\n                player.maxEMediePesate = 0;\n                \n                let valnovan= club.noLimiteVendita==1 ? player.valNoVan : ( player.valNoVan*1.2>club.maxtr ? ( player.valNoVan*0.3+( 1.2*club.maxtr)*0.7 ) : player.valNoVan )\n                let van = club.noLimiteVendita==1 ? player.van : ( player.van*1.2>club.maxtr ? ( player.van*0.3+( 1.2*club.maxtr)*0.7 ) : player.van )\n                \n                maxwVANVNV_CL = ( valnovan * 0.6 + van * 0.4) > maxwVANVNV_CL ? ( valnovan * 0.6 + van * 0.4) : maxwVANVNV_CL;\n        \n              let  cc = club.cluster >= 2 && ( player.valNoVan * 0.6 + player.van * 0.4) > 55 ? (club.cluster - 1 ) : club.cluster;\n              \n              player.wVANVNV_CL = ( valnovan * 0.6 + van * 0.4);\n              \n              avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup] == undefined ? avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup] = {} : true;\n              \n              avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"] == undefined ? avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"] = {} : true;\n              avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"] == undefined ? avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"] = {} : true;  \n              \n              avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc] == undefined ? avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc] = { \"sum\" : 0 , \"sumW\" : 0 ,\"count\" : 0, \"avg\" : 0, \"avgW\" : 0 } : true;\n              avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc] == undefined ? avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc] = { \"sum\" : 0 , \"sumW\" : 0 ,\"count\" : 0, \"avg\" : 0, \"avgW\" : 0 } : true;\n              \n              if (player.age > 29) {\n                  \n                //COUNT\n                avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc][\"count\"] = avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc][\"count\"] +1\n\n                //SUM\n                avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc][\"sum\"] = avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc][\"sum\"] + valnovan;\n                avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc][\"sumW\"] = avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc][\"sumW\"] + ( valnovan * 0.6 + van * 0.4);\n\n                //AVG\n                avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc][\"avg\"] = avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc][\"sum\"] / avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc][\"count\"];\n                avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc][\"avgW\"] = avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc][\"sumW\"] / avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc][\"count\"];\n\n                  \n              } else {\n                  \n                 //COUNT \n                avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc][\"count\"] = avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc][\"count\"] +1\n  \n                //SUM\n                avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc][\"sum\"] = avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc][\"sum\"] + valnovan;\n                avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc][\"sumW\"] = avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc][\"sumW\"] + ( valnovan * 0.6 + van * 0.4);\n\n                //AVG\n                avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc][\"avg\"] = avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc][\"sum\"] / avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc][\"count\"];\n                avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc][\"avgW\"] = avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc][\"sumW\"] / avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc][\"count\"];\n\n                  \n              }\n               \n            })\n        })\n        \n    })\n    \n    \n} catch (e) {\n    console.log(e)\n}\n    \n}\n\nconst setValNoVan = function(player,clubCluster) {\n    try {\n    //RY\n    let groupAvgAge = playersByGroup[player.latestRoleGroup].avgAge\n    let maxAgeInGroup= playersByGroup[player.latestRoleGroup].maxAge\n    \n   // let RY = groupAvgAge < player.age ? ( (1-groupAvgAge-player.age) / ( maxAgeInGroup- player.age) ) : player.age/groupAvgAge;\n    \n    let  RY = groupAvgAge /player.age;\n    \n    //RP\n    let groupAvgFatmol = playersByGroup[player.latestRoleGroup].avgFatmol\n    let maxFatmolInGroup = playersByGroup[player.latestRoleGroup].maxFatmol\n    \n    let RPClusterReward = clubCluster > 13 ? 0.2 : clubCluster > 9 ? 0.25 : clubCluster > 8 ? 0.28 : clubCluster > 6 ? 0.3 : clubCluster > 3 ? 0.8 : 1\n    \n    RPClusterReward = player.minutes < 90 ? 0.1 : RPClusterReward;\n    \n    let RPFatmolRatio = ( player.fatmol / avgGlobalFatmol )\n    let RPFatmolReward = 1;\n    switch(true) {\n        case (RPFatmolRatio > 1.5) :\n        RPFatmolReward = 1;\n        break;\n        case (RPFatmolRatio > 1.25 && RPFatmolRatio <= 1.5) :\n        RPFatmolReward = 0.571429;\n        break;\n        case (RPFatmolRatio > 1 && RPFatmolRatio <= 1.25) :\n        RPFatmolReward = 0.429185;\n        break;\n        default:\n        RPFatmolReward = 0.285714\n        break;\n        \n    }\n    \n    let RPSuperStarReward = player.superStar ? 1.2 : ( ( player.fatmol/globalMaxFatmol ) > 0.6 ? 0.8 : 0.6  );\n    \n    let RPPerfReward = player.emerging == 1 ? ( ( ( player.fatmol * 1.3) + globalMaxFatmol ) / 2 ) : player.fatmol\n    \n    let RP = ( RPPerfReward/groupAvgFatmol ) * RPFatmolReward * RPSuperStarReward * RPClusterReward;\n    \n    //PM\n    //let PM = playersByGroup[player.latestRoleGroup].avgTransferPriceWithTreshold; \n    let PM = playersByGroup[5].avgTransferPriceWithTreshold * player.percTransfPrice; //GRUPPO 5 FISSO\n    \n    player.avgTransferPrice = PM;\n    player.PM = PM;\n    player.RY = RY;\n    player.RP = RP;\n    \n \n    player.valNoVan = RP * RY * PM * 2 * player.latestRoleWeight;\n    \n    \n        \n    } catch(e) {\n      \n      console.log(e);\n    }\n}\n\nconst setPotentialPrice = function(player,club) {\n     //POTENTIAL PRICE\n     try {\n    let wVANVNV_CL = player.wVANVNV_CL\n    let wVANVNV =   player.valNoVan * 0.6 + player.van * 0.4;\n    let cc = club.cluster >= 2 && wVANVNV > 55 ? (club.cluster - 1 ) : club.cluster;\n    let avgVNV = player.age > 29 ? avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc][\"avg\"] :  avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc][\"avg\"]\n    let avgwVANVNV_CL = player.age > 29 ? avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc][\"avgW\"] :  avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc][\"avgW\"]\n\n    /* DESCCRIZIONE VARIABILI\n        globalMaxFatmol : fatmol massimo tra tutti i player\n        maxwVANVNV_CL : massimo wVANVNV tra tutti i player : usa le condizione sul limite vendita\n        avgwVANVNV_CL : wVANVNV medio calcolato per ruolo/cluster di squadra ed età +/- di 30 anni : usa le condizione sul limite vendita\n    */\n    player.potentialPrice = wVANVNV ; // valore di default per tutti coloro che non rientrano negli if qui sotto\n\n    if (player.age <= 31 && player.fatmol >= 2.25 && maxwVANVNV_CL/wVANVNV_CL > 2.5 ) {\n        \n        if (player.emerging) { // SOLO PER EMERGING \n            \n            \n            let maxEMediePesate =  ( (maxwVANVNV_CL*0.2+avgwVANVNV_CL*0.8)*0.5 + wVANVNV_CL*0.5 )\n            \n            player.maxEMediePesate = maxEMediePesate;\n            \n            if (club.noLimiteVendita == 1) {\n                \n                \n              player.potentialPrice = Math.max(maxEMediePesate,wVANVNV_CL);\n              \n              \n                \n            } else {\n    \n                \n                if ( maxEMediePesate > ( 1.2*club.maxtr ) ) \n                {\n                    let  mm = Math.max( maxEMediePesate ,wVANVNV_CL)\n                    player.potentialPrice = mm*0.3+((1.2*club.maxtr)*0.7)\n                \n                    \n                } else {\n                    \n                    player.potentialPrice = Math.max( maxEMediePesate,wVANVNV_CL);\n                \n                }\n                \n                \n            }\n            \n            \n        }\n        \n        else if (player.superStar) { // SOLO PER SUPERSTAR\n            \n             player.potentialPrice = Math.max( ( (maxwVANVNV_CL*0.3+avgwVANVNV_CL*0.7)*0.9 + wVANVNV_CL*0.1 ),wVANVNV_CL);\n        \n            \n        } else { // PER QUELLI CHE NON SONO NE EMERGING NE SUPERSTAR\n            \n            if (wVANVNV < avgwVANVNV_CL ) { // VAN-VALNOVAN pesato inferiore alla media di gruppo/clubcluster ed età\n                \n                player.potentialPrice = wVANVNV * 0.22 + avgwVANVNV_CL * 0.78\n                \n            } else {\n                \n                player.potentialPrice = wVANVNV_CL\n            }\n        }\n            \n    }   \n    \n     } catch (e) {\n    console.log(e)\n}\n  \n}\n\n\n\n\n\n\ntry {    \n\nconsole.log(\"CALCOLO VALORI POOTENZIALI, VAN e VALNOVAN\")\n Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            club.Players.forEach( player => {\n                \n                \n                //POTENTIAL YEARS OF CONTRACT\n                player.potentialYearsOfContract = 4;\n                if ( player.age > 32) {\n                    player.potentialYearsOfContract = 1;\n                } else if (player.age == 32 ) {\n                    player.potentialYearsOfContract = 2; \n                } else if (player.age > 22 && player.age <= 25 ) {\n                    player.potentialYearsOfContract = 4;\n                } else if (player.age > 25 && player.age <= 31 ) {\n                    player.potentialYearsOfContract = 3;\n                } else {\n                    player.potentialYearsOfContract = 5;\n                }\n                \n                player.potentialYearsOfContract = player.risingStar ? player.potentialYearsOfContract + 1 : player.potentialYearsOfContract;\n                \n                player.expectedYearsOfContract = player.potentialYearsOfContract //Math.max(player.remainingYearsOfContract,player.potentialYearsOfContract);\n                    \n                let fatmolAdjusted = player.fatmol < 2 ? 2 :  player.fatmol;   \n                player.benefitsPotential = Utils.actualValueSum( fatmolAdjusted * player.salaryPotential, player.expectedYearsOfContract, 0.05);   //valore, anni, discount rate\n                \n                player.costsPotential = player.simulating==true ? Utils.actualValueSum(player.salaryGross, player.expectedYearsOfContract,0.05) :  Utils.actualValueSum(player.salaryPotential * player.currentLeagueTaxRate, player.expectedYearsOfContract,0.05);\n                \n                \n                \n                let bcDiff = player.costsPotential > player.benefitsPotential  ? 0 : player.costsPotential - player.benefitsPotential\n                player.optvalPotential = player.maturity==0 ? 0 :  ( Utils.blackScholes(player.benefitsPotential,player.costsPotential,player.maturity,(player.latestMicroVolatility/100),-0.085,\"call\") )// bs(currentPrice,strikePrice,time,volatility,interestRate,callPut)\n                player.optvalPotential = player.optvalPotential ? player.optvalPotential : 0;\n                \n                //VAN\n                let bcaward = ( player.benefitsPotential - player.costsPotential ) * 0.05 * club.premioFair\n                player.bcaward = bcaward\n                player.clubPremioFair = club.premioFair\n                player.van = player.benefitsPotential - player.costsPotential + bcaward + player.optvalPotential\n                player.van = Math.min(player.van,220)\n                \n                //VAL NO VAN\n                setValNoVan(player,club.cluster);\n    \n                if (player.latestMicroVolatility) {\n        \n    }\n              \n                \n            })\n            \n           \n        })\n    })\n    \n    \n    \n                //AVG VAL NO VAN\n    avgsValNoVan();\n    //console.log(\"MAX maxwVANVNV_CL\",maxwVANVNV_CL) \n\n    console.log(\"CALCOLO POTENTIAL PRICE\")\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            club.Players.forEach( player => {\n                \n           \n    \n    \n                //POTENTIAL PRICE\n                setPotentialPrice(player,club);\n    \n               \n                \n            })\n            \n           \n        })\n    })\n\n\n}\n\ncatch(e) {\n    console.log(e)\n}\n\n\n\n\n\n//msg.payload=TheFootballTree\nmsg.footballTree=TheFootballTree\nmsg.PlayersErrors=PlayersErrors\nmsg.avgValNoVanGroupAgeRangeClubCluster=avgValNoVanGroupAgeRangeClubCluster;\nmsg.playersByGroup=playersByGroup;\n console.log(\"*** POTENTIAL PRICE COMPLETED ***\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 140,
        "wires": [
            [
                "3230c2f1df6197ab"
            ]
        ]
    },
    {
        "id": "0f1b5ef1044055df",
        "type": "function",
        "z": "1b980fd89607dc71",
        "name": "Salario Potenziale",
        "func": "\nlet TheFootballTree = msg.payload;\n//let PlayersErrors = msg.PlayersErrors;\nlet playersByGroup = msg.playersByGroup;\nlet playersByGroupAndClubCluster = msg.playersByGroupAndClubCluster;\n\n/** IMPORTO LE DEFINIZIONI DEGLI OGGETTI CHE VERRANNO CREATI \nconst Player = global.get(\"ThePlayerObject\");\nconst Error = global.get(\"TheErrorObject\");\nconst PlayerError = global.get(\"ThePlayerErrorObject\");\nconst Utils = global.get(\"UTILS\");**/\n\nlet topClusterTeamBySalary = {};\nlet clubSalaryByRank = {};\n\nlet globalMaxFatmol = 0;\nlet totalGlobalFatmol = 0;\nlet avgGlobalFatmol = 0;\nlet fatmolCounter = 0;\n\nconsole.log(\"TOP CLUSTER TEAM BY SALARY \");\nObject.keys(TheFootballTree).forEach( leagueId => {\n    TheFootballTree[leagueId].Clubs.forEach( club => { \n    \n        topClusterTeamBySalary[club.cluster] == undefined ? topClusterTeamBySalary[club.cluster] = {} : true;\n        topClusterTeamBySalary[club.cluster] = topClusterTeamBySalary[club.cluster].salaryNetFair > club.salaryNetFair ? topClusterTeamBySalary[club.cluster] : club\n       \n    })\n})\n\nconsole.log(\"CLUB SALARY BY CLUB RANK\");\nObject.keys(TheFootballTree).forEach( leagueId => {\n    \n    if (leagueId !== \"arab\" ) { // esludiamo i club della lega araba dai rank\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n        \n            clubSalaryByRank[club.clubRank] == undefined ? clubSalaryByRank[club.clubRank] = {} : true;\n            clubSalaryByRank[club.clubRank] = clubSalaryByRank[club.clubRank].salaryNetFair > club.salaryNetFair ? clubSalaryByRank[club.clubRank] : club\n           \n        })\n    }\n})\n\n//console.log(\"TOP CLUSTER TEAM BY SALARY \", topClusterTeamBySalary);\n\nconsole.log(\"PLAYER BEGINS: WEIGHT, OPTIMAL SALARY, BENEFITS, COSTS, OPTVAL, RESIDUALVALUE, RESIDUAL BOOK VALUE, OPTIMAL COST\");\n\nObject.keys(TheFootballTree).forEach( leagueId => {\n    TheFootballTree[leagueId].Clubs.forEach( club => { \n        club.Players.forEach( player => {\n\n            fatmolCounter = fatmolCounter +1\n            totalGlobalFatmol = totalGlobalFatmol + player.fatmol;\n            globalMaxFatmol = globalMaxFatmol > player.fatmol ? globalMaxFatmol : player.fatmol;\n            avgGlobalFatmol = totalGlobalFatmol /fatmolCounter;\n            \n           //EXPECTED CLUB CLUSTER\n           let ftRatio = player.fatmol / playersByGroupAndClubCluster[player.latestRoleGroup][player.currentClubCluster].avgFatmol\n           let clusterChange = 0;\n           \n           if  ( ftRatio >= 1.7  && player.currentClubCluster > 6 ) {\n               player.expectedClubCluster = player.currentClubCluster - 3\n           }\n           else if  ( ftRatio >= 1.5 && ftRatio < 1.7 ) {\n               player.expectedClubCluster = player.currentClubCluster - 2\n           } else if ( ftRatio >= 1.2 && ftRatio < 1.5) {\n               player.expectedClubCluster = player.currentClubCluster - 1\n           } else if ( ftRatio >= 1 && ftRatio < 1.2) {\n               player.expectedClubCluster =player.currentClubCluster\n           } else if ( ftRatio >= 0.5 && ftRatio < 1) {\n               player.expectedClubCluster =player.currentClubCluster + 1\n           } else  {\n               player.expectedClubCluster =player.currentClubCluster + 2\n           }\n           \n           \n           \n           if (player.simulating == true ) {\n               player.expectedClubCluster = player.currentClubCluster\n           }\n           \n           player.expectedClubCluster =  player.minutes < 90 ? player.currentClubCluster + 6 :  player.expectedClubCluster;\n           \n            player.expectedClubCluster =  player.expectedClubCluster < 1 ? 1 :  player.expectedClubCluster;\n            player.expectedClubCluster =  player.expectedClubCluster > 17 ? 17 :  player.expectedClubCluster;\n            \n\n            //EXPECTED CLUB RANK\n                       if  ( ftRatio >= 2 ) {\n               player.expectedClubRank = player.currentClubRank - 6\n            } else if ( ftRatio >= 1.75 & ftRatio < 2) {\n               player.expectedClubRank = player.currentClubRank - 4\n            } else if ( ftRatio >= 1.5 & ftRatio < 1.75) {\n               player.expectedClubRank = player.currentClubRank - 3\n            } else if ( ftRatio >= 1.2 & ftRatio < 1.5) {\n               player.expectedClubRank = player.currentClubRank - 2\n            } else if ( ftRatio >= 1 & ftRatio < 1.2) {\n               player.expectedClubRank =player.currentClubRank\n            } else if ( ftRatio >= 0.5 & ftRatio < 1) {\n               player.expectedClubRank =player.currentClubRank + 1\n            } else  {\n               player.expectedClubRank =player.currentClubRank + 2\n            }\n           \n            if (player.simulating == true ) {\n               player.expectedClubRank = player.currentClubRank\n            }\n           \n            player.expectedClubRank =  player.expectedClubRank < 1 ? 1 :  player.expectedClubRank;\n            player.expectedClubRank =  player.expectedClubRank > 770 ? 770 :  player.expectedClubRank;\n\n\n                     if ( clubSalaryByRank[player.expectedClubRank]===undefined) {\n                \n                while (clubSalaryByRank[player.expectedClubRank]===undefined) {\n                    \n                    player.expectedClubRank--;\n                }\n                \n            }\n\n\n\n\n            //WEIGHT IN CLUB\n            player.weightInClub = Math.pow(player.fatmol,1.7) / club.exponentialTotFatmol;\n            \n            //WEIGHT IN TOP TEAM EXPECTED CLUSTER CLUB\n            player.weightInExpectedClubCluster = player.fatmol / topClusterTeamBySalary[player.expectedClubCluster].totFatmol;\n            player.weightInExpectedClubCluster = Math.pow(player.fatmol,1.7) / topClusterTeamBySalary[player.expectedClubCluster].exponentialTotFatmol;\n            \n            //WEIGHT IN TOP TEAM EXPECTED CUB RANK\n            player.weightInExpectedClubRank = player.fatmol / clubSalaryByRank[player.expectedClubRank].totFatmol;\n            player.weightInExpectedClubRank = Math.pow(player.fatmol,1.7) / clubSalaryByRank[player.expectedClubRank].exponentialTotFatmol;\n            \n            //OPTIMAL SALARY\n            player.salaryOptimal = club.salaryNetFair *  player.weightInClub;\n            \n            //POTENTIAL SALARY\n            //player.salaryPotential =  player.simulating == true ? ( club.salaryNetFair * player.weightInClub ) : ( topClusterTeamBySalary[player.expectedClubCluster].salaryNetFair * player.weightInExpectedClubCluster );\n            player.salaryPotential =  player.simulating == true ? ( club.salaryNetFair * player.weightInClub ) : ( clubSalaryByRank[player.expectedClubRank].salaryNetFair * player.weightInExpectedClubRank  );\n\n\n            //BENEFITS\n            player.benefits = Utils.actualValueSum( player.fatmol * player.salaryOptimal, player.remainingYearsOfContract, 0.05);   //valore, anni, discount rate\n\n            //COSTS\n            player.costs = Utils.actualValueSum(player.salaryGross, player.remainingYearsOfContract, 0.05); //valore, anni, dscount rate\n\n\n            //OPTVAL\n            let bcDiff = player.costs > player.benefits  ? 0 : player.costs - player.benefits\n            player.optval = player.maturity==0 ? 0 : ( Utils.blackScholes(player.benefits,player.costs,player.maturity,(player.latestMicroVolatility/100),-0.085,\"call\") ) // bs(currentPrice,strikePrice,time,volatility,interestRate,callPut)\n            player.optval = player.optval ? player.optval : 0;\n            \n            \n            //RESIDUAL VALUE\n            player.residualValue = player.benefits - player.costs + player.optval;\n\n            //RESIDUAL BOOK VALUE\n            //player.residualBookValue = player.contractType.includes(\"Propriet\") || player.transferPriceYear === 0 ? ( (player.startContract && Utils.calculateAge(player.startContract)>4) ? 0 : (player.transferPrice * ( player.remainingYearsOfContract / player.totalYearsOfContract)) ) : (( (5 - (new Date.getFullYear() - player.transferPriceYear) )/5) * player.transferPrice) ;\n\n         \n            \n           /* if (player.transferPriceYear === 0 || player.transferPriceYear < 2024 ) { \n                \n                player.residualBookValue = (player.masterClubStartContract && Utils.calculateAge(player.masterClubStartContract)>4) ? 0 : (player.transferPrice * ( player.remainingYearsOfMasterClubContract / player.totalYearsOfMasterClubContract))\n\n            } */\n            \n            if (!player.contractType.includes(\"Propriet\") || (player.contractType.includes(\"Propriet\") && player.transferPriceYear > 2023 ) ) {\n                \n                 player.residualBookValue = ( (5 - (new Date().getFullYear() - player.transferPriceYear) )/5) * player.transferPrice;\n                 \n            } else {\n                \n                player.residualBookValue = (player.startContract && Utils.calculateAge(player.startContract)>4) ? 0 : (player.transferPrice * ( player.remainingYearsOfContract / player.totalYearsOfContract))\n\n            }\n            \n            /* if (player.contractType.includes(\"Propriet\") || player.transferPriceYear === 0 || player.transferPriceYear < 2024 ) {\n               \n                player.residualBookValue = (player.startContract && Utils.calculateAge(player.startContract)>4) ? 0 : (player.transferPrice * ( player.remainingYearsOfContract / player.totalYearsOfContract))\n               \n            } \n            \n            else {\n                \n                player.residualBookValue = ( (5 - (new Date().getFullYear() - player.transferPriceYear) )/5) * player.transferPrice;\n            } */\n            \n            if (player.residualBookValue < 0) {\n                player.residualBookValue = 0\n            }\n            \n            \n            //BOOK VALUE RESIDUAL CONTRACT RATIO\n            player.bvResContractRatio = player.residualBookValue / player.remainingYearsOfContract ;\n            \n            //PLAYERS' COSTS\n            player.optimalCosts = Utils.actualValueSum(player.salaryOptimal * player.currentLeagueTaxRate,player.remainingYearsOfContract,0.05);\n\n\n            \n        })\n        \n       \n    })\n})\n\nconsole.log(\"PLAYER DONE : WEIGHT, OPTIMAL SALARY, BENEFITS, COSTS, OPTVAL, RESIDUALVALUE, RESIDUAL BOOK VALUE, OPTIMAL COST\");\ntry {\n    \n\n\n\n//POTENTIAL SALARY \n/*\nconsole.log(\"POTENTIAL SALARY BEGINS\")\nlet clubClusterRoleFatmolSalaryOptimal = {}\n\n\nObject.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n           \n            club.Players.forEach( player => { \n                \n                      clubClusterRoleFatmolSalaryOptimal[\"C\"+player.currentClubCluster+\"RG\"+player.latestRoleGroup] === undefined ? clubClusterRoleFatmolSalaryOptimal[\"C\"+player.currentClubCluster+\"RG\"+player.latestRoleGroup] = { 'count' : 0, 'fatmol' : 0, 'salaryOptimal' : 0} : false;\n                      clubClusterRoleFatmolSalaryOptimal[\"C\"+player.currentClubCluster+\"RG\"+player.latestRoleGroup].count++;\n                      clubClusterRoleFatmolSalaryOptimal[\"C\"+player.currentClubCluster+\"RG\"+player.latestRoleGroup].fatmol = clubClusterRoleFatmolSalaryOptimal[\"C\"+player.currentClubCluster+\"RG\"+player.latestRoleGroup].fatmol + player.fatmol;\n                      clubClusterRoleFatmolSalaryOptimal[\"C\"+player.currentClubCluster+\"RG\"+player.latestRoleGroup].salaryOptimal = clubClusterRoleFatmolSalaryOptimal[\"C\"+player.currentClubCluster+\"RG\"+player.latestRoleGroup].salaryOptimal + player.salaryOptimal;\n\n                \n            })\n        })\n    })\n\n\n\n\nlet maxSalaryPotentialC =0;\n\nObject.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n           \n            club.Players.forEach( player => { \n                \n                let optimalCRGAvg =  clubClusterRoleFatmolSalaryOptimal[\"C\"+player.currentClubCluster+\"RG\"+player.latestRoleGroup].salaryOptimal / clubClusterRoleFatmolSalaryOptimal[\"C\"+player.currentClubCluster+\"RG\"+player.latestRoleGroup].count\n                player.salaryPotentialC = Math.max(player.salaryOptimal,optimalCRGAvg)\n                \n                maxSalaryPotentialC =  ( maxSalaryPotentialC > player.salaryPotentialC )  ? maxSalaryPotentialC : player.salaryPotentialC;\n                \n                let fatmolCRGAvg =  clubClusterRoleFatmolSalaryOptimal[\"C\"+player.currentClubCluster+\"RG\"+player.latestRoleGroup].fatmol / clubClusterRoleFatmolSalaryOptimal[\"C\"+player.currentClubCluster+\"RG\"+player.latestRoleGroup].count\n                player.salaryPotentialD = player.fatmol/fatmolCRGAvg;\n                \n            })\n        })\n    })\n\nconsole.log(\"maxSalaryPotentialC\",maxSalaryPotentialC)\n\nlet totalSPAB = 0;\nlet totalSO = 0;\n\n Object.keys(TheFootballTree).forEach( leagueId => {\n            TheFootballTree[leagueId].Clubs.forEach( club => { \n               \n                club.Players.forEach( player => { \n                    \n                    player.salaryPotentialA = 0;\n                    player.salaryPotentialB = 0;\n                    let teamWeight = 1;\n                    \n                    if (player.superStar) {\n                         player.salaryPotentialA = maxSalaryPotentialC * teamWeight\n                    }\n                    else if (player.emerging) {\n                        \n                        let countC = 1;\n                        let sumC = 0;\n                        \n                        Object.keys(TheFootballTree).forEach( okleagueId => {\n                            TheFootballTree[okleagueId].Clubs.forEach( okclub => { \n                               \n                                okclub.Players.forEach( okplayer => { \n                                    \n                                    countC = okplayer.absind >= player.absind ? countC + 1 : countC;\n                                    sumC = okplayer.absind >= player.absind ? sumC + player.salaryPotentialC : sumC;\n                                    \n                                    \n                                })\n                            })\n                        })\n                        \n                       player.salaryPotentialA = ( ( player.salaryPotentialC + (sumC/countC) ) / 2 ) * teamWeight \n                        \n                    }  else {\n                         player.salaryPotentialA = player.salaryPotentialC * teamWeight\n                    }\n                    \n                     player.salaryPotentialB = player.salaryPotentialD -1;\n                    \n                    \n                    \n                    \n                    totalSPAB = totalSPAB + ( player.salaryPotentialA * (1+player.salaryPotentialB));\n                    totalSO = totalSO + player.salaryOptimal;\n                    \n                })\n            })\n        })\n\n\n Object.keys(TheFootballTree).forEach( leagueId => {\n            TheFootballTree[leagueId].Clubs.forEach( club => { \n               \n                club.Players.forEach( player => { \n\n                 player.salaryPotential = ( ( player.salaryPotentialA * (1+player.salaryPotentialB) ) / totalSPAB ) * totalSO;\n\n                })\n            })\n })\n \n */\n console.log(\"POTENTIAL SALARY COMPLETED\")\n \n} catch(e) {\n    \n}\n\nmsg.playersByGroup = playersByGroup;\nmsg.payload = TheFootballTree;\nmsg.globalMaxFatmol = globalMaxFatmol;\nmsg.avgGlobalFatmol = avgGlobalFatmol\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 140,
        "wires": [
            [
                "ce0ce09b9716b7b0"
            ]
        ]
    },
    {
        "id": "a0b667a84b4f56b1",
        "type": "function",
        "z": "1b980fd89607dc71",
        "name": "Divisione in gruppi e valori di gruppo",
        "func": "\nlet TheFootballTree = msg.payload;\n//let PlayersErrors = msg.PlayersErrors;\n\n/** IMPORTO LE DEFINIZIONI DEGLI OGGETTI CHE VERRANNO CREATI \nconst Player = global.get(\"ThePlayerObject\");\nconst Error = global.get(\"TheErrorObject\");\nconst PlayerError = global.get(\"ThePlayerErrorObject\");\nconst Utils = global.get(\"UTILS\");**/\n\n\nconsole.log(\"DIVISIONE IN GRUPPI E CALCOLO\");\n\nlet playersByGroup = {};\nlet playersByGroupAndClubCluster = {};\n\n\ntry {\n\n   \n     //DIVIDO I GIOCATORI IN GRUPPI\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            club.Players.forEach( player => {\n                \n                \n                let playerID = player.playerId\n                \n                //PLAYERS BY GROUP\n                playersByGroup[player.latestRoleGroup] === undefined ?  playersByGroup[player.latestRoleGroup] = { \"Players\" : {} } : true ;\n                playersByGroup[player.latestRoleGroup].Players === undefined ?  playersByGroup[player.latestRoleGroup].Players = { playerId : {\"age\" : player.age , \"transferPrice\" : player.transferPrice, \"fatmol\": player.fatmol} }: true;\n               \n                playersByGroup[player.latestRoleGroup].Players[player.playerId] = {age : player.age , transferPrice : player.transferPrice, fatmol: player.fatmol}\n                \n                //Players by GROUP and CLUBCLUSTER\n                playersByGroupAndClubCluster[player.latestRoleGroup] === undefined ?  playersByGroupAndClubCluster[player.latestRoleGroup] = {} : true ;\n                playersByGroupAndClubCluster[player.latestRoleGroup][player.currentClubCluster] === undefined ?  playersByGroupAndClubCluster[player.latestRoleGroup][player.currentClubCluster] = {}: true;\n                playersByGroupAndClubCluster[player.latestRoleGroup][player.currentClubCluster].Players === undefined ?  playersByGroupAndClubCluster[player.latestRoleGroup][player.currentClubCluster].Players = { playerId : {\"age\" : player.age , \"transferPrice\" : player.transferPrice, \"fatmol\": player.fatmol} }: true;\n\n                playersByGroupAndClubCluster[player.latestRoleGroup][player.currentClubCluster].Players[player.playerId] = {age : player.age , transferPrice : player.transferPrice, fatmol: player.fatmol}\n                \n            })\n        })\n        \n    })\n    \n    \n     //PER OGNI GRUPPO CLUBCLUSTER CALCOLO: ETA' MEDIA, ETA' MASSIMA, FATMOL MEDIO, FATMOL MASSIMO, MEDIA DEL TRANSFER PRICE\n     \n    Object.keys(playersByGroupAndClubCluster).forEach( roleGroup => {\n        \n        Object.keys(playersByGroupAndClubCluster[roleGroup]).forEach( clubCluster => {\n            \n            let maxFatmol = 0;\n            let maxAge = 0;\n            let avgFatmol = 0;\n            let avgAge = 0; \n            let avgTransferPrice = 0;\n            let totTransferPrice = 0;\n            let totAge = 0;\n            let totFatmol = 0 ;\n            let numPlayersInGroupCluster = Object.keys(playersByGroupAndClubCluster[roleGroup][clubCluster].Players).length;\n            let totTransferPriceWithTreshold = 0;\n            let numPlayersTransferPriceWithTreshold = 0;\n            let avgTreshold = 4.51;\n            \n            Object.keys(playersByGroupAndClubCluster[roleGroup][clubCluster].Players).forEach( playerId => {\n            \n                maxFatmol = maxFatmol > playersByGroupAndClubCluster[roleGroup][clubCluster].Players[playerId].fatmol ? maxFatmol : playersByGroupAndClubCluster[roleGroup][clubCluster].Players[playerId].fatmol\n                maxAge = maxAge > playersByGroupAndClubCluster[roleGroup][clubCluster].Players[playerId].age ? maxAge : playersByGroupAndClubCluster[roleGroup][clubCluster].Players[playerId].age\n                \n                totFatmol = totFatmol + playersByGroupAndClubCluster[roleGroup][clubCluster].Players[playerId].fatmol;\n                totAge = totAge + playersByGroupAndClubCluster[roleGroup][clubCluster].Players[playerId].age;\n                totTransferPrice = totTransferPrice + playersByGroupAndClubCluster[roleGroup][clubCluster].Players[playerId].transferPrice;\n                \n                totTransferPriceWithTreshold = totTransferPriceWithTreshold + ( playersByGroupAndClubCluster[roleGroup][clubCluster].Players[playerId].transferPrice >= avgTreshold ? playersByGroupAndClubCluster[roleGroup][clubCluster].Players[playerId].transferPrice : 0 ) ;\n                numPlayersTransferPriceWithTreshold = numPlayersTransferPriceWithTreshold + ( playersByGroupAndClubCluster[roleGroup][clubCluster].Players[playerId].transferPrice >= avgTreshold ? 1 : 0 ) ;\n            })\n        \n        \n        \n            playersByGroupAndClubCluster[roleGroup][clubCluster].maxFatmol = maxFatmol;\n            playersByGroupAndClubCluster[roleGroup][clubCluster].maxAge = maxAge;\n            playersByGroupAndClubCluster[roleGroup][clubCluster].avgFatmol = totFatmol/numPlayersInGroupCluster;\n            playersByGroupAndClubCluster[roleGroup][clubCluster].avgAge = totAge/numPlayersInGroupCluster;\n            //playersByGroupAndClubCluster[roleGroup][clubCluster].avgTransferPrice = totTransferPrice/numPlayersInGroupCluster;\n            //playersByGroupAndClubCluster[roleGroup][clubCluster].avgTransferPriceWithTreshold = totTransferPriceWithTreshold/numPlayersTransferPriceWithTreshold;\n            playersByGroupAndClubCluster[roleGroup][clubCluster].totFatmol = totFatmol;\n            playersByGroupAndClubCluster[roleGroup][clubCluster].numPlayersInGroupCluster=numPlayersInGroupCluster;\n            \n        })\n        \n        \n        \n       \n        \n        \n        \n        \n        \n    })\n    \n    \n    //console.log(playersByGroupAndClubCluster)\n     //PER OGNI GRUPPO CALCOLO: ETA' MEDIA, ETA' MASSIMA, FATMOL MEDIO, FATMOL MASSIMO, MEDIA DEL TRANSFER PRICE\n     \n    Object.keys(playersByGroup).forEach( roleGroup => {\n        \n        let maxFatmol = 0;\n        let maxAge = 0;\n        let avgFatmol;\n        let avgAge;\n        let avgTransferPrice;\n        let totTransferPrice = 0;\n        let totAge = 0;\n        let totFatmol = 0 ;\n        let numPlayersInGroup = Object.keys(playersByGroup[roleGroup].Players).length;\n        \n        let totTransferPriceWithTreshold = 0;\n        let numPlayersTransferPriceWithTreshold = 0;\n        \n        let avgTreshold = 4.51;\n        \n        Object.keys(playersByGroup[roleGroup].Players).forEach( playerId => {\n            \n            maxFatmol = maxFatmol > playersByGroup[roleGroup].Players[playerId].fatmol ? maxFatmol : playersByGroup[roleGroup].Players[playerId].fatmol\n            maxAge = maxAge > playersByGroup[roleGroup].Players[playerId].age ? maxAge : playersByGroup[roleGroup].Players[playerId].age\n            \n            totFatmol = totFatmol + playersByGroup[roleGroup].Players[playerId].fatmol;\n            totAge = totAge + playersByGroup[roleGroup].Players[playerId].age;\n            totTransferPrice = totTransferPrice + playersByGroup[roleGroup].Players[playerId].transferPrice;\n            \n            totTransferPriceWithTreshold = totTransferPriceWithTreshold + ( playersByGroup[roleGroup].Players[playerId].transferPrice >= avgTreshold ? playersByGroup[roleGroup].Players[playerId].transferPrice : 0 ) ;\n            numPlayersTransferPriceWithTreshold = numPlayersTransferPriceWithTreshold + ( playersByGroup[roleGroup].Players[playerId].transferPrice >= avgTreshold ? 1 : 0 ) ;\n        })\n        \n        \n        \n        playersByGroup[roleGroup].maxFatmol = maxFatmol;\n        playersByGroup[roleGroup].maxAge = maxAge;\n        playersByGroup[roleGroup].avgFatmol = totFatmol/numPlayersInGroup;\n        playersByGroup[roleGroup].avgAge = totAge/numPlayersInGroup;\n        playersByGroup[roleGroup].avgTransferPrice = totTransferPrice/numPlayersInGroup;\n        playersByGroup[roleGroup].avgTransferPriceWithTreshold = totTransferPriceWithTreshold/numPlayersTransferPriceWithTreshold;\n        playersByGroup[roleGroup].numPlayersInGroup = numPlayersInGroup\n        playersByGroup[roleGroup].numPlayersTransferPriceWithTreshold = numPlayersTransferPriceWithTreshold\n        \n    })\n\n  } catch(e) {\n      \n      console.log(e);\n    }\n\nmsg.playersByGroup = playersByGroup;\nmsg.playersByGroupAndClubCluster = playersByGroupAndClubCluster;\nmsg.payload = TheFootballTree;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 140,
        "wires": [
            [
                "0f1b5ef1044055df"
            ]
        ]
    },
    {
        "id": "520743619190519e",
        "type": "function",
        "z": "1b980fd89607dc71",
        "name": "Prezzi",
        "func": "\nlet TheFootballTree = msg.payload;\nlet PlayersErrors = msg.PlayersErrors;\nlet playersByGroup = msg.playersByGroup;\nlet avgGlobalFatmol = msg.avgGlobalFatmol;\nlet globalMaxFatmol = msg.globalMaxFatmol;\n\n/** IMPORTO LE DEFINIZIONI DEGLI OGGETTI CHE VERRANNO CREATI \nconst Player = global.get(\"ThePlayerObject\");\nconst Error = global.get(\"TheErrorObject\");\nconst PlayerError = global.get(\"ThePlayerErrorObject\");\nconst Utils = global.get(\"UTILS\");**/\n\n\nconsole.log(\"PLAYER EXPECTED PRICE BEGINS\");\n\n\nconst setExpectedPrice = function(player) {\n    //Expected PRICE\n    let contractRemainingMonths = player.remainingMonthsOfContract;\n    \n    let beta = 0.5\n    \n    switch(true) {\n        \n        case (contractRemainingMonths <= 6) :\n            beta = 0;\n            break;\n        case (contractRemainingMonths > 6 && contractRemainingMonths <= 12 ) : {\n            \n            beta= player.superstar ? 0.8 : 0.5\n        }\n            break;\n        case ( contractRemainingMonths > 12 && contractRemainingMonths <= 18 ) :\n            beta = 0.65;\n            break;\n        case  ( contractRemainingMonths > 18 && contractRemainingMonths <= 24 ) :\n            beta = 0.8\n            break;\n        case  ( contractRemainingMonths > 24 ) :\n            beta = 1\n            break;\n        default :\n            beta = 0.5\n        break;\n        \n    }\n    \n    player.expectedPrice = player.potentialPrice * beta;\n    \n    if (player.withdrawalClause && player.withdrawalClause != 0 ) {\n        \n        player.expectedPrice =  ( player.potentialPrice * beta ) < player.withdrawalClause ? ( player.potentialPrice * beta ) : player.withdrawalClause\n    } \n    \n    \n    if ( !player.contractType.includes(\"Propriet\") ) {\n        player.expectedPrice =  player.potentialPrice\n    }\n}\n\n\n\n\ntry {    \n\n    console.log(\"CALCOLO EXPECTED PRICE\")\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            club.Players.forEach( player => {\n                \n           \n    \n                //SET EXPECTEDPRICE\n                setExpectedPrice(player);\n                \n                let dirtyCoeff = (0.3 * ( (player.latestUniqueness - msg.minNotZeroUniqueness)  / ( 100 - msg.minNotZeroUniqueness ) ) )\n                \n                let dirty = ( 1 + dirtyCoeff ) * player.expectedPrice\n                \n                \n                player.perceivedExpectedPrice = player.tmValue > dirty ? (player.tmValue + dirty ) / 2 : dirty;\n                \n                player.perceivedExpectedPrice = player.withdrawalClause > 0  && player.perceivedExpectedPrice > player.withdrawalClause ? player.withdrawalClause : player.perceivedExpectedPrice;\n                \n                \n               // player.perceivedExpectedPrice = player.contractType.includes(\"Propriet\") && player.remainingMonthsOfContract < 7 ? 0 : player.perceivedExpectedPrice;\n                \n                player.perceivedExpectedPrice =  player.expectedPrice > player.tmValue ? player.expectedPrice : player.perceivedExpectedPrice;\n                \n                \n                player.residualValue = player.residualValue > player.potentialPrice ? player.potentialPrice : player.residualValue            \n    \n    \n                player.capitalGain = player.expectedPrice - player.residualBookValue\n                \n                player.profit = player.expectedPrice - player.residualValue;\n                \n                player.salaryAbsoluteDeviation = player.salaryOptimal - player.salaryNet;\n                player.salaryPercDeviation = !isNaN(player.salaryOptimal) ? ( player.salaryAbsoluteDeviation * 100) / player.salaryOptimal : 0;\n                \n                //aggiunto il 16/01/2023\n                player.deviation = player.potentialPrice - player.residualValue;\n                \n                if (player.playerId == \"2k5g68ywtr79lc45wozvifqlm\") {\n                    \n                    console.log(\"dirty\", dirty)\n                    console.log(\"dirtyCoeff\", dirtyCoeff)\n                    console.log(\"player.perceivedExpectedPrice\", player.perceivedExpectedPrice)\n                    console.log(\"player.player.tmValue\", player.tmValue)\n                    \n                }\n                \n            })\n            \n           \n        })\n    })\n\n\n}\n\ncatch(e) {\n    console.log(e)\n}\n\n\n\n\n\n//msg.payload=TheFootballTree\nmsg.footballTree=TheFootballTree\nmsg.PlayersErrors=PlayersErrors\nmsg.playersByGroup=playersByGroup;\n console.log(\"*** PLAYERS ANALISYS COMPLETED ***\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "3230c2f1df6197ab",
        "type": "function",
        "z": "1b980fd89607dc71",
        "name": "Archive Set",
        "func": "\nconsole.log(\"REQUESTING ARCHIVE POTENTIAL PRICES\")\nmsg.topic = \"with dataset as (SELECT playerId, currentPotentialPrice,potentialPrice,currentExpectedPrice,expectedPrice,elaborationNum,  week, year from latestplayers_archive where 1=1 and elaborationNum in (select max(elaborationNum) from latestplayers_archive GROUP BY year, week) order by elaborationNum asc) select * from dataset d join ( select distinct elaborationNum from dataset order by elaborationNum desc limit 4) e on d.elaborationNum =e.elaborationNum;\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 140,
        "wires": [
            [
                "418d298d2601ce31"
            ]
        ]
    },
    {
        "id": "418d298d2601ce31",
        "type": "mysql",
        "z": "1b980fd89607dc71",
        "mydb": "ea1e5103bb9e91ad",
        "name": "PRODUZIONE",
        "x": 2040,
        "y": 140,
        "wires": [
            [
                "086b97ac59acb3b2"
            ]
        ]
    },
    {
        "id": "086b97ac59acb3b2",
        "type": "function",
        "z": "1b980fd89607dc71",
        "name": "Compute avarage",
        "func": "\nconsole.log(\"AVARAGIN POTENTIAL PRICE\")\n\nlet TheFootballTree = msg.footballTree; //global.get(\"TheLatestFooballTree\")\nlet playerData = msg.payload;\n\nlet topic\n\nlet yamal = {}\n\n\n Object.keys(TheFootballTree).forEach( leagueId => {\n     TheFootballTree[leagueId].Clubs.forEach( club => { \n         club.Players.forEach( player => {\n             \n             \n             \n             // PUNTO CRITICO INVERTO I VALORI DI POTENTIAL PRICE\n             \n            player.currentPotentialPrice = player.potentialPrice\n            player.currentExpectedPrice = 0\n             \n            let previousSet =  playerData.filter( pd => pd.playerId == player.playerId).filter( pv=> pv.week !== player.week).sort((a,b) => a.elaborationNum - b.elaborationNum).slice( -3);\n            \n            \n            player.potentialPrice = ( previousSet.reduce((acc, playerPrevSet) => acc+playerPrevSet.currentPotentialPrice, 0) +  player.currentPotentialPrice ) / ( previousSet.length+ 1);\n            player.expectedPrice = ( previousSet.reduce((acc, playerPrevSet) => acc+playerPrevSet.currentExpectedPrice, 0) +  player.currentExpectedPrice ) / ( previousSet.length+ 1);\n            \n            \n            if (player.playerId == \"abr79wsl0folgkyvl821ggs2c\") {\n                \n                yamal[\"week\"] = player.week;\n                yamal[\"currentPotentialPrice\"] = player.currentPotentialPrice;\n                yamal[\"potentialPrice\"] = player.potentialPrice;\n                yamal[\"previousSet\"] = previousSet;\n                \n            }\n             \n         })\n     })\n })\n\n\nmsg.yamal=yamal;\nmsg.payload = TheFootballTree;\nconsole.log(\"AVARAGIN POTENTIAL PRICE COMPLETED\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 140,
        "wires": [
            [
                "520743619190519e"
            ]
        ]
    },
    {
        "id": "93b7ceed57835293",
        "type": "function",
        "z": "1b980fd89607dc71",
        "name": "the Whole Model",
        "func": "/**\n * Analisi economica e di performance dei giocatori di calcio\n * \n * Questa versione modularizzata mantiene la stessa logica ma organizza\n * il codice in moduli con responsabilità ben definite.\n */\n\n// Importazione delle definizioni degli oggetti\nconst Player = global.get(\"ThePlayerObject\");\nconst Error = global.get(\"TheErrorObject\");\nconst PlayerError = global.get(\"ThePlayerErrorObject\");\nconst Utils = global.get(\"UTILS\");\n\n/**\n * Modulo per l'analisi delle performance dei giocatori\n */\nconst PerformanceAnalyzer = {\n  /**\n   * Calcola il livello di performance di un giocatore in base a vari parametri\n   */\n  calculatePerformance(mixedIndex, minutes, age, ageThreshold, minuteShare, maxMinutes) {\n    if (age >= ageThreshold) {\n      if (minuteShare < 10) {\n        return (mixedIndex * minutes) / maxMinutes;\n      } else if (minuteShare >= 10 && minuteShare < 15) {\n        return mixedIndex * 0.2;\n      } else if (minuteShare >= 15 && minuteShare < 20) {\n        return mixedIndex * 0.4;\n      } else if (minuteShare >= 20 && minuteShare < 25) {\n        return mixedIndex * 0.65;\n      } else if (minuteShare >= 25 && minuteShare < 30) {\n        return mixedIndex * 0.85;\n      } else if (minuteShare >= 30) {\n        return mixedIndex;\n      } else {\n        return (mixedIndex * minutes) / maxMinutes;\n      }\n    } else {\n      if (minutes < 200) {\n        return (mixedIndex * minutes) / maxMinutes;\n      } else if (minutes >= 200 && minutes < 300) {\n        return mixedIndex * 0.3;\n      } else if (minutes >= 300 && minutes < 400) {\n        return mixedIndex * 0.5;\n      } else if (minutes >= 400 && minutes < 500) {\n        return mixedIndex * 0.8;\n      } else if (minutes > 500) {\n        return mixedIndex;\n      } else {\n        return (mixedIndex * minutes) / maxMinutes;\n      }\n    }\n  },\n\n  /**\n   * Determina lo status \"emerging\" di un giocatore\n   */\n  calculateEmergingStatus(player, avgPerformance) {\n    if (player.superStar) {\n      return false;\n    } else if (player.risingStar) {\n      return false;\n    } else if (player.age >= 30) {\n      return false;\n    } else if (player.latestLeagueCluster < 4 && player.alert > 3) {\n      return true;\n    } else if (player.currentClubCluster < 5 && (player.performance * player.latestRoleWeight) > 55 && player.avgPlayedMinuteShare > 0.35) {\n      return true;\n    } else if (player.latestLeagueCluster == 1 && player.avgPlayedMinuteShare > 0.35 && player.performance > 2 * avgPerformance) {\n      return true;\n    } else if (player.latestLeagueCluster == 2 && player.avgPlayedMinuteShare > 0.35 && player.performance > 3 * avgPerformance) {\n      return true;\n    } else if (player.latestLeagueCluster == 3 && player.avgPlayedMinuteShare > 0.35 && player.performance > 4 * avgPerformance) {\n      return true;\n    } else {\n      return false;\n    }\n  },\n\n  /**\n   * Calcola la maturità di un giocatore\n   */\n  calculateMaturity(age, fatmol, emergingReward, risingStarReward) {\n    if (age > 33) {\n      return 0;\n    }\n    \n    let baseMaturity;\n    if (fatmol < 1.75) {\n      baseMaturity = (age < 23) ? 3 : 1;\n    } else {\n      baseMaturity = (age < 29) ? 4 : (33 - age);\n    }\n    \n    return baseMaturity + emergingReward + risingStarReward;\n  },\n\n  /**\n   * Esegue l'analisi di performance completa su tutti i giocatori\n   */\n  analyzePerformance(TheFootballTree, maxMinutes) {\n    console.log(\"CALCOLO VALORI DI PERFORMANCE\");\n    \n    let maxAbsind = 0;       // Usata nel calcolo del fatmol\n    let totFatmol = 0;       // Usata nel calcolo dell'effectiveness\n    let maxFatmol = 0;       // Usata nel calcolo dell'effectiveness\n    let numOfValidPlayers = 0;\n    let playersByGroupAndCluster = {};\n    \n    console.log(\"Calculating Performance, Absing, Rising Star, MAXABSIND\");\n    // Prima fase: calcolo performance e absind\n    Object.keys(TheFootballTree).forEach(leagueId => {\n      TheFootballTree[leagueId].Clubs.forEach(club => { \n        club.Players.forEach(player => {\n          // Calcolo minuteShare (percentuale di minuti giocati rispetto al massimo)\n          const minuteShare = (player.minutes / maxMinutes) * 100;\n          \n          // Calcolo Performance\n          const ageThreshold = player.simulating === true ? 16 : 23;\n          const mixedMicroMacroIndex = player.avgMicroIndex * 0.9 + player.avgMacroIndex * 0.1;\n          \n          player.performance = this.calculatePerformance(\n            mixedMicroMacroIndex, \n            player.minutes, \n            player.age, \n            ageThreshold, \n            minuteShare, \n            maxMinutes\n          );\n          \n          // Calcolo ABSIND (indice di performance assoluto)\n          player.absind = (((player.performance * 0.9) + (player.experience * 0.1)) * player.latestRoleWeight) / 39 + 1;\n          \n          // Aggiornamento maxAbsind\n          maxAbsind = Math.max(maxAbsind, player.absind);\n          \n          numOfValidPlayers++;\n          \n          // DIVISIONE IN GRUPPI e CLUSTER\n          this._initializePlayerGroupCluster(playersByGroupAndCluster, player);\n          \n          // Aggiornamento statistiche per gruppo e cluster\n          const groupCluster = playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster];\n          groupCluster.performance += player.performance;\n          groupCluster.count++;\n          groupCluster.avgPerformance = groupCluster.performance / groupCluster.count;\n        });\n      });\n    });\n    \n    // Seconda fase: calcolo Rising Star ed Emerging\n    let maxPartialRisingStar = 0;\n    let maxPartialEmerging = 0;\n    \n    console.log(\"Calculating Emerging\");\n    Object.keys(TheFootballTree).forEach(leagueId => {\n      TheFootballTree[leagueId].Clubs.forEach(club => {\n        club.Players.forEach(player => {\n          // RISING STAR\n          player.risingStar = (\n            player.performance > 60 && \n            player.age < 24 && \n            player.latestLeagueCluster < 4 && \n            player.avgPlayedMinuteShare > 0.175\n          ) ? true : false;\n          \n          // PARTIAL RISING STAR\n          player.tentativePartialRisingStar = this._calculatePartialRisingStar(\n            player, \n            playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].avgPerformance\n          );\n          \n          maxPartialRisingStar = Math.max(maxPartialRisingStar, player.tentativePartialRisingStar);\n          \n          // EMERGING\n          player.emerging = this.calculateEmergingStatus(\n            player, \n            playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].avgPerformance\n          );\n          \n          // PARTIAL EMERGING\n          player.tentativePartialEmerging = this._calculatePartialEmerging(\n            player, \n            playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].avgPerformance\n          );\n          \n          maxPartialEmerging = Math.max(maxPartialEmerging, player.tentativePartialEmerging);\n        });\n      });\n    });\n    \n    // Terza fase: calcolo FATMOL, normalizzazione delle variabili\n    console.log(\"Calculating FATMOL, Final Emerging and Rising\");\n    Object.keys(TheFootballTree).forEach(leagueId => {\n      TheFootballTree[leagueId].Clubs.forEach(club => {\n        club.Players.forEach(player => {\n          // Normalizzazione dei valori parziali e calcolo FATMOL\n          this._calculateAndNormalizeFatmol(\n            player, \n            maxPartialEmerging, \n            maxPartialRisingStar\n          );\n          \n          // Aggiornamento totali e massimi\n          totFatmol += player.fatmol;\n          maxFatmol = Math.max(maxFatmol, player.fatmol);\n        });\n      });\n    });\n    \n    // Quarta fase: calcolo Effectiveness e Maturity\n    const avgFatmol = totFatmol / numOfValidPlayers;\n    let minNotZeroEffectivness = 100;\n    \n    console.log(\"Calculating EFFECTIVENESS AND MATURITY\");\n    Object.keys(TheFootballTree).forEach(leagueId => {\n      TheFootballTree[leagueId].Clubs.forEach(club => {\n        club.Players.forEach(player => {\n          // Calcolo EFFECTIVENESS\n          player.effectiveness = (player.fatmol / maxFatmol) * 100;\n          \n          if (player.effectiveness > 0 && player.effectiveness < minNotZeroEffectivness) {\n            minNotZeroEffectivness = player.effectiveness;\n          }\n          \n          // Calcolo MATURITY\n          const emergingReward = player.emerging == 1 ? 0.5 : 0;\n          const risingStarReward = player.risingStar == 1 ? 2 : 0;\n          \n          player.maturity = this.calculateMaturity(player.age, player.fatmol, emergingReward, risingStarReward);\n        });\n      });\n    });\n    \n    // Quinta fase: calcolo Modified Effectiveness e Uniqueness\n    console.log(\"Calculating MOD EFFECTIVENESS\");\n    let minNotZeroUniqueness = 100;\n    \n    Object.keys(TheFootballTree).forEach(leagueId => {\n      TheFootballTree[leagueId].Clubs.forEach(club => {\n        club.Players.forEach(player => {\n          // Calcolo MODIFIED EFFECTIVENESS e UNIQUENESS\n          this._calculateModEffectivenessAndUniqueness(\n            player, \n            minNotZeroEffectivness\n          );\n          \n          // Aggiornamento minNotZeroUniqueness\n          if (player.latestUniqueness > 0 && player.latestUniqueness < minNotZeroUniqueness) {\n            minNotZeroUniqueness = player.latestUniqueness;\n          }\n        });\n      });\n    });\n    \n    // Sesta fase: calcolo Relative Weight in Club\n    console.log(\"Calculating RELATIVE WEIGHT IN CLUB\");\n    Object.keys(TheFootballTree).forEach(leagueId => {\n      TheFootballTree[leagueId].Clubs.forEach(club => {\n        club.totFatmol = 0;\n        club.exponentialTotFatmol = 0;\n        \n        club.Players.forEach(player => {\n          club.totFatmol += player.fatmol;\n          club.exponentialTotFatmol += Math.pow(player.fatmol, 1.7);\n        });\n      });\n    });\n    \n    return {\n      playersByGroupAndCluster,\n      minNotZeroEffectivness,\n      minNotZeroUniqueness,\n      maxFatmol\n    };\n  },\n  \n  /**\n   * Inizializza le strutture dati per gruppi e cluster\n   * @private\n   */\n  _initializePlayerGroupCluster(playersByGroupAndCluster, player) {\n    if (playersByGroupAndCluster[player.latestRoleGroup] === undefined) {\n      playersByGroupAndCluster[player.latestRoleGroup] = {};\n    }\n    \n    if (playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster] === undefined) {\n      playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster] = { \n        performance: 0, \n        count: 0, \n        avgPerformance: 0 \n      };\n    }\n  },\n  \n  /**\n   * Calcola il valore Rising Star parziale\n   * @private\n   */\n  _calculatePartialRisingStar(player, avgPerformance) {\n    let partialRisingStar = 0;\n    \n    if (!player.risingStar && player.age < 24 && player.latestLeagueCluster == 1) {\n      const perfRatio = player.performance / avgPerformance;\n      partialRisingStar = perfRatio > 1.25 ? (perfRatio / 1.25) - 1 : 0;\n    }\n    \n    return partialRisingStar;\n  },\n  \n  /**\n   * Calcola il valore Emerging parziale\n   * @private\n   */\n  _calculatePartialEmerging(player, avgPerformance) {\n    let partialEmerging = 0;\n    \n    if (!player.emerging && !player.superStar && player.age < 30 && player.latestLeagueCluster == 1) {\n      const perfRatio = player.performance / avgPerformance;\n      partialEmerging = perfRatio > 1.25 ? perfRatio - 1 : 0;\n    }\n    \n    return partialEmerging;\n  },\n  \n  /**\n   * Calcola e normalizza i valori per FATMOL\n   * @private\n   */\n  _calculateAndNormalizeFatmol(player, maxPartialEmerging, maxPartialRisingStar) {\n    // Normalizzazione dei valori parziali\n    player.partialEmerging = player.tentativePartialEmerging / maxPartialEmerging;\n    player.partialEmerging = Math.min(player.partialEmerging, 1);\n    \n    player.partialRisingStar = player.tentativePartialRisingStar / maxPartialRisingStar;\n    player.partialRisingStar = Math.min(player.partialRisingStar, 1);\n    \n    // Calcolo premi\n    const nteamAward = player.nationalTeamPlayer == 1 ? 0.33 : 0;\n    const emergingAward = player.emerging == 1 ? 0.33 : 0;\n    const partialEmergingAward = player.partialEmerging / 3;\n    const risingStarAward = player.risingStar == 1 ? 0.33 : 0;\n    const partialRisingStarAward = player.partialRisingStar / 3;\n    const superStarAward = player.superStar == 1 ? 0.667 : 0;\n    \n    // Calcolo FATMOL\n    const tmpFatmol = player.absind + nteamAward + emergingAward + \n                     partialEmergingAward + risingStarAward + \n                     partialRisingStarAward + superStarAward;\n    \n    player.fatmol = tmpFatmol;\n  },\n  \n  /**\n   * Calcola Modified Effectiveness e Uniqueness\n   * @private\n   */\n  _calculateModEffectivenessAndUniqueness(player, minNotZeroEffectivness) {\n    // Calcolo MODIFIED EFFECTIVENESS\n    player.modEffectiveness = ((player.effectiveness - minNotZeroEffectivness) / (100 - minNotZeroEffectivness)) * 100;\n    \n    // Aggiornamento UNIQUENESS\n    if (player.effectiveness > 0) {\n      player.latestUniqueness = (0.7 * player.modEffectiveness) + (player.latestUniqueness * 0.3);\n    } else {\n      player.latestUniqueness = 0.7 * player.modEffectiveness;\n    }\n    \n    // Normalizzazione UNIQUENESS\n    if (player.latestUniqueness > 79.1) {\n      player.latestUniqueness = 100;\n    } else if (player.latestUniqueness > 0 && player.latestUniqueness <= 79.1) {\n      player.latestUniqueness = Math.sqrt(player.latestUniqueness / 79.1) * 100;\n    }\n  }\n};\n\n/**\n * Modulo per il raggruppamento e il calcolo di statistiche\n */\nconst GroupAnalyzer = {\n  /**\n   * Raggruppa i giocatori per vari criteri e calcola statistiche\n   */\n  groupPlayersAndCalculateStats(TheFootballTree) {\n    console.log(\"DIVISIONE IN GRUPPI E CALCOLO\");\n    \n    let playersByGroup = {};\n    let playersByGroupAndClubCluster = {};\n    \n    // Prima fase: divisione giocatori in gruppi\n    Object.keys(TheFootballTree).forEach(leagueId => {\n      TheFootballTree[leagueId].Clubs.forEach(club => {\n        club.Players.forEach(player => {\n          this._addPlayerToGroup(playersByGroup, player);\n          this._addPlayerToGroupAndClubCluster(playersByGroupAndClubCluster, player);\n        });\n      });\n    });\n    \n    // Seconda fase: calcolo statistiche per gruppi e club cluster\n    this._calculateGroupAndClusterStats(playersByGroupAndClubCluster);\n    \n    // Terza fase: calcolo statistiche per gruppo\n    this._calculateGroupStats(playersByGroup);\n    \n    return {\n      playersByGroup,\n      playersByGroupAndClubCluster\n    };\n  },\n  \n  /**\n   * Aggiunge un giocatore a un gruppo\n   * @private\n   */\n  _addPlayerToGroup(playersByGroup, player) {\n    if (playersByGroup[player.latestRoleGroup] === undefined) {\n      playersByGroup[player.latestRoleGroup] = { \"Players\": {} };\n    }\n    \n    playersByGroup[player.latestRoleGroup].Players[player.playerId] = {\n      age: player.age,\n      transferPrice: player.transferPrice,\n      fatmol: player.fatmol\n    };\n  },\n  \n  /**\n   * Aggiunge un giocatore a un gruppo e cluster\n   * @private\n   */\n  _addPlayerToGroupAndClubCluster(playersByGroupAndClubCluster, player) {\n    if (playersByGroupAndClubCluster[player.latestRoleGroup] === undefined) {\n      playersByGroupAndClubCluster[player.latestRoleGroup] = {};\n    }\n    \n    if (playersByGroupAndClubCluster[player.latestRoleGroup][player.currentClubCluster] === undefined) {\n      playersByGroupAndClubCluster[player.latestRoleGroup][player.currentClubCluster] = {};\n    }\n    \n    if (playersByGroupAndClubCluster[player.latestRoleGroup][player.currentClubCluster].Players === undefined) {\n      playersByGroupAndClubCluster[player.latestRoleGroup][player.currentClubCluster].Players = {};\n    }\n    \n    playersByGroupAndClubCluster[player.latestRoleGroup][player.currentClubCluster].Players[player.playerId] = {\n      age: player.age,\n      transferPrice: player.transferPrice,\n      fatmol: player.fatmol\n    };\n  },\n  \n  /**\n   * Calcola statistiche per gruppi e cluster di club\n   * @private\n   */\n  _calculateGroupAndClusterStats(playersByGroupAndClubCluster) {\n    Object.keys(playersByGroupAndClubCluster).forEach(roleGroup => {\n      Object.keys(playersByGroupAndClubCluster[roleGroup]).forEach(clubCluster => {\n        const players = playersByGroupAndClubCluster[roleGroup][clubCluster].Players;\n        const numPlayersInGroupCluster = Object.keys(players).length;\n        const avgTreshold = 4.51;\n        \n        let maxFatmol = 0;\n        let maxAge = 0;\n        let totFatmol = 0;\n        let totAge = 0;\n        let totTransferPrice = 0;\n        let totTransferPriceWithTreshold = 0;\n        let numPlayersTransferPriceWithTreshold = 0;\n        \n        Object.keys(players).forEach(playerId => {\n          const player = players[playerId];\n          \n          maxFatmol = Math.max(maxFatmol, player.fatmol);\n          maxAge = Math.max(maxAge, player.age);\n          \n          totFatmol += player.fatmol;\n          totAge += player.age;\n          totTransferPrice += player.transferPrice;\n          \n          if (player.transferPrice >= avgTreshold) {\n            totTransferPriceWithTreshold += player.transferPrice;\n            numPlayersTransferPriceWithTreshold++;\n          }\n        });\n        \n        // Salvataggio statistiche\n        const groupCluster = playersByGroupAndClubCluster[roleGroup][clubCluster];\n        groupCluster.maxFatmol = maxFatmol;\n        groupCluster.maxAge = maxAge;\n        groupCluster.avgFatmol = totFatmol / numPlayersInGroupCluster;\n        groupCluster.avgAge = totAge / numPlayersInGroupCluster;\n        groupCluster.totFatmol = totFatmol;\n        groupCluster.numPlayersInGroupCluster = numPlayersInGroupCluster;\n      });\n    });\n  },\n  \n  /**\n   * Calcola statistiche per gruppo\n   * @private\n   */\n  _calculateGroupStats(playersByGroup) {\n    Object.keys(playersByGroup).forEach(roleGroup => {\n      const players = playersByGroup[roleGroup].Players;\n      const numPlayersInGroup = Object.keys(players).length;\n      const avgTreshold = 4.51;\n      \n      let maxFatmol = 0;\n      let maxAge = 0;\n      let totFatmol = 0;\n      let totAge = 0;\n      let totTransferPrice = 0;\n      let totTransferPriceWithTreshold = 0;\n      let numPlayersTransferPriceWithTreshold = 0;\n      \n      Object.keys(players).forEach(playerId => {\n        const player = players[playerId];\n        \n        maxFatmol = Math.max(maxFatmol, player.fatmol);\n        maxAge = Math.max(maxAge, player.age);\n        \n        totFatmol += player.fatmol;\n        totAge += player.age;\n        totTransferPrice += player.transferPrice;\n        \n        if (player.transferPrice >= avgTreshold) {\n          totTransferPriceWithTreshold += player.transferPrice;\n          numPlayersTransferPriceWithTreshold++;\n        }\n      });\n      \n      // Salvataggio statistiche\n      playersByGroup[roleGroup].maxFatmol = maxFatmol;\n      playersByGroup[roleGroup].maxAge = maxAge;\n      playersByGroup[roleGroup].avgFatmol = totFatmol / numPlayersInGroup;\n      playersByGroup[roleGroup].avgAge = totAge / numPlayersInGroup;\n      playersByGroup[roleGroup].avgTransferPrice = totTransferPrice / numPlayersInGroup;\n      playersByGroup[roleGroup].avgTransferPriceWithTreshold = totTransferPriceWithTreshold / numPlayersTransferPriceWithTreshold;\n      playersByGroup[roleGroup].numPlayersInGroup = numPlayersInGroup;\n      playersByGroup[roleGroup].numPlayersTransferPriceWithTreshold = numPlayersTransferPriceWithTreshold;\n    });\n  }\n};\n\n/**\n * Modulo per l'analisi economica dei giocatori\n */\nconst EconomicAnalyzer = {\n  /**\n   * Calcola il cluster club atteso per un giocatore\n   */\n  calculateExpectedClubCluster(ftRatio, currentClubCluster, simulating, minutes) {\n    let expectedCluster;\n    \n    if (ftRatio >= 1.7) {\n      expectedCluster = currentClubCluster - 3;\n    } else if (ftRatio >= 1.5 && ftRatio < 1.7) {\n      expectedCluster = currentClubCluster - 2;\n    } else if (ftRatio >= 1.2 && ftRatio < 1.5) {\n      expectedCluster = currentClubCluster - 1;\n    } else if (ftRatio >= 1 && ftRatio < 1.2) {\n      expectedCluster = currentClubCluster;\n    } else if (ftRatio >= 0.5 && ftRatio < 1) {\n      expectedCluster = currentClubCluster + 1;\n    } else {\n      expectedCluster = currentClubCluster + 2;\n    }\n    \n    if (simulating === true) {\n      expectedCluster = currentClubCluster;\n    }\n    \n    // Aggiustamenti\n    if (minutes < 90) {\n      expectedCluster = currentClubCluster + 6;\n    }\n    \n    // Limiti\n    return Math.max(1, Math.min(17, expectedCluster));\n  },\n  \n  /**\n   * Calcola il rank club atteso per un giocatore\n   */\n  calculateExpectedClubRank(ftRatio, currentClubRank, simulating) {\n    let expectedRank;\n    \n    if (ftRatio >= 2) {\n      expectedRank = currentClubRank - 6;\n    } else if (ftRatio >= 1.75 && ftRatio < 2) {\n      expectedRank = currentClubRank - 4;\n    } else if (ftRatio >= 1.5 && ftRatio < 1.75) {\n      expectedRank = currentClubRank - 3;\n    } else if (ftRatio >= 1.2 && ftRatio < 1.5) {\n      expectedRank = currentClubRank - 2;\n    } else if (ftRatio >= 1 && ftRatio < 1.2) {\n      expectedRank = currentClubRank;\n    } else if (ftRatio >= 0.5 && ftRatio < 1) {\n      expectedRank = currentClubRank + 1;\n    } else {\n      expectedRank = currentClubRank + 2;\n    }\n    \n    if (simulating === true) {\n      expectedRank = currentClubRank;\n    }\n    \n    // Limiti\n    return Math.max(1, Math.min(770, expectedRank));\n  },\n  \n  /**\n   * Calcola il valore contabile residuo\n   */\n  calculateResidualBookValue(player) {\n    if (!player.contractType.includes(\"Propriet\") || (player.contractType.includes(\"Propriet\") && player.transferPriceYear > 2023)) {\n      return ((5 - (new Date().getFullYear() - player.transferPriceYear)) / 5) * player.transferPrice;\n    } else {\n      return (player.startContract && Utils.calculateAge(player.startContract) > 4) ? \n            0 : \n            (player.transferPrice * (player.remainingYearsOfContract / player.totalYearsOfContract));\n    }\n  },\n  \n  /**\n   * Calcola gli anni potenziali di contratto\n   */\n  calculatePotentialYearsOfContract(age, risingStar) {\n    let years;\n    \n    if (age > 32) {\n      years = 1;\n    } else if (age == 32) {\n      years = 2;\n    } else if (age > 22 && age <= 25) {\n      years = 4;\n    } else if (age > 25 && age <= 31) {\n      years = 3;\n    } else {\n      years = 5;\n    }\n    \n    return risingStar ? years + 1 : years;\n  },\n  \n  /**\n   * Esegue l'analisi economica completa su tutti i giocatori\n   */\n  analyzeEconomics(TheFootballTree, playersByGroupAndClubCluster) {\n    console.log(\"PLAYER ECONOMIC ANALYSIS\");\n    \n    let topClusterTeamBySalary = {};\n    let clubSalaryByRank = {};\n    \n    let globalMaxFatmol = 0;\n    let totalGlobalFatmol = 0;\n    let avgGlobalFatmol = 0;\n    let fatmolCounter = 0;\n    \n    // Fase 1: Calcolo top cluster team by salary\n    console.log(\"TOP CLUSTER TEAM BY SALARY\");\n    this._calculateTopClusterTeamBySalary(TheFootballTree, topClusterTeamBySalary);\n    \n    // Fase 2: Calcolo club salary by club rank\n    console.log(\"CLUB SALARY BY CLUB RANK\");\n    this._calculateClubSalaryByRank(TheFootballTree, clubSalaryByRank);\n    \n    // Fase 3: Analisi economica sui giocatori\n    console.log(\"PLAYER BEGINS: WEIGHT, OPTIMAL SALARY, BENEFITS, COSTS, OPTVAL, RESIDUALVALUE, RESIDUAL BOOK VALUE, OPTIMAL COST\");\n    Object.keys(TheFootballTree).forEach(leagueId => {\n      TheFootballTree[leagueId].Clubs.forEach(club => {\n        club.Players.forEach(player => {\n          // Aggiornamento contatori globali\n          fatmolCounter++;\n          totalGlobalFatmol += player.fatmol;\n          globalMaxFatmol = Math.max(globalMaxFatmol, player.fatmol);\n          avgGlobalFatmol = totalGlobalFatmol / fatmolCounter;\n          \n          // Analisi economica del singolo giocatore\n          this._analyzePlayerEconomics(\n            player, \n            club, \n            playersByGroupAndClubCluster,\n            topClusterTeamBySalary,\n            clubSalaryByRank\n          );\n        });\n      });\n    });\n    \n    console.log(\"PLAYER DONE: WEIGHT, OPTIMAL SALARY, BENEFITS, COSTS, OPTVAL, RESIDUALVALUE, RESIDUAL BOOK VALUE, OPTIMAL COST\");\n    \n    return {\n      globalMaxFatmol,\n      avgGlobalFatmol\n    };\n  },\n  \n  /**\n   * Calcola i top club per cluster in base al salario\n   * @private\n   */\n  _calculateTopClusterTeamBySalary(TheFootballTree, topClusterTeamBySalary) {\n    Object.keys(TheFootballTree).forEach(leagueId => {\n      TheFootballTree[leagueId].Clubs.forEach(club => {\n        if (topClusterTeamBySalary[club.cluster] == undefined) {\n          topClusterTeamBySalary[club.cluster] = {};\n        }\n        \n        if (!topClusterTeamBySalary[club.cluster].salaryNetFair || \n            topClusterTeamBySalary[club.cluster].salaryNetFair < club.salaryNetFair) {\n          topClusterTeamBySalary[club.cluster] = club;\n        }\n      });\n    });\n  },\n  \n  /**\n   * Calcola i club per rank in base al salario\n   * @private\n   */\n  _calculateClubSalaryByRank(TheFootballTree, clubSalaryByRank) {\n    Object.keys(TheFootballTree).forEach(leagueId => {\n      if (leagueId !== \"arab\") { // Escludiamo i club della lega araba dai rank\n        TheFootballTree[leagueId].Clubs.forEach(club => {\n          if (clubSalaryByRank[club.clubRank] == undefined) {\n            clubSalaryByRank[club.clubRank] = {};\n          }\n          \n          if (!clubSalaryByRank[club.clubRank].salaryNetFair || \n              clubSalaryByRank[club.clubRank].salaryNetFair < club.salaryNetFair) {\n            clubSalaryByRank[club.clubRank] = club;\n          }\n        });\n      }\n    });\n  },\n  \n  /**\n   * Analizza economicamente un singolo giocatore\n   * @private\n   */\n  _analyzePlayerEconomics(player, club, playersByGroupAndClubCluster, topClusterTeamBySalary, clubSalaryByRank) {\n    // EXPECTED CLUB CLUSTER\n    const ftRatio = player.fatmol / playersByGroupAndClubCluster[player.latestRoleGroup][player.currentClubCluster].avgFatmol;\n    player.expectedClubCluster = this.calculateExpectedClubCluster(ftRatio, player.currentClubCluster, player.simulating, player.minutes);\n    \n    // EXPECTED CLUB RANK\n    player.expectedClubRank = this.calculateExpectedClubRank(ftRatio, player.currentClubRank, player.simulating);\n    \n    // Gestione caso speciale per expected club rank\n    if (clubSalaryByRank[player.expectedClubRank] === undefined) {\n      while (clubSalaryByRank[player.expectedClubRank] === undefined) {\n        player.expectedClubRank--;\n      }\n    }\n    \n    // WEIGHT IN CLUB\n    player.weightInClub = Math.pow(player.fatmol, 1.7) / club.exponentialTotFatmol;\n    \n    // WEIGHT IN TOP TEAM EXPECTED CLUSTER CLUB\n    player.weightInExpectedClubCluster = Math.pow(player.fatmol, 1.7) / topClusterTeamBySalary[player.expectedClubCluster].exponentialTotFatmol;\n    \n    // WEIGHT IN TOP TEAM EXPECTED CLUB RANK\n    player.weightInExpectedClubRank = Math.pow(player.fatmol, 1.7) / clubSalaryByRank[player.expectedClubRank].exponentialTotFatmol;\n    \n    // OPTIMAL SALARY\n    player.salaryOptimal = club.salaryNetFair * player.weightInClub;\n    \n    // POTENTIAL SALARY\n    player.salaryPotential = player.simulating ? \n                            (club.salaryNetFair * player.weightInClub) : \n                            (clubSalaryByRank[player.expectedClubRank].salaryNetFair * player.weightInExpectedClubRank);\n    \n    // BENEFITS\n    player.benefits = Utils.actualValueSum(player.fatmol * player.salaryOptimal, player.remainingYearsOfContract, 0.05);\n    \n    // COSTS\n    player.costs = Utils.actualValueSum(player.salaryGross, player.remainingYearsOfContract, 0.05);\n    \n    // OPTVAL\n    player.optval = player.maturity == 0 ? 0 : Utils.blackScholes(\n      player.benefits,\n      player.costs,\n      player.maturity,\n      (player.latestMicroVolatility / 100),\n      -0.085,\n      \"call\"\n    ) || 0;\n    \n    // RESIDUAL VALUE\n    player.residualValue = player.benefits - player.costs + player.optval;\n    \n    // RESIDUAL BOOK VALUE\n    player.residualBookValue = this.calculateResidualBookValue(player);\n    player.residualBookValue = Math.max(player.residualBookValue, 0);\n    \n    // BOOK VALUE RESIDUAL CONTRACT RATIO\n    player.bvResContractRatio = player.residualBookValue / player.remainingYearsOfContract;\n    \n    // PLAYER'S COSTS\n    player.optimalCosts = Utils.actualValueSum(player.salaryOptimal * player.currentLeagueTaxRate, player.remainingYearsOfContract, 0.05);\n  }\n};\n\n/**\n * Modulo per il calcolo dei prezzi potenziali\n */\nconst PricingAnalyzer = {\n  /**\n   * Calcola il ValNoVan di un giocatore\n   */\n  setValNoVan(player, clubCluster, playersByGroup, avgGlobalFatmol, globalMaxFatmol) {\n    try {\n      // RY\n      const groupAvgAge = playersByGroup[player.latestRoleGroup].avgAge;\n      const maxAgeInGroup = playersByGroup[player.latestRoleGroup].maxAge;\n      \n      const RY = groupAvgAge / player.age;\n      \n      // RP\n      const groupAvgFatmol = playersByGroup[player.latestRoleGroup].avgFatmol;\n      \n      // Reward per cluster\n      let RPClusterReward;\n      if (clubCluster > 13) {\n        RPClusterReward = 0.2;\n      } else if (clubCluster > 9) {\n        RPClusterReward = 0.25;\n      } else if (clubCluster > 8) {\n        RPClusterReward = 0.28;\n      } else if (clubCluster > 6) {\n        RPClusterReward = 0.3;\n      } else if (clubCluster > 3) {\n        RPClusterReward = 0.8;\n      } else {\n        RPClusterReward = 1;\n      }\n      \n      RPClusterReward = player.minutes < 90 ? 0.1 : RPClusterReward;\n      \n      // Reward per rapporto FATMOL\n      const RPFatmolRatio = player.fatmol / avgGlobalFatmol;\n      let RPFatmolReward;\n      \n      if (RPFatmolRatio > 1.5) {\n        RPFatmolReward = 1;\n      } else if (RPFatmolRatio > 1.25 && RPFatmolRatio <= 1.5) {\n        RPFatmolReward = 0.571429;\n      } else if (RPFatmolRatio > 1 && RPFatmolRatio <= 1.25) {\n        RPFatmolReward = 0.429185;\n      } else {\n        RPFatmolReward = 0.285714;\n      }\n      \n      // Reward per SuperStar\n      const RPSuperStarReward = player.superStar ? 1.2 : ((player.fatmol / globalMaxFatmol) > 0.6 ? 0.8 : 0.6);\n      \n      // Reward per performance\n      const RPPerfReward = player.emerging == 1 ? (((player.fatmol * 1.3) + globalMaxFatmol) / 2) : player.fatmol;\n      \n      // Calcolo RP finale\n      const RP = (RPPerfReward / groupAvgFatmol) * RPFatmolReward * RPSuperStarReward * RPClusterReward;\n      \n      // PM (prezzo medio)\n      const PM = playersByGroup[5].avgTransferPriceWithTreshold * player.percTransfPrice; // GRUPPO 5 FISSO\n      \n      // Salvataggio valori intermedi\n      player.avgTransferPrice = PM;\n      player.PM = PM;\n      player.RY = RY;\n      player.RP = RP;\n      \n      // Calcolo ValNoVan finale\n      player.valNoVan = RP * RY * PM * 2 * player.latestRoleWeight;\n    } catch (e) {\n      console.error(\"Errore in setValNoVan:\", e);\n    }\n  },\n  \n  /**\n   * Calcola le medie ValNoVan per gruppi, età e cluster\n   */\n  calculateAvgsValNoVan(TheFootballTree, avgValNoVanGroupAgeRangeClubCluster) {\n    try {\n      console.log(\"CALCOLO avgsValNoVan\");\n      \n      let maxValNoVan = 0;\n      let maxwVANVNV_CL = 0;\n      \n      Object.keys(TheFootballTree).forEach(leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach(club => {\n          club.Players.forEach(player => {\n            maxValNoVan = Math.max(player.valNoVan, maxValNoVan);\n            player.maxEMediePesate = 0;\n            \n            // Calcolo valnovan e van con limiti vendita\n            let valnovan = club.noLimiteVendita == 1 ? \n                          player.valNoVan : \n                          (player.valNoVan * 1.2 > club.maxtr ? \n                            (player.valNoVan * 0.3 + (1.2 * club.maxtr) * 0.7) : \n                            player.valNoVan);\n            \n            let van = club.noLimiteVendita == 1 ? \n                     player.van : \n                     (player.van * 1.2 > club.maxtr ? \n                       (player.van * 0.3 + (1.2 * club.maxtr) * 0.7) : \n                       player.van);\n            \n            // Calcolo wVANVNV_CL\n            const wVANVNV_CL = valnovan * 0.6 + van * 0.4;\n            maxwVANVNV_CL = Math.max(wVANVNV_CL, maxwVANVNV_CL);\n            player.wVANVNV_CL = wVANVNV_CL;\n            \n            // Calcolo cluster corretto\n            const cc = club.cluster >= 2 && (player.valNoVan * 0.6 + player.van * 0.4) > 55 ? \n                      (club.cluster - 1) : \n                      club.cluster;\n            \n            // Inizializzazione strutture dati per medie\n            this._initializeValNoVanStructures(avgValNoVanGroupAgeRangeClubCluster, player, cc);\n            \n            // Aggiornamento statistiche per età\n            this._updateValNoVanStatsByAge(avgValNoVanGroupAgeRangeClubCluster, player, cc, valnovan, wVANVNV_CL);\n          });\n        });\n      });\n      \n      return maxwVANVNV_CL;\n    } catch (e) {\n      console.error(\"Errore in calculateAvgsValNoVan:\", e);\n      return 0;\n    }\n  },\n  \n  /**\n   * Inizializza le strutture dati per le medie ValNoVan\n   * @private\n   */\n  _initializeValNoVanStructures(avgValNoVanGroupAgeRangeClubCluster, player, cc) {\n    if (avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup] === undefined) {\n      avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup] = {};\n    }\n    \n    if (avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"] === undefined) {\n      avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"] = {};\n    }\n    \n    if (avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"] === undefined) {\n      avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"] = {};\n    }\n    \n    // Inizializzazione dati per cluster specifici\n    if (avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc] === undefined) {\n      avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc] = {\n        \"sum\": 0,\n        \"sumW\": 0,\n        \"count\": 0,\n        \"avg\": 0,\n        \"avgW\": 0\n      };\n    }\n    \n    if (avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc] === undefined) {\n      avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc] = {\n        \"sum\": 0,\n        \"sumW\": 0,\n        \"count\": 0,\n        \"avg\": 0,\n        \"avgW\": 0\n      };\n    }\n  },\n  \n  /**\n   * Aggiorna le statistiche ValNoVan per fascia d'età\n   * @private\n   */\n  _updateValNoVanStatsByAge(avgValNoVanGroupAgeRangeClubCluster, player, cc, valnovan, wVANVNV_CL) {\n    if (player.age > 29) {\n      // Giocatori over 30\n      const stats = avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc];\n      \n      stats.count++;\n      stats.sum += valnovan;\n      stats.sumW += wVANVNV_CL;\n      stats.avg = stats.sum / stats.count;\n      stats.avgW = stats.sumW / stats.count;\n    } else {\n      // Giocatori under 30\n      const stats = avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc];\n      \n      stats.count++;\n      stats.sum += valnovan;\n      stats.sumW += wVANVNV_CL;\n      stats.avg = stats.sum / stats.count;\n      stats.avgW = stats.sumW / stats.count;\n    }\n  },\n  \n  /**\n   * Imposta il prezzo potenziale di un giocatore\n   */\n  setPotentialPrice(player, club, avgValNoVanGroupAgeRangeClubCluster, maxwVANVNV_CL) {\n    try {\n      const wVANVNV_CL = player.wVANVNV_CL;\n      const wVANVNV = player.valNoVan * 0.6 + player.van * 0.4;\n      \n      // Calcolo cluster corretto\n      const cc = club.cluster >= 2 && wVANVNV > 55 ? (club.cluster - 1) : club.cluster;\n      \n      // Calcolo medie per età\n      const avgVNV = player.age > 29 ? \n                    avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc].avg : \n                    avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc].avg;\n      \n      const avgwVANVNV_CL = player.age > 29 ? \n                           avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc].avgW : \n                           avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc].avgW;\n      \n      // Valore default\n      player.potentialPrice = wVANVNV;\n      \n      // Casi speciali\n      if (player.age <= 31 && player.fatmol >= 2.25 && maxwVANVNV_CL / wVANVNV_CL > 2.5) {\n        if (player.emerging) {\n          // EMERGING\n          const maxEMediePesate = ((maxwVANVNV_CL * 0.2 + avgwVANVNV_CL * 0.8) * 0.5 + wVANVNV_CL * 0.5);\n          player.maxEMediePesate = maxEMediePesate;\n          \n          if (club.noLimiteVendita == 1) {\n            player.potentialPrice = Math.max(maxEMediePesate, wVANVNV_CL);\n          } else {\n            if (maxEMediePesate > (1.2 * club.maxtr)) {\n              const mm = Math.max(maxEMediePesate, wVANVNV_CL);\n              player.potentialPrice = mm * 0.3 + ((1.2 * club.maxtr) * 0.7);\n            } else {\n              player.potentialPrice = Math.max(maxEMediePesate, wVANVNV_CL);\n            }\n          }\n        } else if (player.superStar) {\n          // SUPERSTAR\n          player.potentialPrice = Math.max(\n            ((maxwVANVNV_CL * 0.3 + avgwVANVNV_CL * 0.7) * 0.9 + wVANVNV_CL * 0.1),\n            wVANVNV_CL\n          );\n        } else {\n          // ALTRI GIOCATORI\n          if (wVANVNV < avgwVANVNV_CL) {\n            player.potentialPrice = wVANVNV * 0.22 + avgwVANVNV_CL * 0.78;\n          } else {\n            player.potentialPrice = wVANVNV_CL;\n          }\n        }\n      }\n    } catch (e) {\n      console.error(\"Errore in setPotentialPrice:\", e);\n    }\n  },\n  \n  /**\n   * Esegue l'analisi completa dei prezzi potenziali\n   */\n  analyzePrices(TheFootballTree, playersByGroup, avgGlobalFatmol, globalMaxFatmol) {\n    console.log(\"PLAYER PRICES BEGINS\");\n    \n    // Oggetto per le medie di ValNoVan\n    let avgValNoVanGroupAgeRangeClubCluster = {};\n    \n    try {\n      console.log(\"CALCOLO VALORI POTENZIALI, VAN e VALNOVAN\");\n      Object.keys(TheFootballTree).forEach(leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach(club => {\n          club.Players.forEach(player => {\n            // POTENTIAL YEARS OF CONTRACT\n            player.potentialYearsOfContract = EconomicAnalyzer.calculatePotentialYearsOfContract(player.age, player.risingStar);\n            \n            player.expectedYearsOfContract = player.potentialYearsOfContract;\n            \n            // Calcolo benefici e costi potenziali\n            let fatmolAdjusted = Math.max(player.fatmol, 2);\n            player.benefitsPotential = Utils.actualValueSum(fatmolAdjusted * player.salaryPotential, player.expectedYearsOfContract, 0.05);\n            \n            player.costsPotential = player.simulating ? \n                                   Utils.actualValueSum(player.salaryGross, player.expectedYearsOfContract, 0.05) : \n                                   Utils.actualValueSum(player.salaryPotential * player.currentLeagueTaxRate, player.expectedYearsOfContract, 0.05);\n            \n            // OPTVAL POTENTIAL\n            player.optvalPotential = player.maturity == 0 ? 0 : Utils.blackScholes(\n              player.benefitsPotential,\n              player.costsPotential,\n              player.maturity,\n              (player.latestMicroVolatility / 100),\n              -0.085,\n              \"call\"\n            ) || 0;\n            \n            // VAN\n            const bcaward = (player.benefitsPotential - player.costsPotential) * 0.05 * club.premioFair;\n            player.bcaward = bcaward;\n            player.clubPremioFair = club.premioFair;\n            player.van = Math.min(player.benefitsPotential - player.costsPotential + bcaward + player.optvalPotential, 220);\n            \n            // VAL NO VAN\n            this.setValNoVan(player, club.cluster, playersByGroup, avgGlobalFatmol, globalMaxFatmol);\n          });\n        });\n      });\n      \n      // Calcolo delle medie di ValNoVan\n      const maxwVANVNV_CL = this.calculateAvgsValNoVan(TheFootballTree, avgValNoVanGroupAgeRangeClubCluster);\n      \n      console.log(\"CALCOLO POTENTIAL PRICE\");\n      Object.keys(TheFootballTree).forEach(leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach(club => {\n          club.Players.forEach(player => {\n            // POTENTIAL PRICE\n            this.setPotentialPrice(player, club, avgValNoVanGroupAgeRangeClubCluster, maxwVANVNV_CL);\n          });\n        });\n      });\n      \n      console.log(\"*** POTENTIAL PRICE COMPLETED ***\");\n      \n      return avgValNoVanGroupAgeRangeClubCluster;\n    } catch (e) {\n      console.error(\"Errore nella fase 4:\", e);\n      return avgValNoVanGroupAgeRangeClubCluster;\n    }\n  }\n};\n\n/**\n * Funzione principale che integra tutti i moduli e esegue l'analisi completa\n */\nfunction analyzeFootballData(msg) {\n  console.log(\"FOOTBALL ANALYSIS BEGINS\");\n  \n  try {\n    // Inizializzazione dati\n    let TheFootballTree = msg.payload;\n    let PlayersErrors = msg.PlayersErrors || [];\n    \n    // -----------------------------------------------\n    // FASE 1: CALCOLO VALORI DI PERFORMANCE\n    // -----------------------------------------------\n    const performanceResults = PerformanceAnalyzer.analyzePerformance(TheFootballTree, 5130);\n    \n    msg.minNotZeroEffectivness = performanceResults.minNotZeroEffectivness;\n    msg.minNotZeroUniqueness = performanceResults.minNotZeroUniqueness;\n    \n    // -----------------------------------------------\n    // FASE 2: DIVISIONE IN GRUPPI E CALCOLO\n    // -----------------------------------------------\n    const groupResults = GroupAnalyzer.groupPlayersAndCalculateStats(TheFootballTree);\n    \n    // -----------------------------------------------\n    // FASE 3: ANALISI ECONOMICA DEI GIOCATORI\n    // -----------------------------------------------\n    const economicResults = EconomicAnalyzer.analyzeEconomics(\n      TheFootballTree, \n      groupResults.playersByGroupAndClubCluster\n    );\n    \n    // -----------------------------------------------\n    // FASE 4: CALCOLO PREZZI POTENZIALI\n    // -----------------------------------------------\n    const avgValNoVanGroupAgeRangeClubCluster = PricingAnalyzer.analyzePrices(\n      TheFootballTree,\n      groupResults.playersByGroup,\n      economicResults.avgGlobalFatmol,\n      economicResults.globalMaxFatmol\n    );\n    \n    // Aggiornamento msg con i dati calcolati\n    msg.payload = TheFootballTree;\n    msg.PlayersErrors = PlayersErrors;\n    msg.playersByGroup = groupResults.playersByGroup;\n    msg.globalMaxFatmol = economicResults.globalMaxFatmol;\n    msg.avgGlobalFatmol = economicResults.avgGlobalFatmol;\n    msg.footballTree = TheFootballTree;\n    msg.avgValNoVanGroupAgeRangeClubCluster = avgValNoVanGroupAgeRangeClubCluster;\n    \n    return msg;\n  } catch (e) {\n    console.error(\"Errore critico nell'analisi:\", e);\n    msg.error = e.message;\n    return msg;\n  }\n}\n\nreturn analyzeFootballData(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 580,
        "wires": [
            [
                "4d39469e3f6f0e06"
            ]
        ]
    },
    {
        "id": "f564710f5b36fbf3",
        "type": "function",
        "z": "1b980fd89607dc71",
        "name": "Prezzi",
        "func": "\nlet TheFootballTree = msg.payload;\nlet PlayersErrors = msg.PlayersErrors;\nlet playersByGroup = msg.playersByGroup;\nlet avgGlobalFatmol = msg.avgGlobalFatmol;\nlet globalMaxFatmol = msg.globalMaxFatmol;\n\n/** IMPORTO LE DEFINIZIONI DEGLI OGGETTI CHE VERRANNO CREATI **/\nconst Player = global.get(\"ThePlayerObject\");\nconst Error = global.get(\"TheErrorObject\");\nconst PlayerError = global.get(\"ThePlayerErrorObject\");\nconst Utils = global.get(\"UTILS\");\n\n\nconsole.log(\"PLAYER EXPECTED PRICE BEGINS\");\n\n\nconst setExpectedPrice = function(player) {\n    //Expected PRICE\n    let contractRemainingMonths = player.remainingMonthsOfContract;\n    \n    let beta = 0.5\n    \n    switch(true) {\n        \n        case (contractRemainingMonths <= 6) :\n            beta = 0;\n            break;\n        case (contractRemainingMonths > 6 && contractRemainingMonths <= 12 ) : {\n            \n            beta= player.superstar ? 0.8 : 0.5\n        }\n            break;\n        case ( contractRemainingMonths > 12 && contractRemainingMonths <= 18 ) :\n            beta = 0.65;\n            break;\n        case  ( contractRemainingMonths > 18 && contractRemainingMonths <= 24 ) :\n            beta = 0.8\n            break;\n        case  ( contractRemainingMonths > 24 ) :\n            beta = 1\n            break;\n        default :\n            beta = 0.5\n        break;\n        \n    }\n    \n    player.expectedPrice = player.potentialPrice * beta;\n    \n    if (player.withdrawalClause && player.withdrawalClause != 0 ) {\n        \n        player.expectedPrice =  ( player.potentialPrice * beta ) < player.withdrawalClause ? ( player.potentialPrice * beta ) : player.withdrawalClause\n    } \n    \n    \n    if ( !player.contractType.includes(\"Propriet\") ) {\n        player.expectedPrice =  player.potentialPrice\n    }\n}\n\n\n\n\ntry {    \n\n    console.log(\"CALCOLO EXPECTED PRICE\")\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            club.Players.forEach( player => {\n                \n           \n    \n                //SET EXPECTEDPRICE\n                setExpectedPrice(player);\n                \n                let dirtyCoeff = (0.3 * ( (player.latestUniqueness - msg.minNotZeroUniqueness)  / ( 100 - msg.minNotZeroUniqueness ) ) )\n                \n                let dirty = ( 1 + dirtyCoeff ) * player.expectedPrice\n                \n                \n                player.perceivedExpectedPrice = player.tmValue > dirty ? (player.tmValue + dirty ) / 2 : dirty;\n                \n                player.perceivedExpectedPrice = player.withdrawalClause > 0  && player.perceivedExpectedPrice > player.withdrawalClause ? player.withdrawalClause : player.perceivedExpectedPrice;\n                \n                \n               // player.perceivedExpectedPrice = player.contractType.includes(\"Propriet\") && player.remainingMonthsOfContract < 7 ? 0 : player.perceivedExpectedPrice;\n                \n                player.perceivedExpectedPrice =  player.expectedPrice > player.tmValue ? player.expectedPrice : player.perceivedExpectedPrice;\n                \n                \n                player.residualValue = player.residualValue > player.potentialPrice ? player.potentialPrice : player.residualValue            \n    \n    \n                player.capitalGain = player.expectedPrice - player.residualBookValue\n                \n                player.profit = player.expectedPrice - player.residualValue;\n                \n                player.salaryAbsoluteDeviation = player.salaryOptimal - player.salaryNet;\n                player.salaryPercDeviation = !isNaN(player.salaryOptimal) ? ( player.salaryAbsoluteDeviation * 100) / player.salaryOptimal : 0;\n                \n                //aggiunto il 16/01/2023\n                player.deviation = player.potentialPrice - player.residualValue;\n                \n                if (player.playerId == \"2k5g68ywtr79lc45wozvifqlm\") {\n                    \n                    console.log(\"dirty\", dirty)\n                    console.log(\"dirtyCoeff\", dirtyCoeff)\n                    console.log(\"player.perceivedExpectedPrice\", player.perceivedExpectedPrice)\n                    console.log(\"player.player.tmValue\", player.tmValue)\n                    \n                }\n                \n            })\n            \n           \n        })\n    })\n\n\n}\n\ncatch(e) {\n    console.log(e)\n}\n\n\n\n\n\n//msg.payload=TheFootballTree\nmsg.footballTree=TheFootballTree\nmsg.PlayersErrors=PlayersErrors\nmsg.playersByGroup=playersByGroup;\n console.log(\"*** PLAYERS ANALISYS COMPLETED ***\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "4d39469e3f6f0e06",
        "type": "function",
        "z": "1b980fd89607dc71",
        "name": "Archive Set",
        "func": "\nconsole.log(\"REQUESTING ARCHIVE POTENTIAL PRICES\")\n//msg.topic = \"with dataset as (SELECT playerId, currentPotentialPrice,potentialPrice,currentExpectedPrice,expectedPrice,elaborationNum,  week, year from latestplayers_archive where 1=1 and elaborationNum in (select max(elaborationNum) from latestplayers_archive GROUP BY year, week) order by elaborationNum asc) select * from dataset d join ( select distinct elaborationNum from dataset order by elaborationNum desc limit 4) e on d.elaborationNum =e.elaborationNum;\"\n\nconst topic = `WITH ultimi_elaborationNum AS (\n    SELECT DISTINCT elaborationNum\n    FROM latestplayers_archive\n    WHERE elaborationNum IN (\n        SELECT MAX(elaborationNum)\n        FROM latestplayers_archive\n        GROUP BY year, week\n    )\n    ORDER BY elaborationNum DESC\n    LIMIT 4\n)\nSELECT \n    lp.playerId, \n    lp.currentPotentialPrice,\n    lp.potentialPrice,\n    lp.currentExpectedPrice,\n    lp.expectedPrice,\n    lp.elaborationNum,\n    lp.week, \n    lp.year\nFROM latestplayers_archive lp\nINNER JOIN ultimi_elaborationNum u ON lp.elaborationNum = u.elaborationNum\nORDER BY lp.elaborationNum DESC;`\n\nmsg.topic=topic;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 580,
        "wires": [
            [
                "525c32fdeafd889f"
            ]
        ]
    },
    {
        "id": "525c32fdeafd889f",
        "type": "mysql",
        "z": "1b980fd89607dc71",
        "mydb": "ea1e5103bb9e91ad",
        "name": "PRODUZIONE",
        "x": 1320,
        "y": 580,
        "wires": [
            [
                "b69ff5dd19f1f347"
            ]
        ]
    },
    {
        "id": "b69ff5dd19f1f347",
        "type": "function",
        "z": "1b980fd89607dc71",
        "name": "Compute avarage",
        "func": "\nconsole.log(\"AVARAGIN POTENTIAL PRICE\")\n\nlet TheFootballTree = msg.footballTree; //global.get(\"TheLatestFooballTree\")\nlet playerData = msg.payload;\n\nlet topic\n\nlet yamal = {}\n\n\n Object.keys(TheFootballTree).forEach( leagueId => {\n     TheFootballTree[leagueId].Clubs.forEach( club => { \n         club.Players.forEach( player => {\n             \n             \n             \n             // PUNTO CRITICO INVERTO I VALORI DI POTENTIAL PRICE\n             \n            player.currentPotentialPrice = player.potentialPrice\n            player.currentExpectedPrice = 0\n             \n            let previousSet =  playerData.filter( pd => pd.playerId == player.playerId).filter( pv=> pv.week !== player.week).sort((a,b) => a.elaborationNum - b.elaborationNum).slice( -3);\n            \n            \n            player.potentialPrice = ( previousSet.reduce((acc, playerPrevSet) => acc+playerPrevSet.currentPotentialPrice, 0) +  player.currentPotentialPrice ) / ( previousSet.length+ 1);\n            player.expectedPrice = ( previousSet.reduce((acc, playerPrevSet) => acc+playerPrevSet.currentExpectedPrice, 0) +  player.currentExpectedPrice ) / ( previousSet.length+ 1);\n            \n            \n            if (player.playerId == \"abr79wsl0folgkyvl821ggs2c\") {\n                \n                yamal[\"week\"] = player.week;\n                yamal[\"currentPotentialPrice\"] = player.currentPotentialPrice;\n                yamal[\"potentialPrice\"] = player.potentialPrice;\n                yamal[\"previousSet\"] = previousSet;\n                \n            }\n             \n         })\n     })\n })\n\n\nmsg.yamal=yamal;\nmsg.payload = TheFootballTree;\nconsole.log(\"AVARAGIN POTENTIAL PRICE COMPLETED\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 580,
        "wires": [
            [
                "f564710f5b36fbf3"
            ]
        ]
    },
    {
        "id": "7f3d0fa93dc67962",
        "type": "function",
        "z": "1b980fd89607dc71",
        "name": "1 - Init",
        "func": "/**\n * Node-RED Function Node: Inizializzazione e Preparazione Dati\n * \n * Questo nodo inizializza i dati e prepara l'ambiente per l'analisi dei giocatori.\n */\n\n// Importazione delle definizioni degli oggetti\nconst Player = global.get(\"ThePlayerObject\");\nconst Error = global.get(\"TheErrorObject\");\nconst PlayerError = global.get(\"ThePlayerErrorObject\");\nconst Utils = global.get(\"UTILS\");\n\n// Configurazione\nconst CONFIG = {\n    MAX_MINUTES: 5130,\n    DISCOUNT_RATE: 0.05,\n    BLACK_SCHOLES_RATE: -0.085\n};\n\nfunction initializeData(msg) {\n    // Log iniziale\n    console.log(\"FOOTBALL ANALYSIS BEGINS: INITIALIZATION\");\n    \n    try {\n        // Validazione dell'input\n        if (!msg.payload) {\n            throw new Error(\"Payload mancante o non valido\");\n        }\n        \n        // Inizializzazione delle strutture dati\n        let TheFootballTree = msg.payload;\n        let PlayersErrors = msg.PlayersErrors || [];\n        \n        // Verifica preliminare dei dati\n        let validLeagues = 0;\n        let totalClubs = 0;\n        let totalPlayers = 0;\n        \n        Object.keys(TheFootballTree).forEach(leagueId => {\n            validLeagues++;\n            if (TheFootballTree[leagueId].Clubs) {\n                totalClubs += TheFootballTree[leagueId].Clubs.length;\n                \n                TheFootballTree[leagueId].Clubs.forEach(club => {\n                    if (club.Players) {\n                        totalPlayers += club.Players.length;\n                    }\n                });\n            }\n        });\n        \n        console.log(`Dati inizializzati: ${validLeagues} leghe, ${totalClubs} club, ${totalPlayers} giocatori`);\n        \n        // Preparazione dell'output\n        msg.footballTree = TheFootballTree;\n        msg.PlayersErrors = PlayersErrors;\n        msg.config = CONFIG;\n        msg.validLeagues = validLeagues;\n        msg.totalClubs = totalClubs;\n        msg.totalPlayers = totalPlayers;\n        \n        return msg;\n    } catch (error) {\n        console.error(\"Errore nell'inizializzazione:\", error);\n        msg.error = error.message;\n        return msg;\n    }\n}\n\nreturn initializeData(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 480,
        "wires": [
            [
                "bd8cf46411302a01"
            ]
        ]
    },
    {
        "id": "bd8cf46411302a01",
        "type": "function",
        "z": "1b980fd89607dc71",
        "name": "2 - Performance",
        "func": "/**\n * Node-RED Function Node: Analisi Performance\n * \n * Questo nodo calcola tutti i valori di performance per i giocatori.\n */\n\n// Importazione delle definizioni degli oggetti\nconst Player = global.get(\"ThePlayerObject\");\nconst Error = global.get(\"TheErrorObject\");\nconst PlayerError = global.get(\"ThePlayerErrorObject\");\nconst Utils = global.get(\"UTILS\");\n\n/**\n * Calcola il livello di performance di un giocatore in base a vari parametri\n */\nfunction calculatePerformance(mixedIndex, minutes, age, ageThreshold, minuteShare, maxMinutes) {\n  if (age >= ageThreshold) {\n    if (minuteShare < 10) {\n      return (mixedIndex * minutes) / maxMinutes;\n    } else if (minuteShare >= 10 && minuteShare < 15) {\n      return mixedIndex * 0.2;\n    } else if (minuteShare >= 15 && minuteShare < 20) {\n      return mixedIndex * 0.4;\n    } else if (minuteShare >= 20 && minuteShare < 25) {\n      return mixedIndex * 0.65;\n    } else if (minuteShare >= 25 && minuteShare < 30) {\n      return mixedIndex * 0.85;\n    } else if (minuteShare >= 30) {\n      return mixedIndex;\n    } else {\n      return (mixedIndex * minutes) / maxMinutes;\n    }\n  } else {\n    if (minutes < 200) {\n      return (mixedIndex * minutes) / maxMinutes;\n    } else if (minutes >= 200 && minutes < 300) {\n      return mixedIndex * 0.3;\n    } else if (minutes >= 300 && minutes < 400) {\n      return mixedIndex * 0.5;\n    } else if (minutes >= 400 && minutes < 500) {\n      return mixedIndex * 0.8;\n    } else if (minutes > 500) {\n      return mixedIndex;\n    } else {\n      return (mixedIndex * minutes) / maxMinutes;\n    }\n  }\n}\n\n/**\n * Determina lo status \"emerging\" di un giocatore\n */\nfunction calculateEmergingStatus(player, avgPerformance) {\n  if (player.superStar) {\n    return false;\n  } else if (player.risingStar) {\n    return false;\n  } else if (player.age >= 30) {\n    return false;\n  } else if (player.latestLeagueCluster < 4 && player.alert > 3) {\n    return true;\n  } else if (player.currentClubCluster < 5 && (player.performance * player.latestRoleWeight) > 55 && player.avgPlayedMinuteShare > 0.35) {\n    return true;\n  } else if (player.latestLeagueCluster == 1 && player.avgPlayedMinuteShare > 0.35 && player.performance > 2 * avgPerformance) {\n    return true;\n  } else if (player.latestLeagueCluster == 2 && player.avgPlayedMinuteShare > 0.35 && player.performance > 3 * avgPerformance) {\n    return true;\n  } else if (player.latestLeagueCluster == 3 && player.avgPlayedMinuteShare > 0.35 && player.performance > 4 * avgPerformance) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Calcola la maturità di un giocatore\n */\nfunction calculateMaturity(age, fatmol, emergingReward, risingStarReward) {\n  if (age > 33) {\n    return 0;\n  }\n  \n  let baseMaturity;\n  if (fatmol < 1.75) {\n    baseMaturity = (age < 23) ? 3 : 1;\n  } else {\n    baseMaturity = (age < 29) ? 4 : (33 - age);\n  }\n  \n  return baseMaturity + emergingReward + risingStarReward;\n}\n\n/**\n * Calcola il valore Rising Star parziale\n */\nfunction calculatePartialRisingStar(player, avgPerformance) {\n  let partialRisingStar = 0;\n  \n  if (!player.risingStar && player.age < 24 && player.latestLeagueCluster == 1) {\n    const perfRatio = player.performance / avgPerformance;\n    partialRisingStar = perfRatio > 1.25 ? (perfRatio / 1.25) - 1 : 0;\n  }\n  \n  return partialRisingStar;\n}\n\n/**\n * Calcola il valore Emerging parziale\n */\nfunction calculatePartialEmerging(player, avgPerformance) {\n  let partialEmerging = 0;\n  \n  if (!player.emerging && !player.superStar && player.age < 30 && player.latestLeagueCluster == 1) {\n    const perfRatio = player.performance / avgPerformance;\n    partialEmerging = perfRatio > 1.25 ? perfRatio - 1 : 0;\n  }\n  \n  return partialEmerging;\n}\n\n/**\n * Funzione principale per l'analisi delle performance\n */\nfunction analyzePerformance(msg) {\n  console.log(\"FASE 1: CALCOLO VALORI DI PERFORMANCE\");\n  \n  try {\n    const TheFootballTree = msg.footballTree;\n    const CONFIG = msg.config;\n    const maxMinutes = CONFIG.MAX_MINUTES;\n    \n    let maxAbsind = 0;       // Usata nel calcolo del fatmol\n    let totFatmol = 0;       // Usata nel calcolo dell'effectiveness\n    let maxFatmol = 0;       // Usata nel calcolo dell'effectiveness\n    let numOfValidPlayers = 0;\n    let playersByGroupAndCluster = {};\n    \n    console.log(\"Calculating Performance, Absing, Rising Star, MAXABSIND\");\n    // Prima fase: calcolo performance e absind\n    Object.keys(TheFootballTree).forEach(leagueId => {\n      TheFootballTree[leagueId].Clubs.forEach(club => { \n        club.Players.forEach(player => {\n          // Calcolo minuteShare (percentuale di minuti giocati rispetto al massimo)\n          const minuteShare = (player.minutes / maxMinutes) * 100;\n          \n          // Calcolo Performance\n          const ageThreshold = player.simulating === true ? 16 : 23;\n          const mixedMicroMacroIndex = player.avgMicroIndex * 0.9 + player.avgMacroIndex * 0.1;\n          \n          player.performance = calculatePerformance(\n            mixedMicroMacroIndex, \n            player.minutes, \n            player.age, \n            ageThreshold, \n            minuteShare, \n            maxMinutes\n          );\n          \n          // Calcolo ABSIND (indice di performance assoluto)\n          player.absind = (((player.performance * 0.9) + (player.experience * 0.1)) * player.latestRoleWeight) / 39 + 1;\n          \n          // Aggiornamento maxAbsind\n          maxAbsind = Math.max(maxAbsind, player.absind);\n          \n          numOfValidPlayers++;\n          \n          // DIVISIONE IN GRUPPI e CLUSTER\n          // Inizializzazione delle strutture dati\n          if (playersByGroupAndCluster[player.latestRoleGroup] === undefined) {\n            playersByGroupAndCluster[player.latestRoleGroup] = {};\n          }\n          \n          if (playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster] === undefined) {\n            playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster] = { \n              performance: 0, \n              count: 0, \n              avgPerformance: 0 \n            };\n          }\n          \n          // Aggiornamento statistiche per gruppo e cluster\n          const groupCluster = playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster];\n          groupCluster.performance += player.performance;\n          groupCluster.count++;\n          groupCluster.avgPerformance = groupCluster.performance / groupCluster.count;\n        });\n      });\n    });\n    \n    // Seconda fase: calcolo Rising Star ed Emerging\n    let maxPartialRisingStar = 0;\n    let maxPartialEmerging = 0;\n    \n    console.log(\"Calculating Emerging\");\n    Object.keys(TheFootballTree).forEach(leagueId => {\n      TheFootballTree[leagueId].Clubs.forEach(club => {\n        club.Players.forEach(player => {\n          // RISING STAR\n          player.risingStar = (\n            player.performance > 60 && \n            player.age < 24 && \n            player.latestLeagueCluster < 4 && \n            player.avgPlayedMinuteShare > 0.175\n          ) ? true : false;\n          \n          // PARTIAL RISING STAR\n          player.tentativePartialRisingStar = calculatePartialRisingStar(\n            player, \n            playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].avgPerformance\n          );\n          \n          maxPartialRisingStar = Math.max(maxPartialRisingStar, player.tentativePartialRisingStar);\n          \n          // EMERGING\n          player.emerging = calculateEmergingStatus(\n            player, \n            playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].avgPerformance\n          );\n          \n          // PARTIAL EMERGING\n          player.tentativePartialEmerging = calculatePartialEmerging(\n            player, \n            playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].avgPerformance\n          );\n          \n          maxPartialEmerging = Math.max(maxPartialEmerging, player.tentativePartialEmerging);\n        });\n      });\n    });\n    \n    // Terza fase: calcolo FATMOL, normalizzazione delle variabili\n    console.log(\"Calculating FATMOL, Final Emerging and Rising\");\n    Object.keys(TheFootballTree).forEach(leagueId => {\n      TheFootballTree[leagueId].Clubs.forEach(club => {\n        club.Players.forEach(player => {\n          // Normalizzazione dei valori parziali\n          player.partialEmerging = player.tentativePartialEmerging / maxPartialEmerging;\n          player.partialEmerging = Math.min(player.partialEmerging, 1);\n          \n          player.partialRisingStar = player.tentativePartialRisingStar / maxPartialRisingStar;\n          player.partialRisingStar = Math.min(player.partialRisingStar, 1);\n          \n          // Calcolo premi\n          const nteamAward = player.nationalTeamPlayer == 1 ? 0.33 : 0;\n          const emergingAward = player.emerging == 1 ? 0.33 : 0;\n          const partialEmergingAward = player.partialEmerging / 3;\n          const risingStarAward = player.risingStar == 1 ? 0.33 : 0;\n          const partialRisingStarAward = player.partialRisingStar / 3;\n          const superStarAward = player.superStar == 1 ? 0.667 : 0;\n          \n          // Calcolo FATMOL\n          const tmpFatmol = player.absind + nteamAward + emergingAward + \n                           partialEmergingAward + risingStarAward + \n                           partialRisingStarAward + superStarAward;\n          \n          player.fatmol = tmpFatmol;\n          \n          // Aggiornamento totali e massimi\n          totFatmol += player.fatmol;\n          maxFatmol = Math.max(maxFatmol, player.fatmol);\n        });\n      });\n    });\n    \n    // Quarta fase: calcolo Effectiveness e Maturity\n    const avgFatmol = totFatmol / numOfValidPlayers;\n    let minNotZeroEffectivness = 100;\n    \n    console.log(\"Calculating EFFECTIVENESS AND MATURITY\");\n    Object.keys(TheFootballTree).forEach(leagueId => {\n      TheFootballTree[leagueId].Clubs.forEach(club => {\n        club.Players.forEach(player => {\n          // Calcolo EFFECTIVENESS\n          player.effectiveness = (player.fatmol / maxFatmol) * 100;\n          \n          if (player.effectiveness > 0 && player.effectiveness < minNotZeroEffectivness) {\n            minNotZeroEffectivness = player.effectiveness;\n          }\n          \n          // Calcolo MATURITY\n          const emergingReward = player.emerging == 1 ? 0.5 : 0;\n          const risingStarReward = player.risingStar == 1 ? 2 : 0;\n          \n          player.maturity = calculateMaturity(player.age, player.fatmol, emergingReward, risingStarReward);\n        });\n      });\n    });\n    \n    // Quinta fase: calcolo Modified Effectiveness e Uniqueness\n    console.log(\"Calculating MOD EFFECTIVENESS\");\n    let minNotZeroUniqueness = 100;\n    \n    Object.keys(TheFootballTree).forEach(leagueId => {\n      TheFootballTree[leagueId].Clubs.forEach(club => {\n        club.Players.forEach(player => {\n          // Calcolo MODIFIED EFFECTIVENESS\n          player.modEffectiveness = ((player.effectiveness - minNotZeroEffectivness) / (100 - minNotZeroEffectivness)) * 100;\n          \n          // Aggiornamento UNIQUENESS\n          if (player.effectiveness > 0) {\n            player.latestUniqueness = (0.7 * player.modEffectiveness) + (player.latestUniqueness * 0.3);\n          } else {\n            player.latestUniqueness = 0.7 * player.modEffectiveness;\n          }\n          \n          // Normalizzazione UNIQUENESS\n          if (player.latestUniqueness > 79.1) {\n            player.latestUniqueness = 100;\n          } else if (player.latestUniqueness > 0 && player.latestUniqueness <= 79.1) {\n            player.latestUniqueness = Math.sqrt(player.latestUniqueness / 79.1) * 100;\n          }\n          \n          // Aggiornamento minNotZeroUniqueness\n          if (player.latestUniqueness > 0 && player.latestUniqueness < minNotZeroUniqueness) {\n            minNotZeroUniqueness = player.latestUniqueness;\n          }\n        });\n      });\n    });\n    \n    // Sesta fase: calcolo Relative Weight in Club\n    console.log(\"Calculating RELATIVE WEIGHT IN CLUB\");\n    Object.keys(TheFootballTree).forEach(leagueId => {\n      TheFootballTree[leagueId].Clubs.forEach(club => {\n        club.totFatmol = 0;\n        club.exponentialTotFatmol = 0;\n        \n        club.Players.forEach(player => {\n          club.totFatmol += player.fatmol;\n          club.exponentialTotFatmol += Math.pow(player.fatmol, 1.7);\n        });\n      });\n    });\n    \n    // Aggiornamento del messaggio con i risultati dell'analisi\n    msg.footballTree = TheFootballTree;\n    msg.playersByGroupAndCluster = playersByGroupAndCluster;\n    msg.minNotZeroEffectivness = minNotZeroEffectivness;\n    msg.minNotZeroUniqueness = minNotZeroUniqueness;\n    msg.maxFatmol = maxFatmol;\n    msg.avgFatmol = totFatmol / numOfValidPlayers;\n    msg.numOfValidPlayers = numOfValidPlayers;\n    \n    console.log(`Performance analyzata per ${numOfValidPlayers} giocatori. MaxFatmol: ${maxFatmol.toFixed(2)}`);\n    \n    return msg;\n  } catch (error) {\n    console.error(\"Errore nell'analisi delle performance:\", error);\n    msg.error = error.message;\n    return msg;\n  }\n}\n\nreturn analyzePerformance(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1020,
        "y": 480,
        "wires": [
            [
                "66e3b30663d06617"
            ]
        ]
    },
    {
        "id": "66e3b30663d06617",
        "type": "function",
        "z": "1b980fd89607dc71",
        "name": "3 - Group ",
        "func": "/**\n * Node-RED Function Node: Analisi dei Gruppi\n * \n * Questo nodo raggruppa i giocatori per vari criteri e calcola statistiche aggregate.\n */\n\n// Importazione delle definizioni degli oggetti\nconst Player = global.get(\"ThePlayerObject\");\nconst Error = global.get(\"TheErrorObject\");\nconst PlayerError = global.get(\"ThePlayerErrorObject\");\nconst Utils = global.get(\"UTILS\");\n\n/**\n * Funzione principale per l'analisi dei gruppi\n */\nfunction groupPlayersAndCalculateStats(msg) {\n  console.log(\"FASE 2: DIVISIONE IN GRUPPI E CALCOLO\");\n  \n  try {\n    const TheFootballTree = msg.footballTree;\n    \n    let playersByGroup = {};\n    let playersByGroupAndClubCluster = {};\n    \n    // Prima fase: divisione giocatori in gruppi\n    Object.keys(TheFootballTree).forEach(leagueId => {\n      TheFootballTree[leagueId].Clubs.forEach(club => {\n        club.Players.forEach(player => {\n          // PLAYERS BY GROUP\n          addPlayerToGroup(playersByGroup, player);\n          \n          // PLAYERS BY GROUP AND CLUB CLUSTER\n          addPlayerToGroupAndClubCluster(playersByGroupAndClubCluster, player);\n        });\n      });\n    });\n    \n    // Seconda fase: calcolo statistiche per gruppi e club cluster\n    calculateGroupAndClusterStats(playersByGroupAndClubCluster);\n    \n    // Terza fase: calcolo statistiche per gruppo\n    calculateGroupStats(playersByGroup);\n    \n    // Aggiornamento del messaggio con i risultati dell'analisi\n    msg.playersByGroup = playersByGroup;\n    msg.playersByGroupAndClubCluster = playersByGroupAndClubCluster;\n    \n    // Log delle statistiche\n    let totalGroups = Object.keys(playersByGroup).length;\n    let totalGroupsAndClusters = Object.keys(playersByGroupAndClubCluster).reduce((count, group) => {\n      return count + Object.keys(playersByGroupAndClubCluster[group]).length;\n    }, 0);\n    \n    console.log(`Gruppi analizzati: ${totalGroups} gruppi di ruolo, ${totalGroupsAndClusters} combinazioni gruppo-cluster`);\n    \n    return msg;\n  } catch (error) {\n    console.error(\"Errore nell'analisi dei gruppi:\", error);\n    msg.error = error.message;\n    return msg;\n  }\n}\n\n/**\n * Aggiunge un giocatore a un gruppo\n */\nfunction addPlayerToGroup(playersByGroup, player) {\n  if (playersByGroup[player.latestRoleGroup] === undefined) {\n    playersByGroup[player.latestRoleGroup] = { \"Players\": {} };\n  }\n  \n  playersByGroup[player.latestRoleGroup].Players[player.playerId] = {\n    age: player.age,\n    transferPrice: player.transferPrice,\n    fatmol: player.fatmol\n  };\n}\n\n/**\n * Aggiunge un giocatore a un gruppo e cluster\n */\nfunction addPlayerToGroupAndClubCluster(playersByGroupAndClubCluster, player) {\n  if (playersByGroupAndClubCluster[player.latestRoleGroup] === undefined) {\n    playersByGroupAndClubCluster[player.latestRoleGroup] = {};\n  }\n  \n  if (playersByGroupAndClubCluster[player.latestRoleGroup][player.currentClubCluster] === undefined) {\n    playersByGroupAndClubCluster[player.latestRoleGroup][player.currentClubCluster] = {};\n  }\n  \n  if (playersByGroupAndClubCluster[player.latestRoleGroup][player.currentClubCluster].Players === undefined) {\n    playersByGroupAndClubCluster[player.latestRoleGroup][player.currentClubCluster].Players = {};\n  }\n  \n  playersByGroupAndClubCluster[player.latestRoleGroup][player.currentClubCluster].Players[player.playerId] = {\n    age: player.age,\n    transferPrice: player.transferPrice,\n    fatmol: player.fatmol\n  };\n}\n\n/**\n * Calcola statistiche per gruppi e cluster di club\n */\nfunction calculateGroupAndClusterStats(playersByGroupAndClubCluster) {\n  Object.keys(playersByGroupAndClubCluster).forEach(roleGroup => {\n    Object.keys(playersByGroupAndClubCluster[roleGroup]).forEach(clubCluster => {\n      const players = playersByGroupAndClubCluster[roleGroup][clubCluster].Players;\n      const numPlayersInGroupCluster = Object.keys(players).length;\n      const avgTreshold = 4.51;\n      \n      let maxFatmol = 0;\n      let maxAge = 0;\n      let totFatmol = 0;\n      let totAge = 0;\n      let totTransferPrice = 0;\n      let totTransferPriceWithTreshold = 0;\n      let numPlayersTransferPriceWithTreshold = 0;\n      \n      Object.keys(players).forEach(playerId => {\n        const player = players[playerId];\n        \n        maxFatmol = Math.max(maxFatmol, player.fatmol);\n        maxAge = Math.max(maxAge, player.age);\n        \n        totFatmol += player.fatmol;\n        totAge += player.age;\n        totTransferPrice += player.transferPrice;\n        \n        if (player.transferPrice >= avgTreshold) {\n          totTransferPriceWithTreshold += player.transferPrice;\n          numPlayersTransferPriceWithTreshold++;\n        }\n      });\n      \n      // Salvataggio statistiche\n      const groupCluster = playersByGroupAndClubCluster[roleGroup][clubCluster];\n      groupCluster.maxFatmol = maxFatmol;\n      groupCluster.maxAge = maxAge;\n      groupCluster.avgFatmol = totFatmol / numPlayersInGroupCluster;\n      groupCluster.avgAge = totAge / numPlayersInGroupCluster;\n      groupCluster.totFatmol = totFatmol;\n      groupCluster.numPlayersInGroupCluster = numPlayersInGroupCluster;\n    });\n  });\n}\n\n/**\n * Calcola statistiche per gruppo\n */\nfunction calculateGroupStats(playersByGroup) {\n  Object.keys(playersByGroup).forEach(roleGroup => {\n    const players = playersByGroup[roleGroup].Players;\n    const numPlayersInGroup = Object.keys(players).length;\n    const avgTreshold = 4.51;\n    \n    let maxFatmol = 0;\n    let maxAge = 0;\n    let totFatmol = 0;\n    let totAge = 0;\n    let totTransferPrice = 0;\n    let totTransferPriceWithTreshold = 0;\n    let numPlayersTransferPriceWithTreshold = 0;\n    \n    Object.keys(players).forEach(playerId => {\n      const player = players[playerId];\n      \n      maxFatmol = Math.max(maxFatmol, player.fatmol);\n      maxAge = Math.max(maxAge, player.age);\n      \n      totFatmol += player.fatmol;\n      totAge += player.age;\n      totTransferPrice += player.transferPrice;\n      \n      if (player.transferPrice >= avgTreshold) {\n        totTransferPriceWithTreshold += player.transferPrice;\n        numPlayersTransferPriceWithTreshold++;\n      }\n    });\n    \n    // Salvataggio statistiche\n    playersByGroup[roleGroup].maxFatmol = maxFatmol;\n    playersByGroup[roleGroup].maxAge = maxAge;\n    playersByGroup[roleGroup].avgFatmol = totFatmol / numPlayersInGroup;\n    playersByGroup[roleGroup].avgAge = totAge / numPlayersInGroup;\n    playersByGroup[roleGroup].avgTransferPrice = totTransferPrice / numPlayersInGroup;\n    playersByGroup[roleGroup].avgTransferPriceWithTreshold = totTransferPriceWithTreshold / numPlayersTransferPriceWithTreshold;\n    playersByGroup[roleGroup].numPlayersInGroup = numPlayersInGroup;\n    playersByGroup[roleGroup].numPlayersTransferPriceWithTreshold = numPlayersTransferPriceWithTreshold;\n  });\n}\n\nreturn groupPlayersAndCalculateStats(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 480,
        "wires": [
            [
                "27deb9d71b5a243c"
            ]
        ]
    },
    {
        "id": "27deb9d71b5a243c",
        "type": "function",
        "z": "1b980fd89607dc71",
        "name": "4 - Economic",
        "func": "/**\n * Node-RED Function Node: Analisi Economica\n * \n * Questo nodo esegue l'analisi economica dei giocatori.\n */\n\n// Importazione delle definizioni degli oggetti\nconst Player = global.get(\"ThePlayerObject\");\nconst Error = global.get(\"TheErrorObject\");\nconst PlayerError = global.get(\"ThePlayerErrorObject\");\nconst Utils = global.get(\"UTILS\");\n\n/**\n * Calcola il cluster club atteso per un giocatore\n */\nfunction calculateExpectedClubCluster(ftRatio, currentClubCluster, simulating, minutes) {\n  let expectedCluster;\n  \n  if (ftRatio >= 1.7) {\n    expectedCluster = currentClubCluster - 3;\n  } else if (ftRatio >= 1.5 && ftRatio < 1.7) {\n    expectedCluster = currentClubCluster - 2;\n  } else if (ftRatio >= 1.2 && ftRatio < 1.5) {\n    expectedCluster = currentClubCluster - 1;\n  } else if (ftRatio >= 1 && ftRatio < 1.2) {\n    expectedCluster = currentClubCluster;\n  } else if (ftRatio >= 0.5 && ftRatio < 1) {\n    expectedCluster = currentClubCluster + 1;\n  } else {\n    expectedCluster = currentClubCluster + 2;\n  }\n  \n  if (simulating === true) {\n    expectedCluster = currentClubCluster;\n  }\n  \n  // Aggiustamenti\n  if (minutes < 90) {\n    expectedCluster = currentClubCluster + 6;\n  }\n  \n  // Limiti\n  return Math.max(1, Math.min(17, expectedCluster));\n}\n\n/**\n * Calcola il rank club atteso per un giocatore\n */\nfunction calculateExpectedClubRank(ftRatio, currentClubRank, simulating) {\n  let expectedRank;\n  \n  if (ftRatio >= 2) {\n    expectedRank = currentClubRank - 6;\n  } else if (ftRatio >= 1.75 && ftRatio < 2) {\n    expectedRank = currentClubRank - 4;\n  } else if (ftRatio >= 1.5 && ftRatio < 1.75) {\n    expectedRank = currentClubRank - 3;\n  } else if (ftRatio >= 1.2 && ftRatio < 1.5) {\n    expectedRank = currentClubRank - 2;\n  } else if (ftRatio >= 1 && ftRatio < 1.2) {\n    expectedRank = currentClubRank;\n  } else if (ftRatio >= 0.5 && ftRatio < 1) {\n    expectedRank = currentClubRank + 1;\n  } else {\n    expectedRank = currentClubRank + 2;\n  }\n  \n  if (simulating === true) {\n    expectedRank = currentClubRank;\n  }\n  \n  // Limiti\n  return Math.max(1, Math.min(770, expectedRank));\n}\n\n/**\n * Calcola il valore contabile residuo\n */\nfunction calculateResidualBookValue(player) {\n  if (!player.contractType.includes(\"Propriet\") || (player.contractType.includes(\"Propriet\") && player.transferPriceYear > 2023)) {\n    return ((5 - (new Date().getFullYear() - player.transferPriceYear)) / 5) * player.transferPrice;\n  } else {\n    return (player.startContract && Utils.calculateAge(player.startContract) > 4) ? \n          0 : \n          (player.transferPrice * (player.remainingYearsOfContract / player.totalYearsOfContract));\n  }\n}\n\nreturn analyzeEconomics(msg);\n\n/**\n * Calcola i top club per cluster in base al salario\n */\nfunction calculateTopClusterTeamBySalary(TheFootballTree, topClusterTeamBySalary) {\n  Object.keys(TheFootballTree).forEach(leagueId => {\n    TheFootballTree[leagueId].Clubs.forEach(club => {\n      if (topClusterTeamBySalary[club.cluster] == undefined) {\n        topClusterTeamBySalary[club.cluster] = {};\n      }\n      \n      if (!topClusterTeamBySalary[club.cluster].salaryNetFair || \n          topClusterTeamBySalary[club.cluster].salaryNetFair < club.salaryNetFair) {\n        topClusterTeamBySalary[club.cluster] = club;\n      }\n    });\n  });\n}\n\n/**\n * Calcola i club per rank in base al salario\n */\nfunction calculateClubSalaryByRank(TheFootballTree, clubSalaryByRank) {\n  Object.keys(TheFootballTree).forEach(leagueId => {\n    if (leagueId !== \"arab\") { // Escludiamo i club della lega araba dai rank\n      TheFootballTree[leagueId].Clubs.forEach(club => {\n        if (clubSalaryByRank[club.clubRank] == undefined) {\n          clubSalaryByRank[club.clubRank] = {};\n        }\n        \n        if (!clubSalaryByRank[club.clubRank].salaryNetFair || \n            clubSalaryByRank[club.clubRank].salaryNetFair < club.salaryNetFair) {\n          clubSalaryByRank[club.clubRank] = club;\n        }\n      });\n    }\n  });\n}\n\n/**\n * Analizza economicamente un singolo giocatore\n */\nfunction analyzePlayerEconomics(player, club, playersByGroupAndClubCluster, topClusterTeamBySalary, clubSalaryByRank, CONFIG) {\n  // EXPECTED CLUB CLUSTER\n  const ftRatio = player.fatmol / playersByGroupAndClubCluster[player.latestRoleGroup][player.currentClubCluster].avgFatmol;\n  player.expectedClubCluster = calculateExpectedClubCluster(ftRatio, player.currentClubCluster, player.simulating, player.minutes);\n  \n  // EXPECTED CLUB RANK\n  player.expectedClubRank = calculateExpectedClubRank(ftRatio, player.currentClubRank, player.simulating);\n  \n  // Gestione caso speciale per expected club rank\n  if (clubSalaryByRank[player.expectedClubRank] === undefined) {\n    while (clubSalaryByRank[player.expectedClubRank] === undefined) {\n      player.expectedClubRank--;\n    }\n  }\n  \n  // WEIGHT IN CLUB\n  player.weightInClub = Math.pow(player.fatmol, 1.7) / club.exponentialTotFatmol;\n  \n  // WEIGHT IN TOP TEAM EXPECTED CLUSTER CLUB\n  player.weightInExpectedClubCluster = Math.pow(player.fatmol, 1.7) / topClusterTeamBySalary[player.expectedClubCluster].exponentialTotFatmol;\n  \n  // WEIGHT IN TOP TEAM EXPECTED CLUB RANK\n  player.weightInExpectedClubRank = Math.pow(player.fatmol, 1.7) / clubSalaryByRank[player.expectedClubRank].exponentialTotFatmol;\n  \n  // OPTIMAL SALARY\n  player.salaryOptimal = club.salaryNetFair * player.weightInClub;\n  \n  // POTENTIAL SALARY\n  player.salaryPotential = player.simulating ? \n                          (club.salaryNetFair * player.weightInClub) : \n                          (clubSalaryByRank[player.expectedClubRank].salaryNetFair * player.weightInExpectedClubRank);\n  \n  // BENEFITS\n  player.benefits = Utils.actualValueSum(player.fatmol * player.salaryOptimal, player.remainingYearsOfContract, CONFIG.DISCOUNT_RATE);\n  \n  // COSTS\n  player.costs = Utils.actualValueSum(player.salaryGross, player.remainingYearsOfContract, CONFIG.DISCOUNT_RATE);\n  \n  // OPTVAL\n  player.optval = player.maturity == 0 ? 0 : Utils.blackScholes(\n    player.benefits,\n    player.costs,\n    player.maturity,\n    (player.latestMicroVolatility / 100),\n    CONFIG.BLACK_SCHOLES_RATE,\n    \"call\"\n  ) || 0;\n  \n  // RESIDUAL VALUE\n  player.residualValue = player.benefits - player.costs + player.optval;\n  \n  // RESIDUAL BOOK VALUE\n  player.residualBookValue = calculateResidualBookValue(player);\n  player.residualBookValue = Math.max(player.residualBookValue, 0);\n  \n  // BOOK VALUE RESIDUAL CONTRACT RATIO\n  player.bvResContractRatio = player.residualBookValue / player.remainingYearsOfContract;\n  \n  // PLAYER'S COSTS\n  player.optimalCosts = Utils.actualValueSum(player.salaryOptimal * player.currentLeagueTaxRate, player.remainingYearsOfContract, CONFIG.DISCOUNT_RATE);\n}\n\n/**\n * Funzione principale per l'analisi economica\n */\nfunction analyzeEconomics(msg) {\n  console.log(\"FASE 3: ANALISI ECONOMICA DEI GIOCATORI\");\n  \n  try {\n    const TheFootballTree = msg.footballTree;\n    const playersByGroupAndClubCluster = msg.playersByGroupAndClubCluster;\n    const CONFIG = msg.config;\n    \n    let topClusterTeamBySalary = {};\n    let clubSalaryByRank = {};\n    \n    let globalMaxFatmol = 0;\n    let totalGlobalFatmol = 0;\n    let avgGlobalFatmol = 0;\n    let fatmolCounter = 0;\n    \n    // Fase 1: Calcolo top cluster team by salary\n    console.log(\"TOP CLUSTER TEAM BY SALARY\");\n    calculateTopClusterTeamBySalary(TheFootballTree, topClusterTeamBySalary);\n    \n    // Fase 2: Calcolo club salary by club rank\n    console.log(\"CLUB SALARY BY CLUB RANK\");\n    calculateClubSalaryByRank(TheFootballTree, clubSalaryByRank);\n    \n    // Fase 3: Analisi economica sui giocatori\n    console.log(\"PLAYER BEGINS: WEIGHT, OPTIMAL SALARY, BENEFITS, COSTS, OPTVAL, RESIDUALVALUE, RESIDUAL BOOK VALUE, OPTIMAL COST\");\n    Object.keys(TheFootballTree).forEach(leagueId => {\n      TheFootballTree[leagueId].Clubs.forEach(club => {\n        club.Players.forEach(player => {\n          // Aggiornamento contatori globali\n          fatmolCounter++;\n          totalGlobalFatmol += player.fatmol;\n          globalMaxFatmol = Math.max(globalMaxFatmol, player.fatmol);\n          avgGlobalFatmol = totalGlobalFatmol / fatmolCounter;\n          \n          // Analisi economica del singolo giocatore\n          analyzePlayerEconomics(\n            player, \n            club, \n            playersByGroupAndClubCluster,\n            topClusterTeamBySalary,\n            clubSalaryByRank,\n            CONFIG\n          );\n        });\n      });\n    });\n    \n    console.log(\"PLAYER DONE: WEIGHT, OPTIMAL SALARY, BENEFITS, COSTS, OPTVAL, RESIDUALVALUE, RESIDUAL BOOK VALUE, OPTIMAL COST\");\n    \n    // Aggiornamento del messaggio con i risultati\n    msg.footballTree = TheFootballTree;\n    msg.globalMaxFatmol = globalMaxFatmol;\n    msg.avgGlobalFatmol = avgGlobalFatmol;\n    msg.topClusterTeamBySalary = topClusterTeamBySalary; \n    msg.clubSalaryByRank = clubSalaryByRank;\n    \n    console.log(`Analisi economica completata per ${fatmolCounter} giocatori. GlobalMaxFatmol: ${globalMaxFatmol.toFixed(2)}`);\n    \n    return msg;\n  } catch (error) {\n    console.error(\"Errore nell'analisi economica:\", error);\n    msg.error = error.message;\n    return msg;\n  }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1430,
        "y": 480,
        "wires": [
            [
                "00344cd2c132c022"
            ]
        ]
    },
    {
        "id": "00344cd2c132c022",
        "type": "function",
        "z": "1b980fd89607dc71",
        "name": "5 - Pricing",
        "func": "/**\n * Node-RED Function Node: Analisi Prezzi\n * \n * Questo nodo calcola i prezzi potenziali dei giocatori.\n */\n\n// Importazione delle definizioni degli oggetti\nconst Player = global.get(\"ThePlayerObject\");\nconst Error = global.get(\"TheErrorObject\");\nconst PlayerError = global.get(\"ThePlayerErrorObject\");\nconst Utils = global.get(\"UTILS\");\n\n/**\n * Calcola gli anni potenziali di contratto\n */\nfunction calculatePotentialYearsOfContract(age, risingStar) {\n  let years;\n  \n  if (age > 32) {\n    years = 1;\n  } else if (age == 32) {\n    years = 2;\n  } else if (age > 22 && age <= 25) {\n    years = 4;\n  } else if (age > 25 && age <= 31) {\n    years = 3;\n  } else {\n    years = 5;\n  }\n  \n  return risingStar ? years + 1 : years;\n}\n\n/**\n * Calcola il ValNoVan di un giocatore\n */\nfunction setValNoVan(player, clubCluster, playersByGroup, avgGlobalFatmol, globalMaxFatmol) {\n  try {\n    // RY\n    const groupAvgAge = playersByGroup[player.latestRoleGroup].avgAge;\n    const maxAgeInGroup = playersByGroup[player.latestRoleGroup].maxAge;\n    \n    const RY = groupAvgAge / player.age;\n    \n    // RP\n    const groupAvgFatmol = playersByGroup[player.latestRoleGroup].avgFatmol;\n    \n    // Reward per cluster\n    let RPClusterReward;\n    if (clubCluster > 13) {\n      RPClusterReward = 0.2;\n    } else if (clubCluster > 9) {\n      RPClusterReward = 0.25;\n    } else if (clubCluster > 8) {\n      RPClusterReward = 0.28;\n    } else if (clubCluster > 6) {\n      RPClusterReward = 0.3;\n    } else if (clubCluster > 3) {\n      RPClusterReward = 0.8;\n    } else {\n      RPClusterReward = 1;\n    }\n    \n    RPClusterReward = player.minutes < 90 ? 0.1 : RPClusterReward;\n    \n    // Reward per rapporto FATMOL\n    const RPFatmolRatio = player.fatmol / avgGlobalFatmol;\n    let RPFatmolReward;\n    \n    if (RPFatmolRatio > 1.5) {\n      RPFatmolReward = 1;\n    } else if (RPFatmolRatio > 1.25 && RPFatmolRatio <= 1.5) {\n      RPFatmolReward = 0.571429;\n    } else if (RPFatmolRatio > 1 && RPFatmolRatio <= 1.25) {\n      RPFatmolReward = 0.429185;\n    } else {\n      RPFatmolReward = 0.285714;\n    }\n    \n    // Reward per SuperStar\n    const RPSuperStarReward = player.superStar ? 1.2 : ((player.fatmol / globalMaxFatmol) > 0.6 ? 0.8 : 0.6);\n    \n    // Reward per performance\n    const RPPerfReward = player.emerging == 1 ? (((player.fatmol * 1.3) + globalMaxFatmol) / 2) : player.fatmol;\n    \n    // Calcolo RP finale\n    const RP = (RPPerfReward / groupAvgFatmol) * RPFatmolReward * RPSuperStarReward * RPClusterReward;\n    \n    // PM (prezzo medio)\n    const PM = playersByGroup[5].avgTransferPriceWithTreshold * player.percTransfPrice; // GRUPPO 5 FISSO\n    \n    // Salvataggio valori intermedi\n    player.avgTransferPrice = PM;\n    player.PM = PM;\n    player.RY = RY;\n    player.RP = RP;\n    \n    // Calcolo ValNoVan finale\n    player.valNoVan = RP * RY * PM * 2 * player.latestRoleWeight;\n  } catch (e) {\n    console.error(\"Errore in setValNoVan:\", e);\n  }\n}\n\n/**\n * Inizializza le strutture dati per le medie ValNoVan\n */\nfunction initializeValNoVanStructures(avgValNoVanGroupAgeRangeClubCluster, player, cc) {\n  if (avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup] === undefined) {\n    avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup] = {};\n  }\n  \n  if (avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"] === undefined) {\n    avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"] = {};\n  }\n  \n  if (avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"] === undefined) {\n    avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"] = {};\n  }\n  \n  // Inizializzazione dati per cluster specifici\n  if (avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc] === undefined) {\n    avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc] = {\n      \"sum\": 0,\n      \"sumW\": 0,\n      \"count\": 0,\n      \"avg\": 0,\n      \"avgW\": 0\n    };\n  }\n  \n  if (avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc] === undefined) {\n    avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc] = {\n      \"sum\": 0,\n      \"sumW\": 0,\n      \"count\": 0,\n      \"avg\": 0,\n      \"avgW\": 0\n    };\n  }\n}\n\n/**\n * Aggiorna le statistiche ValNoVan per fascia d'età\n */\nfunction updateValNoVanStatsByAge(avgValNoVanGroupAgeRangeClubCluster, player, cc, valnovan, wVANVNV_CL) {\n  if (player.age > 29) {\n    // Giocatori over 30\n    const stats = avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc];\n    \n    stats.count++;\n    stats.sum += valnovan;\n    stats.sumW += wVANVNV_CL;\n    stats.avg = stats.sum / stats.count;\n    stats.avgW = stats.sumW / stats.count;\n  } else {\n    // Giocatori under 30\n    const stats = avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc];\n    \n    stats.count++;\n    stats.sum += valnovan;\n    stats.sumW += wVANVNV_CL;\n    stats.avg = stats.sum / stats.count;\n    stats.avgW = stats.sumW / stats.count;\n  }\n}\n\n/**\n * Calcola le medie ValNoVan per gruppi, età e cluster\n */\nfunction calculateAvgsValNoVan(TheFootballTree, avgValNoVanGroupAgeRangeClubCluster) {\n  try {\n    console.log(\"CALCOLO avgsValNoVan\");\n    \n    let maxValNoVan = 0;\n    let maxwVANVNV_CL = 0;\n    \n    Object.keys(TheFootballTree).forEach(leagueId => {\n      TheFootballTree[leagueId].Clubs.forEach(club => {\n        club.Players.forEach(player => {\n          maxValNoVan = Math.max(player.valNoVan, maxValNoVan);\n          player.maxEMediePesate = 0;\n          \n          // Calcolo valnovan e van con limiti vendita\n          let valnovan = club.noLimiteVendita == 1 ? \n                        player.valNoVan : \n                        (player.valNoVan * 1.2 > club.maxtr ? \n                          (player.valNoVan * 0.3 + (1.2 * club.maxtr) * 0.7) : \n                          player.valNoVan);\n          \n          let van = club.noLimiteVendita == 1 ? \n                   player.van : \n                   (player.van * 1.2 > club.maxtr ? \n                     (player.van * 0.3 + (1.2 * club.maxtr) * 0.7) : \n                     player.van);\n          \n          // Calcolo wVANVNV_CL\n          const wVANVNV_CL = valnovan * 0.6 + van * 0.4;\n          maxwVANVNV_CL = Math.max(wVANVNV_CL, maxwVANVNV_CL);\n          player.wVANVNV_CL = wVANVNV_CL;\n          \n          // Calcolo cluster corretto\n          const cc = club.cluster >= 2 && (player.valNoVan * 0.6 + player.van * 0.4) > 55 ? \n                    (club.cluster - 1) : \n                    club.cluster;\n          \n          // Inizializzazione strutture dati per medie\n          initializeValNoVanStructures(avgValNoVanGroupAgeRangeClubCluster, player, cc);\n          \n          // Aggiornamento statistiche per età\n          updateValNoVanStatsByAge(avgValNoVanGroupAgeRangeClubCluster, player, cc, valnovan, wVANVNV_CL);\n        });\n      });\n    });\n    \n    return maxwVANVNV_CL;\n  } catch (e) {\n    console.error(\"Errore in calculateAvgsValNoVan:\", e);\n    return 0;\n  }\n}\n\n/**\n * Imposta il prezzo potenziale di un giocatore\n */\nfunction setPotentialPrice(player, club, avgValNoVanGroupAgeRangeClubCluster, maxwVANVNV_CL) {\n  try {\n    const wVANVNV_CL = player.wVANVNV_CL;\n    const wVANVNV = player.valNoVan * 0.6 + player.van * 0.4;\n    \n    // Calcolo cluster corretto\n    const cc = club.cluster >= 2 && wVANVNV > 55 ? (club.cluster - 1) : club.cluster;\n    \n    // Calcolo medie per età\n    const avgVNV = player.age > 29 ? \n                  avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc].avg : \n                  avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc].avg;\n    \n    const avgwVANVNV_CL = player.age > 29 ? \n                  avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc].avgW : \n                  avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc].avgW;\n    \n    // Valore default\n    player.potentialPrice = wVANVNV;\n    \n    // Casi speciali\n    if (player.age <= 31 && player.fatmol >= 2.25 && maxwVANVNV_CL / wVANVNV_CL > 2.5) {\n      if (player.emerging) {\n        // EMERGING\n        const maxEMediePesate = ((maxwVANVNV_CL * 0.2 + avgwVANVNV_CL * 0.8) * 0.5 + wVANVNV_CL * 0.5);\n        player.maxEMediePesate = maxEMediePesate;\n        \n        if (club.noLimiteVendita == 1) {\n          player.potentialPrice = Math.max(maxEMediePesate, wVANVNV_CL);\n        } else {\n          if (maxEMediePesate > (1.2 * club.maxtr)) {\n            const mm = Math.max(maxEMediePesate, wVANVNV_CL);\n            player.potentialPrice = mm * 0.3 + ((1.2 * club.maxtr) * 0.7);\n          } else {\n            player.potentialPrice = Math.max(maxEMediePesate, wVANVNV_CL);\n          }\n        }\n      } else if (player.superStar) {\n        // SUPERSTAR\n        player.potentialPrice = Math.max(\n          ((maxwVANVNV_CL * 0.3 + avgwVANVNV_CL * 0.7) * 0.9 + wVANVNV_CL * 0.1),\n          wVANVNV_CL\n        );\n      } else {\n        // ALTRI GIOCATORI\n        if (wVANVNV < avgwVANVNV_CL) {\n          player.potentialPrice = wVANVNV * 0.22 + avgwVANVNV_CL * 0.78;\n        } else {\n          player.potentialPrice = wVANVNV_CL;\n        }\n      }\n    }\n  } catch (e) {\n    console.error(\"Errore in setPotentialPrice:\", e);\n  }\n}\n\n/**\n * Funzione principale per l'analisi dei prezzi\n */\nfunction analyzePrices(msg) {\n  console.log(\"FASE 4: CALCOLO PREZZI POTENZIALI\");\n  \n  try {\n    const TheFootballTree = msg.footballTree;\n    const playersByGroup = msg.playersByGroup;\n    const avgGlobalFatmol = msg.avgGlobalFatmol;\n    const globalMaxFatmol = msg.globalMaxFatmol;\n    const CONFIG = msg.config;\n    \n    // Oggetto per le medie di ValNoVan\n    let avgValNoVanGroupAgeRangeClubCluster = {};\n    \n    console.log(\"CALCOLO VALORI POTENZIALI, VAN e VALNOVAN\");\n    Object.keys(TheFootballTree).forEach(leagueId => {\n      TheFootballTree[leagueId].Clubs.forEach(club => {\n        club.Players.forEach(player => {\n          // POTENTIAL YEARS OF CONTRACT\n          player.potentialYearsOfContract = calculatePotentialYearsOfContract(player.age, player.risingStar);\n          \n          player.expectedYearsOfContract = player.potentialYearsOfContract;\n          \n          // Calcolo benefici e costi potenziali\n          let fatmolAdjusted = Math.max(player.fatmol, 2);\n          player.benefitsPotential = Utils.actualValueSum(fatmolAdjusted * player.salaryPotential, player.expectedYearsOfContract, CONFIG.DISCOUNT_RATE);\n          \n          player.costsPotential = player.simulating ? \n                                Utils.actualValueSum(player.salaryGross, player.expectedYearsOfContract, CONFIG.DISCOUNT_RATE) : \n                                Utils.actualValueSum(player.salaryPotential * player.currentLeagueTaxRate, player.expectedYearsOfContract, CONFIG.DISCOUNT_RATE);\n          \n          // OPTVAL POTENTIAL\n          player.optvalPotential = player.maturity == 0 ? 0 : Utils.blackScholes(\n            player.benefitsPotential,\n            player.costsPotential,\n            player.maturity,\n            (player.latestMicroVolatility / 100),\n            CONFIG.BLACK_SCHOLES_RATE,\n            \"call\"\n          ) || 0;\n          \n          // VAN\n          const bcaward = (player.benefitsPotential - player.costsPotential) * 0.05 * club.premioFair;\n          player.bcaward = bcaward;\n          player.clubPremioFair = club.premioFair;\n          player.van = Math.min(player.benefitsPotential - player.costsPotential + bcaward + player.optvalPotential, 220);\n          \n          // VAL NO VAN\n          setValNoVan(player, club.cluster, playersByGroup, avgGlobalFatmol, globalMaxFatmol);\n        });\n      });\n    });\n    \n    // Calcolo delle medie di ValNoVan\n    const maxwVANVNV_CL = calculateAvgsValNoVan(TheFootballTree, avgValNoVanGroupAgeRangeClubCluster);\n    \n    console.log(\"CALCOLO POTENTIAL PRICE\");\n    Object.keys(TheFootballTree).forEach(leagueId => {\n      TheFootballTree[leagueId].Clubs.forEach(club => {\n        club.Players.forEach(player => {\n          // POTENTIAL PRICE\n          setPotentialPrice(player, club, avgValNoVanGroupAgeRangeClubCluster, maxwVANVNV_CL);\n        });\n      });\n    });\n    \n    console.log(\"*** POTENTIAL PRICE COMPLETED ***\");\n    \n    // Aggiornamento del messaggio con i risultati\n    msg.footballTree = TheFootballTree;\n    msg.avgValNoVanGroupAgeRangeClubCluster = avgValNoVanGroupAgeRangeClubCluster;\n    \n    // Prepariamo il payload finale\n    msg.payload = TheFootballTree;\n    \n    // Log delle statistiche\n    let totalPlayers = 0;\n    let totalPotentialPrice = 0;\n    \n    Object.keys(TheFootballTree).forEach(leagueId => {\n      TheFootballTree[leagueId].Clubs.forEach(club => {\n        totalPlayers += club.Players.length;\n        club.Players.forEach(player => {\n          totalPotentialPrice += player.potentialPrice || 0;\n        });\n      });\n    });\n    \n    console.log(`Prezzi potenziali calcolati per ${totalPlayers} giocatori. Prezzo medio: ${(totalPotentialPrice / totalPlayers).toFixed(2)}`);\n    \n    return msg;\n  } catch (error) {\n    console.error(\"Errore nel calcolo dei prezzi potenziali:\", error);\n    msg.error = error.message;\n    return msg;\n  }\n}\n\nreturn analyzePrices(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 480,
        "wires": [
            [
                "393fba8afaab8922"
            ]
        ]
    },
    {
        "id": "393fba8afaab8922",
        "type": "function",
        "z": "1b980fd89607dc71",
        "name": "6 - First output",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1780,
        "y": 480,
        "wires": [
            [
                "073b9911646ca165"
            ]
        ]
    },
    {
        "id": "28483aa942f4ef39",
        "type": "function",
        "z": "1b980fd89607dc71",
        "name": "8 - Expected Price",
        "func": "/**\n * Node-RED Function Node: Calcolo Expected Price\n * \n * Questo nodo calcola il prezzo atteso dei giocatori in base ai mesi rimanenti\n * di contratto e altre variabili.\n */\n\n// Importazione delle definizioni degli oggetti\nconst Player = global.get(\"ThePlayerObject\");\nconst Error = global.get(\"TheErrorObject\");\nconst PlayerError = global.get(\"ThePlayerErrorObject\");\nconst Utils = global.get(\"UTILS\");\n\n/**\n * Calcola il prezzo atteso del giocatore in base ai mesi rimanenti di contratto\n * e altre caratteristiche\n * @param {Object} player - L'oggetto giocatore\n * @returns {void} - Modifica l'oggetto player direttamente\n */\nfunction setExpectedPrice(player) {\n    // Determina il fattore beta in base ai mesi rimanenti di contratto\n    const contractRemainingMonths = player.remainingMonthsOfContract;\n    let beta;\n    \n    if (contractRemainingMonths <= 6) {\n        beta = 0;\n    } else if (contractRemainingMonths <= 12) {\n        beta = player.superstar ? 0.8 : 0.5;\n    } else if (contractRemainingMonths <= 18) {\n        beta = 0.65;\n    } else if (contractRemainingMonths <= 24) {\n        beta = 0.8;\n    } else {\n        beta = 1;\n    }\n    \n    // Calcola il prezzo atteso base\n    player.expectedPrice = player.potentialPrice * beta;\n    \n    // Considerazione clausola di rescissione\n    if (player.withdrawalClause && player.withdrawalClause !== 0) {\n        player.expectedPrice = Math.min(player.potentialPrice * beta, player.withdrawalClause);\n    }\n    \n    // Considerazione tipo di contratto\n    if (!player.contractType.includes(\"Propriet\")) {\n        player.expectedPrice = player.potentialPrice;\n    }\n}\n\n/**\n * Funzione principale per il calcolo dell'Expected Price e metriche correlate\n */\nfunction calculateExpectedPrice(msg) {\n    console.log(\"PLAYER EXPECTED PRICE BEGINS\");\n    \n    try {\n        const TheFootballTree = msg.payload || msg.footballTree;\n        const PlayersErrors = msg.PlayersErrors || [];\n        const playersByGroup = msg.playersByGroup || {};\n        const minNotZeroUniqueness = msg.minNotZeroUniqueness || 0;\n        \n        // Validazione dati\n        if (!TheFootballTree) {\n            throw new Error(\"Dati FootballTree mancanti\");\n        }\n        \n        console.log(\"CALCOLO EXPECTED PRICE\");\n        let processedPlayers = 0;\n        \n        // Elaborazione principale\n        Object.keys(TheFootballTree).forEach(leagueId => {\n            TheFootballTree[leagueId].Clubs.forEach(club => {\n                club.Players.forEach(player => {\n                    processedPlayers++;\n                    \n                    // Calcolo Expected Price\n                    setExpectedPrice(player);\n                    \n                    // Calcolo prezzo percepito\n                    const dirtyCoeff = 0.3 * ((player.latestUniqueness - minNotZeroUniqueness) / \n                                             (100 - minNotZeroUniqueness));\n                    \n                    const dirty = (1 + dirtyCoeff) * player.expectedPrice;\n                    \n                    // Calcolo del prezzo percepito con regole di mercato\n                    if (player.tmValue > dirty) {\n                        player.perceivedExpectedPrice = (player.tmValue + dirty) / 2;\n                    } else {\n                        player.perceivedExpectedPrice = dirty;\n                    }\n                    \n                    // Aggiustamento per clausola di rescissione\n                    if (player.withdrawalClause > 0 && player.perceivedExpectedPrice > player.withdrawalClause) {\n                        player.perceivedExpectedPrice = player.withdrawalClause;\n                    }\n                    \n                    // Aggiustamento rispetto al valore di mercato\n                    if (player.expectedPrice > player.tmValue) {\n                        player.perceivedExpectedPrice = player.expectedPrice;\n                    }\n                    \n                    // Calcolo metriche finanziarie aggiuntive\n                    player.residualValue = Math.min(player.residualValue, player.potentialPrice);\n                    player.capitalGain = player.expectedPrice - player.residualBookValue;\n                    player.profit = player.expectedPrice - player.residualValue;\n                    player.salaryAbsoluteDeviation = player.salaryOptimal - player.salaryNet;\n                    player.salaryPercDeviation = !isNaN(player.salaryOptimal) ? \n                        (player.salaryAbsoluteDeviation * 100) / player.salaryOptimal : 0;\n                    player.deviation = player.potentialPrice - player.residualValue;\n                });\n            });\n        });\n        \n        // Aggiornamento messaggio\n        msg.footballTree = TheFootballTree;\n        msg.PlayersErrors = PlayersErrors;\n        msg.playersByGroup = playersByGroup;\n        \n        // Se il payload originale era vuoto, lo popoliamo con i dati aggiornati\n        if (!msg.payload) {\n            msg.payload = TheFootballTree;\n        }\n        \n        console.log(`EXPECTED PRICE COMPLETED - Elaborati ${processedPlayers} giocatori`);\n        \n        return msg;\n    } catch (error) {\n        console.error(\"Errore nel calcolo del prezzo atteso:\", error);\n        msg.error = error.message;\n        return msg;\n    }\n}\n\nreturn calculateExpectedPrice(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2650,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "073b9911646ca165",
        "type": "function",
        "z": "1b980fd89607dc71",
        "name": "Archive Set",
        "func": "\nconsole.log(\"REQUESTING ARCHIVE POTENTIAL PRICES\")\n//msg.topic = \"with dataset as (SELECT playerId, currentPotentialPrice,potentialPrice,currentExpectedPrice,expectedPrice,elaborationNum,  week, year from latestplayers_archive where 1=1 and elaborationNum in (select max(elaborationNum) from latestplayers_archive GROUP BY year, week) order by elaborationNum asc) select * from dataset d join ( select distinct elaborationNum from dataset order by elaborationNum desc limit 4) e on d.elaborationNum =e.elaborationNum;\"\n\nconst topic = `WITH ultimi_elaborationNum AS (\n    SELECT DISTINCT elaborationNum\n    FROM latestplayers_archive\n    WHERE elaborationNum IN (\n        SELECT MAX(elaborationNum)\n        FROM latestplayers_archive\n        GROUP BY year, week\n    )\n    ORDER BY elaborationNum DESC\n    LIMIT 4\n)\nSELECT \n    lp.playerId, \n    lp.currentPotentialPrice,\n    lp.potentialPrice,\n    lp.currentExpectedPrice,\n    lp.expectedPrice,\n    lp.elaborationNum,\n    lp.week, \n    lp.year\nFROM latestplayers_archive lp\nINNER JOIN ultimi_elaborationNum u ON lp.elaborationNum = u.elaborationNum\nORDER BY lp.elaborationNum DESC;`\n\nmsg.topic=topic;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1970,
        "y": 480,
        "wires": [
            [
                "f9f3978b69a8aac8"
            ]
        ]
    },
    {
        "id": "f9f3978b69a8aac8",
        "type": "mysql",
        "z": "1b980fd89607dc71",
        "mydb": "ea1e5103bb9e91ad",
        "name": "PRODUZIONE",
        "x": 2160,
        "y": 480,
        "wires": [
            [
                "bf12bf7cf3f74041"
            ]
        ]
    },
    {
        "id": "bf12bf7cf3f74041",
        "type": "function",
        "z": "1b980fd89607dc71",
        "name": "7 - Avarage Potential Price",
        "func": "/**\n * Node-RED Function Node: Calcolo Media Prezzi Potenziali\n * \n * Questo nodo calcola la media dei prezzi potenziali considerando\n * i valori delle ultime 3 elaborazioni precedenti.\n */\n\nfunction calculateAveragePotentialPrice(msg) {\n    console.log(\"AVARAGIN POTENTIAL PRICE - INIZIO\");\n    \n    try {\n        // Estrazione dei dati necessari\n        const TheFootballTree = msg.footballTree;\n        const playerData = msg.payload;\n        \n        if (!TheFootballTree || !playerData || !Array.isArray(playerData)) {\n            throw new Error(\"Dati di input non validi o mancanti\");\n        }\n        \n        // Statistiche di elaborazione\n        let totalPlayers = 0;\n        let playersWithPreviousData = 0;\n        \n        // Creazione di un indice per playerData per migliorare le performance\n        // invece di usare filter() ripetutamente\n        const playerDataIndex = new Map();\n        playerData.forEach(pd => {\n            if (!playerDataIndex.has(pd.playerId)) {\n                playerDataIndex.set(pd.playerId, []);\n            }\n            playerDataIndex.get(pd.playerId).push(pd);\n        });\n        \n        // Elaborazione principale\n        for (const leagueId in TheFootballTree) {\n            TheFootballTree[leagueId].Clubs.forEach(club => {\n                club.Players.forEach(player => {\n                    totalPlayers++;\n                    \n                    // Salva il valore corrente\n                    player.currentPotentialPrice = player.potentialPrice || 0;\n                    player.currentExpectedPrice = 0;\n                    \n                    // Ottieni i dati precedenti per questo giocatore\n                    const previousData = playerDataIndex.get(player.playerId);\n                    \n                    if (previousData && previousData.length > 0) {\n                        playersWithPreviousData++;\n                        \n                        // Filtro e ordinamento per ottenere le ultime 3 elaborazioni\n                        const previousSet = previousData\n                            .filter(pd => pd.week !== player.week)\n                            .sort((a, b) => a.elaborationNum - b.elaborationNum)\n                            .slice(-3);\n                        \n                        // Calcolo delle medie\n                        if (previousSet.length > 0) {\n                            const sumPotentialPrice = previousSet.reduce(\n                                (acc, prev) => acc + (prev.currentPotentialPrice || 0), \n                                0\n                            );\n                            \n                            const sumExpectedPrice = previousSet.reduce(\n                                (acc, prev) => acc + (prev.currentExpectedPrice || 0), \n                                0\n                            );\n                            \n                            player.potentialPrice = (sumPotentialPrice + player.currentPotentialPrice) / \n                                                   (previousSet.length + 1);\n                                                   \n                            player.expectedPrice = (sumExpectedPrice + player.currentExpectedPrice) / \n                                                  (previousSet.length + 1);\n                        }\n                    }\n                });\n            });\n        }\n        \n        // Preparazione dell'output\n        msg.payload = TheFootballTree;\n        msg.stats = {\n            totalPlayers,\n            playersWithPreviousData,\n            percentWithPreviousData: (playersWithPreviousData / totalPlayers * 100).toFixed(2) + '%'\n        };\n        \n        console.log(`AVARAGIN POTENTIAL PRICE COMPLETED - Elaborati ${totalPlayers} giocatori, ${playersWithPreviousData} con dati storici`);\n        return msg;\n    } catch (error) {\n        console.error(\"Errore nel calcolo della media dei prezzi potenziali:\", error);\n        msg.error = error.message;\n        return msg;\n    }\n}\n\nreturn calculateAveragePotentialPrice(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2400,
        "y": 480,
        "wires": [
            [
                "28483aa942f4ef39"
            ]
        ]
    },
    {
        "id": "6520706a2581ffaf",
        "type": "comment",
        "z": "1b980fd89607dc71",
        "name": "Versioni ottimizzate",
        "info": "",
        "x": 870,
        "y": 400,
        "wires": []
    },
    {
        "id": "dfecd52e2673c750",
        "type": "comment",
        "z": "1b980fd89607dc71",
        "name": "Versioni corrente",
        "info": "",
        "x": 860,
        "y": 60,
        "wires": []
    },
    {
        "id": "4282d5d43d2f166e",
        "type": "catch",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 1840,
        "y": 1120,
        "wires": [
            [
                "a7e1c19fd7276677"
            ]
        ]
    },
    {
        "id": "778b965ffa8ca5ee",
        "type": "debug",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2370,
        "y": 1120,
        "wires": []
    },
    {
        "id": "8537c15ad30884cf",
        "type": "http request",
        "z": "bd0a3a7ba071477e",
        "name": "players/extra/value/no/limit",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://dominance.stdfootball.ovh/api/players/extra/value/no/limit/index?api_key=10&api_token=YjlhOWI1YzllYjFiNWJmOWI1ODNmZWM5NTEyYTc4NTRiZmNmYzYyYQ==",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 560,
        "y": 680,
        "wires": [
            [
                "d88206e5b6f69196"
            ]
        ]
    },
    {
        "id": "d88206e5b6f69196",
        "type": "csv",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 770,
        "y": 680,
        "wires": [
            [
                "2726c1da4e3f963a",
                "1854058c23e6f9b8"
            ]
        ]
    },
    {
        "id": "2726c1da4e3f963a",
        "type": "split",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": "5",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 910,
        "y": 680,
        "wires": [
            [
                "11cf3c566d1b70bc"
            ]
        ]
    },
    {
        "id": "8a589107cc87c0a3",
        "type": "function",
        "z": "bd0a3a7ba071477e",
        "name": "Stats Insert Builder",
        "func": "msg.payload.run = msg.maxrunds;\nmsg.payload.week = msg.week;\n\n\nif (msg.payload.player.indexOf(\"'\") > 0 ) {\n    msg.payload.player=msg.payload.player.replace(/'/g, \"'\"+\"'\");\n    console.log(\"msg.payload.player :  \" + msg.payload.player);\n}\nvar values = [\n                msg.payload.playerId, \n                msg.payload.player,\n                msg.payload.clusterId,\n                msg.payload.group,\n                msg.payload.macroIndex,\n                msg.payload.microIndex,\n                msg.payload.minutes,\n                msg.payload.from,\n                msg.payload.to,\n                msg.payload.macroAlert,\n                msg.payload.microAlert,\n                msg.payload.run,\n                msg.payload.week\n            ]\n\n//console.log(\"values : \" + values);\nmsg.payload=values;\n\n//msg.topic=\"INSERT INTO dominanceplayerstats (playerId,player,clusterId,`group`,macroIndex,microIndex,minutes,`from`,`to`, macroAlert,microAlert,run) VALUES (?,?,?,?,?,?,?,STR_TO_DATE(?,'%Y-%m-%d'),STR_TO_DATE(?,'%Y-%m-%d'),?,?,?);\"\n\nmsg.payload=\"INSERT INTO dominanceplayerstats (playerId,player,clusterId,`group`,macroIndex,microIndex,minutes,`from`,`to`, macroAlert,microAlert,run,week) VALUES ('\"+values[0]+\"','\"+values[1]+\"',\"+values[2]+\",\"+values[3]+\",\"+values[4]+\",\"+values[5]+\",\"+values[6]+\",STR_TO_DATE('\"+values[7]+\"','%Y-%m-%d'),STR_TO_DATE('\"+values[8]+\"','%Y-%m-%d'),\"+values[9]+\",\"+values[10]+\",\"+values[11]+\",\"+values[12]+\");commit;\"\n\nmsg.topic = msg.payload;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "11cf3c566d1b70bc",
        "type": "delay",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "200",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1080,
        "y": 680,
        "wires": [
            [
                "29d889c29c740c0f"
            ]
        ]
    },
    {
        "id": "579978711aa1130b",
        "type": "inject",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 680,
        "wires": [
            [
                "245a66d6f5c83ee3"
            ]
        ]
    },
    {
        "id": "3d8503e13dd8d3a0",
        "type": "mysql",
        "z": "bd0a3a7ba071477e",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 1780,
        "y": 680,
        "wires": [
            [
                "fe4dc252e5c0d310",
                "4db563fa089f8617"
            ]
        ]
    },
    {
        "id": "80f3fee4b3841d37",
        "type": "comment",
        "z": "bd0a3a7ba071477e",
        "name": "STATS",
        "info": "",
        "x": 310,
        "y": 640,
        "wires": []
    },
    {
        "id": "a57689832430c050",
        "type": "http request",
        "z": "bd0a3a7ba071477e",
        "name": "players/info",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://dominance.stdfootball.ovh/api/players/info?api_key=10&api_token=YjlhOWI1YzllYjFiNWJmOWI1ODNmZWM5NTEyYTc4NTRiZmNmYzYyYQ==",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 510,
        "y": 880,
        "wires": [
            [
                "9a6cfed3d3b746ea"
            ]
        ]
    },
    {
        "id": "9a6cfed3d3b746ea",
        "type": "csv",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 670,
        "y": 880,
        "wires": [
            [
                "1854058c23e6f9b8",
                "70704551ce8e1a9d"
            ]
        ]
    },
    {
        "id": "70704551ce8e1a9d",
        "type": "split",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": "5",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 910,
        "y": 880,
        "wires": [
            [
                "cb9baf4666cffb9d"
            ]
        ]
    },
    {
        "id": "f44a12f94c0adb3d",
        "type": "function",
        "z": "bd0a3a7ba071477e",
        "name": "Insert Builder",
        "func": "msg.payload.run = msg.maxruninfo;\nmsg.payload.week = msg.week\nmsg.payload.player = String(msg.payload.player);\nmsg.payload.firstName = String(msg.payload.firstName);\nmsg.payload.lastName = String(msg.payload.lastName);\nmsg.payload.teamName = String(msg.payload.teamName);\nmsg.payload.leagueName = String(msg.payload.leagueName);\n\n\n//const regex = /'/i;\nconst regex = /'/g;\nif (msg.payload.player.indexOf(\"'\") > 0 ) {\n    msg.payload.player=msg.payload.player.replace(regex, \"'\"+\"'\");\n    console.log(\"msg.payload.player :  \" + msg.payload.player);\n}\nif (msg.payload.firstName.indexOf(\"'\") > 0 ) {\n    msg.payload.firstName=msg.payload.firstName.replace(regex, \"'\"+\"'\");\n    console.log(\"msg.payload.firstName :  \" + msg.payload.firstName);\n}\nif (msg.payload.lastName.indexOf(\"'\") > 0 ) {\n    msg.payload.lastName=msg.payload.lastName.replace(regex, \"'\"+\"'\");\n    console.log(\"msg.payload.lastName :  \" + msg.payload.lastName);\n}\nif (msg.payload.teamName.indexOf(\"'\") > 0 ) {\n    msg.payload.teamName=msg.payload.teamName.replace(regex, \"'\"+\"'\");\n    console.log(\"msg.payload.teamName :  \" + msg.payload.teamName);\n}\nif (msg.payload.leagueName.indexOf(\"'\") > 0 ) {\n    msg.payload.leagueName=msg.payload.leagueName.replace(regex, \"'\"+\"'\");\n    console.log(\"msg.payload.leagueName :  \" + msg.payload.leagueName);\n}\nvar values = [\n                msg.payload.playerId,\n                msg.payload.optaPersonId,\n                msg.payload.lastName,\n                msg.payload.firstName,\n                msg.payload.player,\n                msg.payload.birthDate,\n                msg.payload.position,\n                msg.payload.teamId,\n                msg.payload.optaTeamId,\n                msg.payload.teamName,\n                msg.payload.leagueId,\n                msg.payload.leagueName,\n                msg.payload.national,\n                msg.payload.run,\n                msg.payload.week\n            ]\n//console.log(\"values : \" + values);\nmsg.payload=values;\n//console.log(\"payload: \"+msg.payload);\n//console.log(\"id: \"+msg.payload.playerId);\n//console.log(\"id[0]: \"+msg.payload[0]);\nif (msg.payload[0] && msg.payload[0].length > 1 ) {\n    \n    if (values[5] !== null && values[5] != \"null\" )\n    {\n        msg.payload=\"INSERT INTO dominanceplayerinfo (playerId,optaPersonId,lastName,`firstName`,player,birthDate,position,teamId,optaTeamId,teamName,leagueId,leagueName,national,run,week) VALUES ('\"+values[0]+\"',\"+values[1]+\",'\"+values[2]+\"','\"+values[3]+\"','\"+values[4]+\"',STR_TO_DATE('\"+values[5]+\"','%Y-%m-%d'),'\"+values[6]+\"','\"+values[7]+\"',\"+values[8]+\",'\"+values[9]+\"','\"+values[10]+\"','\"+values[11]+\"',\"+values[12]+\",\"+values[13]+\",\"+values[14]+\");\"\n    } else {\n        msg.payload=\"INSERT INTO dominanceplayerinfo (playerId,optaPersonId,lastName,`firstName`,player,birthDate,position,teamId,optaTeamId,teamName,leagueId,leagueName,national,run,week) VALUES ('\"+values[0]+\"',\"+values[1]+\",'\"+values[2]+\"','\"+values[3]+\"','\"+values[4]+\"',\"+values[5]+\",'\"+values[6]+\"','\"+values[7]+\"',\"+values[8]+\",'\"+values[9]+\"','\"+values[10]+\"','\"+values[11]+\"',\"+values[12]+\",\"+values[13]+\",\"+values[14]+\");\"\n\n    }\n} else {\n    \n    msg.payload=\"\";\n    \n}\n\nmsg.topic = msg.payload;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "cb9baf4666cffb9d",
        "type": "delay",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "200",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1080,
        "y": 880,
        "wires": [
            [
                "3dbd176cb3bacf28"
            ]
        ]
    },
    {
        "id": "0f24a2feadf0f316",
        "type": "inject",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 880,
        "wires": [
            [
                "41da0cedeb24e3b4"
            ]
        ]
    },
    {
        "id": "262968144ecf0f06",
        "type": "comment",
        "z": "bd0a3a7ba071477e",
        "name": "INFO",
        "info": "",
        "x": 310,
        "y": 840,
        "wires": []
    },
    {
        "id": "245a66d6f5c83ee3",
        "type": "subflow:a2e67b8cc1136522",
        "z": "bd0a3a7ba071477e",
        "name": "Runs & Week ",
        "env": [],
        "x": 330,
        "y": 680,
        "wires": [
            [
                "8537c15ad30884cf"
            ]
        ]
    },
    {
        "id": "41da0cedeb24e3b4",
        "type": "subflow:a2e67b8cc1136522",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "env": [],
        "x": 330,
        "y": 880,
        "wires": [
            [
                "a57689832430c050"
            ]
        ]
    },
    {
        "id": "07513c8c89877519",
        "type": "inject",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 04 * * 3",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 170,
        "y": 720,
        "wires": [
            [
                "245a66d6f5c83ee3"
            ]
        ]
    },
    {
        "id": "72c6c72ee7837ac3",
        "type": "http request",
        "z": "bd0a3a7ba071477e",
        "name": "players/params/uniqueness",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://dominance.stdfootball.ovh/api/players/params/uniqueness?api_key=10&api_token=YjlhOWI1YzllYjFiNWJmOWI1ODNmZWM5NTEyYTc4NTRiZmNmYzYyYQ==",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 560,
        "y": 1240,
        "wires": [
            [
                "65a6610b2eb9843a"
            ]
        ]
    },
    {
        "id": "65a6610b2eb9843a",
        "type": "csv",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 770,
        "y": 1240,
        "wires": [
            [
                "888e4356e0dce51b",
                "69e8ed6b9d54320e"
            ]
        ]
    },
    {
        "id": "69e8ed6b9d54320e",
        "type": "split",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": "10",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 910,
        "y": 1240,
        "wires": [
            [
                "e298d3984c52a980"
            ]
        ]
    },
    {
        "id": "6acdcf6c00b06153",
        "type": "function",
        "z": "bd0a3a7ba071477e",
        "name": "Insert Builder",
        "func": "let records = msg.payload;\n\nlet topic = \"INSERT INTO dominanceplayersparamsuniq (playerId,player,clusterId,`group`,uniqueness,run,week) VALUES \";\n\n\nrecords.forEach( r => {\n    \n    r.run = msg.maxrununiq;\n    r.week = msg.week;\n    \n    r.player = r.player.replace(/'/g, \"'\"+\"'\")\n    \n    let values = [\n                r.playerId, \n                r.player,\n                r.clusterId,\n                r.group,\n                r.uniqueness,\n                r.run,\n                r.week\n            ]\n    \n    let valuesString = \" ('\"+values[0]+\"','\"+values[1]+\"',\"+values[2]+\",\"+values[3]+\",\"+values[4]+\",\"+values[5]+\",\"+values[6]+\"),\";\n    \n    topic = topic + valuesString;\n})\n\n\ntopic = topic.slice(0,-1) //rimuoviamo la virgola finale\n\n\nmsg.topic = topic;\n\nreturn msg;\n\n\n/*msg.payload.run = msg.maxrununiq;\nmsg.payload.week = msg.week\n\n\nif (msg.payload.player.indexOf(\"'\") > 0 ) {\n    msg.payload.player=msg.payload.player.replace(/'/g, \"'\"+\"'\");\n    console.log(\"msg.payload.player :  \" + msg.payload.player);\n}\nvar values = [\n                msg.payload.playerId, \n                msg.payload.player,\n                msg.payload.clusterId,\n                msg.payload.group,\n                msg.payload.uniqueness,\n                //msg.payload.macroVolatility,\n                //msg.payload.microVolatility,\n                msg.payload.run,\n                msg.payload.week\n                \n            ]\n\n\nmsg.payload=values;\n\n\nmsg.payload=\"INSERT INTO dominanceplayersparamsuniq (playerId,player,clusterId,`group`,uniqueness,run,week) VALUES ('\"+values[0]+\"','\"+values[1]+\"',\"+values[2]+\",\"+values[3]+\",\"+values[4]+\",\"+values[5]+\",\"+values[6]+\");commit;\"\n\nmsg.topic = msg.payload;\nreturn msg;\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1240,
        "wires": [
            [
                "3d8503e13dd8d3a0"
            ]
        ]
    },
    {
        "id": "e298d3984c52a980",
        "type": "delay",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "200",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1080,
        "y": 1240,
        "wires": [
            [
                "6acdcf6c00b06153"
            ]
        ]
    },
    {
        "id": "c5331de5f94ed756",
        "type": "inject",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1240,
        "wires": [
            [
                "8c6d560433d1b5d4"
            ]
        ]
    },
    {
        "id": "436d7b0d9bf11ae1",
        "type": "comment",
        "z": "bd0a3a7ba071477e",
        "name": "Uniqueness",
        "info": "",
        "x": 330,
        "y": 1200,
        "wires": []
    },
    {
        "id": "8c6d560433d1b5d4",
        "type": "subflow:a2e67b8cc1136522",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "x": 330,
        "y": 1240,
        "wires": [
            [
                "72c6c72ee7837ac3"
            ]
        ]
    },
    {
        "id": "5d5906787fa0fb1a",
        "type": "http request",
        "z": "bd0a3a7ba071477e",
        "name": "players/params/volatility",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://dominance.stdfootball.ovh/api/players/params/volatility?api_key=10&api_token=YjlhOWI1YzllYjFiNWJmOWI1ODNmZWM5NTEyYTc4NTRiZmNmYzYyYQ==",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 550,
        "y": 1400,
        "wires": [
            [
                "d3db3077c480c304"
            ]
        ]
    },
    {
        "id": "d3db3077c480c304",
        "type": "csv",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "sep": ",",
        "hdrin": true,
        "hdrout": "none",
        "multi": "mult",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": true,
        "include_null_values": true,
        "x": 770,
        "y": 1400,
        "wires": [
            [
                "ccf2a638b10cde58",
                "888e4356e0dce51b"
            ]
        ]
    },
    {
        "id": "ccf2a638b10cde58",
        "type": "split",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": "10",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 910,
        "y": 1400,
        "wires": [
            [
                "74cc915ebae71c98"
            ]
        ]
    },
    {
        "id": "5081f355d5cfcfc2",
        "type": "function",
        "z": "bd0a3a7ba071477e",
        "name": "Insert Builder",
        "func": "let records = msg.payload;\n\nlet topic = \"INSERT INTO dominanceplayersparamsvol (playerId,player,clusterId,`group`,macroVolatility,microVolatility,run,week) VALUES \";\n\n\nrecords.forEach( r => {\n    \n    r.run = msg.maxrunvol;\n    r.week = msg.week;\n    \n    r.player = r.player.replace(/'/g, \"'\"+\"'\")\n    \n    let values = [\n                r.playerId, \n                r.player,\n                r.clusterId,\n                r.group,\n                r.macroVolatility,\n                r.microVolatility,\n                r.run,\n                r.week\n            ]\n    \n    let valuesString = \" ('\"+values[0]+\"','\"+values[1]+\"',\"+values[2]+\",\"+values[3]+\",\"+values[4]+\",\"+values[5]+\",\"+values[6]+\",\"+values[7]+\"),\";\n    \n    topic = topic + valuesString;\n})\n\n\ntopic = topic.slice(0,-1) //rimuoviamo la virgola finale\n\n\nmsg.topic = topic;\n\nreturn msg;\n\n\n/*msg.payload.run = msg.maxrunvol;\nmsg.payload.week = msg.week\n\n\nif (msg.payload.player.indexOf(\"'\") > 0 ) {\n    msg.payload.player=msg.payload.player.replace(/'/g, \"'\"+\"'\");\n    console.log(\"msg.payload.player :  \" + msg.payload.player);\n}\nvar values = [\n                msg.payload.playerId, \n                msg.payload.player,\n                msg.payload.clusterId,\n                msg.payload.group,\n               // msg.payload.uniqueness,\n                msg.payload.macroVolatility,\n                msg.payload.microVolatility,\n                msg.payload.run,\n                msg.payload.week\n                \n            ]\n\n\nmsg.payload=values;\n\n//msg.topic=\"INSERT INTO dominanceplayerstats (playerId,player,clusterId,`group`,macroIndex,microIndex,minutes,`from`,`to`, macroAlert,microAlert,run) VALUES (?,?,?,?,?,?,?,STR_TO_DATE(?,'%Y-%m-%d'),STR_TO_DATE(?,'%Y-%m-%d'),?,?,?);\"\n\nmsg.payload=\"INSERT INTO dominanceplayersparamsvol (playerId,player,clusterId,`group`,macroVolatility,microVolatility,run,week) VALUES ('\"+values[0]+\"','\"+values[1]+\"',\"+values[2]+\",\"+values[3]+\",\"+values[4]+\",\"+values[5]+\",\"+values[6]+\",\"+values[7]+\");commit;\"\n\nmsg.topic = msg.payload;\nreturn msg;\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1400,
        "wires": [
            [
                "3d8503e13dd8d3a0"
            ]
        ]
    },
    {
        "id": "74cc915ebae71c98",
        "type": "delay",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "200",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1080,
        "y": 1400,
        "wires": [
            [
                "5081f355d5cfcfc2"
            ]
        ]
    },
    {
        "id": "07e70211a8473b76",
        "type": "inject",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1400,
        "wires": [
            [
                "f520e5aa8d94f987"
            ]
        ]
    },
    {
        "id": "779c6a64ae030d35",
        "type": "comment",
        "z": "bd0a3a7ba071477e",
        "name": "Volatility",
        "info": "",
        "x": 320,
        "y": 1360,
        "wires": []
    },
    {
        "id": "f520e5aa8d94f987",
        "type": "subflow:a2e67b8cc1136522",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "x": 330,
        "y": 1400,
        "wires": [
            [
                "5d5906787fa0fb1a"
            ]
        ]
    },
    {
        "id": "9223b770a7edc844",
        "type": "function",
        "z": "bd0a3a7ba071477e",
        "name": "League Filter",
        "func": "if (\n        msg.payload.leagueId == '4oogyu6o156iphvdvphwpck10' || \n        msg.payload.leagueId == '4c1nfi2j1m731hcay25fcgndq' || \n        msg.payload.leagueId == '8mqc9daowcuecbxr7o36v5z5e' \n    ) {\n        //DO NOTHING\n    } \n    else {\n       return msg; \n        \n    }\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 1040,
        "wires": [
            [
                "f44a12f94c0adb3d"
            ]
        ]
    },
    {
        "id": "81a99ccbc5c29cea",
        "type": "function",
        "z": "bd0a3a7ba071477e",
        "name": "INIT Task",
        "func": "let logmsg = flow.get(\"logmsg\")\n\n\nif(logmsg) {\n    \n    if (logmsg.taskRunning) {\n        \n        msg.payload = \"another task running\"\n        msg.runModel = false;\n        return msg;\n    } else {\n        \n        logmsg = {}    \n        logmsg.type = \"db\"\n        logmsg.taskType = \"ingestion \"+ msg.req.url\n        logmsg.taskId = Math.floor(Math.random() * 1000001);\n        logmsg.message =  msg.req.url+\" started\"\n        logmsg.taskRunning = true\n    }\n    \n    \n    \n    \n} else {\n    \n    logmsg = {}    \n    logmsg.type = \"db\"\n    logmsg.taskType = \"ingestion \"+msg.url\n    logmsg.taskId = Math.floor(Math.random() * 1000001);\n    logmsg.message =  msg.req.url+\" started\"\n    logmsg.taskRunning = true\n    \n    \n}\n\n\nmsg.runModel = true;\n    \n\nflow.set(\"logmsg\",logmsg)\nnode.log(flow.get(\"logmsg\"))\nmsg.payload = logmsg;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 120,
        "wires": [
            [
                "c4bc4782b1b99b4e",
                "a2ae527c50170d99"
            ]
        ]
    },
    {
        "id": "2bd7802658f6ddc0",
        "type": "http in",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "url": "/dominance/ingest/stats",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 40,
        "wires": [
            [
                "81a99ccbc5c29cea"
            ]
        ]
    },
    {
        "id": "fe4dc252e5c0d310",
        "type": "function",
        "z": "bd0a3a7ba071477e",
        "name": "Log",
        "func": "let ind = msg.parts.index + 1;\nlet count = msg.parts.count;\n\nlet t1 = flow.get(\"t1\");\n\nif (!t1) {\n    t1 = new Date()\n    flow.set(\"t1\", t1)\n}\n\nlet t2 = new Date()\n\nlet diff = t2.getTime() - t1.getTime();\n\n\nlet speed = ( count - ind ) / diff\n\nlet num = msg.payload.length;\n\n\n\n\nif (ind % 1000 == 0 ) {\n\n    flow.get(\"logmsg\").message = \"saved part  \"+ind+\" of \"+count + \" speed \"+speed + \" entry per sec\"\n    node.log(flow.get(\"logmsg\"))\n}\n\nif (ind == count -1 ) {\n    \n    flow.get(\"logmsg\").taskRunning = false;\n    flow.get(\"logmsg\").message = \"done\"\n    node.log(flow.get(\"logmsg\"))\n    \n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 680,
        "wires": [
            []
        ]
    },
    {
        "id": "c4bc4782b1b99b4e",
        "type": "http response",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 790,
        "y": 120,
        "wires": []
    },
    {
        "id": "b9d8505ee2c7e46d",
        "type": "http in",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "url": "/dominance/ingest/info",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 80,
        "wires": [
            [
                "81a99ccbc5c29cea"
            ]
        ]
    },
    {
        "id": "1e242871c4622461",
        "type": "http in",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "url": "/dominance/ingest/uniq",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 120,
        "wires": [
            [
                "81a99ccbc5c29cea"
            ]
        ]
    },
    {
        "id": "7bba252dc4c99201",
        "type": "http in",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "url": "/dominance/ingest/vol",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 160,
        "wires": [
            [
                "81a99ccbc5c29cea"
            ]
        ]
    },
    {
        "id": "a2ae527c50170d99",
        "type": "switch",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "property": "req.url",
        "propertyType": "msg",
        "rules": [
            {
                "t": "cont",
                "v": "stats",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "info",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "uniq",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "vol",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "stats",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "stats",
                "vt": "str"
            },
            {
                "t": "cont",
                "v": "stats",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 7,
        "x": 750,
        "y": 220,
        "wires": [
            [
                "b8531145c67a0261"
            ],
            [
                "3934a9124cefb09c"
            ],
            [
                "ab0838082f873d56"
            ],
            [
                "4f03765def43fe66"
            ],
            [
                "eb63544091a73ad9"
            ],
            [
                "4dab82096a42c475"
            ],
            [
                "49dbf0364f4297d9"
            ]
        ]
    },
    {
        "id": "20aa389298bf2ee9",
        "type": "link out",
        "z": "bd0a3a7ba071477e",
        "name": "STATSOUT",
        "mode": "link",
        "links": [
            "f1b5044454b79851"
        ],
        "x": 1075,
        "y": 120,
        "wires": []
    },
    {
        "id": "f1b5044454b79851",
        "type": "link in",
        "z": "bd0a3a7ba071477e",
        "name": "STATSIN",
        "links": [
            "20aa389298bf2ee9"
        ],
        "x": 205,
        "y": 620,
        "wires": [
            [
                "245a66d6f5c83ee3"
            ]
        ]
    },
    {
        "id": "1a8a48df8922aeb4",
        "type": "link in",
        "z": "bd0a3a7ba071477e",
        "name": "INFOIN",
        "links": [
            "3934a9124cefb09c"
        ],
        "x": 115,
        "y": 840,
        "wires": [
            [
                "41da0cedeb24e3b4"
            ]
        ]
    },
    {
        "id": "15fe6002de51704e",
        "type": "link in",
        "z": "bd0a3a7ba071477e",
        "name": "UNIQIN",
        "links": [
            "ab0838082f873d56"
        ],
        "x": 115,
        "y": 1200,
        "wires": [
            [
                "8c6d560433d1b5d4"
            ]
        ]
    },
    {
        "id": "a14dc0cef16c8e7f",
        "type": "link in",
        "z": "bd0a3a7ba071477e",
        "name": "VOLIN",
        "links": [
            "4f03765def43fe66"
        ],
        "x": 115,
        "y": 1360,
        "wires": [
            [
                "f520e5aa8d94f987"
            ]
        ]
    },
    {
        "id": "3934a9124cefb09c",
        "type": "link out",
        "z": "bd0a3a7ba071477e",
        "name": "INFOOUT",
        "mode": "link",
        "links": [
            "1a8a48df8922aeb4"
        ],
        "x": 995,
        "y": 180,
        "wires": []
    },
    {
        "id": "ab0838082f873d56",
        "type": "link out",
        "z": "bd0a3a7ba071477e",
        "name": "UNIQOUT",
        "mode": "link",
        "links": [
            "15fe6002de51704e"
        ],
        "x": 955,
        "y": 200,
        "wires": []
    },
    {
        "id": "4f03765def43fe66",
        "type": "link out",
        "z": "bd0a3a7ba071477e",
        "name": "VOLOUT",
        "mode": "link",
        "links": [
            "a14dc0cef16c8e7f"
        ],
        "x": 975,
        "y": 260,
        "wires": []
    },
    {
        "id": "6a273161910d5a07",
        "type": "function",
        "z": "bd0a3a7ba071477e",
        "name": "Log",
        "func": "\nlet num = msg.payload.length;\nflow.get(\"logmsg\").message = \"received \"+num+\" records\"\nnode.log(flow.get(\"logmsg\"))\n//return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 200,
        "wires": [
            []
        ]
    },
    {
        "id": "29b92da688bbd22b",
        "type": "link in",
        "z": "bd0a3a7ba071477e",
        "name": "LOGIN",
        "links": [
            "1854058c23e6f9b8",
            "888e4356e0dce51b"
        ],
        "x": 1155,
        "y": 200,
        "wires": [
            [
                "6a273161910d5a07"
            ]
        ]
    },
    {
        "id": "1854058c23e6f9b8",
        "type": "link out",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "mode": "link",
        "links": [
            "29b92da688bbd22b"
        ],
        "x": 895,
        "y": 780,
        "wires": []
    },
    {
        "id": "888e4356e0dce51b",
        "type": "link out",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "mode": "link",
        "links": [
            "29b92da688bbd22b"
        ],
        "x": 875,
        "y": 1320,
        "wires": []
    },
    {
        "id": "a7e1c19fd7276677",
        "type": "function",
        "z": "bd0a3a7ba071477e",
        "name": "Log",
        "func": "\nflow.get(\"logmsg\").message = mgs.error\nnode.log(flow.get(\"logmsg\"))\n//return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2230,
        "y": 1120,
        "wires": [
            [
                "778b965ffa8ca5ee"
            ]
        ]
    },
    {
        "id": "eee83bc8e65ccda4",
        "type": "function",
        "z": "bd0a3a7ba071477e",
        "name": "Set payload in flow",
        "func": "flow.set(\"uniqueness\", msg.payload)\n\nconsole.log(\"uniqueness set in flow\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2130,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "3267ab8c75554ed6",
        "type": "function",
        "z": "bd0a3a7ba071477e",
        "name": "Array popper",
        "func": "console.log(flow.get(\"uniqueness\").length)\nif (flow.get(\"uniqueness\").length % 1000 == 0 ) {\n\n    //flow.get(\"logmsg\").message = \"Errors left: \" +global.get(\"PlayersErrors\").length\n    //node.log(flow.get(\"logmsg\")) \n    console.log(\"uniqness left \"+flow.get(\"uniqueness\").length )\n    \n}\n\nif(flow.get(\"uniqueness\").length > 0 ) {\n    \n    msg.payload = flow.get(\"uniqueness\").pop();\n    msg.continue = true;\n    return msg; \n    \n} else {\n    //flow.get(\"logmsg\").message = \"Errors Done\"\n    //node.log(flow.get(\"logmsg\"))\n    console.log(\"uniqness done\")\n    msg.continue = false;\n    return msg; \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2110,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "29d889c29c740c0f",
        "type": "function",
        "z": "bd0a3a7ba071477e",
        "name": "Array insert builder",
        "func": "let records = msg.payload;\n\nlet topic = \"INSERT INTO dominanceplayerstats (playerId,player,clusterId,`group`,macroIndexSum,microIndexSum,macroIndex,microIndex,minutes,`from`,`to`, macroAlert,microAlert,macroIndexInjury,microIndexInjury,run,week) VALUES \";\n\n\nrecords.forEach( r => {\n    \n    r.run = msg.maxrunds;\n    r.week = msg.week;\n    \n    r.macroIndexInjury =  r.macroIndexInjury ?  r.macroIndexInjury : 0\n    r.microIndexInjury =  r.microIndexInjury ?  r.microIndexInjury : 0\n              \n    r.player = r.player.replace(/'/g, \"'\"+\"'\")\n    \n    let values = [\n                r.playerId, \n                r.player,\n                r.clusterId,\n                r.group,\n                r.macroIndexSum,\n                r.microIndexSum,\n                r.macroIndex,\n                r.microIndex,\n                r.minutes,\n                r.from,\n                r.to,\n                r.macroAlert,\n                r.microAlert,\n                r.macroIndexInjury,\n                r.microIndexInjury,\n                r.run,\n                r.week\n            ]\n    \n    let valuesString = \" ('\"+values[0]+\"','\"+values[1]+\"',\"+values[2]+\",\"+values[3]+\",\"+values[4]+\",\"+values[5]+\",\"+values[6]+\",\"+values[7]+\",\"+values[8]+\",STR_TO_DATE('\"+values[9]+\"','%Y-%m-%d'),STR_TO_DATE('\"+values[10]+\"','%Y-%m-%d'),\"+values[11]+\",\"+values[12]+\",\"+values[13]+\",\"+values[14]+\",\"+values[15]+\",\"+values[16]+\"),\";\n    \n    topic = topic + valuesString;\n})\n\n\ntopic = topic.slice(0,-1) //rimuoviamo la virgola finale\n\n\nmsg.topic = topic;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 680,
        "wires": [
            [
                "3d8503e13dd8d3a0"
            ]
        ]
    },
    {
        "id": "3dbd176cb3bacf28",
        "type": "function",
        "z": "bd0a3a7ba071477e",
        "name": "Array insert builder",
        "func": "let records = msg.payload;\n\nlet topic = \"INSERT INTO dominanceplayerinfo (playerId,optaPersonId,lastName,`firstName`,player,birthDate,position,`role`,`role2`,teamId,optaTeamId,teamName,leagueId,leagueName,national,nationalAppearances,nationalMinutesPlayed,run,week) VALUES \";\n\n//playerId,lastName,firstName,player,birthDate,position,role,role2,teamId,teamName,leagueId,leagueName,national,nationalAppearances,nationalMinutesPlayed\nlet saveset = false;\n\nrecords.forEach( r => {\n    \n    //if(r.playerId == \"1i47csjlvcikfs4wixzserend\" ) {saveset = true}\n    \n    r.run = msg.maxruninfo;\n    r.week = msg.week;\n    \n    r.player = r.player.replace(/'/g, \"'\"+\"'\")\n    r.firstName = r.firstName.replace(/'/g, \"'\"+\"'\")\n    r.lastName = r.lastName.replace(/'/g, \"'\"+\"'\")\n    r.teamName = r.teamName.replace(/'/g, \"'\"+\"'\")\n    r.leagueName = r.leagueName.replace(/'/g, \"'\"+\"'\")\n    \n     r.birthDate =  r.birthDate !==null && r.birthDate != \"null\" ? \"STR_TO_DATE('\"+r.birthDate+\"','%Y-%m-%d')\" : r.birthDate;\n\n    if (r.role===null || r.role===undefined || r.role===\"null\") {\n        \n        r.role = \"Central \"+r.position;\n    }\n    \n    \n    let values = [\n                r.playerId, //0\n                0,//r.optaPersonId,\n                r.lastName,\n                r.firstName,\n                r.player,\n                r.birthDate,\n                r.position,\n                r.role,\n                r.role2,\n                r.teamId,\n                0,//r.optaTeamId,\n                r.teamName,\n                r.leagueId,\n                r.leagueName,\n                r.national,\n                r.nationalAppearances,\n                r.nationalMinutesPlayed,\n                r.run,\n                r.week\n            ]\n            \n          let valueString = \"\";  \n   /* if (values[5] !== null && values[5] != \"null\" )\n    {\n        valueString = \" ('\"+values[0]+\"',\"+values[1]+\",'\"+values[2]+\"','\"+values[3]+\"','\"+values[4]+\"',STR_TO_DATE('\"+values[5]+\"','%Y-%m-%d'),'\"+values[6]+\"','\"+values[7]+\"',\"+values[8]+\",'\"+values[9]+\"','\"+values[10]+\"','\"+values[11]+\"',\"+values[12]+\",\"+values[13]+\",\"+values[14]+\"),\"\n    } else {*/\n        valueString =\" ('\"+values[0]+\"',\"+values[1]+\",'\"+values[2]+\"','\"+values[3]+\"','\"+values[4]+\"',\"+values[5]+\",'\"+values[6]+\"','\"+values[7]+\"','\"+values[8]+\"','\"+values[9]+\"',\"+values[10]+\",'\"+values[11]+\"','\"+values[12]+\"','\"+values[13]+\"',\"+values[14]+\",\"+values[15]+\",\"+values[16]+\",\"+values[17]+\",\"+values[18]+\"),\"\n\n   // }\n    \n    /*if (    r.leagueId == '4oogyu6o156iphvdvphwpck10' || \n            r.leagueId == '4c1nfi2j1m731hcay25fcgndq' || \n            r.leagueId == '8mqc9daowcuecbxr7o36v5z5e' )\n            {\n                valueString = \"\";\n            }*/\n\n    topic = topic + valueString;\n})\n\n\ntopic = topic.slice(0,-1) //rimuoviamo la virgola finale\n\n/*if (!saveset) {\n    \n    return;\n}*/\n\nmsg.topic = topic;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 880,
        "wires": [
            [
                "3d8503e13dd8d3a0"
            ]
        ]
    },
    {
        "id": "4db563fa089f8617",
        "type": "debug",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 760,
        "wires": []
    },
    {
        "id": "ea55d8f4df73358c",
        "type": "function",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "func": "let records = msg.payload;\n\nlet topic = \"INSERT INTO dominanceplayerinfo (playerId,optaPersonId,lastName,`firstName`,player,birthDate,position,`role`,`role2`,teamId,optaTeamId,teamName,leagueId,leagueName,national,nationalAppearances,run,week) VALUES \";\n\n\nrecords.forEach( r => {\n    \n    \n    if(r.playerId == \"1i47csjlvcikfs4wixzserend\" ) {\n    r.run = msg.maxruninfo;\n    r.week = msg.week;\n    \n    r.player = r.player.replace(/'/g, \"'\"+\"'\")\n    r.firstName = r.firstName.replace(/'/g, \"'\"+\"'\")\n    r.lastName = r.lastName.replace(/'/g, \"'\"+\"'\")\n    r.teamName = r.teamName.replace(/'/g, \"'\"+\"'\")\n    r.leagueName = r.leagueName.replace(/'/g, \"'\"+\"'\")\n    \n     r.birthDate =  r.birthDate !==null && r.birthDate != \"null\" ? \"STR_TO_DATE('\"+r.birthDate+\"','%Y-%m-%d')\" : r.birthDate;\n\n    if (r.role===null || r.role===undefined || r.role===\"null\") {\n        \n        r.role = \"Central \"+r.position;\n    }\n    \n    \n    let values = [\n                r.playerId, //0\n                r.optaPersonId,\n                r.lastName,\n                r.firstName,\n                r.player,\n                r.birthDate,\n                r.position,\n                r.role,\n                r.role2,\n                r.teamId,\n                r.optaTeamId,\n                r.teamName,\n                r.leagueId,\n                r.leagueName,\n                r.national,\n                r.nationalAppearances,\n                r.run,\n                r.week\n            ]\n            \n          let valueString = \"\";  \n   /* if (values[5] !== null && values[5] != \"null\" )\n    {\n        valueString = \" ('\"+values[0]+\"',\"+values[1]+\",'\"+values[2]+\"','\"+values[3]+\"','\"+values[4]+\"',STR_TO_DATE('\"+values[5]+\"','%Y-%m-%d'),'\"+values[6]+\"','\"+values[7]+\"',\"+values[8]+\",'\"+values[9]+\"','\"+values[10]+\"','\"+values[11]+\"',\"+values[12]+\",\"+values[13]+\",\"+values[14]+\"),\"\n    } else {*/\n        valueString =\" ('\"+values[0]+\"',\"+values[1]+\",'\"+values[2]+\"','\"+values[3]+\"','\"+values[4]+\"',\"+values[5]+\",'\"+values[6]+\"','\"+values[7]+\"','\"+values[8]+\"','\"+values[9]+\"',\"+values[10]+\",'\"+values[11]+\"','\"+values[12]+\"','\"+values[13]+\"',\"+values[14]+\",\"+values[15]+\",\"+values[16]+\",\"+values[17]+\"),\"\n\n   // }\n    \n    /*if (    r.leagueId == '4oogyu6o156iphvdvphwpck10' || \n            r.leagueId == '4c1nfi2j1m731hcay25fcgndq' || \n            r.leagueId == '8mqc9daowcuecbxr7o36v5z5e' )\n            {\n                valueString = \"\";\n            }*/\n\n    topic = topic + valueString;\n    }\n})\n\n\ntopic = topic.slice(0,-1) //rimuoviamo la virgola finale\n\n\nmsg.topic = topic;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 1200,
        "wires": [
            [
                "191fe6c281b4068a"
            ]
        ]
    },
    {
        "id": "191fe6c281b4068a",
        "type": "debug",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2410,
        "y": 1200,
        "wires": []
    },
    {
        "id": "17bc6b944a9ab5b7",
        "type": "http request",
        "z": "bd0a3a7ba071477e",
        "name": "players/data",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://dominance.stdfootball.ovh/api/players/data?api_key=10&api_token=YjlhOWI1YzllYjFiNWJmOWI1ODNmZWM5NTEyYTc4NTRiZmNmYzYyYQ==",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 510,
        "y": 1620,
        "wires": [
            [
                "bb8d6615043733f0"
            ]
        ]
    },
    {
        "id": "11efb6e9f553fe4b",
        "type": "split",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": "1",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 870,
        "y": 1620,
        "wires": [
            [
                "01f6d69985666dfe"
            ]
        ]
    },
    {
        "id": "01f6d69985666dfe",
        "type": "delay",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "200",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1080,
        "y": 1620,
        "wires": [
            [
                "4f595501a249c04e"
            ]
        ]
    },
    {
        "id": "336c6376cfaa8d55",
        "type": "inject",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1620,
        "wires": [
            [
                "5269db0ae5b5f415"
            ]
        ]
    },
    {
        "id": "11b5baeff1bcf845",
        "type": "comment",
        "z": "bd0a3a7ba071477e",
        "name": "DATA",
        "info": "",
        "x": 310,
        "y": 1580,
        "wires": []
    },
    {
        "id": "5269db0ae5b5f415",
        "type": "subflow:a2e67b8cc1136522",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "env": [],
        "x": 330,
        "y": 1620,
        "wires": [
            [
                "17bc6b944a9ab5b7"
            ]
        ]
    },
    {
        "id": "8fdc71a32c91e655",
        "type": "link in",
        "z": "bd0a3a7ba071477e",
        "name": "INFOIN",
        "links": [
            "0409dab42f9ae23c"
        ],
        "x": 115,
        "y": 1580,
        "wires": [
            [
                "5269db0ae5b5f415"
            ]
        ]
    },
    {
        "id": "4f595501a249c04e",
        "type": "function",
        "z": "bd0a3a7ba071477e",
        "name": "Array insert builder",
        "func": "let records = msg.payload;\n\nlet topic = \"INSERT INTO dominanceplayerdata (playerId,player,goal,assist,preassist,cleanSheet,run,week) VALUES \";\n\n//playerId,lastName,firstName,player,birthDate,position,role,role2,teamId,teamName,leagueId,leagueName,national,nationalAppearances,nationalMinutesPlayed\nlet saveset = false;\n\nrecords.forEach( r => {\n    \n    //if(r.playerId == \"1i47csjlvcikfs4wixzserend\" ) {saveset = true}\n    \n    r.run = msg.maxrundata;\n    r.week = msg.week;\n    \n    r.player = r.player.replace(/'/g, \"'\"+\"'\")\n  \n    if (r.role===null || r.role===undefined || r.role===\"null\") {\n        \n        r.role = \"Central \"+r.position;\n    }\n    \n    \n    let values = [\n                r.playerId, //0\n                r.player,\n                r.goal,\n                r.assist,\n                r.preassist,\n                r.cleanSheet,\n                r.run,\n                r.week\n            ]\n            \n          let valueString = \"\";  \n   /* if (values[5] !== null && values[5] != \"null\" )\n    {\n        valueString = \" ('\"+values[0]+\"',\"+values[1]+\",'\"+values[2]+\"','\"+values[3]+\"','\"+values[4]+\"',STR_TO_DATE('\"+values[5]+\"','%Y-%m-%d'),'\"+values[6]+\"','\"+values[7]+\"',\"+values[8]+\",'\"+values[9]+\"','\"+values[10]+\"','\"+values[11]+\"',\"+values[12]+\",\"+values[13]+\",\"+values[14]+\"),\"\n    } else {*/\n        valueString =\" ('\"+values[0]+\"','\"+values[1]+\"',\"+values[2]+\",\"+values[3]+\",\"+values[4]+\",\"+values[5]+\",\"+values[6]+\",\"+values[7]+\"),\"\n\n   // }\n    \n    /*if (    r.leagueId == '4oogyu6o156iphvdvphwpck10' || \n            r.leagueId == '4c1nfi2j1m731hcay25fcgndq' || \n            r.leagueId == '8mqc9daowcuecbxr7o36v5z5e' )\n            {\n                valueString = \"\";\n            }*/\n\n    topic = topic + valueString;\n})\n\n\ntopic = topic.slice(0,-1) //rimuoviamo la virgola finale\n\n/*if (!saveset) {\n    \n    return;\n}*/\n\nmsg.topic = topic;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1620,
        "wires": [
            [
                "3d8503e13dd8d3a0"
            ]
        ]
    },
    {
        "id": "15e4055dfb12b809",
        "type": "http in",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "url": "/dominance/ingest/data",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 200,
        "wires": [
            [
                "81a99ccbc5c29cea"
            ]
        ]
    },
    {
        "id": "0409dab42f9ae23c",
        "type": "link out",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "mode": "link",
        "links": [
            "8fdc71a32c91e655"
        ],
        "x": 1165,
        "y": 360,
        "wires": []
    },
    {
        "id": "bb8d6615043733f0",
        "type": "json",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 730,
        "y": 1620,
        "wires": [
            [
                "11efb6e9f553fe4b"
            ]
        ]
    },
    {
        "id": "bad70c4a3b547afd",
        "type": "http request",
        "z": "bd0a3a7ba071477e",
        "name": "players/minutes",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://dominance.stdfootball.ovh/api/players/minutes?api_key=10&api_token=YjlhOWI1YzllYjFiNWJmOWI1ODNmZWM5NTEyYTc4NTRiZmNmYzYyYQ==",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 520,
        "y": 1820,
        "wires": [
            [
                "0ce991408a7db0dd"
            ]
        ]
    },
    {
        "id": "2be160f49d6557d0",
        "type": "split",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": "1",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 870,
        "y": 1820,
        "wires": [
            [
                "248352c728a73082"
            ]
        ]
    },
    {
        "id": "248352c728a73082",
        "type": "delay",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "200",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1080,
        "y": 1820,
        "wires": [
            [
                "9466493db2f4b3b0"
            ]
        ]
    },
    {
        "id": "c98e5e66ddbf970c",
        "type": "inject",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1820,
        "wires": [
            [
                "f29b8e82eac268b6"
            ]
        ]
    },
    {
        "id": "097f0a4f2e17328a",
        "type": "comment",
        "z": "bd0a3a7ba071477e",
        "name": "MINUTES",
        "info": "",
        "x": 320,
        "y": 1780,
        "wires": []
    },
    {
        "id": "f29b8e82eac268b6",
        "type": "subflow:a2e67b8cc1136522",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "env": [],
        "x": 330,
        "y": 1820,
        "wires": [
            [
                "bad70c4a3b547afd"
            ]
        ]
    },
    {
        "id": "1be1104e650361b7",
        "type": "link in",
        "z": "bd0a3a7ba071477e",
        "name": "INFOIN",
        "links": [
            "3987d69bd5f910dd"
        ],
        "x": 115,
        "y": 1780,
        "wires": [
            [
                "f29b8e82eac268b6"
            ]
        ]
    },
    {
        "id": "9466493db2f4b3b0",
        "type": "function",
        "z": "bd0a3a7ba071477e",
        "name": "Array insert builder",
        "func": "let records = msg.payload;\n\nlet topic = \"INSERT INTO dominanceplayerminutes (playerId,player,minutes,run,week) VALUES \";\n\n//playerId,lastName,firstName,player,birthDate,position,role,role2,teamId,teamName,leagueId,leagueName,national,nationalAppearances,nationalMinutesPlayed\nlet saveset = false;\n\nrecords.forEach( r => {\n    \n    //if(r.playerId == \"1i47csjlvcikfs4wixzserend\" ) {saveset = true}\n    \n    r.run = msg.maxrunminutes ?? 1;\n    r.week = msg.week;\n    \n    r.player = r.player.replace(/'/g, \"'\"+\"'\")\n  \n    if (r.role===null || r.role===undefined || r.role===\"null\") {\n        \n        r.role = \"Central \"+r.position;\n    }\n    \n    \n    let values = [\n                r.playerId, //0\n                r.player,\n                r.minutes,\n                r.run,\n                r.week\n            ]\n            \n          let valueString = \"\";  \n   /* if (values[5] !== null && values[5] != \"null\" )\n    {\n        valueString = \" ('\"+values[0]+\"',\"+values[1]+\",'\"+values[2]+\"','\"+values[3]+\"','\"+values[4]+\"',STR_TO_DATE('\"+values[5]+\"','%Y-%m-%d'),'\"+values[6]+\"','\"+values[7]+\"',\"+values[8]+\",'\"+values[9]+\"','\"+values[10]+\"','\"+values[11]+\"',\"+values[12]+\",\"+values[13]+\",\"+values[14]+\"),\"\n    } else {*/\n        valueString =\" ('\"+values[0]+\"','\"+values[1]+\"',\"+values[2]+\",\"+values[3]+\",\"+values[4]+\"),\"\n\n   // }\n    \n    /*if (    r.leagueId == '4oogyu6o156iphvdvphwpck10' || \n            r.leagueId == '4c1nfi2j1m731hcay25fcgndq' || \n            r.leagueId == '8mqc9daowcuecbxr7o36v5z5e' )\n            {\n                valueString = \"\";\n            }*/\n\n    topic = topic + valueString;\n})\n\n\ntopic = topic.slice(0,-1) //rimuoviamo la virgola finale\n\n/*if (!saveset) {\n    \n    return;\n}*/\n\nmsg.topic = topic;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1820,
        "wires": [
            [
                "3d8503e13dd8d3a0"
            ]
        ]
    },
    {
        "id": "0ce991408a7db0dd",
        "type": "json",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 730,
        "y": 1820,
        "wires": [
            [
                "2be160f49d6557d0"
            ]
        ]
    },
    {
        "id": "98795a96bc841746",
        "type": "http in",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "url": "/dominance/ingest/minutes",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 240,
        "wires": [
            [
                "81a99ccbc5c29cea"
            ]
        ]
    },
    {
        "id": "3987d69bd5f910dd",
        "type": "link out",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "mode": "link",
        "links": [
            "1be1104e650361b7"
        ],
        "x": 1025,
        "y": 380,
        "wires": []
    },
    {
        "id": "de205777096d6e46",
        "type": "debug",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2240,
        "y": 1280,
        "wires": []
    },
    {
        "id": "5fd9194d239c2d61",
        "type": "http request",
        "z": "bd0a3a7ba071477e",
        "name": "teams/points",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://dominance.stdfootball.ovh/api/teams/points?api_key=10&api_token=YjlhOWI1YzllYjFiNWJmOWI1ODNmZWM5NTEyYTc4NTRiZmNmYzYyYQ==",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 510,
        "y": 1040,
        "wires": [
            [
                "faef1f5c9794a221"
            ]
        ]
    },
    {
        "id": "48b2d513ab74103f",
        "type": "split",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": "10",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 870,
        "y": 1040,
        "wires": [
            [
                "791e8c6d4c574e72"
            ]
        ]
    },
    {
        "id": "791e8c6d4c574e72",
        "type": "delay",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "20",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1080,
        "y": 1040,
        "wires": [
            [
                "b5c05dd1202bf665"
            ]
        ]
    },
    {
        "id": "c19859e5f1b3f007",
        "type": "inject",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1040,
        "wires": [
            [
                "86322a0f2237047e"
            ]
        ]
    },
    {
        "id": "68007077dc907b77",
        "type": "comment",
        "z": "bd0a3a7ba071477e",
        "name": "TEAM POINTS",
        "info": "",
        "x": 340,
        "y": 1000,
        "wires": []
    },
    {
        "id": "86322a0f2237047e",
        "type": "subflow:a2e67b8cc1136522",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "env": [],
        "x": 330,
        "y": 1040,
        "wires": [
            [
                "5fd9194d239c2d61"
            ]
        ]
    },
    {
        "id": "ec6d93c2803ead3d",
        "type": "link in",
        "z": "bd0a3a7ba071477e",
        "name": "INFOIN",
        "links": [
            "49dbf0364f4297d9"
        ],
        "x": 115,
        "y": 1000,
        "wires": [
            [
                "86322a0f2237047e"
            ]
        ]
    },
    {
        "id": "b5c05dd1202bf665",
        "type": "function",
        "z": "bd0a3a7ba071477e",
        "name": "Array insert builder",
        "func": "let records = msg.payload;\nlet topic = \"INSERT INTO dominanceteampoints (teamId,team,season,points,run,week) VALUES \";\n\n// Verifichiamo che records sia un array\nif (!Array.isArray(records)) {\n    node.error(\"msg.payload non è un array\");\n    return null;\n}\n\nrecords.forEach(r => {\n    // Verifichiamo che tutti i campi necessari esistano\n    if (!r.teamId || !r.team || !r.season || r.points === undefined) {\n        return; // Saltiamo questo record se mancano campi essenziali\n    }\n    \n    r.run = msg.maxrunpoints;\n    r.week = msg.week;\n    \n    // Correggiamo l'escape delle virgolette singole\n    r.team = r.team.replace(/'/g, \"''\");\n    r.season = r.season.replace(/'/g, \"''\");\n  \n    let values = [\n        r.teamId, // 0\n        r.team,\n        r.season,\n        r.points,\n        r.run,\n        r.week\n    ];\n            \n    let valueString = \" ('\" + values[0] + \"','\" + values[1] + \"','\" + values[2] + \"',\" + \n                      values[3] + \",\" + values[4] + \",\" + values[5] + \"),\";\n \n    topic = topic + valueString;\n});\n\ntopic = topic.slice(0, -1); // Rimuoviamo la virgola finale\nmsg.topic = topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1310,
        "y": 1040,
        "wires": [
            [
                "3d8503e13dd8d3a0"
            ]
        ]
    },
    {
        "id": "faef1f5c9794a221",
        "type": "json",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 730,
        "y": 1040,
        "wires": [
            [
                "48b2d513ab74103f"
            ]
        ]
    },
    {
        "id": "4b35b2bf9cf044de",
        "type": "http in",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "url": "/dominance/ingest/points",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 200,
        "y": 280,
        "wires": [
            [
                "81a99ccbc5c29cea"
            ]
        ]
    },
    {
        "id": "49dbf0364f4297d9",
        "type": "link out",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "mode": "link",
        "links": [
            "ec6d93c2803ead3d"
        ],
        "x": 955,
        "y": 460,
        "wires": []
    },
    {
        "id": "dbf501c679aef7ef",
        "type": "debug",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2350,
        "y": 1320,
        "wires": []
    },
    {
        "id": "b3da15142c07a06c",
        "type": "debug",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2240,
        "y": 940,
        "wires": []
    },
    {
        "id": "4dab82096a42c475",
        "type": "delay",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "pauseType": "delay",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 920,
        "y": 340,
        "wires": [
            [
                "3987d69bd5f910dd"
            ]
        ]
    },
    {
        "id": "eb63544091a73ad9",
        "type": "delay",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "pauseType": "delay",
        "timeout": "20",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1080,
        "y": 320,
        "wires": [
            [
                "0409dab42f9ae23c"
            ]
        ]
    },
    {
        "id": "b8531145c67a0261",
        "type": "delay",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 960,
        "y": 140,
        "wires": [
            [
                "20aa389298bf2ee9"
            ]
        ]
    },
    {
        "id": "701ab871db1fc8d5",
        "type": "inject",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "20 04 * * 3",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 920,
        "wires": [
            [
                "41da0cedeb24e3b4"
            ]
        ]
    },
    {
        "id": "0d96e50f1502f6bb",
        "type": "inject",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 04 * * 3",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1280,
        "wires": [
            [
                "8c6d560433d1b5d4"
            ]
        ]
    },
    {
        "id": "27cb8dfedde6e643",
        "type": "inject",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 04 * * 3",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1440,
        "wires": [
            [
                "f520e5aa8d94f987"
            ]
        ]
    },
    {
        "id": "54fb8e507f22b27a",
        "type": "inject",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "50 04 * * 3",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1660,
        "wires": [
            [
                "5269db0ae5b5f415"
            ]
        ]
    },
    {
        "id": "fe6902464977a6f4",
        "type": "inject",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "00 05 * * 3",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1900,
        "wires": [
            [
                "f29b8e82eac268b6"
            ]
        ]
    },
    {
        "id": "279398d3a11a2d6f",
        "type": "inject",
        "z": "bd0a3a7ba071477e",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "40 04 * * 3",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 150,
        "y": 1120,
        "wires": [
            [
                "86322a0f2237047e"
            ]
        ]
    },
    {
        "id": "0dbe7ad8cfc2466d",
        "type": "debug",
        "z": "521d26a7dba2b3ee",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1210,
        "y": 100,
        "wires": []
    },
    {
        "id": "f0cbbb19613b92f7",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "STATS",
        "func": "\nvar runds = flow.get('runds');\nmsg.topic = \"select  \"+\n\"\tds.playerId,  \"+\n\"\tds.player,  \"+\n\"\tds.clusterId AS leagueCluster, \"+\n \"\tds.macroIndex, \"+ \n\"\tds.microIndex, \"+\n \"\tds.macroIndexInjury, \"+ \n\"\tds.microIndexInjury, \"+\n\"\tds.macroAlert, \"+\n\"\tds.microAlert, \"+\n\"\tds.minutes, \"+\n\"\tds.from, \"+\n\"\tds.to, \"+\n\"\tds.`group` as roleGroup,  \"+\n\"\t(select r.peso from role r where ds.`group`=r.gruppo limit 1)  as roleWeight , \"+\n\"\t( SELECT peso FROM league WHERE leagueCluster = ds.clusterId LIMIT 1 ) AS leagueWeight, \"+\n\"\tif ( (select p.superstar from player p where p.idPlayer = ds.playerId) = 1,1,0) as superstar,  \"+\n\"\tds.week  \"+\n\"from dominanceplayerstats ds  \"+\n\"where ds.run = ( select max(ds1.run) from dominanceplayerstats ds1 ) \" +\n\" and ds.to > NOW() - INTERVAL 18 MONTH; \";\nmsg.dataSet = \"STATS\";\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 220,
        "wires": [
            [
                "a1fc014a5a5f9871"
            ]
        ]
    },
    {
        "id": "1f031dfe9d663479",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "INFO",
        "func": "\nmsg.topic=\"select di.playerId, di.player, di.lastName, di.firstName, di.birthDate,di.position, di.role, di.role2,di.teamId, di.optaTeamId, di.teamName, (select c1.salaryCapFair from club c1 where c1.teamID = di.teamId) as salayCapFair, (select c.cluster from club c where c.teamID = di.teamId) as clubCluster, di.leagueId, di.leagueName, (select l.taxRate from league l where l.leagueID = di.leagueId) as currentLeagueTaxRate, di.national, di.nationalAppearances, di.week from dominanceplayers di where di.run = (select max(di1.run) from dominanceplayers di1 );\";\n\n\n/*msg.topic = \"SELECT di.*,dd.goal,\\n\" +\n\"\tdd.assist,\\n\" +\n\"\tdd.preassist,\\n\" +\n\"\tdm.minutes from (\\n\" +\n\"SELECT\\n\" +\n\"\tdi.playerId,\\n\" +\n\"\tdi.player,\\n\" +\n\"\tdi.lastName,\\n\" +\n\"\tdi.firstName,\\n\" +\n\"\tdi.birthDate,\\n\" +\n\"\tdi.position,\\n\" +\n\"\tdi.role,\\n\" +\n\"\tdi.role2,\\n\" +\n\"\tdi.teamId,\\n\" +\n\"\tdi.optaTeamId,\\n\" +\n\"\tdi.teamName,\\n\" +\n\"\t( SELECT c1.salaryCapFair FROM club c1 WHERE c1.teamID = di.teamId ) AS salayCapFair,\\n\" +\n\"\t( SELECT c.cluster FROM club c WHERE c.teamID = di.teamId ) AS clubCluster,\\n\" +\n\"\tdi.leagueId,\\n\" +\n\"\tdi.leagueName,\\n\" +\n\"\t( SELECT l.taxRate FROM league l WHERE l.leagueID = di.leagueId ) AS currentLeagueTaxRate,\\n\" +\n\"\tdi.national,\\n\" +\n\"\tdi.nationalAppearances,\\n\" +\n\"\t\\n\" +\n\"\tdi.WEEK \\n\" +\n\"FROM\\n\" +\n\"\tdominanceplayers di  \\n\" +\n\"WHERE\\n\" +\n\"\tdi.run = ( SELECT max( di1.run ) FROM dominanceplayers di1 )) di\\n\" +\n\"\tLEFT JOIN (SELECT * from dominanceplayerdata where run = (SELECT max(run) from dominanceplayerdata)) dd on dd.playerId = di.playerId LEFT JOIN (SELECT * from dominanceplayerminutes where run = (SELECT max(run) from dominanceplayerminutes)) dm on dm.playerId = di.playerId\"\n*/\n\n//msg.topic = \"select * from dominancedata\"\nmsg.dataSet = \"INFO\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 40,
        "wires": [
            [
                "afb31ee290792b56"
            ]
        ]
    },
    {
        "id": "9cec0112074d7610",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "UNIQ",
        "func": "\nmsg.topic=\"select dp.playerId, dp.player, dp.clusterId, dp.group, dp.uniqueness, dp.week from dominanceplayersparamsuniq dp where dp.run = (select max(dp1.run) from dominanceplayersparamsuniq dp1 )\";\nmsg.dataSet = \"UNIQ\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 120,
        "wires": [
            [
                "afb31ee290792b56"
            ]
        ]
    },
    {
        "id": "562e7c9ec0068d16",
        "type": "mysql",
        "z": "521d26a7dba2b3ee",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 860,
        "y": 220,
        "wires": [
            [
                "538a72c1386e11be"
            ]
        ]
    },
    {
        "id": "538a72c1386e11be",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "SET FLOW VARIABLES",
        "func": "    let propertyKey = \"playerId\"\n    \n    if (msg.dataSet==\"CLUBS\") propertyKey = \"clubId\"\n    if (msg.dataSet==\"LEAGUES\") propertyKey = \"leagueId\"\n    if (msg.dataSet==\"ROLES\") propertyKey = \"roleId\"\n    if (msg.dataSet==\"COUNTRIES\") propertyKey = \"countryId\"\n\n\n\n\n    let propertyName = \"_\"+msg.dataSet;\n    \n    msg[propertyName] = JSON.parse(JSON.stringify(msg.payload));\n\n    if (propertyName== \"_STATS\") flow.set(\"week\",msg.payload[0].week);\n   \n \n    \n    flow.get(\"logmsg\").message = \"loaded \"+propertyName +\" week \"+flow.get(\"week\")\n    node.log(flow.get(\"logmsg\"))\n    \n    let propertyIndexNameIndex = propertyName+\"Index\"\n    msg[propertyIndexNameIndex] = {}\n\n    for (let i=0; i<msg[propertyName].length;i++) {\n        \n        let ptemp = msg[propertyName][i];\n        let index = msg[propertyIndexNameIndex][ptemp[propertyKey]];\n        \n         if(index === undefined) { \n             \n            msg[propertyIndexNameIndex][msg[propertyName][i][propertyKey]] = []; \n            msg[propertyIndexNameIndex][msg[propertyName][i][propertyKey]][0] = i;\n            \n         } else {\n             \n             msg[propertyIndexNameIndex][msg[propertyName][i][propertyKey]].push(i); \n         }\n        \n    }\n    \n    flow.set(propertyName,true);\n    console.log(propertyIndexNameIndex+\" length: \"+Object.keys(msg[propertyIndexNameIndex]).length)\n    \nreturn msg;\n\n\n\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 220,
        "wires": [
            [
                "0843ce3ef22234ea"
            ]
        ]
    },
    {
        "id": "4aba5705e6deeb49",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "PLAYERS",
        "func": "\nmsg.topic=\"SELECT  b.id, ap.playerId, ap.lastName, ap.firstName,ap.shortLastName, ap.shortFirstName,  ap.knownName, ap.birthDate,ap.nationality, ap.superStar, ap.number, ap.roleId, ap.height,ap.foot,ap.highestPrice,ap.agent,ap.instagram,ap.sponsor, b.prevClubId, b.prevClubName, b.clubId, b.clubName,b.salary,b.salaryGross,b.startContract,b.endContract, b.contractType,b.masterClubId,b.masterClubName, b.masterClubStartContract, b.masterClubEndContract, b.transferPrice,b.transferPriceYear,b.tmValue \"\n            +\",ap.withdrawalClause, ap.percTransfPrice, ap.experience \"\n          +\"FROM `allplayers` ap, \"\n\n\t+\"(\t\tSELECT ape.id, ape.playerId, ape.prevClubId, ape.prevClubName, ape.clubId, ape.clubName,ape.salary,ape.salaryGross,ape.startContract,ape.endContract, ape.contractType,ape.masterClubId,ape.masterClubName, ape.masterClubStartContract,ape.masterClubEndContract, ape.transferPrice,ape.transferPriceYear, ape.tmValue \"\n\t+\"\t\tFROM allplayerseconomics ape \"\n\t+\"\t\tINNER JOIN ( \" \n\t+\"\t\t\t\tSELECT ape2.playerId, MAX(ape2.endContract) endContract\"\n\t+\"\t\t\t\tFROM allplayerseconomics ape2 \"\n\t+\"\t\t\t\tGROUP BY ape2.playerId \"\n\t+\"\t\t) ape3 ON ape.playerId = ape3.playerId AND ape.endContract = ape3.endContract ) b \"\n\n    +\"  where b.playerId=ap.playerId;\";\nmsg.dataSet = \"PLAYERS\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 160,
        "wires": [
            [
                "afb31ee290792b56"
            ]
        ]
    },
    {
        "id": "452b63db79f2b994",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "CLUBS",
        "func": "\nmsg.topic=\"SELECT ac.clubId, ac.name, ac.shortName, ac.city, ac.stadiumOwner,ace.leagueId,ace.leagueName,ace.cluster, ac.clubRank,ace.salaryGrossFair,ace.salaryNetFair,ace.salaryGross,ace.salaryNet,ace.premioFair,ace.noLimiteVendita,ace.perc,ace.revenues,ace.lastRevenues,ace.costs,ace.maxtr,ace.year, ac.uefaRank, ac.idTM from allclubs ac, allclubseconomics ace where ac.clubId=ace.clubId;\";\n\n\nmsg.topic = \"SELECT\\n\" +\n\"\tac.clubId,\\n\" +\n\"\tac.NAME,\\n\" +\n\"\tac.shortName,\\n\" +\n\"\tac.city,\\n\" +\n\"\tac.stadiumOwner,\\n\" +\n\"\tace.leagueId,\\n\" +\n\"\tace.leagueName,\\n\" +\n\"\tace.cluster,\\n\" +\n\"\tac.clubRank,\\n\" +\n\"\tace.salaryGrossFair,\\n\" +\n\"\tace.salaryNetFair,\\n\" +\n\"\tace.salaryGross,\\n\" +\n\"\tace.salaryNet,\\n\" +\n\"\tace.premioFair,\\n\" +\n\"\tace.noLimiteVendita,\\n\" +\n\"\tace.perc,\\n\" +\n\"\tace.revenues,\\n\" +\n\"\tace.lastRevenues,\\n\" +\n\"\tace.costs,\\n\" +\n\"\tace.maxtr,\\n\" +\n\"\tace.YEAR,\\n\" +\n\"\tac.uefaRank,\\n\" +\n\"\tac.idTM,\\n\" +\n\"\tac.lastPosition,\\n\" +\n\"\tac.website,\\n\" +\n\"\tac.foundationYear,\\n\" +\n\"\tac.stadiumCapacity,\\n\" +\n\"ac.leagueWinnerProb,\\n\" +\n\"ac.qualifiedForCupProd,\\n\" +\n\"ac.relegationProb,\\n\" +\n\"ac.oldRevenues,\\n\" +\n\"ac.salesPlayers5Y$,\\n\" +\n\"ac.purchasePlayers5Y$,\\n\" +\n\"ac.costOperating,\\n\" +\n\"ac.broadcastingRevenues,\\n\" +\n\"ac.commericialRevenues,\\n\" +\n\"ac.matchDayRevenues,\\n\" +\n\"ac.otherRevenues, \\n\" +\n\"ac.points \\n\" +\n\"FROM\\n\" +\n\"\tallclubs ac,\\n\" +\n\"\tallclubseconomics ace \\n\" +\n\"WHERE\\n\" +\n\"\tac.clubId = ace.clubId;\"\n\n\nmsg.dataSet = \"CLUBS\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 200,
        "wires": [
            [
                "afb31ee290792b56"
            ]
        ]
    },
    {
        "id": "fdaeb4295497251f",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "The Players and The Football Tree",
        "func": "console.log(\"PLAYER BASIC ANALISYS BEGINS\");\n\nconsole.log(\"DOMINANCE INFO IS MASTER TABLE\")\n\nflow.get(\"logmsg\").message = \"Player Basic Analisys and Tree Building Begins\"\nnode.log(flow.get(\"logmsg\"))\n\n    /**\n     *  Select \n            di.playerId, \n            di.player, \n            di.lastName, \n            di.firstName, \n            di.birthDate,\n            di.position, \n            di.teamId, \n            di.optaTeamId, \n            di.teamName, \n            (select c1.salaryCapFair from club c1 where c1.teamID = di.teamId) as salayCapFair, \n            (select c.cluster from club c where c.teamID = di.teamId) as clubCluster, \n            di.leagueId, \n            di.leagueName, \n            (select l.taxRate from league l where l.leagueID = di.leagueId) as currentLeagueTaxRate \n        from \n            dominanceplayerinfo di \n        where \n            di.run = (select max(di1.run) from dominanceplayerinfo di1 );\";\n    **/\n\n/** IMPORTO TUTTI I DATI **/\nconst _INFO = msg._INFO; //flow.get(\"_INFO\");\nconst _STATS = msg._STATS; //flow.get(\"_STATS\");\nconst _PLAYERS = msg._PLAYERS; //flow.get(\"_PLAYERS\");\nconst _VOLATILITY = msg._VOLATILITY; //flow.get(\"_VOLATILITY\");\nconst _UNIQ = msg._UNIQ; //flow.get(\"_UNIQ\");\nconst _ROLES = msg._ROLES; //flow.get(\"_ROLES\");\nconst _INFOIndex = msg._INFOIndex;\nconst _STATSIndex = msg._STATSIndex;\nconst _PLAYERSIndex = msg._PLAYERSIndex;\nconst _VOLATILITYIndex = msg._VOLATILITYIndex;\nconst _UNIQIndex = msg._UNIQIndex;\nconst _COUNTRIES = msg._COUNTRIES; //flow.get(\"_ROLES\");\n\nconst _DATA = msg._DATA; //flow.get(\"_ROLES\");\nconst _MINUTES = msg._MINUTES; //flow.get(\"_ROLES\");\n\nconst Utils = global.get(\"UTILS\");\n\nvar Leagues = msg.Leagues;\nvar Clubs = msg.Clubs;\nvar LeaguesIndex = msg.LeaguesIndex;\nvar ClubsIndex = msg.ClubsIndex;\n\nvar errors=flow.get(\"errors\");\n\n\n/** COSTRUISCO LE ASSOCIAZIONI TRA NOME RUOLO, RUOLO ID, GRUPPO e PESO DEL RUOLO**/\nvar getRoleIdFromRoleName = {}\nvar getRoleNameFromRoleId = {}\nvar getRoleGroupFromRoleId = {}\nvar getRoleGroupFromRoleName = {}\nvar getRoleWeightFromRoleGroup = {}\nvar getRoleRisFromRoleGroup = {}\nvar getRoleWeightFromRoleId = {}\n\ntry {\n    \n    _ROLES.forEach( role => {\n    \n        getRoleIdFromRoleName[role.ruolo] = role.idRuolo;\n        getRoleNameFromRoleId[role.idRuolo] = role.ruolo;\n        getRoleGroupFromRoleId[role.idRuolo] = role.gruppo;\n        getRoleGroupFromRoleName[role.ruolo] = role.gruppo;\n        getRoleWeightFromRoleGroup[role.gruppo] = role.peso\n        getRoleRisFromRoleGroup[role.gruppo] = role.ruoloris\n        getRoleWeightFromRoleId[role.idRuolo] = role.peso;\n    })\n    \n} catch (e) {\n    console.log(e)\n}\n\n\n/** IMPORTO LE DEFINIZIONI DEGLI OGGETTI CHE VERRANNO CREATI **/\nconst Player = global.get(\"ThePlayerObject\");\nconst Error = global.get(\"TheErrorObject\");\nconst PlayerError = global.get(\"ThePlayerErrorObject\");\n\nlet TheFootballTree = {} //Questo oggetto mi darà le relazioni tra Lega -> Club -> Giocatore così come sono espresse dalla tabella INFO\n\n\nlet PlayersWithErrors = []; // ARRAY CONTENTE I GIOCATORI SCARTATI\nlet PlayersErrors = [] //ARRAY CON TUTTI GLI ERRORI PER REPORT\n\nvar maxAbsind = 0; //usata nel calcolo del fatmol\nvar totFatmol = 0; //usata nel calcolo dell'effectiveness\nvar playersByGroup = {}\n\n//Per ogni run esiste un solo giocatore nella DOMINANCEPLAYERINFO e un solo giocatore viene estratto dalla tabella allplayers\n\n/**\n * NON TUTTI I GIOCATORI DELLA INFO SONO PRESENTI NELLE STATISTICHE. \n * QUINDI, QUANDO PRESENTI ASSOCIAMO ALL'OGGETTO PLAYER LE SUE ULTIME STATISTICHE RILEVATE E PER SEMPLICITA' \n * AGGIUNGIAMO ALL'OGGETTO PLAYER LE PIU' RECENTI RILEVAZIONI SU CLUSTER DI LEGA, PESO DELLA LEGA, RUOLO E PESO DEL RUOLO\n * **/\n\nconst setLatestDetectedStats = function(player) {\n    \n    player.avgPlayedMinuteShare = 0;\n    player.avgMicroIndex = 0;\n    player.avgMacroIndex = 0;\n    player.minutes = 0 ;\n    player.minutesShare = 0 ;\n    player.alert = 0 ;\n    player.latestDetectedMicroIndexInjury = 0;\n    player.latestDetectedMacroIndexInjury = 0;\n    \n \n    \n    let mostTimeSpent = true;\n\n    let start = player.latestStats ? player.latestStats[0] :  null;\n    if (start) {\n        let latest = player.latestStats.reduce( (next, stat) => {\n            \n            let d1 = new Date(next.to);\n            let d2 = new Date(stat.to);\n            \n            return (d2 > d1) ? stat : next \n                    \n                    \n            \n        },start)\n        \n        player.latestDetectedLeagueCluster  = latest.leagueCluster;\n        player.latestDetectedLeagueWeight   = latest.leagueWeight;\n        player.latestDetectedRoleGroup      = latest.roleGroup;\n        player.latestDetectedRoleWeight     = latest.roleWeight;\n        player.latestDetectedMinutes        = latest.minutes;\n        player.latestDetectedMicroIndex     = latest.microIndex;\n        player.latestDetectedMacroIndex     = latest.macroIndex;\n        player.latestDetectedMicroIndexInjury     = latest.microIndexInjury;\n        player.latestDetectedMacroIndexInjury     = latest.macroIndexInjury;\n        \n        player.latestDetectedMicroIndex = latest.microIndexInjury > 0 ? latest.microIndexInjury : player.latestDetectedMicroIndex;\n        player.latestDetectedMacroIndex = latest.macroIndexInjury > 0 ? latest.macroIndexInjury : player.latestDetectedMacroIndex;\n        \n\n    }   \n    \n    //calcolo %mingiocati, weighteMicroindex\n    if(start) {\n        \n        let avgMinShare = { count : 0 , tot : 0 }\n        let weightedMicroindex = { count : 0 , tot : 0, minutes : 0 }\n        let weightedMacroindex = { count : 0 , tot : 0, minutes : 0 }\n\n        player.minutes = 0 ;\n        player.alert = 0;\n        \n        player.latestStats.forEach( stat => {\n            \n            let d1 = new Date(stat.from);\n            let d2 = new Date(stat.to);\n            \n            stat.diffInWeeks  = Math.round( (d2 - d1)/1000/60/60/24/7);\n            \n            stat.minuteShare = ( (38/stat.diffInWeeks)*stat.minutes) /(38*90)\n            \n            \n            avgMinShare.count++\n            avgMinShare.tot = avgMinShare.tot + stat.minuteShare;\n            \n            /*weightedMicroindex.count++\n            weightedMicroindex.tot = weightedMicroindex.tot + ( stat.leagueWeight * stat.microIndex)  ;\n            \n            weightedMacroindex.count++\n            weightedMacroindex.tot = weightedMacroindex.tot + ( stat.leagueWeight * stat.macroIndex)  ;\n            \n            */\n            \n            weightedMicroindex.count++\n            weightedMicroindex.minutes = weightedMicroindex.minutes + stat.minutes\n            weightedMicroindex.tot = weightedMicroindex.tot + ( stat.leagueWeight * (stat.microIndexInjury ? stat.microIndexInjury : stat.microIndex) * stat.minutes)  ;\n            \n            weightedMacroindex.count++\n            weightedMacroindex.minutes = weightedMacroindex.minutes + stat.minutes\n            weightedMacroindex.tot = weightedMacroindex.tot + ( stat.leagueWeight * (stat.macroIndexInjury ? stat.macroIndexInjury : stat.macroIndex)  * stat.minutes )  ; //prima non consideravo l'injury\n            \n            player.minutes = player.minutes + stat.minutes;\n            player.alert = player.alert + stat.alert;\n            \n            mostTimeSpent = stat.minutes > player.latestDetectedMinutes ? false : mostTimeSpent;\n            \n        })\n        \n        player.avgPlayedMinuteShare = avgMinShare.tot/avgMinShare.count;\n        //player.avgMicroIndex = player.latestDetectedLeagueCluster ==1 && player.latestDetectedMinutes > 599 && mostTimeSpent ? player.latestDetectedMicroIndex :  weightedMicroindex.tot/weightedMicroindex.count;\n        //player.avgMacroIndex = weightedMacroindex.tot/weightedMacroindex.count;\n        \n        player.avgMicroIndex = player.latestDetectedLeagueCluster ==1 && player.latestDetectedMinutes > 599 && mostTimeSpent ? player.latestDetectedMicroIndex :  weightedMicroindex.tot/weightedMicroindex.minutes;\n        player.avgMacroIndex = weightedMacroindex.tot/weightedMacroindex.minutes;\n\n        \n        //ALERT sono calcolati come la somma dei microAlert nel periodo di riferimento\n        //player.alert = player.latestStats && player.latestStats.length > 0 ? player.latestStats.reduce( (totAlert, stat) => { return totAlert + stat.microAlert; },0) : 0 //default 0\n    \n        //PERFORMANCE è calcolata come la media aritmetica dei prodotti microIndex * peso della lega \n         /*let tmpArr = player.latestStats && player.latestStats.length > 0 \n                                ? player.latestStats.reduce( (totals, stat) => { \n        \n                                    totals[0] = totals[0] + ( stat.leagueWeight * stat.microIndex ) \n                                    totals[1] = totals[1] + 1 // stat.leagueWeight Passaggio d amedia ponderata a media pesata\n       \n                                    return totals;\n        \n                                },[0,0]) : [0,0]\n        \n        player.avgMicroIndex =  tmpArr[1]!==0 ? tmpArr[0]/tmpArr[1] : 0 */ //default 0\n        \n       //MINUTI TOTALI\n       // player.minutes =  player.latestStats && player.latestStats.length > 0 ? player.latestStats.reduce( (totMinutes, stat) => { return totMinutes + stat.minutes; },0) : 0 //default 0\n        \n        player.minutes = player.minutes > 5130 ? 5130 : player.minutes;\n        player.minutesShare = player.minutes > 5130 ? 100 : ( player.minutes/5130) * 100;\n\n    }\n    \n}\n\n/**\n * NON TUTTI I GIOCATORI DELLA INFO SONO PRESENTI NEI PARAMS . \n * QUINDI, QUANDO PRESENTI ASSOCIAMO ALL'OGGETTO PLAYER LE ULTIME PARAMS RILEVATE E PER SEMPLICITA' \n * AGGIUNGIAMO ALL'OGGETTO PLAYER LE PIU' RECENTI RILEVAZIONI SU UNICITA' E VOLATITLITA'\n * **/\n\nconst setLatestParams = function(player) {\n    \n    let microv = { 'tot' : 0, 'count' : 0};\n    let macrov = { 'tot' : 0, 'count' : 0};\n    let uniq = { 'tot' : 0, 'count' : 0};\n\n    \n    if (player.latestParams && player.latestParams.length>0){\n        \n        //console.log(\"id : \", player. playerId, \" latestDetectedLeagueCluster \" , player.latestDetectedLeagueCluster , \" latestDetectedRoleGroup \" , player.latestDetectedRoleGroup)\n       \n        for (let i=0;i<player.latestParams.length;i++) {\n            \n            //console.log(\"latestParams[i]\", player.latestParams[i]  )\n            \n            if (player.latestDetectedLeagueCluster==player.latestParams[i].clusterId && player.latestDetectedRoleGroup==player.latestParams[i].group ) {\n                \n                \n                if ( player.latestParams[i].microVolatility && !isNaN(player.latestParams[i].microVolatility) ) {\n                     microv.tot = player.latestParams[i].microVolatility + microv.tot;\n                     microv.count++ \n                }\n                \n                if ( player.latestParams[i].macroVolatility && !isNaN(player.latestParams[i].macroVolatility) ) {\n                     macrov.tot = player.latestParams[i].macroVolatility + macrov.tot;\n                     macrov.count++ \n                }\n                \n                if ( player.latestParams[i].uniqueness && !isNaN(player.latestParams[i].uniqueness) ) {\n                     uniq.tot = player.latestParams[i].uniqueness + uniq.tot;\n                     uniq.count++ \n                }\n            }\n            \n        }\n    \n    \n        //console.log(microv)\n        \n    } \n    \n    player.latestMicroVolatility = microv.count > 0 ? ( microv.tot / microv.count ) : 0;\n    player.latestMacroVolatility = macrov.count > 0 ? ( macrov.tot / macrov.count ) : 0;\n    player.latestUniqueness = uniq.count > 0 ? ( uniq.tot / uniq.count ) : 0;\n    \n    \n\n    if (player.latestMicroVolatility) {\n       // console.log(player.playerId, \"vol \", player.latestMicroVolatility)\n    }\n}\n\n\n\n// BLOCCO ORIGINALE\nconsole.log(\"Duplicate Filtering\");\n\n//DUPLICATE FILTERING\n let InfoPlayerIndex = {};\n let dup = 0;\ntry {\n    \n    for(let pos = 0; pos<_INFO.length; pos++) {\n    \n    if(_INFO[pos].leagueId && !isNaN(LeaguesIndex[_INFO[pos].leagueId]) ) { //solo i record che hanno un id valido\n        \n        if (InfoPlayerIndex[_INFO[pos].playerId]===undefined) {\n            \n            InfoPlayerIndex[_INFO[pos].playerId] = pos;\n           \n        \n            \n        } else {\n            dup++\n            let prevPlayer = _INFO[InfoPlayerIndex[_INFO[pos].playerId]]; // Croazia 6\n            let currPlayer = _INFO[pos]; // ENg 3\n            \n            let prevPlayerCluster =  LeaguesIndex[prevPlayer.leagueId].cluster; // 6\n            let currPlayerCluster =  LeaguesIndex[currPlayer.leagueId].cluster; // 3\n            \n            // Cerco la statistica più recente\n            let statArray = [];\n            \n            for(let statPos = 0; statPos<_STATS.length; statPos++) { \n                \n               if ( _STATS[statPos].playerId == _INFO[pos].playerId) {\n                    statArray.push(_STATS[statPos])\n                }\n            }\n            \n            \n            if ( statArray.length > 0 ) { //ho trovato le statistiche\n                \n                let start = statArray[0];\n    \n                let latest = statArray.reduce( (next, stat) => { // cerco la più recente\n            \n                    let d1 = new Date(next.to);\n                    let d2 = new Date(stat.to);\n                \n                    return (d2 > d1) ? stat : next \n                    \n                \n                },start) // stat cluster 6\n                \n                \n                let highestClusterStat = statArray.reduce( (next, stat) => { // cerco la più recente\n            \n                    let d1 = next.clusterId\n                    let d2 = stat.clusterId;\n                \n                    return (d2 > d1) ? stat : next  \n                },start) // stat cluster 8\n                \n                let lowestClusterStat = statArray.reduce( (next, stat) => { // cerco la più recente\n            \n                    let d1 = next.clusterId\n                    let d2 = stat.clusterId;\n                \n                    return (d2 < d1) ? stat : next  \n                },start) //stat cluster 1\n                \n                if(highestClusterStat.minutes >= 600 ) { //Se il giocatore ha giocato almeno 600 minuti nella squadra di cluster più elevato allora assegno quel cluster\n                    \n                    prevPlayer.duplicate = prevPlayerCluster == highestClusterStat.clusterId ? false : true;\n                    currPlayer.duplicate = currPlayerCluster == highestClusterStat.clusterId ? false : true;\n                    \n                } else if (highestClusterStat.minutes < 600 ) {\n                    \n                    prevPlayer.duplicate = prevPlayerCluster == lowestClusterStat.clusterId ? false : true;\n                    currPlayer.duplicate = currPlayerCluster == lowestClusterStat.clusterId ? false : true;\n                    \n                } else {  // altrimenti assegno il più recente\n                \n                    prevPlayer.duplicate = prevPlayerCluster == latest.clusterId ? false : true;\n                    currPlayer.duplicate = currPlayerCluster == latest.clusterId ? false : true;\n                    \n                }\n                \n                if (prevPlayer.duplicate && currPlayer.duplicate ) { // se sono entrambi veri o entrambi falsi non posso prendere una decisione... assegno cluster più alto\n                \n                    prevPlayer.duplicate = prevPlayerCluster > currPlayerCluster ? true : false;\n                    currPlayer.duplicate = prevPlayerCluster < currPlayerCluster ? true : false;\n                    \n                     if ( prevPlayerCluster == currPlayerCluster) {\n                        \n                        prevPlayer.duplicate = true;\n                        currPlayer.duplicate= true;\n                        \n                    } \n\n                }\n                if (!prevPlayer.duplicate && !currPlayer.duplicate ) { // se sono entrambi veri o entrambi falsi non posso prendere una decisione... assegno cluster più alto\n                \n                    prevPlayer.duplicate = prevPlayerCluster > currPlayerCluster ? true : false;\n                    currPlayer.duplicate = prevPlayerCluster < currPlayerCluster ? true : false;\n                    \n                    if ( prevPlayerCluster == currPlayerCluster) {\n                        \n                        prevPlayer.duplicate = true;\n                        currPlayer.duplicate= true;\n                        \n                    } \n                    \n                }\n            } else { // NON HO STATISTICHE\n            \n                prevPlayer.duplicate = prevPlayerCluster > currPlayerCluster ? true : false;\n                currPlayer.duplicate = prevPlayerCluster < currPlayerCluster ? true : false;\n                \n               if ( prevPlayerCluster == currPlayerCluster) {\n                        \n                        prevPlayer.duplicate = true;\n                        currPlayer.duplicate= true;\n                        \n                    } \n            }\n            \n            \n        \n            \n        }\n   \n    }\n    \n}\n    \n} catch (e) {\n    console.log(e)\n}\nconsole.log(\"Found \"+dup+\" duplicates\")\n\n\n/*console.log(\"Duplicate Filtering\");\n\n//DUPLICATE FILTERING\n let InfoPlayerIndex = {};\n let dup = 0;\ntry {\n    \n    for(let pos = 0; pos<_INFO.length; pos++) {\n    \n    if(_INFO[pos].leagueId && !isNaN(LeaguesIndex[_INFO[pos].leagueId]) ) { //solo i record che hanno un id valido\n        \n        if (InfoPlayerIndex[_INFO[pos].playerId]===undefined) {\n            \n            InfoPlayerIndex[_INFO[pos].playerId] = pos;\n           \n        \n            \n        } else {\n            dup++\n            let prevPlayer = _INFO[InfoPlayerIndex[_INFO[pos].playerId]]; \n            let currPlayer = _INFO[pos]; \n            \n            let prevPlayerCluster =  LeaguesIndex[prevPlayer.leagueId].cluster;\n            let currPlayerCluster =  LeaguesIndex[currPlayer.leagueId].cluster;\n            \n            // Cerco la statistica più recente\n            let statArray = [];\n            \n            for(let statPos = 0; statPos<_STATS.length; statPos++) { \n                \n               if ( _STATS[statPos].playerId == _INFO[pos].playerId) {\n                    statArray.push(_STATS[statPos])\n                }\n            }\n            \n            \n            if ( statArray.length > 0 ) { //ho trovato le statistiche\n                \n                let start = statArray[0];\n    \n                let latest = statArray.reduce( (next, stat) => { // cerco la più recente\n            \n                    let d1 = new Date(next.to);\n                    let d2 = new Date(stat.to);\n                \n                    return (d2 > d1) ? stat : next \n                    \n                \n                },start)\n                \n                \n                let highestClusterStat = statArray.reduce( (next, stat) => { // cerco la più alta (numero più basso)\n            \n                    let d1 = next.clusterId\n                    let d2 = stat.clusterId;\n                \n                    return (d2 < d1) ? stat : next  \n                },start)\n                \n                let lowestClusterStat = statArray.reduce( (next, stat) => { // cerco la più bassa (numero più alto)\n            \n                    let d1 = next.clusterId\n                    let d2 = stat.clusterId;\n                \n                    return (d2 > d1) ? stat : next  \n                },start)\n                \n                if(highestClusterStat.minutes >= 270 ) { //Se il giocatore ha giocato almeno 270 minuti nella squadra di cluster più elevato\n                    \n                    prevPlayer.duplicate = prevPlayerCluster == highestClusterStat.clusterId ? false : true;\n                    currPlayer.duplicate = currPlayerCluster == highestClusterStat.clusterId ? false : true;\n                    \n                } else { // Se non ha almeno 270 minuti nel cluster più alto, prendi il cluster più basso\n                    \n                    prevPlayer.duplicate = prevPlayerCluster == lowestClusterStat.clusterId ? false : true;\n                    currPlayer.duplicate = currPlayerCluster == lowestClusterStat.clusterId ? false : true;\n                    \n                }\n                \n                if (prevPlayer.duplicate && currPlayer.duplicate ) { // se sono entrambi duplicati, prendi il record più recente\n                \n                    prevPlayer.duplicate = prevPlayerCluster == latest.clusterId ? false : true;\n                    currPlayer.duplicate = currPlayerCluster == latest.clusterId ? false : true;\n                    \n                     if (prevPlayer.duplicate && currPlayer.duplicate) {\n                        // Se ancora entrambi duplicati, scegli arbitrariamente\n                        prevPlayer.duplicate = true;\n                        currPlayer.duplicate = false;\n                    }\n\n                }\n                if (!prevPlayer.duplicate && !currPlayer.duplicate ) { // se nessuno è duplicato, prendi il record più recente\n                \n                    prevPlayer.duplicate = prevPlayerCluster == latest.clusterId ? false : true;\n                    currPlayer.duplicate = currPlayerCluster == latest.clusterId ? false : true;\n                    \n                    if (!prevPlayer.duplicate && !currPlayer.duplicate) {\n                        // Se ancora nessuno è duplicato, scegli arbitrariamente\n                        prevPlayer.duplicate = true;\n                        currPlayer.duplicate = false;\n                    }\n                    \n                }\n            } else { // NON HO STATISTICHE\n            \n                // Se il cluster è più basso (numero più piccolo), mantieni quel record\n                if (prevPlayerCluster < currPlayerCluster) {\n                    prevPlayer.duplicate = false;\n                    currPlayer.duplicate = true;\n                } else if (prevPlayerCluster > currPlayerCluster) {\n                    prevPlayer.duplicate = true;\n                    currPlayer.duplicate = false;\n                } else {\n                    // Se i cluster sono uguali, scegli arbitrariamente\n                    prevPlayer.duplicate = true;\n                    currPlayer.duplicate = false;\n                }\n            }\n            \n            \n        \n            \n        }\n   \n    }\n    \n}\n    \n} catch (e) {\n    console.log(e)\n}\nconsole.log(\"Found \"+dup+\" duplicates\")*/\n\n var start = new Date(); \nconsole.log(\"Loop Begins at \"+start);\n_INFO.forEach( p => {\n    \n    try {\n        \n    // ANAGRAFICA DALLA TABELLA PLAYER\n    let player = new Player(p.playerId,p.firstName,p.lastName)\n    \n        player._id = player.playerId; // PER MONGO DB\n        player.week = p.week\n        player.year = new Date().getFullYear() // Potrebbe esserci un problema nei primi giorni del nuovo anno\n    \n        player.Errors = []; // ERRORI CHE RENDONO IMPOSSIBILE L'ELABORAZIONE. SE PRESENTI IL GIOCATORE DEVE ESSERE SCARTATO\n        player.Warnings = []; // ERRORI NON BLOCCANTI PER L'ELABORAZIONE. IL GIOCATORE NON VIENE SCARTATO.\n        player.Alerts = []; // CONTROLLI STATISTICI SUI DATI\n    \n        player.name = p.player\n        \n        \n       \n        \n        /**\n         * CERCHIAMO IL GIOCATORE TRA I GIOCATORI CENSITI DA STANDARD FOOTBALL E ARRICCHIAMO L'OGGETTO\n         * */\n         \n        let SFPlayer = _PLAYERSIndex[player.playerId] !== undefined ? _PLAYERS[_PLAYERSIndex[player.playerId]] : null; //PLayers INdex è costruito nell ipotesi di avere più di unrecord per lo stesso id, ad oggi però questo non avviene\n        \n        if(!SFPlayer) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-STDPLAYER\",\"Player Missing\",player,\"Can't find the player in Standard Football registry \"); \n            PlayersErrors.push(e);\n            player.Errors.push(e);\n          \n            //errors.push(new Error(\"EPLAYER\",\"Player\",player.playerId, player.name,\"Player not monitored in Standard Fottoball\"))\n        }\n        \n        if( SFPlayer) {\n            player.shortFirstName = SFPlayer.shortFirstName\n            player.shortLastName = SFPlayer.shortLastName\n            player.knownName = SFPlayer.knownName\n            player.roleId = SFPlayer.roleId\n            \n        }\n        \n        if(p.birthDate && !p.birthDate.toString().includes(\"1970\")){\n            player.birthDate=new Date(p.birthDate)\n        } else if( SFPlayer && SFPlayer.birthDate) {\n             player.birthDate=new Date(SFPlayer.birthDate)\n        } else {\n            player.birthDate=new Date(\"01/01/1995\");\n        } \n\n        \n        //player.birthDate =  p.birthDate && !p.birthDate.toString().includes(\"1970\") ? new Date(p.birthDate) : SFPlayer && SFPlayer.birthDate ?  new Date(SFPlayer.birthDate) : new Date(\"01/01/1995\") ;\n        \n        player.age = player.birthDate ? parseInt(Utils.calculateAge(player.birthDate)) : null;\n        \n        if (player.playerId == '1iki63yupn9fwwy4k5w7wus5w') {\n            \n            console.log('1iki63yupn9fwwy4k5w7wus5w',player)\n        }\n        player.months = Math.abs(Utils.diffInMonths(player.birthDate,new Date()) % 12)\n        player.months = player.months ? player.months : 0;\n        player.ageWithDecimals = player.birthDate ? parseInt(Utils.calculateAgeWithDecimals(player.birthDate)) : null; \n        \n        player.currentPosition = p.position;\n        //SQUADRA ATTUALE COME DA TABELLA INFO\n        player.currentRole           = !p.role || p.role==\"null\" ? p.position : p.role;\n        player.currentRole2          = p.role2;\n\n    \n        player.currentClubId = p.teamId;\n        player.currentClubName = p.teamName;\n        \n        player.currentLeagueId = p.leagueId;\n        player.currentLeagueName = p.leagueName;\n\n        player.nationalTeamPlayer = p.nationalAppearances > 4 ? true : false; \n        \n      \n        \n        player.minutesLastSeason =  _MINUTES.filter(d =>  d.playerId===player.playerId).map(d => d.minutes)[0]\n        player.goal =  _DATA.filter(d =>  d.playerId===player.playerId).map(d => d.goal)[0]\n        player.assist =  _DATA.filter(d =>  d.playerId===player.playerId).map(d => d.assist)[0]\n        player.preassist =  _DATA.filter(d =>  d.playerId===player.playerId).map(d => d.preassist)[0]\n        \n        \n        player.minutesLastSeason =  player.minutesLastSeason ? player.minutesLastSeason : 0;\n        player.goal =  player.goal ? player.goal : 0;\n        player.assist =  player.assist ? player.assist : 0;\n        player.preassist =  player.preassist ? player.preassist : 0;\n        \n\n        \n        \n        // CERCHIAMO IL CLUB E LA LEGA\n        \n        let Club = ClubsIndex[player.currentClubId] !== undefined ? Clubs[ClubsIndex[player.currentClubId]] : null;\n        let League =  LeaguesIndex[player.currentLeagueId] !== undefined ? Leagues[LeaguesIndex[player.currentLeagueId]] : null;\n        \n        \n         //ERRORI\n    \n     \n        if (!player.birthDate) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-BD\",\"BirthDate Missing\",player,\"From Info birthdate : \"+p.birthDate); \n            PlayersErrors.push(e);\n            //player.Errors.push(e);\n            \n        }\n  \n        if (p.birthDate && !player.birthDate) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-BDPARSE\",\"Cannot parse BirthDate\",player,\"From Info birthdate : \"+p.birthDate); \n            PlayersErrors.push(e);\n            //player.Errors.push(e);\n            \n        }\n        \n        if (isNaN(player.age)) {\n            \n            \n            let e = new PlayerError(\"ERROR\",\"ERR-AGE\",\"Cannot parte age\",player,\"Age: \"+p.age); \n            PlayersErrors.push(e);\n            //player.Errors.push(e);\n            \n            console.log('isNaN(player.age)',player)\n            \n        }\n        \n        if (!Club || Club===null || Club === undefined) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-CLUB\",\"Club Missing\",player,\"Can't find club for the given id\"); \n            PlayersErrors.push(e);\n            player.Errors.push(e);\n            \n           \n        }\n            \n        if (!League || League===null || League === undefined) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-LEAGUE\",\"League Missing\",player,\"Can't find league for the given id\"); \n            PlayersErrors.push(e);\n            player.Errors.push(e);\n           \n        }    \n            \n        \n        \n       if (p.duplicate) {\n           \n           let e = new PlayerError(\"ERROR\",\"ERR-INFO\",\"Duplicate Player\",player,\"A player with same ID already exists, this player will be discarded \"); \n            PlayersErrors.push(e);\n            player.Errors.push(e);\n           \n       }\n         //ERRORE UN GIOCATORE CON LO STESSO ID E' GIA' PRESENTE. Consideriamo il giocatore che gioca nella lega di cluster migliore\n    \n        if (SFPlayer && player.currentClubId !== SFPlayer.clubId ) {\n            \n            \n            let e = new PlayerError(\"WARNING\",\"WARN-CLUBMISMATCH\",\"Club in info differes from club in SF\",player, \"\"+SFPlayer.clubName + \" | \" +SFPlayer.clubId); \n            PlayersErrors.push(e);\n            //player.Warnings.push(e); //Questo è un warning.\n            \n        }\n        \n       \n        /**\n        * CHECKPOINT\n        * \n        * Gli errori fino ad ora mi indicano problemi nella struttura del giocatore (età, club, lega e dati sulla nostra tabella player)\n        * \n        * Tutti gli errori sono BLOCCANTI e quindi se presenti interrompiamo l'esecuzione.\n        * */\n        \n        if (player.Errors.length>0) {\n            \n            PlayersWithErrors.push(player);\n            return; // interrompiamo l'esecuzione e passiamo al prossimo giocaotre\n        } \n       \n       \n       Club.leagueId = League.leagueId;\n       \n       \n        //MASTER CLUB\n        player.masterClubId = SFPlayer.masterClubId;\n        let MasterClub = ClubsIndex[player.masterClubId] !== undefined ? Clubs[ClubsIndex[player.masterClubId]] : null;\n\n        if (!MasterClub) {\n            \n            let e = new PlayerError(\"WARNING\",\"WARN-MASTERCLUB\",\"Master Club Missing\",player,\"Can't find club for the given id\"); \n            PlayersErrors.push(e);\n            //player.Warnings.push(e); //Questo è un warning.\n            \n            //PROSEGUIAMO\n        } /*else {\n            \n            let MasterClub = ClubsIndex[player.masterClubId] !== undefined ? Clubs[ClubsIndex[player.masterClubId]] : null;\n            let MasterLeague =  MasterClub && LeaguesIndex[MasterClub.leagueId] !== undefined ? Leagues[LeaguesIndex[MasterClub.leagueId]] : null;\n        \n            player.masterClubName = MasterClub ?  MasterClub.name : null;\n            player.masterLeagueName = MasterClub && MasterLeague ?  MasterLeague.name : null;\n            player.masterLeagueId = MasterClub && MasterLeague ?  MasterLeague.leagueId : null;\n\n            \n            \n        }*/\n        \n        \n       \n        /** LATEST */\n        player.currentLeagueCluster = League.cluster;\n        player.currentLeagueWeight = League.weight;\n        player.currentLeagueTaxRate = League.taxRate;\n        player.currentLeagueCountry = League.country;\n        player.currentLeagueCountryCode = League.countryCode;\n        player.currentLeagueNameExtended = League.name + \"(\"+League.countryCode+\")\";\n\n        player.currentClubCluster = Club.cluster;\n        player.currentClubRank = Club.clubRank;\n        player.currentClubShortName = Club.shortName;\n\n        \n\n        let nArr = SFPlayer.nationality.split(\",\")\n        \n        player.nationality = nArr && nArr[0] ? nArr[0].trim() : \"\"\n        player.nationality2 = nArr && nArr[1] ? nArr[1].trim() : \"\"\n        \n        if (!player.nationality || player.nationality.length < 2 ) {\n            \n            \n            let e = new PlayerError(\"WARNING\",\"WARN-NATIONALITY\",\"Nationality missing\",player,null); \n            PlayersErrors.push(e);\n            //player.Warnings.push(e); //Questo è un warning.\n            \n        } else {\n           \n            player.nationalityCode = _COUNTRIES.filter(c =>  c.tm===player.nationality || c.tm2===player.nationality).map(c => c.countryCode)[0]\n            player.nationality2Code = _COUNTRIES.filter(c => c.tm===player.nationality2 || c.tm2===player.nationality2).map(c => c.countryCode)[0]\n\n            player.nationalityCode = player.nationalityCode ? player.nationalityCode : \"\";\n            player.nationality2Code = player.nationality2Code ? player.nationality2Code : \"\";\n\n            \n        }\n        \n        \n\n        //ECONOMIC DATA COMING FROM PLAYER\n        player.contractType = SFPlayer.contractType;\n        player.salaryNet = SFPlayer.salary;\n        player.salaryGross = SFPlayer.salaryGross ? SFPlayer.salaryGross : player.salaryNet * ( League.taxRate ?  League.taxRate : 1.825 );\n        player.startContract = new Date(SFPlayer.startContract);\n        player.endContract = new Date(SFPlayer.endContract);\n        \n        player.startContract = ( player.startContract instanceof Date && !isNaN(player.startContract) ) ? player.startContract : new Date(\"07/01/2022\");\n        player.endContract = ( player.endContract instanceof Date && !isNaN(player.endContract) ) ? player.endContract : new Date(\"06/30/2024\");\n        \n        if(player.playerId==\"ch9vdm5iaz7gsmb3s592oyf3d\") {\n            \n            console.log(\"player.startContract\",player.startContract)\n            console.log(\"player.endContract\",player.endContract)\n\n        }\n        \n        player.remainingYearsOfContract = player.endContract ? Utils.ryc(player.endContract) : null;\n        player.remainingMonthsOfContract = (player.endContract) ?  Utils.diffInMonths(new Date(player.endContract),new Date()) : null;\n        \n        player.remainingYearsOfContract =  player.remainingMonthsOfContract < 6 ? 0 : player.remainingYearsOfContract;\n        \n       \n        player.totalYearsOfContract = (player.endContract && player.startContract ) ? Utils.tyc(player.startContract,player.endContract) : null;\n        player.totalMonthsOfContract = (player.endContract && player.startContract) ?  Utils.diffInMonths(player.endContract,player.startContract) : null;\n\n        player.transferPrice = SFPlayer.transferPrice != null ? SFPlayer.transferPrice : 0;\n        player.transferPriceYear = SFPlayer.transferPriceYear != null ? SFPlayer.transferPriceYear : 0;\n        player.tmValue = SFPlayer.tmValue != null ? SFPlayer.tmValue : 0;\n        player.percTransfPrice = SFPlayer.percTransfPrice\n        player.withdrawalClause = SFPlayer.withdrawalClause\n        \n        //EXPERIENCE\n        player.experience = SFPlayer.experience ? SFPlayer.experience : 0;\n        \n        player.masterClubStartContract = SFPlayer && SFPlayer.masterClubStartContract ? new Date(SFPlayer.masterClubStartContract) : null;\n        player.masterClubStartContract = ( player.masterClubStartContract instanceof Date && !isNaN(player.masterClubStartContract) ) ? player.masterClubStartContract : new Date(\"06/30/2024\");\n        \n        player.masterClubEndContract = SFPlayer && SFPlayer.masterClubEndContract ? new Date(SFPlayer.masterClubEndContract) : null;\n        player.masterClubEndContract = ( player.masterClubEndContract instanceof Date && !isNaN(player.masterClubEndContract) ) ? player.masterClubEndContract : new Date(\"06/30/2024\");\n        \n        \n        \n        player.remainingYearsOfMasterClubContract = player.masterClubEndContract ? Utils.ryc(player.masterClubEndContract) : null;\n        player.remainingMonthsOfMasterClubContract = (player.masterClubEndContract) ?  Utils.diffInMonths(new Date(player.masterClubEndContract),new Date()) : null;\n        \n        player.remainingYearsOfMasterClubContract =  player.remainingMonthsOfMasterClubContract < 6 ? 0 : player.remainingYearsOfMasterClubContract;\n        \n       \n        player.totalYearsOfMasterClubContract = (player.masterClubEndContract && player.masterClubStartContract ) ? Utils.tyc(player.masterClubStartContract,player.masterClubEndContract) : null;\n        player.totalMonthsOfMasterClubContract = (player.masterClubEndContract && player.masterClubStartContract) ?  Utils.diffInMonths(player.masterClubEndContract,player.masterClubStartContract) : null;\n        \n        \n        player.height=SFPlayer.height\n        player.foot=SFPlayer.foot\n        player.highestPrice=SFPlayer.highestPrice\n        player.agent=SFPlayer.agent\n        player.instagram=SFPlayer.instagram\n        player.sponsor=SFPlayer.sponsor\n        player.number = SFPlayer.number ? SFPlayer.number : 0;\n        \n        //Check DATI STANDARD FOOTBALL\n        \n        if (!player.salaryNet && player.salaryNet !== 0) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-salaryNet\",\"Salary Missing\",player,null); \n            PlayersErrors.push(e);\n            player.Errors.push(e); \n            \n        }\n        \n        if (!player.startContract) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-STARTCONTRACT\",\"Start Contract Date Missing\",player,null); \n            PlayersErrors.push(e);\n            player.Errors.push(e); \n        }\n        \n        if (!player.endContract) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-ENDCONTRACT\",\"End Contract Date Missing\",player,null); \n            PlayersErrors.push(e);\n            player.Errors.push(e);\n            \n        }\n        \n        if (isNaN(player.remainingYearsOfContract) || player.remainingYearsOfContract == null) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-RYOC\",\"Cannnot calculare RYOC\",player,null); \n            PlayersErrors.push(e);\n            player.Errors.push(e);\n        }\n        \n        if (isNaN(player.totalYearsOfContract) || player.totalYearsOfContract == null) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-TYOC\",\"Cannnot calculare TYOC\",player,null); \n            PlayersErrors.push(e);\n            player.Errors.push(e);\n            \n        }\n        \n        if (isNaN(player.remainingMonthsOfContract) || player.remainingMonthsOfContract == null) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-RMOC\",\"Cannnot calculare RMOC\",player,null); \n            PlayersErrors.push(e);\n            player.Errors.push(e);\n        }\n        \n        if (isNaN(player.totalMonthsOfContract) || player.totalMonthsOfContract == null) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-TMOC\",\"Cannnot calculare TMOC\",player,null); \n            PlayersErrors.push(e);\n            player.Errors.push(e);\n            \n        }\n        \n        if (!player.contractType) {\n            \n            let e = new PlayerError(\"WARNING\",\"WARN-CONTRACTTYPE\",\"Contract type missing\",player,null); \n            PlayersErrors.push(e);\n            //player.Warnings.push(e); //Questo è un warning.\n            \n        }\n        \n        if (player.currentClubId==player.masterClubId &&  !player.contractType.includes(\"Propriet\")){\n            \n            let e = new PlayerError(\"WARNING\",\"WARN-CONTRACTTYPE\",\"Invalid contract type\",player,\"Contract type is: \"+player.contractType+\" but Current Club and Master Club are the same\"); \n            PlayersErrors.push(e);\n            //player.Warnings.push(e); //Questo è un warning.\n            \n        }  \n        \n        \n        if (player.remainingYearsOfContract===0) {\n            \n            let e = new PlayerError(\"WARNING\",\"WARN-RYOC\",\"Contract Expired\",player,\"End Contract is: \"+player.endContract); \n            PlayersErrors.push(e);\n            //player.Warnings.push(e); //Questo è un warning.\n\n        }\n        \n        \n        \n         /**\n        * CHECKPOINT 2\n        * \n        * Gli errori fino ad ora mi indicano problemi nei dati sulla tabella player di STANDARD FOOTBALL\n        *  \n        * Tutti gli errori sono BLOCCANTI e quindi se presenti interrompiamo l'esecuzione.\n        * */\n        \n        if (player.Errors.lenght>0) {\n            \n            PlayersWithErrors.push(player);\n            return; // interrompiamo l'esecuzione e passiamo al prossimo giocaotre\n        }\n        \n       \n        //ADDING DATA FROM STATS\n        player.latestStats = []; // POTREBBE RIMANERE VUOTO => I PARAMETRI DERIVANTI DA QUESTE STATISTICHE DOVRANNO AVERE UN VALORE DI DEFAULT\n        \n        let playerStatsIndex = _STATSIndex ? _STATSIndex[player.playerId] : null;\n        \n        if (playerStatsIndex && playerStatsIndex !== undefined && playerStatsIndex.length>0) {\n            for (let i=0;i<playerStatsIndex.length;i++) {\n                player.latestStats[i] = _STATS[playerStatsIndex[i]];\n            }\n        }    \n        \n        setLatestDetectedStats(player);\n        \n        \n        player.latestRoleGroup = player.latestDetectedRoleGroup ? player.latestDetectedRoleGroup :  getRoleGroupFromRoleName[player.currentPosition];\n        player.latestRoleWeight = getRoleWeightFromRoleId[player.roleId] ? getRoleWeightFromRoleId[player.roleId] : ( player.latestDetectedRoleWeight ? player.latestDetectedRoleWeight : getRoleWeightFromRoleGroup[player.latestRoleGroup]);\n        player.latestLeagueCluster = player.latestDetectedLeagueCluster ? player.latestDetectedLeagueCluster : player.currentLeagueCluster;\n        player.latestRoleRis = getRoleRisFromRoleGroup[player.latestRoleGroup];\n\n        player.latestMicroIndexInjury = player.latestDetectedMicroIndexInjury ? player.latestDetectedMicroIndexInjury : 0;\n        player.latestMacroIndexInjury = player.latestDetectedMacroIndexInjury ? player.latestDetectedMacroIndexInjury : 0;\n        \n        if (player.latestRoleGroup == undefined) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-ROLE\",\"Role Group Missing\",player,\"Player position is  \"+player.currentPosition); \n            PlayersErrors.push(e);\n            player.Errors.push(e); //Questo è un warning.\n            \n        } \n        \n        if (player.latestRoleGroup  != undefined && player.latestRoleWeight == undefined) {\n            \n            let e = new PlayerError(\"ERROR\",\"WARN-ROLE\",\"Role Weight Missing\",player,\"Player position is  \"+player.currentPosition); \n            PlayersErrors.push(e);\n            player.Errors.push(e); //Questo è un warning.\n            \n        } \n        \n    \n        //ADDING PERFORMANCE STATISTICAL PARAMS\n        player.latestParams = []\n        \n        let volIndex =  _VOLATILITYIndex ? _VOLATILITYIndex[player.playerId] : null;\n        \n\n        for (let i=0;volIndex && i<volIndex.length;i++) {\n            player.latestParams.push(_VOLATILITY[volIndex[i]]);\n        }\n        \n        let uniqIndex =  _UNIQIndex ? _UNIQIndex[player.playerId] : null;\n        \n        for (let i=0;uniqIndex && i<uniqIndex.length;i++) {\n            player.latestParams.push(_UNIQ[uniqIndex[i]]);\n        }\n        \n\n        /** LATEST PARAMS FROM PARAMS*/\n        player.latestUniqueness = 0; //default\n        player.latestMicroVolatility = 25; //default\n        player.latestMacroVolatility  = 25; //default\n        \n        setLatestParams(player); //given that we have a matching stats\n        \n    \n       \n         //SUPERSTAR\n        player.superStar = SFPlayer.superStar==1 ? true : false;\n        \n        //FUTURA COMPATIBILITA' CON MONGO\n        \n        //Club._id = Club.clubId;\n        //League._id = League.leagueId;\n        \n       \n        \n        \n        //THE FOOTBALL TREE\n        \n        TheFootballTree[League.leagueId] === undefined ?  TheFootballTree[League.leagueId] = League : true;\n        \n        TheFootballTree[League.leagueId].Clubs === undefined ?  TheFootballTree[League.leagueId].Clubs = {} : true;\n        \n        TheFootballTree[League.leagueId].Clubs[Club.clubId] === undefined ?  TheFootballTree[League.leagueId].Clubs[Club.clubId] = Club : true;\n        \n        TheFootballTree[League.leagueId].Clubs[Club.clubId].Players === undefined ? TheFootballTree[League.leagueId].Clubs[Club.clubId].Players = {} : true;\n        \n        TheFootballTree[League.leagueId].Clubs[Club.clubId].Players[player.playerId] = player;\n        \n       //Redundant Country \n        TheFootballTree[League.leagueId].Clubs[Club.clubId].country = TheFootballTree[League.leagueId].country\n        TheFootballTree[League.leagueId].Clubs[Club.clubId].countryCode = TheFootballTree[League.leagueId].countryCode\n        \n        \n    } catch (e) {\n        \n        console.log(e)\n    }\n    \n    \n    \n    \n    \n})\n\nconsole.log(\"Setting Masters\");\n\n\n Object.keys(TheFootballTree).forEach( leagueId => {\n        \n        Object.keys(TheFootballTree[leagueId].Clubs).forEach( clubId => { \n            \n            Object.keys(TheFootballTree[leagueId].Clubs[clubId].Players).forEach( playerId => { \n                \n                let player = TheFootballTree[leagueId].Clubs[clubId].Players[playerId]\n                \n                let MasterClub = ClubsIndex[player.masterClubId] !== undefined ? Clubs[ClubsIndex[player.masterClubId]] : null;\n                let MasterLeague =  MasterClub && LeaguesIndex[MasterClub.leagueId] !== undefined ? Leagues[LeaguesIndex[MasterClub.leagueId]] : null;\n        \n                player.masterClubName = MasterClub ?  MasterClub.name : null;\n                player.masterClubShortName = MasterClub ?  MasterClub.shortName : \"\";\n                player.masterLeagueName = MasterClub && MasterLeague ?  MasterLeague.name : null;\n                player.masterLeagueId = MasterClub && MasterLeague ?  MasterLeague.leagueId : null;\n                \n\n                \n            })\n        })\n })\nconsole.log(\"Setting borrowed and loaned\");\n\n Object.keys(TheFootballTree).forEach( leagueId => {\n        \n        Object.keys(TheFootballTree[leagueId].Clubs).forEach( clubId => { \n            \n            Object.keys(TheFootballTree[leagueId].Clubs[clubId].Players).forEach( playerId => { \n                \n                let player = TheFootballTree[leagueId].Clubs[clubId].Players[playerId]\n                \n                if (player.currentClubId !== player.masterClubId) {\n                    \n                    \n                        //BORROWED\n                        if (TheFootballTree[player.currentLeagueId] && TheFootballTree[player.currentLeagueId].Clubs[player.currentClubId] ) {\n                            \n                            TheFootballTree[player.currentLeagueId].Clubs[player.currentClubId].BorrowedPlayers[player.playerId] = player;\n\n                            TheFootballTree[player.currentLeagueId].Clubs[player.currentClubId].numOfBorrowedPlayers++;\n                                    \n\n                        }\n                    \n                        //LOANED\n                        if (TheFootballTree[player.masterLeagueId] && TheFootballTree[player.masterLeagueId].Clubs[player.masterClubId] ) {\n                            \n                                    TheFootballTree[player.masterLeagueId].Clubs[player.masterClubId].LoanedPlayers[player.playerId] = player;\n                                    \n                                    TheFootballTree[player.masterLeagueId].Clubs[player.masterClubId].numOfLoanedPlayers++;\n\n                        }\n                }\n\n                \n            })\n        })\n })\n \n\n/*console.log(\"Foreign Players\");\n\n Object.keys(TheFootballTree).forEach( leagueId => {\n        \n        Object.keys(TheFootballTree[leagueId].Clubs).forEach( clubId => { \n            \n            Object.keys(TheFootballTree[leagueId].Clubs[clubId].Players).forEach( playerId => { \n                \n                let player = TheFootballTree[leagueId].Clubs[clubId].Players[playerId]\n                \n                if (player.currentLeagueCountry !== player.nationality) {\n                    \n                    \n                      TheFootballTree[leagueId].Clubs[clubId].numOfForeignPlayers++;\n                      TheFootballTree[leagueId].numOfForeignPlayers++;\n                }\n\n                \n            })\n        })\n })\n\n*/\n// DA OGGETTO A ITERABILE\nconsole.log(\"Converting from obj to iterable\");\n\n\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        \n        Object.keys(TheFootballTree[leagueId].Clubs).forEach( clubId => { \n           \n            TheFootballTree[leagueId].Clubs[clubId].Players = Object.values(TheFootballTree[leagueId].Clubs[clubId].Players);\n            TheFootballTree[leagueId].Clubs[clubId].LoanedPlayers = Object.values(TheFootballTree[leagueId].Clubs[clubId].LoanedPlayers);\n            TheFootballTree[leagueId].Clubs[clubId].BorrowedPlayers = Object.values(TheFootballTree[leagueId].Clubs[clubId].BorrowedPlayers); \n\n       \n        \n        })   \n        \n        TheFootballTree[leagueId].Clubs = Object.values(TheFootballTree[leagueId].Clubs);\n        \n    })\n\nvar end = new Date();\nconsole.log(\"Loop Ends at \"+end);\n\nlet numOfValidPlayers = _INFO.length-PlayersWithErrors.length;\n\nconsole.log(\"Valid Players : \"+numOfValidPlayers);\nconsole.log(\"Invalid Player :\"+PlayersWithErrors.length);\n\n//node.log(PlayersWithErrors);\n//msg.PlayersErrors=PlayersErrors;\nmsg.payload=TheFootballTree\n\n\n console.log(\"*** PLAYERS BASIC ANALISYS COMPLETED ***\")\n \nflow.get(\"logmsg\").message = \"Valid Players : \"+numOfValidPlayers\nnode.log(flow.get(\"logmsg\"))\nflow.get(\"logmsg\").message = \"Invalid Player :\"+PlayersWithErrors.length\nnode.log(flow.get(\"logmsg\"))\nflow.get(\"logmsg\").message = \"Invalid Player :\"+PlayersWithErrors.length\nnode.log(flow.get(\"logmsg\"))\n\n//////////////////////////// CLEANING MEMORY\nconsole.log(\"CLEANING MEMORY\")\nflow.get(\"logmsg\").message = \"CLEANING MEMORY\"\nnode.log(flow.get(\"logmsg\"))\n\n//const v8 = require('v8')\nconsole.log(`V8 Total Heap Size: ${(v8.getHeapStatistics().total_available_size / 1024 / 1024).toFixed(2)} MB`)\n/*let mem = process.memoryUsage()\nconst formatMem = (m) => ( m/1048576 ).toFixed(2)\nconsole.log(`Initial Memory Use (MB): RSS=${formatMem(mem.rss)}. Heap: Used=${formatMem(mem.heapUsed)}, Tot=${formatMem(mem.heapTotal)}. Ext C++=${formatMem(mem.external)}`)*/\n\nconsole.log(\"Cancello variabili nel flow\")\n\n\nflow.set(\"_CLUBS\",null)\nflow.set(\"_COUNTRIES\",null)\nflow.set(\"_DATA\",null)\nflow.set(\"_INFO\",null)\nflow.set(\"_LEAGUES\",null)\nflow.set(\"_MINUTES\",null)\nflow.set(\"_PLAYERS\",null)\nflow.set(\"_ROLES\",null)\nflow.set(\"_STATS\",null)\nflow.set(\"_UNIQ\",null)\nflow.set(\"_VOLATILY\",null)\n\nflow.set(\"errors\",null)\n// Cancellazione di tutte le proprietà elencate\nconsole.log(\"Cancello oggetti in msg\")\n\n// Annullamento dei riferimenti prima delle delete\n/*\nmsg._STATS = null;\nmsg._STATSIndex = null;\nmsg._INFO = null;\nmsg._INFOIndex = null;\nmsg._VOLATILITY = null;\nmsg._VOLATILITYIndex = null;\nmsg._UNIQ = null;\nmsg._UNIQIndex = null;\nmsg._PLAYERS = null;\nmsg._PLAYERSIndex = null;\nmsg._CLUBS = null;\nmsg._CLUBSIndex = null;\nmsg._LEAGUES = null;\nmsg._LEAGUESIndex = null;\nmsg._ROLES = null;\nmsg._ROLESIndex = null;\nmsg._COUNTRIES = null;\nmsg._COUNTRIESIndex = null;\nmsg._DATA = null;\nmsg._DATAIndex = null;\nmsg._MINUTES = null;\nmsg._MINUTESIndex = null;\nmsg.Leagues = null;\nmsg.LeaguesIndex = null;\nmsg.Clubs = null;\nmsg.ClubsIndex = null;\nmsg.PlayersErrors = null;*/\n\n/*delete msg._STATS;\ndelete msg._STATSIndex;\ndelete msg._INFO;\ndelete msg._INFOIndex;\ndelete msg._VOLATILITY;\ndelete msg._VOLATILITYIndex;\ndelete msg._UNIQ;\ndelete msg._UNIQIndex;\ndelete msg._PLAYERS;\ndelete msg._PLAYERSIndex;\ndelete msg._CLUBS;\ndelete msg._CLUBSIndex;\ndelete msg._LEAGUES;\ndelete msg._LEAGUESIndex;\ndelete msg._ROLES;\ndelete msg._ROLESIndex;\ndelete msg._COUNTRIES;\ndelete msg._COUNTRIESIndex;\ndelete msg._DATA;\ndelete msg._DATAIndex;\ndelete msg._MINUTES;\ndelete msg._MINUTESIndex;\ndelete msg.Leagues;\ndelete msg.LeaguesIndex;\ndelete msg.Clubs;\ndelete msg.ClubsIndex;\ndelete msg.PlayersErrors;*/\n\n\nconsole.log(\"memory cleaned\")\nconsole.log(`V8 Total Heap Size: ${(v8.getHeapStatistics().total_available_size / 1024 / 1024).toFixed(2)} MB`)\nflow.get(\"logmsg\").message = \"MEMORY CLEANED\"\nnode.log(flow.get(\"logmsg\"))\n//console.log(`Initial Memory Use (MB): RSS=${formatMem(mem.rss)}. Heap: Used=${formatMem(mem.heapUsed)}, Tot=${formatMem(mem.heapTotal)}. Ext C++=${formatMem(mem.external)}`)\n//console.log('process.memoryUsage()')\n//console.log(process.memoryUsage())\n\n//global.get(\"TheLatestFootballTree\")=msg.payload\n//msg.payload=null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "v8",
                "module": "v8"
            }
        ],
        "x": 700,
        "y": 900,
        "wires": [
            [
                "071132293b1607b7"
            ]
        ]
    },
    {
        "id": "726507c03fb57d5b",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "All Clubs",
        "func": "console.log(\"CLUB BEGINS\");\n\n\nlet _INFO = msg._INFO; //flow.get(\"_INFO\"); \nlet _CLUBS = msg._CLUBS; //flow.get(\"_CLUBS\");\nconst LeaguesIndex = msg.LeaguesIndex;\nconst Leagues = msg.Leauges;\n\nlet errors = flow.get(\"errors\");\n\n\n//const Leagues = global.get(\"Leagues\");\nconst Club = global.get(\"TheClubObject\");\nconst Error = global.get(\"TheErrorObject\");\nvar Clubs = [];\nvar ClubsIndex = {};\n\nvar ClubsNotValid = [] ;\nconst week=flow.get(\"week\");\n\nconst validateClub = function(club) {\n    \n     \n    let clubErrors = [];\n    try {\n       \n         //All fields are mandatory\n        Object.keys(club).forEach( key => {\n        \n            if ( key != \"uefaRank\" && key != \"idTM\" && key != \"noLimiteVendita\" && key != \"maxtr\" && key != \"salaryGrossFair\" && key != \"salaryGross\"  ) {\n        \n                club[key] == undefined || club[key]==null ? ( clubErrors.push(new Error(\"ERROR\",\"CLERR\",\"Club\", club.clubId, club.name, key+\" missing\"))) : true;\n        \n            \n            }\n        })\n        \n       errors=errors.concat(clubErrors)\n      \n        \n    }\n    catch(e) {\n        console.log(e)\n    }\n    \n      return clubErrors;\n   \n}\n\n\nconst getLeague = function(id) {\n    \n    let clindex = LeaguesIndex[id];\n    return Leagues[clindex];\n \n}\n\n_CLUBS.forEach( club => {\n    \n    let c = new Club(club.clubId,club.name);\n\n        \n        c.cluster = club.cluster\n        c.shortName = club.shortName\n      \n        c.city = club.city,\n        c.stadiumOwner = club.stadiumOwner,\n        c.perc = club.perc\n        c.salaryGross = club.salaryGross\n        c.salaryNet = club.salaryNet\n        c.salaryGrossFair = club.salaryGrossFair\n        c.salaryNetFair = club.salaryNetFair\n        c.revenues = club.revenues\n        c.lastRevenues = club.lastRevenues\n        c.premioFair = club.premioFair\n        c.maxtr = club.maxtr\n        c.costs = club.costs\n        c.idTM = club.idTM\n        c.uefaRank = club.uefaRank\n        c.clubRank = club.clubRank\n        c.noLimiteVendita = club.noLimiteVendita\n        c.numOfLoanedPlayers = 0;\n        c.numOfBorrowedPlayers = 0;\n        c.numOfForeignPlayers = 0;\n        c.LoanedPlayers = {};\n        c.BorrowedPlayers = {};\n        \n        c.lastPosition = club.lastPosition\n        c.leagueWinnerProb= club.leagueWinnerProb\n        c.qualifiedForCupProd= club.qualifiedForCupProd;\n        c.relegationProb= club.relegationProb;\n        c.oldRevenues= club.oldRevenues;\n        c.salesPlayers5Y$= club.salesPlayers5Y$;\n        c.purchasePlayers5Y$= club.purchasePlayers5Y$;\n        c.costOperating= club.costOperating;\n        c.broadcastingRevenues= club.broadcastingRevenues;\n        c.commericialRevenues= club.commericialRevenues;\n        c.matchDayRevenues= club.matchDayRevenues;\n        c.otherRevenues= club.otherRevenues;\n\n        c.foundationYear= club.foundationYear\n        c.stadiumCapacity= club.stadiumCapacity\n        c.website= club.website\n        \n        c.pointsCurrentSeason = club.points\n\n        c.week = week\n        c.year = new Date().getFullYear() // Potrebbe esserci un problema nei primi giorni del nuovo anno\n\n        validateClub(c).length==0 ?  Clubs.push(c) :  ClubsNotValid.push(c);\n        \n       \n        \n\n})\n\nfor (let i=0;i<Clubs.length;i++){\n    \n    ClubsIndex[Clubs[i].clubId] = i;\n    \n    /*if (Clubs[i].League === undefined) {\n         console.log(Clubs[i].clubId +\" - \"+Clubs[i].name)\n    }*/\n   \n\n}\n\nmsg.Clubs=Clubs;\nmsg.ClubsIndex=ClubsIndex;\n\n\n//LEAGUES IN LEAUGES TABLE MUST BE A SUPERSET OF THE LEAGUES FROM INFO\ntry {\n \n let ClubObjInfo = {}\n\n    _INFO.forEach( player => {\n     \n        ClubObjInfo[player.teamId] = player.teamName;\n        \n    })\n    \n    let ClubObjClubs = {} \n    \n    _CLUBS.forEach( club => {\n     \n        ClubObjClubs[club.teamID] = club.team;\n        \n    })\n    \n    Object.keys(ClubObjInfo).forEach( clubId => {\n        \n        ClubObjClubs[clubId] === undefined ? ( errors.push(new Error(\"ERROR\",\"CERR\",\"CLUB\",clubId,ClubObjInfo[clubId],\"Club not monitored in Standard Football\"))) : true;\n        \n    })\n    \n} catch(e) {\n    console.log(e);\n}\n\nconsole.log(errors.length)\nflow.set(\"errors\",errors)\n\n console.log(\"CLUB ENDS; valid #\"+Clubs.length+\" invalid #\"+ClubsNotValid.length)\n// console.log(errors)\n// console.log(ClubsNotValid)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 900,
        "wires": [
            [
                "da9ecfd6c427217b"
            ]
        ]
    },
    {
        "id": "efb04ddc47c7b24e",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "All Leagues",
        "func": "console.log(\"LEAGUES BEGINS\");\n\nvar _LEAGUES = msg._LEAGUES; //flow.get(\"_LEAGUES\");\nvar _INFO = msg._INFO; //flow.get(\"_INFO\");\nconst League = global.get(\"TheLeagueObject\");\nconst Error = global.get(\"TheErrorObject\");\n\nconst week=flow.get(\"week\");\n\nvar Leagues = [];\nvar LeaguesIndex = {};\n\nvar LeaguesNotValid = [] \nvar errors = [];\nconst validateLeague = function(league) {\n    \n    let leagueErrors = []\n    \n    //All fields are mandatory\n    Object.keys(league).forEach( key => {\n        \n        league[key] == undefined || league[key]==null ? ( leagueErrors.push(new Error(\"ERROR\",\"LERR\",\"League\",league.leagueId,league.name, key+\" missing\"))) : true;\n        \n    })\n    \n    errors=errors.concat(leagueErrors);\n    return leagueErrors;\n}\n\n_LEAGUES.forEach( league => {\n    \n    let l = new League(league.leagueId,league.nameClear,league.name);\n        l.country = league.country;\n        l.countryCode = league.countryCode;\n        l.extendedName = l.name+\" (\"+l.countryCode+\")\"\n        l.cluster = league.cluster;\n        l.weight  = league.weight;\n        l.taxRate = league.taxRate;\n        l.taxRatePerc = league.taxRatePerc;\n        l.numOfForeignPlayers = 0;\n        l.eligibleForCups = league.eligibleForCups;\n        l.promotions = league.promotions;\n        l.relegations = league.relegations;\n        l.fifaRank = league.fifaRank;\n        l.memberAssociation = league.memberAssociation;\n        l.confederation = league.confederation;\n\n        \n        l.week = week\n        l.year = new Date().getFullYear() // Potrebbe esserci un problema nei primi giorni del nuovo anno\n        \n        validateLeague(l).length==0 ? Leagues.push(l) : LeaguesNotValid.push(l);\n})\n\nflow.get(\"logmsg\").message = \"leagues array built\"\nnode.log(flow.get(\"logmsg\"))\n\nfor (let i=0;i<Leagues.length;i++){\n    \n    LeaguesIndex[Leagues[i].leagueId] = i;\n}\n\n\n\nmsg.Leagues=Leagues;\nmsg.LeaguesIndex=LeaguesIndex;\n\n//LEAGUES IN LEAUGES TABLE MUST BE A SUPERSET OF THE LEAGUES FROM INFO\ntry {\n    \n    let LeagueObjInfo = {}\n\n    _INFO.forEach( player => {\n     \n        LeagueObjInfo[player.leagueId] = player.leagueName;\n        \n    })\n    \n    let LeagueObjLeagues = {} \n    \n    _LEAGUES.forEach( league => {\n     \n        LeagueObjLeagues[league.leagueID] = league.nameClear;\n        \n    })\n    \n    Object.keys(LeagueObjInfo).forEach( leagueId => {\n        \n        LeagueObjLeagues[leagueId] === undefined ? ( errors.push(new Error(\"ERROR\",\"LERR\",\"League\",leagueId,LeagueObjInfo[leagueId],\"League not monitored in Standard Football\"))) : true;\n        \n    }) \n    \n} catch(e) {\n    \n    console.log(e)\n\n    \n}\n\nconsole.log(\"League errors found: \"+errors.length)\n\nflow.get(\"logmsg\").message = \"leagues errors found: \"+errors.length\nnode.log(flow.get(\"logmsg\")) \n\n//flow.get(\"logmsg\").message = errors\n//node.log(flow.get(\"logmsg\")) \n\nflow.set(\"errors\",errors)\n \nconsole.log(\"LEAGUES ENDS; valid #\"+Leagues.length+\" , invalid #\"+LeaguesNotValid.length);\n\nflow.get(\"logmsg\").message = \"leagues construction done.  valid #\"+Leagues.length+\" , invalid #\"+LeaguesNotValid.length;\nnode.log(flow.get(\"logmsg\")) \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 900,
        "wires": [
            [
                "726507c03fb57d5b"
            ]
        ]
    },
    {
        "id": "e282d03a0a38805e",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "LEAGUES",
        "func": "\nmsg.topic=\"select * from allleagues l;\";\nmsg.dataSet = \"LEAGUES\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 240,
        "wires": [
            [
                "afb31ee290792b56"
            ]
        ]
    },
    {
        "id": "07ceb552491842d4",
        "type": "catch",
        "z": "521d26a7dba2b3ee",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 920,
        "y": 100,
        "wires": [
            [
                "6abe36a5e67a9cf1"
            ]
        ]
    },
    {
        "id": "a9a4e1bf7293e4c8",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Statistics",
        "func": "console.log(\"**** STATISTICS BEGIN***\")\n\nconst Utils = global.get(\"UTILS\");\n\nconst Players = flow.get(\"Players\")\nconst PlayersIndex = flow.get(\"Players\")\nconst Clubs = flow.get(\"Clubs\");\nconst ClubsIndex = flow.get(\"ClubsIndex\");\nconst Leagues = flow.get(\"Leagues\");\nconst LeaguesIndex = flow.get(\"LeaguesIndex\");\n\n\nlet StatsArr = [];\n\nconst Stats = function(description) {\n    this.description = description;\n    this.leagueCluster;\n    this.League; //the League Object of the analisys\n    this.Club; //the Club object of the Analisys\n    this.clubCluster;\n    this.roleGroup;\n    this.age;\n    this.fatmol = {}\n    this.salaryNet = {}\n    this.age = {}\n    \n}\n\n/** DATO UN SET DI PLAYER \n *  QUESTA FUNZIONE REALIZZA LE STATISTICHE\n *  */\n \nvar makeSimpleObject = function (player) {\n    \ntry {    \n    let o = {};\n        \n        o[\"playerId\"] = player.playerId; \n        o[\"name\"] = player.name; \n        o[\"clubId\"] = player.currentClubId; \n        o[\"clubName\"] = player.currentClubName;\n        o[\"leagueId\"] = player.currentLeagueId; \n        o[\"leagueName\"] = player.currentLeagueName;\n        o[\"fatmol\"] =player.fatmol;\n        o[\"salaryNet\"]=player.salaryNet;\n        o[\"age\"] = player.age;\n            \n\n    return o;\n    } catch(e) {\n    \n        console.log(\"player in error:\"+player.playerId+\" \"+player.name);\n        \n    }    \n}\n\nvar makeStats = function(stat,players) {\n    \n            /*FATMOL*/\n            stat.fatmol.maxFatmol = players.reduce( (max,p) => { return !isNaN(p.fatmol) && p.fatmol > max ? p.fatmol : max},0)\n            stat.fatmol.maxFatmolPlayers = players.filter( p => p.fatmol === stat.fatmol.maxFatmol).map( p => makeSimpleObject(p));\n            \n            stat.fatmol.minFatmol = players.reduce( (min,p) => { return !isNaN(p.fatmol) && p.fatmol < min ? p.fatmol : min},100)\n            stat.fatmol.minFatmolPlayers = players.filter( p => p.fatmol === stat.fatmol.minFatmol).map( p => makeSimpleObject(p));\n             \n            stat.fatmol.avgFatmol = players.reduce( (tot,p) => { return !isNaN(p.fatmol) ? tot+parseFloat(p.fatmol) : tot },0)/players.length;\n            stat.fatmol.values = players.reduce( (arr,p) => { \n                arr==undefined ? arr = [] : true\n                arr.push(p.fatmol)\n                return arr },[] );\n                \n            stat.fatmol.sigma = Utils.calculateStandardDeviation(stat.fatmol.values)\n            stat.fatmol.zthreshold = 2\n            stat.fatmol.distribution = {}\n            stat.fatmol.outliers = []\n        \n            /*SALARY*/\n            stat.salaryNet.maxSalary = players.reduce( (max,p) => { return p.salaryNet > max ? p.salaryNet : max},0)\n            stat.salaryNet.maxSalaryPlayers = players.filter( p => p.salary === stat.salaryNet.maxSalary).map( p => makeSimpleObject(p));\n            \n            stat.salaryNet.minSalary = players.reduce( (min,p) => { return p.salaryNet < min ? p.salaryNet : min},100)\n            stat.salaryNet.minSalaryPlayers = players.filter( p => p.salary === stat.salaryNet.minSalary).map( p => makeSimpleObject(p));\n            \n            stat.salaryNet.avgSalary = players.reduce( (tot,p) => { return !isNaN(p.salaryNet) ? tot+parseFloat(p.salaryNet) : tot },0)/players.length;\n            stat.salaryNet.values = players.reduce( (arr,p) => { \n                arr==undefined ? arr = [] : true\n                arr.push(p.fatmol)\n                return arr },[] );\n            stat.salaryNet.sigma = Utils.calculateStandardDeviation(stat.salaryNet.values);\n            stat.salaryNet.zthreshold = 2\n            stat.salaryNet.distribution = {}\n            stat.salaryNet.outliers = []\n        \n            /*AGE*/\n            stat.age.maxAge = players.reduce( (max,p) => { return p.age > max ? p.age : max},0)\n            stat.age.maxAgePlayers = players.filter( p => p.age === stat.age.maxAge).map( p => makeSimpleObject(p));\n            \n            stat.age.minAge = players.reduce( (min,p) => { return p.age < min ? p.age : min},100)\n            stat.age.minAgePlayers = players.filter( p => p.age === stat.age.minAge).map( p => makeSimpleObject(p));\n            \n            stat.age.avgAge = players.reduce( (tot,p) => { return !isNaN(p.age) ? tot+parseFloat(p.age) : tot },0)/players.length;\n            stat.age.values = players.reduce( (arr,p) => { \n                arr==undefined ? arr = [] : true\n                arr.push(p.fatmol)\n                return arr },[] );\n            stat.age.sigma = Utils.calculateStandardDeviation(stat.age.values)\n            stat.age.zthreshold = 2\n            stat.age.distribution = {}\n            stat.age.outliers = []\n        \n            \n            /*NORMAL DISTRIBUTION AND OUTLIERS*/\n\n            players.forEach( player => {\n                \n                stat.fatmol.distribution[Math.ceil(player.fatmol)] = stat.fatmol.distribution[Math.ceil(player.fatmol)] == undefined ?  1 : stat.fatmol.distribution[Math.ceil(player.fatmol)] +1\n                stat.salaryNet.distribution[Math.ceil(player.salaryNet)] = stat.salaryNet.distribution[Math.ceil(player.salaryNet)] == undefined ?  1 : stat.salaryNet.distribution[Math.ceil(player.salaryNet)] +1\n                stat.age.distribution[Math.ceil(player.age)] = stat.age.distribution[Math.ceil(player.age)] == undefined ?  1 : stat.age.distribution[Math.ceil(player.age)] +1\n    \n                let zindexFatmol = ( player.fatmol - stat.fatmol.avgFatmol ) / stat.fatmol.sigma;\n                Math.abs(zindexFatmol) >= stat.fatmol.zthreshold ? stat.fatmol.outliers.push(makeSimpleObject(player)) : true; \n                \n                let zindexSalaryCurrent = ( player.salaryNet - stat.salaryNet.avgSalary ) / stat.salaryNet.sigma;\n                Math.abs(zindexSalaryCurrent) >=  stat.salaryNet.zthreshold ? stat.salaryNet.outliers.push(makeSimpleObject(player)) : true; \n                \n                let zindexAge = ( player.age - stat.fatmol.avgAge ) / stat.age.sigma;\n                Math.abs(zindexAge) >=  stat.age.zthreshold ? stat.age.outliers.push(makeSimpleObject(player)) : true; \n            })\n    \n    return stat;\n} \n\n\n\n// CREATE PLAYERS SETS\n\nvar ClubClusterPlayers = []; //Players in a given Cluster\nvar ClubClusterRolePlayers = []; //Players in a given Cluster and Role\nvar LeagueClusterPlayers = []; //Players in a given League Cluster\nvar LeaguePlayers = {}; //Players in a given League THIS IS AN OBJECT\nvar LeagueClusterAgePlayers = []; //Players in a given League Cluster Grouped By Age;\n\n\nconsole.log(\"Array Building Begins\")\ntry {\n    \n    \n    Players.forEach( player => {\n        \n        let clubCluster = parseInt(player.currentClubCluster);\n        let role = parseInt(player.latestRoleGroup);\n        let leagueCluster = parseInt(player.currentLeagueCluster)\n        let leagueId = player.currentLeagueId;\n        \n        if( \n            clubCluster !== undefined && clubCluster != null && \n            role !== undefined && role != null && \n            leagueCluster !== undefined && leagueCluster != null && \n            leagueId !== undefined && leagueId != null \n            \n            ) {\n               \n                ClubClusterPlayers[clubCluster]==undefined ?  ClubClusterPlayers[clubCluster] = [] : true;\n                ClubClusterPlayers[clubCluster].push(player);\n               \n                ClubClusterRolePlayers[clubCluster]==undefined ?  ClubClusterRolePlayers[clubCluster] = [] : true;\n                ClubClusterRolePlayers[clubCluster][role] == undefined ? ClubClusterRolePlayers[clubCluster][role] = [] : true\n                ClubClusterRolePlayers[clubCluster][role].push(player)\n                \n                LeagueClusterPlayers[leagueCluster]==undefined ?  LeagueClusterPlayers[leagueCluster] = [] : true;\n                LeagueClusterPlayers[leagueCluster].push(player)\n                \n                LeaguePlayers[leagueId]==undefined ?  LeaguePlayers[leagueId] = [] : true;\n                LeaguePlayers[leagueId].push(player)\n        \n            \n            } else {\n            \n                console.log(\"player in error:\"+player.playerId+\" \"+player.name);\n               \n        }\n        \n    })\n\n} catch(e) {\n    \n    console.log(e)\n}\nconsole.log(\"Array Building Ends\")\n\n// MAKE STATS!!\nconsole.log(\"Execution Begins\")\ntry {    \n    \n    // PLAYERS BY CLUB CLUSTER\n    for(let i =0; i<ClubClusterPlayers.length;i++) {\n        if(ClubClusterPlayers[i]) {\n            \n            let players = ClubClusterPlayers[i];\n            if(players && players.length > 0 ) {\n                \n                let stat = new Stats(\"Club cluster \"+i);\n                    stat.clubCluster = i;\n                    \n                    makeStats(stat,players);\n                    \n                    StatsArr.push(stat);\n        \n                }\n            }\n        } \n    \n    \n    \n    // PLAYERS BY CLUB CLUSTER AND ROLE\n    for(let i =0; i<ClubClusterRolePlayers.length;i++) {\n        if(ClubClusterRolePlayers[i]) {\n            for (let x=0;x<ClubClusterRolePlayers[i].length;x++) {\n            \n                let players = ClubClusterRolePlayers[i][x];\n                if(players && players.length > 0 ) {\n                    \n                    let stat = new Stats(\"Club cluster \"+i+\", role group is \"+x);\n                        stat.clubCluster = i;\n                        stat.roleGroup = x;\n              \n                        makeStats(stat,players);\n                        \n                        StatsArr.push(stat);\n            \n                }\n            }\n        } \n    } \n\n    // PLAYERS BY LEAGUE CLUSTER\n    for(let i =0; i<LeagueClusterPlayers.length;i++) {\n        if(LeagueClusterPlayers[i]) {\n            \n            let players = LeagueClusterPlayers[i];\n            if(players && players.length > 0 ) {\n                \n                let stat = new Stats(\"Leagues of cluster \"+i);\n                    stat.leagueCluster = i;\n                    \n                    makeStats(stat,players);\n                    \n                    StatsArr.push(stat);\n        \n                }\n            }\n    } \n    \n    \n    // PLAYERS BY LEAGUE\n    \n    Leagues.forEach( l => {\n        \n        let stat = new Stats(\"League: \"+l.name+\" | \"+l.country);\n            stat.league = l;\n            \n        let players = LeaguePlayers[l.leagueId];\n        \n            makeStats(stat,players);\n        \n            StatsArr.push(stat);\n    })\n   \n   \n\n} catch(e) {\n    \n    console.log(e)\n}\nconsole.log(\"Execution Ends\")\n// console.log(StatsArr);\n\n//global.set(\"Statistics\",StatsArr);\n\nmsg.payload=StatsArr;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 420,
        "wires": [
            []
        ]
    },
    {
        "id": "29a4b2cb42f58c92",
        "type": "comment",
        "z": "521d26a7dba2b3ee",
        "name": "\"INFO\", \"CLUB\", \"LEAGUE\" saranno le nostre master tables ",
        "info": "",
        "x": 820,
        "y": 400,
        "wires": []
    },
    {
        "id": "652a94dd5e69fad0",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "ROLES",
        "func": "\nmsg.topic=\"select * from role r;\";\nmsg.dataSet = \"ROLES\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 280,
        "wires": [
            [
                "afb31ee290792b56"
            ]
        ]
    },
    {
        "id": "782e273f9b77766a",
        "type": "comment",
        "z": "521d26a7dba2b3ee",
        "name": "Tab LEAGUE",
        "info": "",
        "x": 210,
        "y": 860,
        "wires": []
    },
    {
        "id": "66418f3002cfd477",
        "type": "comment",
        "z": "521d26a7dba2b3ee",
        "name": "Tab CLUBS",
        "info": "",
        "x": 390,
        "y": 860,
        "wires": []
    },
    {
        "id": "248633fe0a728587",
        "type": "comment",
        "z": "521d26a7dba2b3ee",
        "name": "Tab INFO",
        "info": "",
        "x": 540,
        "y": 860,
        "wires": []
    },
    {
        "id": "ce504d1d15288ffc",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Elimina Errori",
        "func": "flow.get(\"logmsg\").message = \"Delete Errors from DB\"\nnode.log(flow.get(\"logmsg\"))\n\nlet q = \"delete from errors\"\n\nmsg.topic = q;\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 1600,
        "wires": [
            [
                "741ebc60b7673283"
            ]
        ]
    },
    {
        "id": "741ebc60b7673283",
        "type": "mysql",
        "z": "521d26a7dba2b3ee",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 720,
        "y": 1600,
        "wires": [
            [
                "bc2ed0c27120e918"
            ]
        ]
    },
    {
        "id": "4df8c9b6183de202",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Salva Errori",
        "func": "let PlayersErrors = [] \n    PlayersErrors[0] = msg.payload\n\nlet week = flow.get(\"week\")\n\nlet q = \"INSERT INTO errors (severity,code,description,leaguename,leagueid,clubname,clubid,playername,playerid,message,elaborationNum) values \";\n\nlet values = \"\";\nconst escapeSingleQuotes = data => (data ? data.replace(/'/g, \"''\") : data);\n\n\nPlayersErrors.forEach( err => { \n    \n    try {\n        \n        let value = values == \"\" ? \"('\" : \",('\";\n    \n        err.message = err.message === undefined ? \"\" : err.message;\n    \n        //err.playerName.indexOf(\"'\") >0  ? console.log(err) : true;\n        \n        err.leagueName = err.leagueName!==null && err.leagueName!==undefined && err.leagueName.indexOf(\"'\") > 0 ? err.leagueName.replace(\"'\", \"'\"+\"'\") : err.leagueName\n        err.clubName = err.clubName!==null && err.clubName!==undefined && err.clubName.indexOf(\"'\") > 0 ? err.clubName.replace(\"'\", \"'\"+\"'\") : err.clubName\n        err.playerName = err.playerName!==null && err.playerName!==undefined && err.playerName.indexOf(\"'\") > 0 ? err.playerName.replace(\"'\", \"'\"+\"'\") : err.playerName\n        err.message = err.message!==null && err.message.indexOf(\"'\") > 0 ? err.message.replace(\"'\", \"'\"+\"'\") : err.message\n        err.description = err.description!==null && err.description.indexOf(\"'\") > 0 ? err.description.replace(\"'\", \"'\"+\"'\") : err.description\n\n        //err.playerName.indexOf(\"'\") > 0 ? console.log(err.playerName) : true;\n    \n    \n        value =     value \n                    +escapeSingleQuotes(err.severity)+\"','\"\n                    +escapeSingleQuotes(err.code)+\"','\"\n                    +escapeSingleQuotes(err.description)+\"','\"\n                    +escapeSingleQuotes(err.leagueName)+\"','\"\n                    +escapeSingleQuotes(err.leagueId)+\"','\"\n                    +escapeSingleQuotes(err.clubName)+\"','\"\n                    +escapeSingleQuotes(err.clubId)+\"','\"\n                    +escapeSingleQuotes(err.playerName)+\"','\"\n                    +escapeSingleQuotes(err.playerId)+\"','\"\n                    +escapeSingleQuotes(err.message)+\"',\"\n                    +global.get(\"elaborationNum\") || 0 ;\n                    \n        value = value + \")\"            \n        \n        values = values + value;\n        \n    } catch (e) {\n        console.log(e,err)\n    }\n    \n    \n})\n\n\nmsg.topic = q+values;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 1600,
        "wires": [
            [
                "6c4e5213742f334f"
            ]
        ]
    },
    {
        "id": "6c4e5213742f334f",
        "type": "mysql",
        "z": "521d26a7dba2b3ee",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 1580,
        "y": 1600,
        "wires": [
            [
                "bc2ed0c27120e918"
            ]
        ]
    },
    {
        "id": "543e4f8387719f7a",
        "type": "comment",
        "z": "521d26a7dba2b3ee",
        "name": "ERRORI",
        "info": "",
        "x": 160,
        "y": 1600,
        "wires": []
    },
    {
        "id": "321c72fc17decc4b",
        "type": "comment",
        "z": "521d26a7dba2b3ee",
        "name": "Entry point for simulator",
        "info": "",
        "x": 1280,
        "y": 840,
        "wires": []
    },
    {
        "id": "871ef051aefa2d11",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Clubs and Leagues Analisys",
        "func": "flow.get(\"logmsg\").message = \"Clubs and Leagues Analisys Begins\"\nnode.log(flow.get(\"logmsg\"))\n\nlet TheFootballTree = msg.payload;\nconst Utils = global.get(\"UTILS\");\n\nvar Players = [];\nvar Clubs = [];\nvar Leagues = [];\n\nvar allStats = {\n    \n    'players' : 0,\n    'foreignPlayers' : 0,\n    'foreignPlayersRatio' : 0,\n    'mostExpensiveTransferFee' : null,\n    'mostExpensiveTraded' : null,\n    'highestNetSalary' : null,\n    'mostPayed' : null, \n    'youngest' : null,\n    'lowestAge' : 0,\n    'oldest' : null,\n    'highestAge' : 0,\n    'highestEffectiveness' : 0,\n    'highestEffectivenessPlayer' : null,\n    'highestFairSalary' : 0,\n    'highestFairSalaryPlayer' : null,\n    'highestFairValue' : 0,\n    'highestFairValuePlayer' : null,\n    'highestExpectedPrice' : 0,\n    'highestExpectedPricePlayer' : null,\n    'risingStarTopFairValue' : 0,\n    'risingStarTopFairValuePlayer' : null,\n    'overperformerTopFairValue' : 0,\n    'overperformerTopFairValuePlayer' : null,\n    'superstarTopFairValue' : 0,\n    'superstarTopFairValuePlayer' : null,\n    'goalkeeperTopFairValue' : 0,\n    'goalkeeperTopFairValuePlayer' : null,\n    'defenderTopFairValue' : 0,\n    'defenderTopFairValuePlayer' : null,\n    'midfielderTopFairValue' : 0,\n    'midfielderTopFairValuePlayer' : null,\n    'forwardTopFairValue' : 0,\n    'forwardTopFairValuePlayer' : null,\n    'superstars' : 0,\n    'risingstars' : 0,\n    'overperformers' : 0,\n    'regulars' : 0,\n    'goalkeepers' : 0,\n    'defenders' : 0,\n    'midfielders' : 0,\n    'forward' : 0,\n    'mostEffectiveTeam' : null,\n    'mostExpensiveTeam' : null\n};\n\n\nlet leagueClusterSalaryAvg = {}\nlet leagueRanks = []\n\nlet clubClusterSalaryAvg = {}\nlet clubLeagueSalaryAvg = {}\nlet clubRanks = []\n\nlet playerRanks = []\n\nlet clubOwnedPlayers = {}\n\ntry {\n    \nlet allLeagueTotalRevenues = 0;\n\n\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        \n        \n        let totalAgeLeague = 0;\n        let totalContractDurationLeague = 0;\n        let totalContractResiduaDurationLeauge = 0;\n        \n        TheFootballTree[leagueId].numOfPlayers = 0; \n        TheFootballTree[leagueId].avgAge = 0\n        TheFootballTree[leagueId].avgContractDuration = 0\n        TheFootballTree[leagueId].avgContractResidualDuration = 0\n        \n        TheFootballTree[leagueId].portfolioCost = 0\n        TheFootballTree[leagueId].residualBookValue = 0\n        TheFootballTree[leagueId].residualValue = 0\n        TheFootballTree[leagueId].potentialPrice = 0\n        TheFootballTree[leagueId].expectedPrice = 0\n        TheFootballTree[leagueId].capitalGain = 0\n        TheFootballTree[leagueId].netProfit = 0\n        \n        TheFootballTree[leagueId].salaryGross = 0\n        TheFootballTree[leagueId].salaryNet = 0\n        TheFootballTree[leagueId].salaryOptimal = 0\n        TheFootballTree[leagueId].salaryPotential = 0\n        TheFootballTree[leagueId].salaryAbsoluteDeviation = 0\n        TheFootballTree[leagueId].salaryPercDeviation = 0\n        \n        //aggiunti il 07/02/2023\n        TheFootballTree[leagueId].numOfClubs = 0 //fatto\n        TheFootballTree[leagueId].numOfForeignPlayers = 0 //fatto\n        TheFootballTree[leagueId].numOfU23Players = 0 // fatto\n        TheFootballTree[leagueId].numOfU23ForeignPlayers = 0 // fatto\n        TheFootballTree[leagueId].shareOfForeignPlayers = 0 //fatto\n        TheFootballTree[leagueId].shareOfU23Players = 0 //fatt0\n        TheFootballTree[leagueId].shareOfU23ForeginPlayers = 0 //fatt0\n        TheFootballTree[leagueId].salaryAvg = 0  //fatto\n        \n        TheFootballTree[leagueId].rankByValue = 0 //fatto\n        TheFootballTree[leagueId].rankByAcquisition = 0 //fatto\n        TheFootballTree[leagueId].rankBySalary = 0 //fatto\n        TheFootballTree[leagueId].avgSalaryNetCluster = 0 //fatto\n        TheFootballTree[leagueId].absSalaryNetClusterDeviation = 0 //fatto\n        TheFootballTree[leagueId].percSalaryNetClusterDeviation = 0 //fatto\n        \n        TheFootballTree[leagueId].totalPerformance = 0;\n        TheFootballTree[leagueId].totalEffectiveness = 0;\n        TheFootballTree[leagueId].totalLatestUniqueness = 0;\n        TheFootballTree[leagueId].totalLatestMicroVolatility = 0;\n\n        TheFootballTree[leagueId].totalRevenues = 0; //aggiunto il 08/01/2024\n        TheFootballTree[leagueId].totalProjectedRevenues = 0;\n        \n        TheFootballTree[leagueId].annualBookValue = 0;\n\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n           \n            let totalAge = 0;\n            let totalContractDuration = 0;\n            let totalContractResiduaDuration = 0;\n            let numOfPlayersExceed100Min = 0;\n           \n           TheFootballTree[leagueId].numOfClubs ++;\n            club.numOfPlayers = club.Players.length;\n            \n            club.avgAge = 0\n            club.avgContractDuration = 0\n            club.avgContractResidualDuration = 0\n            \n            club.portfolioCost = 0\n            club.residualBookValue = 0\n            club.residualBookValueExceed100Min = 0\n            club.residualValue = 0\n            club.residualValueExceed100Min = 0\n            club.potentialPrice = \n            club.potentialPriceExceed100Min = 0\n            club.expectedPrice = 0\n            club.expectedPriceExceed100Min = 0\n            club.capitalGain = 0\n            club.netProfit = 0\n            \n            club.salaryGrossSum = 0\n            club.salaryGrossSumExceed100Min = 0\n            club.salaryNetSum = 0\n            club.salaryNetSumExceed100Min = 0\n            club.salaryOptimal = 0\n            club.salaryOptimalExceed100Min = 0\n            club.salaryPotential = 0\n            club.salaryPotentialExceed100Min = 0\n            club.salaryAbsoluteDeviation = 0\n            club.salaryPercDeviation = 0\n            \n            //aggiunti il 07/02/2023\n            \n            club.salaryAvg = 0 //fatto\n            club.salaryAvgExceed100Min = 0\n\n           \n            club.numOfForeignPlayers = 0 //fatto\n            club.numOfU23Players = 0 // fatto\n            club.numOfU23ForeignPlayers = 0 // fatto\n            club.shareOfForeignPlayers = 0 //fatto\n            club.shareOfU23Players = 0 //fatto\n            club.shareOfU23ForeignPlayers = 0 //fatto\n            club.numOfNationalPlayers = 0 //fatto\n            club.numOfExpiringContracts = 0\n            club.numOfOwnedPlayers = 0 //fatto\n            club.avgSalaryNetCluster = 0 //fatto\n            club.absSalaryNetClusterDeviation = 0 //fatto\n            club.percSalaryNetClusterDeviation = 0 //fatto\n            club.rankByValue = 0 //fatto\n            club.rankBySalary = 0 //fatto\n            club.rankByAcquisition = 0 //fatto\n            \n            club.avgEffectiveness = 0;\n            club.totalEffectiveness = 0;\n            club.totalEffectivenessExceed100Min = 0;\n            club.totalEffectivenessExceed23 = 0;\n            \n            club.totalLatestMicroVolatility = 0\n            club.totalLatestMicroVolatilityExceed100Min = 0\n            \n            club.playersAnnualCost = 0\n            club.annualBookValue = 0;\n            \n            club.Players.forEach( player => {\n                // COUNT NUMBERS OF PLAYERS THAT EXCEED 100 MIN\n                if(player.minutes > 100) {\n                    numOfPlayersExceed100Min++;\n                }\n                \n                TheFootballTree[leagueId].totalPerformance = TheFootballTree[leagueId].totalPerformance + player.performance\n                TheFootballTree[leagueId].totalEffectiveness = TheFootballTree[leagueId].totalEffectiveness + player.effectiveness\n                TheFootballTree[leagueId].totalLatestUniqueness = TheFootballTree[leagueId].totalLatestUniqueness + player.latestUniqueness\n                TheFootballTree[leagueId].totalLatestMicroVolatility = TheFootballTree[leagueId].totalLatestMicroVolatility + player.latestMicroVolatility\n                \n                player.rankByPerformance = 0 //fatto\n                player.rankByEffectiveness = 0 //fatto\n                player.rankByValue = 0 //fatto\n                \n                player.absClubAvgSalaryDeviation = 0  //fatto\n                player.percClubAvgSalaryDeviation = 0 //fatto\n                \n                player.absLeagueAvgSalaryDeviation = 0 //fatto\n                player.percLeagueAvgSalaryDeviation = 0 //fatto\n\n                player.absClubCusterAvgSalaryDeviation = 0 //fatto\n                player.percClubClusterAvgSalaryDeviation = 0 //fatto\n                player.annualCost = 0;\n                player.annualBookValue = 0;\n                \n                //player.capitalGain = player.expectedPrice  - player.residualBookValue;\n                \n                player.capitalGain = player.perceivedExpectedPrice  - player.residualBookValue;\n                \n                player.annualCost = player.salaryGross  + (  player.remainingYearsOfMasterClubContract ? (player.residualBookValue / player.remainingYearsOfMasterClubContract) : 0 );\n               \n                player.annualBookValue = (  player.remainingYearsOfMasterClubContract ? (player.residualBookValue / player.remainingYearsOfMasterClubContract) : 0 );\n               \n               \n                player.costImpactOnRevenues = club.revenues ? (( player.annualCost / club.revenues) * 100 ): 0;\n                player.costImpactOnCosts = club.costs ? ( player.annualCost / club.costs) : 0;\n               \n               \n                club.annualBookValue = club.annualBookValue + player.annualBookValue;\n               \n                club.playersAnnualCost = club.playersAnnualCost + player.annualCost;\n                \n                totalAge = totalAge + player.age;\n                totalContractDuration = totalContractDuration +  player.remainingMonthsOfContract // ERRORE DURATA TOTALE NON RESIDUA \n                totalContractResiduaDuration = totalContractResiduaDuration + Utils.diffInMonths(player.endContract,new Date());\n                \n                \n                club.portfolioCost = club.portfolioCost + player.transferPrice;\n                club.residualBookValue = club.residualBookValue + parseFloat(player.residualBookValue);\n                club.residualBookValueExceed100Min = player.minutes > 100 ? club.residualBookValueExceed100Min + parseFloat(player.residualBookValue) : club.residualBookValueExceed100Min + 0;\n                club.residualValue = club.residualValue + player.residualValue;\n                club.residualValueExceed100Min = player.minutes > 100 ? club.residualValueExceed100Min + player.residualValue : club.residualValueExceed100Min + 0;\n                club.potentialPrice = club.potentialPrice + player.potentialPrice;\n                club.potentialPriceExceed100Min = player.minutes > 100 ? club.potentialPriceExceed100Min + player.potentialPrice : club.potentialPriceExceed100Min + 0;\n                club.expectedPrice = club.expectedPrice + player.expectedPrice;\n                club.expectedPriceExceed100Min = player.minutes > 100 ? club.expectedPriceExceed100Min + player.expectedPrice : club.expectedPriceExceed100Min + 0;\n                \n                club.salaryGrossSum = club.salaryGrossSum + player.salaryGross;\n                club.salaryGrossSumExceed100Min = player.minutes > 100 ? club.salaryGrossSumExceed100Min + player.salaryGross : club.salaryGrossSumExceed100Min + 0\n                club.salaryNetSum = club.salaryNetSum + player.salaryNet;\n                club.salaryNetSumExceed100Min = player.minutes > 100 ? club.salaryNetSumExceed100Min + player.salaryNet : club.salaryNetSumExceed100Min + 0;\n                club.salaryOptimal = club.salaryOptimal + player.salaryOptimal;\n                club.salaryOptimalExceed100Min = player.minutes > 100 ? club.salaryOptimalExceed100Min + player.salaryOptimal : club.salaryOptimalExceed100Min + 0;\n                club.salaryPotential = club.salaryPotential + player.salaryPotential;\n                club.salaryPotentialExceed100Min = player.minutes > 100 ? club.salaryPotentialExceed100Min + player.salaryPotential : club.salaryPotentialExceed100Min + 0;\n                club.salaryAvg = club.salaryNetSum / club.numOfPlayers;\n                club.salaryAvgExceed100Min = club.salaryNetSumExceed100Min / numOfPlayersExceed100Min;\n                club.totalLatestMicroVolatility = club.totalLatestMicroVolatility + player.latestMicroVolatility\n                club.totalLatestMicroVolatilityExceed100Min = player.minutes > 100 ? club.totalLatestMicroVolatilityExceed100Min + player.latestMicroVolatility : club.totalLatestMicroVolatilityExceed100Min + 0;\n                \n                club.totalEffectiveness = club.totalEffectiveness + player.effectiveness;\n                club.totalEffectivenessExceed100Min = player.minutes > 100 ? club.totalEffectivenessExceed100Min + player.effectiveness : club.totalEffectivenessExceed100Min + 0;\n                club.totalEffectivenessExceed23 = player.effectiveness > 23.5 ? ( club.totalEffectivenessExceed23 + player.effectiveness) :  ( club.totalEffectivenessExceed23 + 0)\n                /* fino al 03/05/2023 calcolavamo la media del cluster come la media dei giocatori nel cluster\n                clubClusterSalaryAvg[club.cluster] = clubClusterSalaryAvg[club.cluster]  === undefined ? { totalSalaryNet : 0, count : 0} : clubClusterSalaryAvg[club.cluster];\n                clubClusterSalaryAvg[club.cluster].totalSalaryNet = player.salaryNet + clubClusterSalaryAvg[club.cluster].totalSalaryNet\n                clubClusterSalaryAvg[club.cluster].count++;\n                */\n                 \n                 \n                 \n                if ( player.remainingMonthsOfContract <= 6 ) {\n                    \n                    club.numOfExpiringContracts++;\n                }\n                 \n                 \n                 if (player.currentLeagueCountryCode !== player.nationalityCode) {\n                    \n                    \n                      club.numOfForeignPlayers++;\n                      TheFootballTree[leagueId].numOfForeignPlayers++;\n                      \n                      \n                      club.shareOfForeignPlayers = ( club.numOfForeignPlayers/club.numOfPlayers ) *100\n                      TheFootballTree[leagueId].shareOfForeignPlayers = ( TheFootballTree[leagueId].numOfForeignPlayers/TheFootballTree[leagueId].numOfPlayers ) *100\n                }\n                \n                if (player.age <24 ) {\n                    \n                    \n                      club.numOfU23Players++;\n                      TheFootballTree[leagueId].numOfU23Players++;\n                      \n                      club.shareOfU23Players = ( club.numOfU23Players/club.numOfPlayers ) *100\n                      TheFootballTree[leagueId].shareOfU23Players = ( TheFootballTree[leagueId].numOfU23Players/TheFootballTree[leagueId].numOfPlayers ) *100\n\n                }\n                \n                if (player.age <24 && player.currentLeagueCountryCode !== player.nationalityCode) {\n                    \n                    \n                      club.numOfU23ForeignPlayers++;\n                      TheFootballTree[leagueId].numOfU23ForeignPlayers++;\n                      \n                      club.shareOfU23ForeignPlayers = ( club.numOfU23ForeignPlayers/club.numOfPlayers ) *100\n                      TheFootballTree[leagueId].shareOfU23ForeignPlayers = ( TheFootballTree[leagueId].numOfU23ForeignPlayers/TheFootballTree[leagueId].numOfPlayers ) *100\n\n                }\n                \n                club.numOfNationalPlayers = player.nationalTeamPlayer ? club.numOfNationalPlayers + 1 : club.numOfNationalPlayers\n                \n                clubOwnedPlayers[player.masterClubId] = clubOwnedPlayers[player.masterClubId] === undefined ? 0 : clubOwnedPlayers[player.masterClubId];\n                clubOwnedPlayers[player.masterClubId] = clubOwnedPlayers[player.masterClubId] + 1\n                \n                let pranks = { \n                    playerId : player.playerId,\n                    potentialPrice :  player.potentialPrice,  \n                    effectiveness : player.fatmol, \n                    performance :  player.absind\n            \n                } \n                playerRanks.push(pranks)\n            })\n            \n            \n            /* dall 03/05/2023 facciamo la media dei club*/\n            clubClusterSalaryAvg[club.cluster] = clubClusterSalaryAvg[club.cluster]  === undefined ? { totalSalaryNet : 0, numberOfClubs : 0, numberOfPlayers : 0} : clubClusterSalaryAvg[club.cluster];\n            clubClusterSalaryAvg[club.cluster].totalSalaryNet = club.salaryNetSum + clubClusterSalaryAvg[club.cluster].totalSalaryNet\n            clubClusterSalaryAvg[club.cluster].numberOfClubs ++;\n            clubClusterSalaryAvg[club.cluster].numberOfPlayers =  club.numOfPlayers + clubClusterSalaryAvg[club.cluster].numberOfPlayers;\n\n            \n            \n            clubLeagueSalaryAvg[club.leagueId] = clubLeagueSalaryAvg[club.leagueId]  === undefined ? { totalSalaryNet : 0, numberOfClubs : 0,numberOfPlayers : 0} : clubLeagueSalaryAvg[club.leagueId];\n            clubLeagueSalaryAvg[club.leagueId].totalSalaryNet = club.salaryNetSum + clubLeagueSalaryAvg[club.leagueId].totalSalaryNet\n            clubLeagueSalaryAvg[club.leagueId].numberOfClubs ++;\n            clubLeagueSalaryAvg[club.leagueId].numberOfPlayers =  club.numOfPlayers + clubLeagueSalaryAvg[club.leagueId].numberOfPlayers;\n            \n            \n            \n            club.avgAge = totalAge / club.numOfPlayers;\n            club.avgContractDuration =  totalContractDuration / club.numOfPlayers;\n            club.avgContractResidualDuration  =  totalContractResiduaDuration / club.numOfPlayers;\n        \n            club.capitalGain = club.expectedPrice - club.residualBookValue;\n            club.netProfit =  club.lastRevenues - club.costs;\n            //club.netProfit =  club.expectedPrice - club.residualValue;\n            \n            /*cambiato il 16/01/2023\n            club.salaryAbsoluteDeviation = club.salaryOptimal - club.salaryNet;\n            club.salaryPercDeviation =  (club.salaryAbsoluteDeviation * 100 ) / club.salaryOptimal*/\n            \n            \n            club.salaryAbsoluteDeviation = club.salaryNetFair - club.salaryNet; //modifica del 27/09/2023 - Non prende più il salary net sum ma salary net \n            club.salaryPercDeviation =  (club.salaryAbsoluteDeviation * 100 ) / club.salaryNet //modifica del 27/09/2023 - Non prende più il salary net sum ma salary net \n            \n            club.salaryExtracost = club.salaryGrossFair - club.salaryGrossSum; // aggiunto il 16/01/2023\n            \n            \n            club.avgPotentialPrice = club.potentialPrice / club.numOfPlayers;\n            club.avgPotentialPriceExceed100Min = club.potentialPriceExceed100Min / numOfPlayersExceed100Min;\n            club.avgResidualValue = club.residualValue / club.numOfPlayers;\n            club.avgResidualValueExceed100Min = club.residualValueExceed100Min / numOfPlayersExceed100Min;\n            club.avgResidualBookValue = club.residualBookValue / club.numOfPlayers;\n            club.avgResidualBookValueExceed100Min = club.residualBookValueExceed100Min / numOfPlayersExceed100Min;\n            club.avgExpectedPrice = club.expectedPrice / club.numOfPlayers;\n            club.avgExpectedPriceExceed100Min = club.expectedPriceExceed100Min / numOfPlayersExceed100Min;\n            club.avgLatestMicroVolatility = club.totalLatestMicroVolatility / club.numOfPlayers;\n            club.avgLatestMicroVolatilityExceed100Min = club.totalLatestMicroVolatilityExceed100Min / numOfPlayersExceed100Min;\n            club.avgSalaryGross = club.salaryGrossSum / club.numOfPlayers\n            club.avgSalaryGrossExceed100Min = club.salaryGrossSumExceed100Min / numOfPlayersExceed100Min;\n            club.avgEffectiveness  = club.totalEffectiveness / club.numOfPlayers;\n            club.avgEffectivenessExceed100Min = club.totalEffectivenessExceed100Min / numOfPlayersExceed100Min;\n            club.avgSalaryNet = club.salaryNetSum / club.numOfPlayers;\n            club.avgSalaryNetExceed100Min = club.salaryNetSumExceed100Min / numOfPlayersExceed100Min;\n            club.avgSalaryOptimal = club.salaryOptimal / club.numOfPlayers;\n            club.avgSalaryOptimalExceed100Min = club.salaryOptimalExceed100Min / numOfPlayersExceed100Min;\n            club.avgSalaryPotential = club.salaryPotential / club.numOfPlayers;\n            club.avgSalaryPotentialExceed100Min = club.salaryPotentialExceed100Min / numOfPlayersExceed100Min;\n            \n            club.maxSalaryGross = Math.max(club.salaryGrossSum, club.salaryGross)\n            club.maxSalaryNet = Math.max(club.salaryNetSum,club.salaryNet)\n\n            \n            \n            \n            \n            club.revenueGrowth = club.oldRevenues ? (( ( club.lastRevenues - club.oldRevenues) / club.oldRevenues)  *100): 0 ;\n            club.projectedRevenueGrowth = club.lastRevenues ? (((club.revenues - club.lastRevenues) / club.lastRevenues )*100) : 0;\n            \n            \n            club.netProfitLoss = club.lastRevenues - club.costOperating;\n            club.playerTrading = club.salesPlayers5Y$ - club.purchasePlayers5Y$;\n            club.returnOnInvestment = 0 // club.returnOnInvestment = ((player benefit – player costs) ;\n            club.costPerPoint = club.pointsCurrentSeason ?  (club.playersAnnualCost  / club.pointsCurrentSeason) : 0\n            club.performanceIndex = club.avgEffectivenessExceed100Min;\n            \n            \n            \n            totalAgeLeague = totalAgeLeague + totalAge;\n            totalContractDurationLeague = totalContractDurationLeague + totalContractDuration;\n            totalContractResiduaDurationLeauge = totalContractResiduaDurationLeauge + totalContractResiduaDuration;\n            \n            TheFootballTree[leagueId].numOfPlayers = TheFootballTree[leagueId].numOfPlayers + club.numOfPlayers;\n            \n            TheFootballTree[leagueId].portfolioCost = TheFootballTree[leagueId].portfolioCost + club.portfolioCost;\n            TheFootballTree[leagueId].residualBookValue = TheFootballTree[leagueId].residualBookValue + club.residualBookValue;\n            TheFootballTree[leagueId].residualValue = TheFootballTree[leagueId].residualValue + club.residualValue;\n            TheFootballTree[leagueId].potentialPrice = TheFootballTree[leagueId].potentialPrice + club.potentialPrice;\n            TheFootballTree[leagueId].expectedPrice = TheFootballTree[leagueId].expectedPrice + club.expectedPrice;\n            TheFootballTree[leagueId].totalRevenues = TheFootballTree[leagueId].totalRevenues + club.lastRevenues; //aggiunto il 08/1/2024\n            \n            allLeagueTotalRevenues = allLeagueTotalRevenues + club.lastRevenues\n            \n            \n            TheFootballTree[leagueId].totalProjectedRevenues = TheFootballTree[leagueId].totalProjectedRevenues + club.revenues; \n\n            \n                \n            //TheFootballTree[leagueId].salaryGross = TheFootballTree[leagueId].salaryGross + club.salaryGrossSum;\n            TheFootballTree[leagueId].salaryGross = TheFootballTree[leagueId].salaryGross + club.maxSalaryGross;\n            //TheFootballTree[leagueId].salaryNet = TheFootballTree[leagueId].salaryNet + club.salaryNetSum;\n            TheFootballTree[leagueId].salaryNet = TheFootballTree[leagueId].salaryNet + club.maxSalaryNet;\n            TheFootballTree[leagueId].salaryOptimal = TheFootballTree[leagueId].salaryOptimal + club.salaryOptimal;\n            TheFootballTree[leagueId].salaryPotential = TheFootballTree[leagueId].salaryPotential + club.salaryPotential;\n            TheFootballTree[leagueId].salaryAvg = TheFootballTree[leagueId].salaryNet / TheFootballTree[leagueId].numOfPlayers\n            //Clubs.push(club);\n            \n            TheFootballTree[leagueId].avgPotentialPrice =  TheFootballTree[leagueId].potentialPrice / TheFootballTree[leagueId].numOfPlayers\n            TheFootballTree[leagueId].avgPortfolioCost = TheFootballTree[leagueId].portfolioCost / TheFootballTree[leagueId].numOfPlayers\n            TheFootballTree[leagueId].avgExpectedPrice = TheFootballTree[leagueId].expectedPrice / TheFootballTree[leagueId].numOfPlayers\n            TheFootballTree[leagueId].avgResidualBookValue = TheFootballTree[leagueId].residualBookValue / TheFootballTree[leagueId].numOfPlayers\n            TheFootballTree[leagueId].avgPerformance = TheFootballTree[leagueId].totalPerformance / TheFootballTree[leagueId].numOfPlayers\n            TheFootballTree[leagueId].avgEffectiveness = TheFootballTree[leagueId].totalEffectiveness / TheFootballTree[leagueId].numOfPlayers\n            TheFootballTree[leagueId].avgLatestUniqueness = TheFootballTree[leagueId].totalLatestUniqueness / TheFootballTree[leagueId].numOfPlayers\n            TheFootballTree[leagueId].avgLatestMicroVolatility = TheFootballTree[leagueId].totalLatestMicroVolatility / TheFootballTree[leagueId].numOfPlayers\n            TheFootballTree[leagueId].avgSalaryNet =  TheFootballTree[leagueId].salaryNet / TheFootballTree[leagueId].numOfPlayers\n            TheFootballTree[leagueId].avgSalaryOptimal =  TheFootballTree[leagueId].salaryOptimal / TheFootballTree[leagueId].numOfPlayers\n            TheFootballTree[leagueId].avgSalaryPotential =  TheFootballTree[leagueId].salaryPotential / TheFootballTree[leagueId].numOfPlayers\n\n            TheFootballTree[leagueId].annualBookValue = TheFootballTree[leagueId].annualBookValue + club.annualBookValue;\n            \n            let cranks = { \n                clubId : club.clubId,\n                potentialPrice :  club.potentialPrice,  \n                portfolioCost : club.portfolioCost, \n                salaryNet :  club.salaryNet\n            \n                } \n            clubRanks.push(cranks)\n        })   \n        \n        \n        TheFootballTree[leagueId].shareOfForeignPlayers = ( TheFootballTree[leagueId].numOfForeignPlayers / TheFootballTree[leagueId].numOfPlayers ) *100\n        TheFootballTree[leagueId].shareOfU23Players = ( TheFootballTree[leagueId].numOfU23Players / TheFootballTree[leagueId].numOfPlayers ) *100\n\n        \n        TheFootballTree[leagueId].avgAge = totalAgeLeague / TheFootballTree[leagueId].numOfPlayers;\n        TheFootballTree[leagueId].avgContractDuration =  totalContractDurationLeague / TheFootballTree[leagueId].numOfPlayers;\n        TheFootballTree[leagueId].avgContractResidualDuration  =  totalContractResiduaDurationLeauge / TheFootballTree[leagueId].numOfPlayers;\n        \n        TheFootballTree[leagueId].capitalGain = TheFootballTree[leagueId].expectedPrice - TheFootballTree[leagueId].residualBookValue;\n        TheFootballTree[leagueId].netProfit =  TheFootballTree[leagueId].expectedPrice - TheFootballTree[leagueId].residualValue;\n            \n        TheFootballTree[leagueId].salaryAbsoluteDeviation = TheFootballTree[leagueId].salaryOptimal - TheFootballTree[leagueId].salaryNet;\n        TheFootballTree[leagueId].salaryPercDeviation =  (TheFootballTree[leagueId].salaryAbsoluteDeviation * 100 ) / TheFootballTree[leagueId].salaryOptimal\n      \n        leagueClusterSalaryAvg[TheFootballTree[leagueId].cluster] = leagueClusterSalaryAvg[TheFootballTree[leagueId].cluster]  === undefined ? { totalSalaryNet : 0, count : 0} : leagueClusterSalaryAvg[TheFootballTree[leagueId].cluster];\n        leagueClusterSalaryAvg[TheFootballTree[leagueId].cluster].totalSalaryNet = TheFootballTree[leagueId].salaryNet + leagueClusterSalaryAvg[TheFootballTree[leagueId].cluster].totalSalaryNet\n        leagueClusterSalaryAvg[TheFootballTree[leagueId].cluster].count++;\n        \n        let lranks = { \n            leagueId : leagueId,\n            potentialPrice :  TheFootballTree[leagueId].potentialPrice,  \n            portfolioCost : TheFootballTree[leagueId].portfolioCost, \n            salaryNet :  TheFootballTree[leagueId].salaryNet\n            \n        } \n        \n        \n        leagueRanks.push(lranks)\n    })\n\n\n\n//RANKS\n\n      const leaguesByValue = leagueRanks.sort((a,b) => a.potentialPrice - b.potentialPrice).map((league, index, array) => league.leagueId).reverse()\n      const leaguesByAcquisition = leagueRanks.sort((a,b) => a.portfolioCost - b.portfolioCost).map((league, index, array) => league.leagueId).reverse()\n      const leaguesBySalary = leagueRanks.sort((a,b) => a.salaryNet - b.salaryNet).map((league, index, array) => league.leagueId).reverse()\n      \n      const clubsByValue = clubRanks.sort((a,b) => a.potentialPrice - b.potentialPrice).map((club, index, array) => club.clubId).reverse()\n      const clubsByAcquisition = clubRanks.sort((a,b) => a.portfolioCost - b.portfolioCost).map((club, index, array) => club.clubId).reverse()\n      const clubsBySalary = clubRanks.sort((a,b) => a.salaryNet - b.salaryNet).map((club, index, array) => club.clubId).reverse()\n\n      const playersByValue = playerRanks.sort((a,b) => a.potentialPrice - b.potentialPrice).map((player, index, array) => player.playerId).reverse()\n      const playersByPerformance = playerRanks.sort((a,b) => a.performance - b.performance).map((player, index, array) => player.playerId).reverse()\n      const playersByEffectiveness = playerRanks.sort((a,b) => a.effectiveness - b.effectiveness).map((player, index, array) => player.playerId).reverse()\n\n\nObject.keys(TheFootballTree).forEach( leagueId => {\n        \n        TheFootballTree[leagueId].totalProjectedRevenues = 0;\n        TheFootballTree[leagueId].totalCostOperating = 0;\n        TheFootballTree[leagueId].salesPlayers5Y$ = 0;\n        TheFootballTree[leagueId].purchasePlayers5Y$ = 0;\n        TheFootballTree[leagueId].totalBroadcasting = 0;\n        TheFootballTree[leagueId].totalCommercial = 0;\n        TheFootballTree[leagueId].totalMatchDay = 0;\n        TheFootballTree[leagueId].totalOtherRevenues = 0;\n        TheFootballTree[leagueId].revenueGrowth = 0;\n        TheFootballTree[leagueId].projectedRevenueGrowth = 0;\n        TheFootballTree[leagueId].revenueShare = 0;\n        TheFootballTree[leagueId].netProfitLoss = 0;\n        TheFootballTree[leagueId].playerTrading = 0;\n        TheFootballTree[leagueId].returnOnInvestment = 0;\n        TheFootballTree[leagueId].financialSustainabilityIndex = 0;\n        TheFootballTree[leagueId].performanceIndex = 0;\n        TheFootballTree[leagueId].oldTotalRevenues = 0;\n        \n        TheFootballTree[leagueId].rankByValue = leaguesByValue.indexOf(leagueId) +1\n        TheFootballTree[leagueId].rankByAcquisition = leaguesByAcquisition.indexOf(leagueId) +1\n        TheFootballTree[leagueId].rankBySalary = leaguesBySalary.indexOf(leagueId) +1\n        TheFootballTree[leagueId].avgSalaryNetCluster = leagueClusterSalaryAvg[TheFootballTree[leagueId].cluster].totalSalaryNet / leagueClusterSalaryAvg[TheFootballTree[leagueId].cluster].count\n        TheFootballTree[leagueId].absSalaryNetClusterDeviation = Math.abs(TheFootballTree[leagueId].avgSalaryNetCluster - TheFootballTree[leagueId].salaryNet ) \n        TheFootballTree[leagueId].percSalaryNetClusterDeviation = ( (TheFootballTree[leagueId].salaryNet - TheFootballTree[leagueId].avgSalaryNetCluster) / TheFootballTree[leagueId].salaryNet ) * 100\n            \n            \n            \n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            \n            club.rankByValue = clubsByValue.indexOf(club.clubId)  +1 \n            club.rankByAcquisition = clubsByAcquisition.indexOf(club.clubId)  +1\n            club.rankBySalary = clubsBySalary.indexOf(club.clubId)  +1\n            \n            club.avgSalaryNetCluster = clubClusterSalaryAvg[club.cluster].totalSalaryNet / clubClusterSalaryAvg[club.cluster].numberOfClubs\n            club.absSalaryNetClusterDeviation = Math.abs(club.avgSalaryNetCluster - club.salaryNetSum ) \n            club.percSalaryNetClusterDeviation = ( (club.salaryNetSum - club.avgSalaryNetCluster) / club.salaryNetSum ) * 100\n            club.avgSalaryNetClusterByPlayer = clubClusterSalaryAvg[club.cluster].totalSalaryNet / clubClusterSalaryAvg[club.cluster].numberOfPlayers\n            \n            // club.avgLeagueSalaryNet = TheFootballTree[leagueId].avgSalaryNet il 03/05/2023 cambiamo facciamo la media per club \n            club.avgLeagueSalaryNet = clubLeagueSalaryAvg[club.leagueId].totalSalaryNet / clubLeagueSalaryAvg[club.leagueId].numberOfClubs \n            club.absLeagueSalaryNetDeviation = Math.abs(club.salaryNetSum - club.avgLeagueSalaryNet ) \n            club.percLeagueSalaryNetDeviation = (( club.salaryNetSum - club.avgLeagueSalaryNet ) / club.salaryNetSum ) * 100;\n\n            \n            club.numOfOwnedPlayers = clubOwnedPlayers[club.clubId] ? clubOwnedPlayers[club.clubId] : 0\n            \n            //club.financialSustainabilityIndex = club.lastRevenues ? ( ( club.playersAnnualCost / club.lastRevenues)*100) : 0;\n            club.financialSustainabilityIndex = club.revenues ? ( ( (club.annualBookValue + club.maxSalaryGross) / club.revenues)*100) : 0;\n            \n            club.revenueShare = TheFootballTree[leagueId].totalRevenues ? (( club.lastRevenues / TheFootballTree[leagueId].totalRevenues )*100) : 0;\n            club.Players.forEach( player => {\n                \n                player.rankByValue = playersByValue.indexOf(player.playerId)  +1\n                player.rankByPerformance = playersByPerformance.indexOf(player.playerId)  +1\n                player.rankByEffectiveness = playersByEffectiveness.indexOf(player.playerId)  +1\n                \n                \n                player.absClubAvgSalaryDeviation = Math.abs(club.salaryAvg - player.salaryNet )\n                player.percClubAvgSalaryDeviation = ( ( player.salaryNet - club.salaryAvg ) / club.salaryAvg ) * 100\n                \n                player.absLeagueAvgSalaryDeviation = Math.abs(TheFootballTree[leagueId].salaryAvg - player.salaryNet )\n                player.percLeagueAvgSalaryDeviation = ( ( player.salaryNet - TheFootballTree[leagueId].salaryAvg ) / TheFootballTree[leagueId].salaryAvg ) * 100\n\n                player.absClubCusterAvgSalaryDeviation =  Math.abs(club.avgSalaryNetClusterByPlayer - player.salaryNet )\n                player.percClubClusterAvgSalaryDeviation = ( ( player.salaryNet - club.avgSalaryNetClusterByPlayer ) /club.avgSalaryNetClusterByPlayer ) * 100\n                \n           \n                //player.revenueContributionIndex = club.revenues ? ( player.benefits / club.revenues) : 0;\n                \n                let eff23 = player.effectiveness < 23.5 ? 0 : player.effectiveness;\n                \n                player.contributionIndexPerc = ( eff23 / club.totalEffectivenessExceed23 )*100\n                player.revenueContributionIndex = player.contributionIndexPerc/100 * club.revenues;\n                \n                \n                player.costPerMinute =  player.minutesLastSeason ? ( player.annualCost / player.minutesLastSeason ) : player.annualCost;\n               //player.scoringContributionIndex = player.minutes ? ( ( player.goal + player.assist + player.preassist) / ( player.minutes/90)) : 0;\n                \n                \n                player.scoringContributionIndex = ( player.goal + player.assist + player.preassist) ? ( ( player.minutes) / ( player.goal + player.assist + player.preassist) ) : 0;\n\n                \n                player.clubRelativePlayerPerformance = club.avgEffectiveness ? (( ( player.effectiveness - club.avgEffectiveness)  / club.avgEffectiveness )*100) : 0;\n                player.leagueRelativePlayerPerformance = TheFootballTree[leagueId].avgEffectiveness ? ((( player.effectiveness-TheFootballTree[leagueId].avgEffectiveness) / TheFootballTree[leagueId].avgEffectiveness  )*100) : 0;\n           \n                player.salaryImpactOnSalaries = club.maxSalaryGross ? ( ( player.salaryGross / club.maxSalaryGross)* 100) : 0;\n           \n           \n           \n            })\n            \n            TheFootballTree[leagueId].oldTotalRevenues = TheFootballTree[leagueId].oldTotalRevenues + club.oldRevenues;\n            TheFootballTree[leagueId].totalProjectedRevenues = TheFootballTree[leagueId].totalProjectedRevenues + club.revenues;\n            TheFootballTree[leagueId].totalCostOperating = TheFootballTree[leagueId].totalCostOperating + club.costOperating;\n            TheFootballTree[leagueId].salesPlayers5Y$ = TheFootballTree[leagueId].salesPlayers5Y$ + club.salesPlayers5Y$;\n            TheFootballTree[leagueId].purchasePlayers5Y$ = TheFootballTree[leagueId].purchasePlayers5Y$ + club.purchasePlayers5Y$;\n            \n            TheFootballTree[leagueId].totalBroadcasting = TheFootballTree[leagueId].totalBroadcasting + club.broadcastingRevenues;\n            TheFootballTree[leagueId].totalCommercial = TheFootballTree[leagueId].totalCommercial + club.commericialRevenues;\n            TheFootballTree[leagueId].totalMatchDay = TheFootballTree[leagueId].totalMatchDay + club.matchDayRevenues;\n            TheFootballTree[leagueId].totalOtherRevenues = TheFootballTree[leagueId].totalOtherRevenues + club.otherRevenues;\n            \n        })\n       \n        \n        TheFootballTree[leagueId].revenueGrowth =  TheFootballTree[leagueId].oldTotalRevenues ? (( ( TheFootballTree[leagueId].totalRevenues - TheFootballTree[leagueId].oldTotalRevenues ) / TheFootballTree[leagueId].oldTotalRevenues)*100) : 0;\n        // TheFootballTree[leagueId].projectedRevenueGrowth  = TheFootballTree[leagueId].totalRevenues ? ((TheFootballTree[leagueId].totalProjectedRevenues  - TheFootballTree[leagueId].totalRevenues) / TheFootballTree[leagueId].totalRevenues ) : 0;\n        TheFootballTree[leagueId].revenueShare = (TheFootballTree[leagueId].totalRevenues / allLeagueTotalRevenues)*100;\n        TheFootballTree[leagueId].netProfitLoss = TheFootballTree[leagueId].totalRevenues -  TheFootballTree[leagueId].totalCostOperating ;\n        TheFootballTree[leagueId].playerTrading = TheFootballTree[leagueId].salesPlayers5Y$ - TheFootballTree[leagueId].purchasePlayers5Y$ ;\n        //TheFootballTree[leagueId].returnOnInvestment double;\n        //TheFootballTree[leagueId].financialSustainabilityIndex =  TheFootballTree[leagueId].totalRevenues ? ( ( ( TheFootballTree[leagueId].salaryGross + TheFootballTree[leagueId].residualBookValue )*100)/ TheFootballTree[leagueId].totalRevenues) : 0;\n        TheFootballTree[leagueId].financialSustainabilityIndex = TheFootballTree[leagueId].totalRevenues ? ( ( ( TheFootballTree[leagueId].salaryGross + TheFootballTree[leagueId].annualBookValue )*100)/ TheFootballTree[leagueId].totalRevenues) : 0;\n        TheFootballTree[leagueId].performanceIndex = TheFootballTree[leagueId].avgEffectiveness;\n        \n    \n    })\n\n} catch(e) {\n    \n    console.log(e)\n}\n\n\n//flow.set(\"Players\",Players)\n//flow.set(\"Clubs\",Clubs)\n//flow.set(\"Leagues\",Leagues)\n//flow.set(\"TheFootballTree\",TheFootballTree)\nglobal.set(\"TheLatestFooballTree\",TheFootballTree)\n//global.set(\"PlayersErrors\",msg.PlayersErrors)\nflow.get(\"logmsg\").message = \"Clubs and Leagues Analisys ENDS\"\nnode.log(flow.get(\"logmsg\"))\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 900,
        "wires": [
            [
                "4b721cc41d431f9e"
            ]
        ]
    },
    {
        "id": "87d25c6bcdfd1af1",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "VOLATILITY",
        "func": "\nmsg.topic=\"select dp.playerId, dp.player, dp.clusterId, dp.group, dp.macroVolatility, dp.microVolatility, dp.week from dominanceplayersparamsvol dp where dp.run = (select max(dp1.run) from dominanceplayersparamsvol dp1 )\";\nmsg.dataSet = \"VOLATILITY\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 80,
        "wires": [
            [
                "afb31ee290792b56"
            ]
        ]
    },
    {
        "id": "bd63324df61e694f",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "INIT",
        "func": "let logmsg = global.get(\"logmsg\");\n\nif(!logmsg) {\n    \n    logmsg = {}\n    logmsg.type = \"db\"\n    logmsg.taskType = \"elaboration\"\n    logmsg.taskId = Math.floor(Math.random() * 1000001);\n    logmsg.message = \"runmodel started\"\n    logmsg.taskRunning = true\n}\n\n\n\nflow.set(\"logmsg\",logmsg)\n\nmsg.payload = logmsg;\n    \n\n\nnode.log(logmsg)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 220,
        "wires": [
            [
                "f0cbbb19613b92f7"
            ]
        ]
    },
    {
        "id": "071132293b1607b7",
        "type": "subflow:1b980fd89607dc71",
        "z": "521d26a7dba2b3ee",
        "name": "",
        "env": [],
        "x": 930,
        "y": 900,
        "wires": [
            [
                "db88cb5e2ab1af0a"
            ]
        ]
    },
    {
        "id": "abbbd44147e9acb7",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "",
        "func": "let TheFootballTree = msg.payload;\n let mbappe = {}\n let salah = {}\n let courtois = {}\n let romagna = {}\n\nObject.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            club.Players.forEach( player => {\n                \n           \n                if (player.playerId == '5e9ilgrz3tzg9kd1gk3yvrahh' ) {\n                    \n                     mbappe = player;\n                    //console.log(\"mbappe\",player)\n                }\n    \n                if (player.playerId == '5ilkkfbsss0bxd6ttdlqg0uz9' ) {\n                    \n                     salah = player;\n                    //console.log(\"salah\",player)\n                }\n               \n                //6crmq7vzqts58wg196q48sc7p\n                \n                if (player.playerId == '6crmq7vzqts58wg196q48sc7p' ) {\n                    \n                     courtois = player;\n                    //console.log(\"courtois\",player)\n                }\n                \n                if (player.playerId == '61c395xuimpxo2439p8mt3y6t' ) {\n                    \n                     romagna = player;\n                    console.log(\"romagna\",player)\n                }\n            })\n            \n           \n        })\n    })\n\nmsg.payload=romagna\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2260,
        "y": 360,
        "wires": [
            []
        ]
    },
    {
        "id": "8954278fdc43b82c",
        "type": "inject",
        "z": "521d26a7dba2b3ee",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 100,
        "wires": [
            [
                "98c6d9ab6bc0bbea"
            ]
        ]
    },
    {
        "id": "98c6d9ab6bc0bbea",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Objects",
        "func": "console.log(\"GLOBAL OBJECTS DEFINITION BEGINS\");\n/**\n * LEAUGE\n * **/\n\n\nconst League = function (leagueId,leagueName,optaName) {\n    \n   \n    this.leagueId = leagueId; // ID\n    this.name = optaName; //leagueName;\n    this.optaName = optaName;\n    this.country;\n    this.weight;\n    this.cluster;\n    this.taxRate;\n    this.taxRatePerc;\n    this.Clubs = [];\n\n}\n\nglobal.set(\"TheLeagueObject\",League);\n\n/**\n * CLUB\n * **/\n const Club = function (clubId,clubName) {\n    \n   \n    this.clubId = clubId; // ID\n    this.name = clubName;\n    this.leagueId;\n    this.cluster;\n    this.salaryCap;\n    this.reward;\n    this.noLimiteVendita;\n    this.perc;\n    this.salaryGross;\n    this.salaryNet;\n    this.salaryGrossFair;\n    this.salaryNetFair;\n    this.uefaRank;\n    this.revenues;\n    this.maxtr;\n    this.Players = [];\n    this.numOfPlayers\n            \n    this.avgAge = 0\n    this.avgContractDuration = 0\n    this.avgContractResidualDuration = 0\n            \n    this.portfolioCost = 0\n    this.residualBookValue = 0\n    this.residualValue = 0\n    this.potentialPrice = 0\n    this.exptectedPrice = 0\n    this.capitalGain = 0\n    this.netProfit = 0\n            \n    this.totalGrossSalary = 0\n    this.totalNetSalary = 0\n    this.totalOptimalSalary = 0\n    this.salaryAbsoluteDeviation = 0\n    this.salaryPercDeviation = 0\n\n}\n\nglobal.set(\"TheClubObject\",Club);\n \n \n /**\n * PLAYER\n * **/\n\nconst Player = function (playerId,firstName,lastName) {\n    \n   \n    //FUNCTIONS\n    this.playerId = playerId; // ID\n    \n    \n    //ANAGRAFICA\n    this.firstName = firstName\n    this.lastName = lastName;\n   \n    this.fullName = this.firstName+\" \"+this.lastName;\n    this.name;\n    \n    this.birthDate;\n    this.age;\n  \n    //FOOTBALL DATA\n    \n    this.currentPosition;\n    this.currentClubId;\n    this.currentClubName;\n    this.currentClubCluster; //Valore proveniente dalla tabella Club ma preso in JOIN nella query su INFO\n\n    this.currentLeagueId;\n    this.currentLeagueName;\n    //this.currentLeagueTaxRate; //Valore proveniente dalla tabella Leauge ma preso in JOIN nella query su INFO\n    \n    this.nationalTeamPlayer = false; //Default \n    \n    //LATEST STATS REFERENCE FROM DOMINANCE PLAYERS STATS\n    \n    this.currentLeagueCluster;\n    this.currentLeagueWeight;\n    this.latestRoleGroup;\n    this.latestRoleWeight;\n    \n    //OE CATEGORY\n    this.superStar = false;\n    this.risingStar = false;\n    this.emerging = false;\n    \n    //Performance Params\n    this.alert\n    this.absind;\n    this.performance;\n    this.fatmol;\n    this.effectiveness;\n    this.maturity;\n    this.weightInClub;\n    \n    //PERFORMANCE STATISTICAAL PARAMS\n    this.latestUniqueness;\n    this.latestMicroVolatility;\n    this.latestMacroVolatility;\n    \n    //OE ECONOMIC DATA\n    this.contractType;\n    this.salaryNet;\n    this.salaryGross; \n    this.startContract;\n    this.endContract;\n    this.totalYearsOfContract;\n    this.transferPrice;\n    this.masterClubId;\n    this.masterClubName;\n    \n    //OE DATA\n    this.salaryOptimal\n\tthis.benefits\n\tthis.costs\n\tthis.optval\n\tthis.residualValue\n\tthis.residualBookValue\n\tthis.optimalCosts\n\tthis.van\n\tthis.valNoVan\n\tthis.potentialPrice\n\tthis.expectedPrice\n\tthis.capitalGain;\n\tthis.profit;\n\n    \n    \n}\n\n\nglobal.set(\"ThePlayerObject\",Player);\n\n /**\n * ERROR\n * **/\n \n const Error = function(severity, code,entityType,entityId,entityName,message) {\n    \n    this.severity = severity\n    this.code = code;\n    this.entityType = entityType;\n    this.entityId = entityId;\n    this.entityName =entityName;\n    this.message =  message;\n}\n\nglobal.set(\"TheErrorObject\",Error);\n\nconst PlayerError = function(severity, code,description,player,message) {\n    \n    this.severity = severity;\n    this.code = code;\n    this.description = description;\n    this.leagueName = player.currentLeagueName;\n    this.leagueId = player.currentLeagueId\n    this.clubName =player.currentClubName;\n    this.clubId =  player.currentClubId;\n    this.playerName = player.name;\n    this.playerId = player.playerId;\n    this.message = message;\n    \n}\n\nglobal.set(\"ThePlayerErrorObject\",PlayerError);\n\nconsole.log(\"GLOBAL OBJECTS DEFINITION ENDS\");\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 100,
        "wires": [
            [
                "cbd0f1b504965cc9"
            ]
        ]
    },
    {
        "id": "cbd0f1b504965cc9",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Utils",
        "func": "console.log(\"GLOBAL UTILITES DEFINITION BEGINS\");\n\nconst Utilities = function () {}\n    \n    //REMAINING YEARS OF CONTRACT\n    Utilities.prototype.ryc = function (dob) { \n        //let diff_ms = Date.now() - dob.getTime();\n        //let age_dt = new Date(diff_ms); \n  \n        //return Math.abs(age_dt.getUTCFullYear() - 1970);\n        let d = new Date();\n        let finalYear = dob.getUTCFullYear()\n        let currentYear  = d.getUTCFullYear()\n        \n        let ryc = ( finalYear - currentYear) \n        \n        if ( ryc==0 ) {\n        \n            let rm = Utilities.prototype.diffInMonths(dob,d);\n            \n            if( rm >= 6 ) {\n                ryc = 1\n            }\n            \n        } \n        \n        return ryc\n    }\n\n    //TOTAL YEARS OF CONTRACT\n    Utilities.prototype.tyc = function (dos,doe) { \n        let diff_ms = doe.getTime() - dos.getTime();\n        let dt = new Date(diff_ms); \n  \n        let tyoc = Math.abs(dt.getUTCFullYear() - 1970)+1\n        \n        tyoc = tyoc == 0 ? 1 : tyoc;\n        \n        return tyoc;\n    }\n    \n\n    Utilities.prototype.actualValueSum = function (val, n, dr ) {\n    \n        let total = 0;\n        \n        for (let i = 1; i<n+1; i++ ) {\n            \n            total = total + ( val / (Math.pow((1+dr),i) ))\n            \n        }\n    \n        return total;\n    }\n\n\n    Utilities.prototype.calculate_age = function(dob) { \n        var diff_ms = Date.now() - dob.getTime();\n        var age_dt = new Date(diff_ms); \n      \n        return Math.abs(age_dt.getUTCFullYear() - 1970);\n    }\n    \n    Utilities.prototype.calculateAgeWithDecimals = function(dob) { \n        let dt2 = new Date()\n      \n        let diff =Math.abs(dt2.getTime() - dob.getTime());\n        let diffDays = Math.ceil(diff / (1000 * 60 * 60 * 24)); \n        let diffYearsWithDecimals = diffDays / ( 365.25 )\n        return diffYearsWithDecimals;\n    }\n    \n    Utilities.prototype.blackScholes = function(currentPrice,strikePrice,time,volatility,interestRate,callPut) {\n        \n        return  blackScholes.blackScholes(currentPrice,strikePrice,time,volatility,interestRate,callPut)\n    \n    }\n    \n    \n    Utilities.prototype.calculateAge =  function(dob) { \n        \n        let dob2 = new Date(dob);\n        \n        var diff_ms = Date.now() - dob2.getTime();\n        var age_dt = new Date(diff_ms); \n  \n        return Math.abs(age_dt.getUTCFullYear() - 1970);\n    \n        \n    }\n    \n    Utilities.prototype.diffInMonths= function(dt2, dt1,roundUpFractionalMonths) \n    {\n/*\n        var diff =(dt2.getTime() - dt1.getTime()) / 1000;\n        diff /= (60 * 60 * 24 * 7 * 4);\n        return Math.abs(Math.round(diff));*/\n        \n        \n        //Months will be calculated between start and end dates.\n        //Make sure start date is less than end date.\n        //But remember if the difference should be negative.\n        var startDate=dt1;\n        var endDate=dt2;\n        var inverse=false;\n        if(dt1>dt2)\n        {\n            startDate=dt2;\n            endDate=dt1;\n            inverse=true;\n        }\n    \n        //Calculate the differences between the start and end dates\n        var yearsDifference=endDate.getFullYear()-startDate.getFullYear();\n        var monthsDifference=endDate.getMonth()-startDate.getMonth();\n        var daysDifference=endDate.getDate()-startDate.getDate();\n    \n        var monthCorrection=0;\n        //If roundUpFractionalMonths is true, check if an extra month needs to be added from rounding up.\n        //The difference is done by ceiling (round up), e.g. 3 months and 1 day will be 4 months.\n        if(roundUpFractionalMonths===true && daysDifference>0)\n        {\n            monthCorrection=1;\n        }\n        //If the day difference between the 2 months is negative, the last month is not a whole month.\n        else if(roundUpFractionalMonths!==true && daysDifference<0)\n        {\n            monthCorrection=-1;\n        }\n    \n        return (inverse?-1:1)*(yearsDifference*12+monthsDifference+monthCorrection);\n        \n  \n     }\n     \n       Utilities.prototype.calculateAge = function(birthDate) {\n           \n           let dob = new Date(birthDate);\n        // diff = now (in ms) - birthday (in ms)\n        // diff = age in ms\n        const diff = Date.now() - dob.getTime(); \n        \n        // [2] new Date(value); -> value = ms since 1970\n        // = do as if person was born in 1970\n        // this works cause we are interested in age, not a year\n        const ageDate = new Date(diff); \n        \n        // check: 1989 = 1970 + 19\n        //console.log(ageDate.getUTCFullYear()); // 1989\n        \n        // age = year if person was born in 1970 (= 1989) - 1970 = 19\n        return Math.abs(ageDate.getUTCFullYear() - 1970);\n    };\n    \n    Utilities.prototype.calculateStandardDeviation = function(array) {\n        \n        const n = array.length\n        const mean = array.reduce((a, b) => a + b) / n\n        return Math.sqrt(array.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n)\n\n    }\n    \n\nvar Utils = new Utilities();\n\n\nglobal.set(\"UTILS\",Utils); \n\nconsole.log(\"GLOBAL UTILITES DEFINITION ENDS\");\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "blackScholes",
                "module": "black-scholes"
            }
        ],
        "x": 450,
        "y": 100,
        "wires": [
            []
        ]
    },
    {
        "id": "556b7277d320e4de",
        "type": "comment",
        "z": "521d26a7dba2b3ee",
        "name": "GLOBAL OBJECTS",
        "info": "",
        "x": 330,
        "y": 40,
        "wires": []
    },
    {
        "id": "637c349917c508e7",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Clean Memory",
        "func": "flow.set(\"_STATS\",null) && \nflow.set(\"_INFO\",null) && \nflow.set(\"_UNIQ\",null) && \nflow.set(\"_VOLATILITY\",null) && \nflow.set(\"_CLUBS\",null) && \nflow.set(\"_PLAYERS\",null) && \nflow.set(\"_LEAGUES\",null) && \nflow.set(\"_ROLES\",null) \n\nmsg.payload = \"Elaboration Completed\" \n\nflow.get(\"logmsg\").message = \"Elaboration Completed\"\nnode.log(flow.get(\"logmsg\"))\n\n\n\n\n\n\nconsole.log(\"CLEANING MEMORY\")\nflow.get(\"logmsg\").message = \"CLEANING MEMORY\"\nnode.log(flow.get(\"logmsg\"))\n\n//const v8 = require('v8')\nconsole.log(`V8 Total Heap Size: ${(v8.getHeapStatistics().total_available_size / 1024 / 1024).toFixed(2)} MB`)\n/*let mem = process.memoryUsage()\nconst formatMem = (m) => ( m/1048576 ).toFixed(2)\nconsole.log(`Initial Memory Use (MB): RSS=${formatMem(mem.rss)}. Heap: Used=${formatMem(mem.heapUsed)}, Tot=${formatMem(mem.heapTotal)}. Ext C++=${formatMem(mem.external)}`)*/\n\nconsole.log(\"Cancello variabili nel flow\")\n\n\nflow.set(\"_CLUBS\",null)\nflow.set(\"_COUNTRIES\",null)\nflow.set(\"_DATA\",null)\nflow.set(\"_INFO\",null)\nflow.set(\"_LEAGUES\",null)\nflow.set(\"_MINUTES\",null)\nflow.set(\"_PLAYERS\",null)\nflow.set(\"_ROLES\",null)\nflow.set(\"_STATS\",null)\nflow.set(\"_UNIQ\",null)\nflow.set(\"_VOLATILY\",null)\n\nflow.set(\"errors\",null)\n// Cancellazione di tutte le proprietà elencate\nconsole.log(\"Cancello oggetti in msg\")\n\n// Annullamento dei riferimenti prima delle delete\n/*\nmsg._STATS = null;\nmsg._STATSIndex = null;\nmsg._INFO = null;\nmsg._INFOIndex = null;\nmsg._VOLATILITY = null;\nmsg._VOLATILITYIndex = null;\nmsg._UNIQ = null;\nmsg._UNIQIndex = null;\nmsg._PLAYERS = null;\nmsg._PLAYERSIndex = null;\nmsg._CLUBS = null;\nmsg._CLUBSIndex = null;\nmsg._LEAGUES = null;\nmsg._LEAGUESIndex = null;\nmsg._ROLES = null;\nmsg._ROLESIndex = null;\nmsg._COUNTRIES = null;\nmsg._COUNTRIESIndex = null;\nmsg._DATA = null;\nmsg._DATAIndex = null;\nmsg._MINUTES = null;\nmsg._MINUTESIndex = null;\nmsg.Leagues = null;\nmsg.LeaguesIndex = null;\nmsg.Clubs = null;\nmsg.ClubsIndex = null;\nmsg.PlayersErrors = null;*/\n\n/*delete msg._STATS;\ndelete msg._STATSIndex;\ndelete msg._INFO;\ndelete msg._INFOIndex;\ndelete msg._VOLATILITY;\ndelete msg._VOLATILITYIndex;\ndelete msg._UNIQ;\ndelete msg._UNIQIndex;\ndelete msg._PLAYERS;\ndelete msg._PLAYERSIndex;\ndelete msg._CLUBS;\ndelete msg._CLUBSIndex;\ndelete msg._LEAGUES;\ndelete msg._LEAGUESIndex;\ndelete msg._ROLES;\ndelete msg._ROLESIndex;\ndelete msg._COUNTRIES;\ndelete msg._COUNTRIESIndex;\ndelete msg._DATA;\ndelete msg._DATAIndex;\ndelete msg._MINUTES;\ndelete msg._MINUTESIndex;\ndelete msg.Leagues;\ndelete msg.LeaguesIndex;\ndelete msg.Clubs;\ndelete msg.ClubsIndex;\ndelete msg.PlayersErrors;*/\n\n\nconsole.log(\"memory cleaned\")\nconsole.log(`V8 Total Heap Size: ${(v8.getHeapStatistics().total_available_size / 1024 / 1024).toFixed(2)} MB`)\nflow.get(\"logmsg\").message = \"MEMORY CLEANED\"\nnode.log(flow.get(\"logmsg\"))\n\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "v8",
                "module": "v8"
            }
        ],
        "x": 2340,
        "y": 900,
        "wires": [
            [
                "9b707f4c6d10a7bf"
            ]
        ]
    },
    {
        "id": "bc2ed0c27120e918",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Retrieve and Parse Errors",
        "func": "/*try {\n    \n    // Portiamo a stringa e riparsiamo gli oggetti per crearne di nuovi ed evitare che siano riferimenti agli stessi\n    console.log(\"Retrieving Errors\")\n    \n\n   let PlayersErrors = global.get(\"PlayersErrors\")//msg.PlayersErrors\n\n\n    console.log(\"#PlayersErrors \"+PlayersErrors.length);\n    \n    flow.get(\"logmsg\").message = \"Errors : \"+PlayersErrors.length\n    node.log(flow.get(\"logmsg\"))\n    \n    msg.payload=PlayersErrors\n    \n    return msg\n\n}\ncatch (e) {\n    \n    console.log(e)\n}\n*/\n \nif (global.get(\"PlayersErrors\") === undefined) {\n    msg.continue = false;\n    return msg; \n}\n\nif (global.get(\"PlayersErrors\").length % 300 == 0 ) {\n\n    flow.get(\"logmsg\").message = \"Errors left: \" +global.get(\"PlayersErrors\").length\n    node.log(flow.get(\"logmsg\")) \n    \n}\n\nif(global.get(\"PlayersErrors\").length > 0 ) {\n    \n    msg.payload = global.get(\"PlayersErrors\").pop();\n    msg.continue = true;\n    return msg; \n    \n} else {\n    flow.get(\"logmsg\").message = \"Errors Done\"\n    node.log(flow.get(\"logmsg\"))\n    msg.continue = false;\n    return msg; \n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 1600,
        "wires": [
            [
                "ee0257689f82df04"
            ]
        ]
    },
    {
        "id": "9de79639c15e9711",
        "type": "link in",
        "z": "521d26a7dba2b3ee",
        "name": "MODEL",
        "links": [],
        "x": 265,
        "y": 220,
        "wires": [
            [
                "bd63324df61e694f"
            ]
        ]
    },
    {
        "id": "89e1084d5d99d4cc",
        "type": "link in",
        "z": "521d26a7dba2b3ee",
        "name": "STAGEERRORS",
        "links": [],
        "x": 325,
        "y": 1600,
        "wires": [
            [
                "ce504d1d15288ffc"
            ]
        ]
    },
    {
        "id": "69966e255d6d5be1",
        "type": "link out",
        "z": "521d26a7dba2b3ee",
        "name": "STAGEERRORSOUT",
        "mode": "return",
        "links": [],
        "x": 1455,
        "y": 1560,
        "wires": []
    },
    {
        "id": "d57e8e4db68f298d",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "SET FLOW VARIABLES",
        "func": "let cp_s = false;\n\n\n\nif ( msg.dataSet == (\"STATS\")) {\n    \n    msg._STATS = JSON.parse(JSON.stringify(msg.payload));\n\n    flow.set(\"_STATS\",true);\n    flow.set(\"week\",msg.payload[0].week);\n    console.log(flow.get(\"week\"))\n    console.log(\"GOT STATS\");\n    \n    \n    flow.get(\"logmsg\").message = \"loaded staistics\"\n    node.log(flow.get(\"logmsg\"))\n    \n    let _STATSIndex = {}\n\n\n    for (let i=0; i<msg._STATS.length;i++) {\n        \n        let ptemp = msg._STATS[i]; \n        let index = _STATSIndex[ptemp.playerId];\n        \n         if(index === undefined) { \n             \n            _STATSIndex[msg._STATS[i].playerId] = []; \n            _STATSIndex[msg._STATS[i].playerId][0] = i;\n            \n         } else {\n             \n             _STATSIndex[msg._STATS[i].playerId].push(i); \n         }\n        \n    }\n    \n    msg._STATSIndex = _STATSIndex;\n\n    console.log(\"_STATSIndex length: \"+Object.keys(_STATSIndex).length)\n    \n} else if (   msg.dataSet == (\"INFO\") ) {\n    \n    msg._INFO = JSON.parse(JSON.stringify(msg.payload));\n\n    flow.set(\"_INFO\",true);\n    console.log(\"GOT INFO\");\n    \n    flow.get(\"logmsg\").message = \"loaded info\"\n    node.log(flow.get(\"logmsg\"))\n    \n        \n} else if ( msg.dataSet == (\"UNIQ\")) {\n    \n        msg._UNIQ = JSON.parse(JSON.stringify(msg.payload));\n\n    flow.set(\"_UNIQ\",true);\n    console.log(\"GOT UNIQNESS\");\n    \n    flow.get(\"logmsg\").message = \"loaded uniqness\"\n    node.log(flow.get(\"logmsg\"))\n    \n\n    \n}  else if ( msg.dataSet == (\"VOLATILITY\")) {\n    \n        msg._VOLATILITY=JSON.parse(JSON.stringify(msg.payload));\n\n    \n    flow.set(\"_VOLATILITY\",true);\n    console.log(\"GOT VOLATILITY\");\n    \n    flow.get(\"logmsg\").message = \"loaded volatility\"\n    node.log(flow.get(\"logmsg\"))\n    \n\n    \n} else if ( msg.dataSet == (\"PLAYERS\")) {\n        msg._PLAYERS=JSON.parse(JSON.stringify(msg.payload));\n\n    \n    flow.set(\"_PLAYERS\",true);\n    console.log(\"GOT PLAYERS\");\n    \n    flow.get(\"logmsg\").message = \"loaded players\"\n    node.log(flow.get(\"logmsg\"))\n    \n\n    \n} else if ( msg.dataSet == (\"CLUBS\")) {\n        msg._CLUBS=JSON.parse(JSON.stringify(msg.payload));\n\n    flow.set(\"_CLUBS\",true);\n    console.log(\"GOT CLUBS\");\n    \n    flow.get(\"logmsg\").message = \"loaded clubs\"\n    node.log(flow.get(\"logmsg\"))\n    \n\n    \n} else if ( msg.dataSet == (\"LEAGUES\")) {\n        msg._LEAGUES=JSON.parse(JSON.stringify(msg.payload));\n\n    flow.set(\"_LEAGUES\",true);\n    console.log(\"GOT LEAGUES\");\n    \n    flow.get(\"logmsg\").message = \"loaded leagues\"\n    node.log(flow.get(\"logmsg\"))\n    \n\n    \n}  else if ( msg.dataSet == (\"ROLES\")) {\n       msg._ROLES=JSON.parse(JSON.stringify(msg.payload));\n\n    flow.set(\"_ROLES\",true);\n    console.log(\"GOT ROLES\");\n    \n    flow.get(\"logmsg\").message = \"loaded roles\"\n    node.log(flow.get(\"logmsg\"))\n    \n\n}\n\n\nif (\n        flow.get(\"_STATS\") && \n        flow.get(\"_INFO\") && \n        flow.get(\"_UNIQ\") && \n        flow.get(\"_VOLATILITY\") && \n        flow.get(\"_CLUBS\") && \n        flow.get(\"_PLAYERS\") && \n        flow.get(\"_LEAGUES\") && \n        flow.get(\"_ROLES\") \n        \n    \n    \n    ) {\n        \n           console.log(\"GOT ALL\");\n           flow.get(\"logmsg\").message = \"loaded all\"\n    node.log(flow.get(\"logmsg\"))\n    return msg;\n        \n    }\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2310,
        "y": 480,
        "wires": [
            []
        ]
    },
    {
        "id": "1902c162a8ed6736",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Set Indexes",
        "func": "console.log(\"SET INDEX BEGINS\");\n flow.get(\"logmsg\").message = \"Set Indexes Begins\"\n node.log(flow.get(\"logmsg\"))\n\nvar _INFO = msg._INFO; //flow.get(\"_INFO\");\nvar _STATS = msg._STATS; //flow.get(\"_STATS\");\nvar _PLAYERS = msg._PLAYERS; //flow.get(\"_PLAYERS\");\nvar _VOLATILITY = msg._VOLATILITY; //flow.get(\"_VOLATILITY\");\nvar _UNIQ = msg._UNIQ; //flow.get(\"_UNIQ\");\nvar _CLUBS = msg._CLUBS; //flow.get(\"_CLUBS\");\nvar _LEAGUES = msg._LEAGUES; //flow.get(\"_LEAGUES\");\nvar _ROLES = msg._ROLES; //flow.get(\"_ROLES\");\n\ntry {\n    \nlet _STATSIndex = {}\n\n    \n\nfor (let i=0; i<_STATS.length;i++) {\n    \n    let ptemp = _STATS[i]; \n    let index = _STATSIndex[ptemp.playerId];\n    \n     if(index === undefined) { \n         \n        _STATSIndex[_STATS[i].playerId] = []; \n        _STATSIndex[_STATS[i].playerId][0] = i;\n        \n     } else {\n         \n         _STATSIndex[_STATS[i].playerId].push(i); \n     }\n    \n}\n\nconsole.log(\"_STATSIndex length: \"+Object.keys(_STATSIndex).length)\n\nlet _PLAYERSIndex = {}\n\nfor (let i=0; i<_PLAYERS.length;i++) {\n    \n    \n    _PLAYERSIndex[_PLAYERS[i].playerId] = i; \n    \n}\nconsole.log(\"_PLAYERSIndex length: \"+Object.keys(_PLAYERSIndex).length)\n\nlet _VOLIndex = {}\n\nfor (let i=0; i<_VOLATILITY.length;i++) {\n    \n    let ptemp = _VOLATILITY[i]; \n    let index = _VOLIndex[ptemp.playerId];\n    \n     if(index === undefined) { \n         \n        _VOLIndex[_VOLATILITY[i].playerId] = []; \n        _VOLIndex[_VOLATILITY[i].playerId][0] = i;\n        \n     } else {\n         \n         _VOLIndex[_VOLATILITY[i].playerId].push(i); \n     }\n    \n}\n\nconsole.log(\"_VOLIndex length: \"+Object.keys(_VOLIndex).length)\n\nlet _UNIQIndex = {}\n\nfor (let i=0; i<_UNIQ.length;i++) {\n    \n    let ptemp = _UNIQ[i]; \n    let index = _UNIQIndex[ptemp.playerId];\n    \n     if(index === undefined) { \n         \n        _UNIQIndex[_UNIQ[i].playerId] = []; \n        _UNIQIndex[_UNIQ[i].playerId][0] = i;\n        \n     } else {\n         \n         _UNIQIndex[_UNIQ[i].playerId].push(i); \n     }\n    \n}\n\nconsole.log(\"_UNIQIndex length: \"+Object.keys(_UNIQIndex).length)\n\nlet _CLUBSIndex = {}\n\nfor (let i=0; i<_CLUBS.length;i++) {\n    \n    let ctemp = _CLUBS[i]; \n    let index = _CLUBSIndex[ctemp.clubId];\n    \n     if(index === undefined) { \n         \n        _CLUBSIndex[_CLUBS[i].clubId] = []; \n        _CLUBSIndex[_CLUBS[i].clubId][0] = i;\n        \n     } else {\n         \n         _CLUBSIndex[_CLUBS[i].clubId].push(i); \n     }\n    \n}\n\nconsole.log(\"_CLUBSIndex length: \"+Object.keys(_CLUBSIndex).length)\n\n\nlet _LEAGUESIndex = {}\n\nfor (let i=0; i<_LEAGUES.length;i++) {\n    \n    let ctemp = _LEAGUES[i]; \n    let index = _LEAGUESIndex[ctemp.leagueId];\n    \n     if(index === undefined) { \n         \n        _LEAGUESIndex[_LEAGUES[i].leagueId] = []; \n        _LEAGUESIndex[_LEAGUES[i].leagueId][0] = i;\n        \n     } else {\n         \n         _LEAGUESIndex[_LEAGUES[i].leagueId].push(i); \n     }\n    \n}\n\nconsole.log(\"_LEAGUESIndex length: \"+Object.keys(_LEAGUESIndex).length)\n\nlet _INFOIndex = {}\n\nfor (let i=0; i<_INFO.length;i++) {\n    \n    let ctemp = _INFO[i]; \n    let index = _INFOIndex[ctemp.playerId];\n    \n     if(index === undefined) { \n         \n        _INFOIndex[_INFO[i].playerId] = []; \n        _INFOIndex[_INFO[i].playerId][0] = i;\n        \n     } else {\n         \n         _INFOIndex[_INFO[i].playerId].push(i); \n     }\n    \n}\n\nconsole.log(\"_INFOIndex length: \"+Object.keys(_INFOIndex).length)\n\nlet _ROLESIndex = {}\n\nfor (let i=0; i<_ROLES.length;i++) {\n    \n    let ctemp = _ROLES[i]; \n    let index = _ROLESIndex[ctemp.idRuolo];\n    \n     if(index === undefined) { \n         \n        _ROLESIndex[_ROLES[i].idRuolo] = []; \n        _ROLESIndex[_ROLES[i].idRuolo][0] = i;\n        \n     } else {\n         \n         _ROLESIndex[_ROLES[i].idRuolo].push(i); \n     }\n    \n}\n\nconsole.log(\"_ROLESIndex length: \"+Object.keys(_ROLESIndex).length)\n\n} catch(e) {\n    console.log(e)\n}\n\nflow.set(\"_STATSIndex\",_STATSIndex);\nflow.set(\"_PLAYERSIndex\",_PLAYERSIndex);\nflow.set(\"_VOLIndex\",_VOLIndex);\nflow.set(\"_UNIQIndex\",_UNIQIndex);\nflow.set(\"_CLUBSIndex\",_CLUBSIndex);\nflow.set(\"_LEAGUESIndex\",_LEAGUESIndex);\nflow.set(\"_INFOIndex\",_INFOIndex);\nflow.set(\"_ROLESIndex\",_ROLESIndex);\n\nconsole.log(\"SET INDEX ENDS\");\n\nflow.get(\"logmsg\").message = \"indexes built\"\nnode.log(flow.get(\"logmsg\"))\n\nmsg.flowStatus = \"DONE\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2270,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "facb0ca686dbe52d",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Checkpoint",
        "func": "if (\n        flow.get(\"_STATS\") && \n        flow.get(\"_INFO\") && \n        flow.get(\"_UNIQ\") && \n        flow.get(\"_VOLATILITY\") && \n        flow.get(\"_CLUBS\") && \n        flow.get(\"_PLAYERS\") && \n        flow.get(\"_LEAGUES\") && \n        flow.get(\"_ROLES\") && \n        flow.get(\"_COUNTRIES\") &&\n        flow.get(\"_SPECIALTIES\")\n        \n    \n    \n    ) {\n        \n        console.log\n        \n        console.log(\"GOT ALL\");\n        flow.get(\"logmsg\").message = \"loaded all\"\n        node.log(flow.get(\"logmsg\"))\n        \n        return msg;\n\n    }\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 500,
        "wires": [
            [
                "971ea6953a9493f0"
            ]
        ]
    },
    {
        "id": "9b707f4c6d10a7bf",
        "type": "link out",
        "z": "521d26a7dba2b3ee",
        "name": "MODELOUT",
        "mode": "return",
        "links": [],
        "x": 2495,
        "y": 900,
        "wires": []
    },
    {
        "id": "2dfbc32c0c744a4d",
        "type": "change",
        "z": "521d26a7dba2b3ee",
        "name": "Clean",
        "rules": [
            {
                "t": "delete",
                "p": "PlayersErrors",
                "pt": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1310,
        "y": 1560,
        "wires": [
            [
                "69966e255d6d5be1"
            ]
        ]
    },
    {
        "id": "ee0257689f82df04",
        "type": "switch",
        "z": "521d26a7dba2b3ee",
        "name": "",
        "property": "continue",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1170,
        "y": 1600,
        "wires": [
            [
                "2dfbc32c0c744a4d"
            ],
            [
                "4df8c9b6183de202"
            ]
        ]
    },
    {
        "id": "eaadf330d8731793",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Clean Memory",
        "func": "let ind= msg.parts.index+1\nconsole.log(\"ERRORS SAVING \"+ ind+ \"/\" + msg.parts.count)\n\nflow.get(\"logmsg\").message = \"Errors saved part: \"+ ind+ \"/\" + msg.parts.count\nnode.log(flow.get(\"logmsg\"))\n    \n\nif (msg.parts.index == msg.parts.count -1 )  {\n    console.log(\"ERRORS SAVING COMPLETED\" ) \n    flow.get(\"logmsg\").message = \"Errors saving completed\"\n    node.log(flow.get(\"logmsg\"))\n    \n    return msg;\n}\n\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2280,
        "y": 600,
        "wires": [
            []
        ]
    },
    {
        "id": "6abe36a5e67a9cf1",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Log",
        "func": "\nflow.get(\"logmsg\").message = mgs.error\nnode.log(flow.get(\"logmsg\"))\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 100,
        "wires": [
            [
                "0dbe7ad8cfc2466d"
            ]
        ]
    },
    {
        "id": "0843ce3ef22234ea",
        "type": "switch",
        "z": "521d26a7dba2b3ee",
        "name": "",
        "property": "dataSet",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "STATS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "INFO",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "VOLATILITY",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "UNIQ",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "PLAYERS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "CLUBS",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "LEAGUES",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ROLES",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "COUNTRIES",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "DATA",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "MINUTES",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "SPECIALTIES",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 12,
        "x": 1390,
        "y": 220,
        "wires": [
            [
                "1f031dfe9d663479"
            ],
            [
                "87d25c6bcdfd1af1"
            ],
            [
                "9cec0112074d7610"
            ],
            [
                "4aba5705e6deeb49"
            ],
            [
                "452b63db79f2b994"
            ],
            [
                "e282d03a0a38805e"
            ],
            [
                "652a94dd5e69fad0"
            ],
            [
                "c8d2f61be71d7b10"
            ],
            [
                "a09f9ca4792a0858"
            ],
            [
                "2a6cebd53706a8f0"
            ],
            [
                "bdcdea8aba4ff72f"
            ],
            [
                "facb0ca686dbe52d"
            ]
        ]
    },
    {
        "id": "a1fc014a5a5f9871",
        "type": "link out",
        "z": "521d26a7dba2b3ee",
        "name": "DBSETFLOWOUT",
        "mode": "link",
        "links": [
            "9d1638c20717ce9a"
        ],
        "x": 645,
        "y": 220,
        "wires": []
    },
    {
        "id": "9d1638c20717ce9a",
        "type": "link in",
        "z": "521d26a7dba2b3ee",
        "name": "DBSETFLOWIN",
        "links": [
            "a1fc014a5a5f9871",
            "afb31ee290792b56"
        ],
        "x": 715,
        "y": 220,
        "wires": [
            [
                "562e7c9ec0068d16"
            ]
        ]
    },
    {
        "id": "4be2c1941723dbad",
        "type": "link in",
        "z": "521d26a7dba2b3ee",
        "name": "TREEIN",
        "links": [
            "971ea6953a9493f0"
        ],
        "x": 75,
        "y": 900,
        "wires": [
            [
                "efb04ddc47c7b24e"
            ]
        ]
    },
    {
        "id": "971ea6953a9493f0",
        "type": "link out",
        "z": "521d26a7dba2b3ee",
        "name": "TREEOUT",
        "mode": "link",
        "links": [
            "4be2c1941723dbad"
        ],
        "x": 1815,
        "y": 500,
        "wires": []
    },
    {
        "id": "afb31ee290792b56",
        "type": "link out",
        "z": "521d26a7dba2b3ee",
        "name": "DBSETFLOWOUT",
        "mode": "link",
        "links": [
            "9d1638c20717ce9a"
        ],
        "x": 1905,
        "y": 220,
        "wires": []
    },
    {
        "id": "c8d2f61be71d7b10",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "COUNTRIES",
        "func": "\nmsg.topic=\"select * from sf_countries sfc;\";\nmsg.dataSet = \"COUNTRIES\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1670,
        "y": 320,
        "wires": [
            [
                "afb31ee290792b56"
            ]
        ]
    },
    {
        "id": "dd2fdb4b988efa67",
        "type": "debug",
        "z": "521d26a7dba2b3ee",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 600,
        "wires": []
    },
    {
        "id": "9afa66272a3d4815",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Show Football Tree",
        "func": "msg.payload = global.get(\"TheLatestFooballTree\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1810,
        "y": 600,
        "wires": [
            [
                "dd2fdb4b988efa67"
            ]
        ]
    },
    {
        "id": "69ffe6a838ea0d86",
        "type": "inject",
        "z": "521d26a7dba2b3ee",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1620,
        "y": 600,
        "wires": [
            [
                "9afa66272a3d4815"
            ]
        ]
    },
    {
        "id": "3ff55d4304fda07a",
        "type": "debug",
        "z": "521d26a7dba2b3ee",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2010,
        "y": 680,
        "wires": []
    },
    {
        "id": "93853fe323ca9b0d",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Show Players Errors",
        "func": "msg.payload = global.get(\"PlayersErrors\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 680,
        "wires": [
            [
                "3ff55d4304fda07a"
            ]
        ]
    },
    {
        "id": "50ae117363dc363e",
        "type": "inject",
        "z": "521d26a7dba2b3ee",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1620,
        "y": 680,
        "wires": [
            [
                "93853fe323ca9b0d"
            ]
        ]
    },
    {
        "id": "e986dd45e2850f30",
        "type": "inject",
        "z": "521d26a7dba2b3ee",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 340,
        "y": 1700,
        "wires": [
            [
                "ce504d1d15288ffc"
            ]
        ]
    },
    {
        "id": "4b721cc41d431f9e",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Consumer Data",
        "func": "flow.get(\"logmsg\").message = \"Consumer Data Begins\"\nnode.log(flow.get(\"logmsg\"))\n\nlet TheFootballTree = msg.payload;\nconst Utils = global.get(\"UTILS\");\n\nvar Players = [];\nvar Clubs = [];\nvar Leagues = [];\n\n\nlet leagueRanks = []\nlet clubRanks = []\nlet playerRanks = []\n\n\n\ntry {\n    \n\n\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        \n        \n        TheFootballTree[leagueId].consumerValue = 0;\n        TheFootballTree[leagueId].consumerResidualValue = 0;\n        TheFootballTree[leagueId].consumerExpectedSalary = 0;\n        TheFootballTree[leagueId].consumerExpectedSalaryAbsoluteDeviation = 0;\n        TheFootballTree[leagueId].consumerExpectedSalaryPercDeviation = 0;\n\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n           \n            club.consumerValue = 0;\n            club.consumerResidualValue = 0;\n            club.consumerExpectedSalary = 0;\n            club.consumerExpectedSalaryAbsoluteDeviation = 0;\n            club.consumerExpectedSalaryPercDeviation = 0;\n            \n            club.Players.forEach( player => {\n                \n                player.consumerValue = 0;\n                player.consumerResidualValue = 0;\n                player.consumerExpectedSalary = 0;\n                player.consumerExpectedSalaryAbsoluteDeviation = 0;\n                player.consumerExpectedSalaryPercDeviation = 0;\n                \n               \n                player.consumerValue = !player.tmValue ? player.potentialPrice : ( (player.potentialPrice * 2/3) + (player.tmValue * 1/3) );\n                \n                player.consumerResidualValue = player.residualValue > player.consumerValue ? player.consumerValue : player.residualValue            \n\n                // manca residual\n                //manca rank\n                player.consumerExpectedSalary = player.salaryPotential;\n                player.consumerExpectedSalaryAbsoluteDeviation = player.consumerExpectedSalary - player.salaryNet;\n                player.consumerExpectedSalaryPercDeviation = (player.consumerExpectedSalaryAbsoluteDeviation / player.consumerExpectedSalary )*100\n                \n                club.consumerValue = club.consumerValue + player.consumerValue;\n                club.consumerResidualValue =  club.consumerResidualValue  + player.consumerResidualValue\n                club.consumerExpectedSalary = club.consumerExpectedSalary + player.consumerExpectedSalary;\n                club.consumerExpectedSalaryAbsoluteDeviation = club.consumerExpectedSalary - club.salaryNet;\n                club.consumerExpectedSalaryPercDeviation = (club.consumerExpectedSalaryAbsoluteDeviation / club.consumerExpectedSalary )*100\n                \n                \n                let pranks = { \n                    playerId : player.playerId,\n                    consumerValue :  player.consumerValue\n            \n                } \n                playerRanks.push(pranks)\n                \n                \n            })\n            \n             let cranks = { \n                    clubId : club.clubId,\n                    consumerValue :  club.consumerValue\n            \n                } \n            clubRanks.push(cranks)\n            \n            \n            TheFootballTree[leagueId].consumerValue = TheFootballTree[leagueId].consumerValue + club.consumerValue;\n            TheFootballTree[leagueId].consumerResidualValue = TheFootballTree[leagueId].consumerResidualValue + club.consumerResidualValue;\n            TheFootballTree[leagueId].consumerExpectedSalary = TheFootballTree[leagueId].consumerExpectedSalary + club.consumerExpectedSalary;\n            TheFootballTree[leagueId].consumerExpectedSalaryAbsoluteDeviation = TheFootballTree[leagueId].consumerExpectedSalary - TheFootballTree[leagueId].salaryNet;\n            TheFootballTree[leagueId].consumerExpectedSalaryPercDeviation = (TheFootballTree[leagueId].consumerExpectedSalaryAbsoluteDeviation / TheFootballTree[leagueId].consumerExpectedSalary )*100\n           \n         \n        })   \n        let lranks = { \n            leagueId : leagueId,\n            consumerValue :  TheFootballTree[leagueId].consumerValue\n            \n        } \n        \n        \n        leagueRanks.push(lranks)\n        \n    })\n\n\n\n//RANKS\n\n      const leaguesByConsumerValue = leagueRanks.sort((a,b) => a.consumerValue - b.consumerValue).map((league, index, array) => league.leagueId).reverse()\n      const clubsByConsumerValue = clubRanks.sort((a,b) => a.consumerValue - b.consumerValue).map((club, index, array) => club.clubId).reverse()\n      const playersByConsumerValue = playerRanks.sort((a,b) => a.consumerValue - b.consumerValue).map((player, index, array) => player.playerId).reverse()\n      \n      //console.log(\"leaguesByConsumerValue\",leaguesByConsumerValue.length)\n     //console.log(\"clubsByConsumerValue\",clubsByConsumerValue.length)\n     //console.log(\"playersByConsumerValue\",playersByConsumerValue.length)\n    \n    /*\n    flow.get(\"logmsg\").message = \"leaguesByConsumerValue: \"\n    node.log(flow.get(\"logmsg\"))\n    flow.get(\"logmsg\").message = leaguesByConsumerValue\n    node.log(flow.get(\"logmsg\"))\n    flow.get(\"logmsg\").message = \"clubsByConsumerValue: \"+clubsByConsumerValue\n    node.log(flow.get(\"logmsg\"))\n    flow.get(\"logmsg\").message = \"playersByConsumerValue: \"+playersByConsumerValue\n    node.log(flow.get(\"logmsg\"))\n*/\nObject.keys(TheFootballTree).forEach( leagueId => {\n        \n        TheFootballTree[leagueId].rankByConsumerValue = 0\n        \n        TheFootballTree[leagueId].rankByConsumerValue = leaguesByConsumerValue.indexOf(leagueId) +1\n       \n        //TheFootballTree[leagueId].rankByConsumerValue = isNaN(TheFootballTree[leagueId].rankByConsumerValue) || TheFootballTree[leagueId].rankByConsumerValue === undefined ? 0 : TheFootballTree[leagueId].rankByConsumerValue;\n          // console.log(\"TheFootballTree[leagueId].rankByConsumerValue\",TheFootballTree[leagueId].rankByConsumerValue) \n            \n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            \n            club.rankByConsumerValue = 1;\n            \n            club.rankByConsumerValue = clubsByConsumerValue.indexOf(club.clubId)  +1 \n          \n            club.Players.forEach( player => {\n                player.rankByConsumerValue = 0;\n                player.rankByConsumerValue = playersByConsumerValue.indexOf(player.playerId)  +1\n              \n           \n           \n           \n            })\n            \n            \n        \n            \n          \n            \n        })\n       \n      \n    \n    })\n\n} catch(e) {\n    \n    console.log(e)\n}\n\n\n//flow.set(\"Players\",Players)\n//flow.set(\"Clubs\",Clubs)\n//flow.set(\"Leagues\",Leagues)\n//flow.set(\"TheFootballTree\",TheFootballTree)\nglobal.set(\"TheLatestFooballTree\",TheFootballTree)\nglobal.set(\"PlayersErrors\",msg.PlayersErrors)\nflow.get(\"logmsg\").message = \"Consumer Data ENDS\"\nnode.log(flow.get(\"logmsg\"))\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2140,
        "y": 900,
        "wires": [
            [
                "637c349917c508e7"
            ]
        ]
    },
    {
        "id": "ce86422209d60b7a",
        "type": "debug",
        "z": "521d26a7dba2b3ee",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2260,
        "y": 300,
        "wires": []
    },
    {
        "id": "a09f9ca4792a0858",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "DATA",
        "func": "\nmsg.topic=\"select * from dominanceplayerdata dd where dd.run = (select max(run) from dominanceplayerdata);\";\nmsg.dataSet = \"DATA\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1650,
        "y": 360,
        "wires": [
            [
                "afb31ee290792b56"
            ]
        ]
    },
    {
        "id": "2a6cebd53706a8f0",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "MINUTES",
        "func": "\nmsg.topic=\"select * from dominanceplayerminutes dd where dd.run = (select max(run) from dominanceplayerminutes);\";\nmsg.dataSet = \"MINUTES\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1660,
        "y": 400,
        "wires": [
            [
                "afb31ee290792b56"
            ]
        ]
    },
    {
        "id": "4e39fa7b746c9256",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "9 - Club And League Analysis",
        "func": "/**\n * Node-RED Function Node: Club and League Analysis\n * \n * Questo nodo analizza le informazioni su club e leghe, calcolando statistiche\n * aggregate e metriche di performance finanziaria.\n */\n\n// Log di inizio\nflow.get(\"logmsg\").message = \"Clubs and Leagues Analysis Begins\";\nnode.log(flow.get(\"logmsg\"));\n\n// Importazione delle dipendenze\nconst Utils = global.get(\"UTILS\");\n\n/**\n * Funzione principale per l'analisi dei club e delle leghe\n */\nfunction analyzeClubsAndLeagues(msg) {\n    try {\n        // Recupero dati di input\n        const TheFootballTree = msg.payload;\n        \n        if (!TheFootballTree) {\n            throw new Error(\"Dati FootballTree mancanti\");\n        }\n        \n        // Inizializzazione strutture dati\n        const playerRanks = [];\n        const clubRanks = [];\n        const leagueRanks = [];\n        const clubOwnedPlayers = {};\n        const clubClusterSalaryAvg = {};\n        const clubLeagueSalaryAvg = {};\n        const leagueClusterSalaryAvg = {};\n        \n        // Tracking delle statistiche globali\n        let allLeagueTotalRevenues = 0;\n        \n        // Prima fase: elaborazione dei dati primari\n        processLeaguesAndClubs(TheFootballTree, {\n            playerRanks,\n            clubRanks,\n            leagueRanks,\n            clubOwnedPlayers,\n            clubClusterSalaryAvg,\n            clubLeagueSalaryAvg,\n            leagueClusterSalaryAvg,\n            allLeagueTotalRevenues\n        });\n        \n        // Seconda fase: calcolo dei ranking\n        calculateRankings({\n            TheFootballTree,\n            playerRanks,\n            clubRanks,\n            leagueRanks,\n            clubOwnedPlayers,\n            clubClusterSalaryAvg,\n            clubLeagueSalaryAvg,\n            leagueClusterSalaryAvg,\n            allLeagueTotalRevenues\n        });\n        \n        // Salvataggio e log dei risultati\n        global.set(\"TheLatestFooballTree\", TheFootballTree);\n        global.set(\"PlayersErrors\", msg.PlayersErrors);\n        \n        flow.get(\"logmsg\").message = \"Clubs and Leagues Analysis ENDS\";\n        node.log(flow.get(\"logmsg\"));\n        \n        msg.payload = TheFootballTree;\n        return msg;\n    } catch (error) {\n        console.error(\"Errore nell'analisi di club e leghe:\", error);\n        flow.get(\"logmsg\").message = `Clubs and Leagues Analysis ERROR: ${error.message}`;\n        node.log(flow.get(\"logmsg\"));\n        msg.error = error.message;\n        return msg;\n    }\n}\n\n/**\n * Elabora i dati primari di leghe e club\n */\nfunction processLeaguesAndClubs(TheFootballTree, ctx) {\n    Object.keys(TheFootballTree).forEach(leagueId => {\n        initializeLeagueData(TheFootballTree[leagueId]);\n        \n        let totalAgeLeague = 0;\n        let totalContractDurationLeague = 0;\n        let totalContractResidualDurationLeague = 0;\n        \n        // Elaborazione di ogni club nella lega\n        TheFootballTree[leagueId].Clubs.forEach(club => {\n            const clubStats = processClub(club, TheFootballTree[leagueId], ctx);\n            \n            totalAgeLeague += clubStats.totalAge;\n            totalContractDurationLeague += clubStats.totalContractDuration;\n            totalContractResidualDurationLeague += clubStats.totalContractResidualDuration;\n            \n            // Aggiornamento statistiche lega\n            updateLeagueStats(TheFootballTree[leagueId], club, clubStats);\n            ctx.allLeagueTotalRevenues += club.lastRevenues || 0;\n            \n            // Registra club per ranking\n            registerClubForRanking(club, ctx.clubRanks);\n        });\n        \n        // Finalizzazione statistiche lega\n        finalizeLeagueStats(TheFootballTree[leagueId], {\n            totalAgeLeague,\n            totalContractDurationLeague,\n            totalContractResidualDurationLeague\n        });\n        \n        // Aggiornamento medie cluster per lega\n        updateLeagueClusterAverages(TheFootballTree[leagueId], ctx.leagueClusterSalaryAvg);\n        \n        // Registra lega per ranking\n        registerLeagueForRanking(TheFootballTree[leagueId], leagueId, ctx.leagueRanks);\n    });\n}\n\n/**\n * Inizializza i campi statistici per una lega\n */\nfunction initializeLeagueData(league) {\n    // Inizializzazione contatori\n    league.numOfPlayers = 0;\n    league.numOfClubs = 0;\n    league.numOfForeignPlayers = 0;\n    league.numOfU23Players = 0;\n    league.numOfU23ForeignPlayers = 0;\n    \n    // Inizializzazione statistiche età e contratti\n    league.avgAge = 0;\n    league.avgContractDuration = 0;\n    league.avgContractResidualDuration = 0;\n    \n    // Inizializzazione valori economici\n    league.portfolioCost = 0;\n    league.residualBookValue = 0;\n    league.residualValue = 0;\n    league.potentialPrice = 0;\n    league.expectedPrice = 0;\n    league.capitalGain = 0;\n    league.netProfit = 0;\n    \n    // Inizializzazione salari\n    league.salaryGross = 0;\n    league.salaryNet = 0;\n    league.salaryOptimal = 0;\n    league.salaryPotential = 0;\n    league.salaryAbsoluteDeviation = 0;\n    league.salaryPercDeviation = 0;\n    league.salaryAvg = 0;\n    \n    // Inizializzazione statistiche giocatori\n    league.shareOfForeignPlayers = 0;\n    league.shareOfU23Players = 0;\n    league.shareOfU23ForeginPlayers = 0;\n    \n    // Inizializzazione ranking\n    league.rankByValue = 0;\n    league.rankByAcquisition = 0;\n    league.rankBySalary = 0;\n    league.avgSalaryNetCluster = 0;\n    league.absSalaryNetClusterDeviation = 0;\n    league.percSalaryNetClusterDeviation = 0;\n    \n    // Inizializzazione performance\n    league.totalPerformance = 0;\n    league.totalEffectiveness = 0;\n    league.totalLatestUniqueness = 0;\n    league.totalLatestMicroVolatility = 0;\n    \n    // Inizializzazione finanze\n    league.totalRevenues = 0;\n    league.totalProjectedRevenues = 0;\n    league.annualBookValue = 0;\n}\n\n/**\n * Elabora un singolo club e i suoi giocatori\n */\nfunction processClub(club, league, ctx) {\n    // Incremento contatori lega\n    league.numOfClubs++;\n    \n    // Inizializzazione statistiche del club\n    initializeClubData(club);\n    \n    // Valori aggregati per calcoli successivi\n    let totalAge = 0;\n    let totalContractDuration = 0;\n    let totalContractResidualDuration = 0;\n    let numOfPlayersExceed100Min = 0;\n    \n    // Elaborazione di ogni giocatore nel club\n    club.Players.forEach(player => {\n        if (player.minutes > 100) {\n            numOfPlayersExceed100Min++;\n        }\n        \n        // Aggiornamento metriche di performance\n        updateLeaguePerformanceMetrics(league, player);\n        \n        // Inizializzazione ranking giocatore\n        initializePlayerRanking(player);\n        \n        // Calcolo valori economici avanzati\n        calculatePlayerEconomics(player, club);\n        \n        // Aggiornamento contatori giocatori speciali\n        updatePlayerCategoryCounts(player, club, league);\n        \n        // Aggiornamento statistiche club\n        updateClubStats(club, player, {\n            totalAge,\n            totalContractDuration,\n            totalContractResidualDuration,\n            numOfPlayersExceed100Min\n        });\n        \n        // Registrazione giocatore per ranking\n        registerPlayerForRanking(player, ctx.playerRanks);\n    });\n    \n    // Aggiornamento medie del club\n    updateClubAverages(club, numOfPlayersExceed100Min, {\n        totalAge,\n        totalContractDuration,\n        totalContractResidualDuration\n    });\n    \n    // Aggiornamento medie cluster per club\n    updateClubClusterAverages(club, ctx.clubClusterSalaryAvg, ctx.clubLeagueSalaryAvg);\n    \n    // Registra proprietà giocatori\n    trackClubOwnedPlayers(club, ctx.clubOwnedPlayers);\n    \n    return {\n        totalAge,\n        totalContractDuration,\n        totalContractResidualDuration\n    };\n}\n\n/**\n * Inizializza i dati statistici per un club\n */\nfunction initializeClubData(club) {\n    // Basic info\n    club.numOfPlayers = club.Players.length;\n    \n    // Age and contract stats\n    club.avgAge = 0;\n    club.avgContractDuration = 0;\n    club.avgContractResidualDuration = 0;\n    \n    // Financial values\n    club.portfolioCost = 0;\n    club.residualBookValue = 0;\n    club.residualBookValueExceed100Min = 0;\n    club.residualValue = 0;\n    club.residualValueExceed100Min = 0;\n    club.potentialPrice = 0;\n    club.potentialPriceExceed100Min = 0;\n    club.expectedPrice = 0;\n    club.expectedPriceExceed100Min = 0;\n    club.capitalGain = 0;\n    club.netProfit = 0;\n    \n    // Salary data\n    club.salaryGrossSum = 0;\n    club.salaryGrossSumExceed100Min = 0;\n    club.salaryNetSum = 0;\n    club.salaryNetSumExceed100Min = 0;\n    club.salaryOptimal = 0;\n    club.salaryOptimalExceed100Min = 0;\n    club.salaryPotential = 0;\n    club.salaryPotentialExceed100Min = 0;\n    club.salaryAbsoluteDeviation = 0;\n    club.salaryPercDeviation = 0;\n    club.salaryAvg = 0;\n    club.salaryAvgExceed100Min = 0;\n    \n    // Player categories\n    club.numOfForeignPlayers = 0;\n    club.numOfU23Players = 0;\n    club.numOfU23ForeignPlayers = 0;\n    club.shareOfForeignPlayers = 0;\n    club.shareOfU23Players = 0;\n    club.shareOfU23ForeignPlayers = 0;\n    club.numOfNationalPlayers = 0;\n    club.numOfExpiringContracts = 0;\n    club.numOfOwnedPlayers = 0;\n    \n    // Rankings and benchmarks\n    club.avgSalaryNetCluster = 0;\n    club.absSalaryNetClusterDeviation = 0;\n    club.percSalaryNetClusterDeviation = 0;\n    club.rankByValue = 0;\n    club.rankBySalary = 0;\n    club.rankByAcquisition = 0;\n    \n    // Performance metrics\n    club.avgEffectiveness = 0;\n    club.totalEffectiveness = 0;\n    club.totalEffectivenessExceed100Min = 0;\n    club.totalEffectivenessExceed23 = 0;\n    club.totalLatestMicroVolatility = 0;\n    club.totalLatestMicroVolatilityExceed100Min = 0;\n    \n    // Financial metrics\n    club.playersAnnualCost = 0;\n    club.annualBookValue = 0;\n}\n\n/**\n * Aggiorna le metriche di performance della lega basate sui dati del giocatore\n */\nfunction updateLeaguePerformanceMetrics(league, player) {\n    league.totalPerformance += player.performance || 0;\n    league.totalEffectiveness += player.effectiveness || 0;\n    league.totalLatestUniqueness += player.latestUniqueness || 0;\n    league.totalLatestMicroVolatility += player.latestMicroVolatility || 0;\n}\n\n/**\n * Inizializza i campi di ranking per un giocatore\n */\nfunction initializePlayerRanking(player) {\n    player.rankByPerformance = 0;\n    player.rankByEffectiveness = 0;\n    player.rankByValue = 0;\n    \n    player.absClubAvgSalaryDeviation = 0;\n    player.percClubAvgSalaryDeviation = 0;\n    \n    player.absLeagueAvgSalaryDeviation = 0;\n    player.percLeagueAvgSalaryDeviation = 0;\n    \n    player.absClubCusterAvgSalaryDeviation = 0;\n    player.percClubClusterAvgSalaryDeviation = 0;\n}\n\n/**\n * Calcola i valori economici avanzati per un giocatore\n */\nfunction calculatePlayerEconomics(player, club) {\n    // Calcolo del capital gain\n    player.capitalGain = (player.perceivedExpectedPrice || 0) - (player.residualBookValue || 0);\n    \n    // Calcolo del costo annuale\n    const remainingYears = player.remainingYearsOfMasterClubContract || 0;\n    const annualBookValue = remainingYears ? ((player.residualBookValue || 0) / remainingYears) : 0;\n    player.annualCost = (player.salaryGross || 0) + annualBookValue;\n    player.annualBookValue = annualBookValue;\n    \n    // Calcolo dell'impatto sui costi\n    player.costImpactOnRevenues = club.revenues ? (((player.annualCost || 0) / club.revenues) * 100) : 0;\n    player.costImpactOnCosts = club.costs ? ((player.annualCost || 0) / club.costs) : 0;\n    \n    // Aggiornamento del valore annuale del club\n    club.annualBookValue += annualBookValue;\n    club.playersAnnualCost += player.annualCost || 0;\n}\n\n/**\n * Aggiorna i contatori di categorie speciali di giocatori\n */\nfunction updatePlayerCategoryCounts(player, club, league) {\n    // Controlla se il giocatore è straniero\n    if (player.currentLeagueCountryCode !== player.nationalityCode) {\n        club.numOfForeignPlayers++;\n        league.numOfForeignPlayers++;\n        \n        club.shareOfForeignPlayers = (club.numOfForeignPlayers / club.numOfPlayers) * 100;\n        league.shareOfForeignPlayers = (league.numOfForeignPlayers / league.numOfPlayers) * 100;\n    }\n    \n    // Controlla se il giocatore è Under 23\n    if (player.age < 24) {\n        club.numOfU23Players++;\n        league.numOfU23Players++;\n        \n        club.shareOfU23Players = (club.numOfU23Players / club.numOfPlayers) * 100;\n        league.shareOfU23Players = (league.numOfU23Players / league.numOfPlayers) * 100;\n        \n        // Controlla se è Under 23 e straniero\n        if (player.currentLeagueCountryCode !== player.nationalityCode) {\n            club.numOfU23ForeignPlayers++;\n            league.numOfU23ForeignPlayers++;\n            \n            club.shareOfU23ForeignPlayers = (club.numOfU23ForeignPlayers / club.numOfPlayers) * 100;\n            league.shareOfU23ForeignPlayers = (league.numOfU23ForeignPlayers / league.numOfPlayers) * 100;\n        }\n    }\n    \n    // Controlla se è un nazionale\n    if (player.nationalTeamPlayer) {\n        club.numOfNationalPlayers++;\n    }\n    \n    // Controlla se il contratto è in scadenza\n    if (player.remainingMonthsOfContract <= 6) {\n        club.numOfExpiringContracts++;\n    }\n}\n\n/**\n * Aggiorna le statistiche del club con i dati del giocatore\n */\nfunction updateClubStats(club, player, stats) {\n    // Aggiornamento età e dati contrattuali\n    stats.totalAge += player.age || 0;\n    stats.totalContractDuration += player.remainingMonthsOfContract || 0;\n    stats.totalContractResidualDuration += Utils.diffInMonths(player.endContract, new Date()) || 0;\n    \n    // Aggiornamento valori finanziari\n    club.portfolioCost += player.transferPrice || 0;\n    club.residualBookValue += parseFloat(player.residualBookValue || 0);\n    club.residualValue += player.residualValue || 0;\n    club.potentialPrice += player.potentialPrice || 0;\n    club.expectedPrice += player.expectedPrice || 0;\n    \n    // Aggiornamento valori con filtro su minuti giocati\n    if (player.minutes > 100) {\n        club.residualBookValueExceed100Min += parseFloat(player.residualBookValue || 0);\n        club.residualValueExceed100Min += player.residualValue || 0;\n        club.potentialPriceExceed100Min += player.potentialPrice || 0;\n        club.expectedPriceExceed100Min += player.expectedPrice || 0;\n        \n        club.salaryGrossSumExceed100Min += player.salaryGross || 0;\n        club.salaryNetSumExceed100Min += player.salaryNet || 0;\n        club.salaryOptimalExceed100Min += player.salaryOptimal || 0;\n        club.salaryPotentialExceed100Min += player.salaryPotential || 0;\n        \n        club.totalEffectivenessExceed100Min += player.effectiveness || 0;\n        club.totalLatestMicroVolatilityExceed100Min += player.latestMicroVolatility || 0;\n    }\n    \n    // Aggiornamento effectiveness speciale\n    if (player.effectiveness > 23.5) {\n        club.totalEffectivenessExceed23 += player.effectiveness || 0;\n    }\n    \n    // Aggiornamento dati salariali\n    club.salaryGrossSum += player.salaryGross || 0;\n    club.salaryNetSum += player.salaryNet || 0;\n    club.salaryOptimal += player.salaryOptimal || 0;\n    club.salaryPotential += player.salaryPotential || 0;\n    \n    // Aggiornamento metriche di performance\n    club.totalEffectiveness += player.effectiveness || 0;\n    club.totalLatestMicroVolatility += player.latestMicroVolatility || 0;\n}\n\n/**\n * Registra un giocatore per il calcolo dei ranking\n */\nfunction registerPlayerForRanking(player, playerRanks) {\n    const playerRank = {\n        playerId: player.playerId,\n        potentialPrice: player.potentialPrice || 0,\n        effectiveness: player.fatmol || 0,\n        performance: player.absind || 0\n    };\n    \n    playerRanks.push(playerRank);\n}\n\n/**\n * Aggiorna le medie statistiche di un club\n */\nfunction updateClubAverages(club, numOfPlayersExceed100Min, stats) {\n    // Calcolo medie base\n    const numPlayers = club.numOfPlayers || 1; // Evita divisione per zero\n    const numPlayersExceed = numOfPlayersExceed100Min || 1; // Evita divisione per zero\n    \n    // Età e contrattuali\n    club.avgAge = stats.totalAge / numPlayers;\n    club.avgContractDuration = stats.totalContractDuration / numPlayers;\n    club.avgContractResidualDuration = stats.totalContractResidualDuration / numPlayers;\n    \n    // Valori finanziari\n    club.capitalGain = club.expectedPrice - club.residualBookValue;\n    club.netProfit = club.lastRevenues - club.costs;\n    \n    // Deviazione salariale\n    club.salaryAbsoluteDeviation = club.salaryNetFair - club.salaryNet;\n    club.salaryPercDeviation = (club.salaryAbsoluteDeviation * 100) / club.salaryNet;\n    club.salaryExtracost = club.salaryGrossFair - club.salaryGrossSum;\n    \n    // Medie per tutti i giocatori\n    club.avgPotentialPrice = club.potentialPrice / numPlayers;\n    club.avgResidualValue = club.residualValue / numPlayers;\n    club.avgResidualBookValue = club.residualBookValue / numPlayers;\n    club.avgExpectedPrice = club.expectedPrice / numPlayers;\n    club.avgLatestMicroVolatility = club.totalLatestMicroVolatility / numPlayers;\n    club.avgSalaryGross = club.salaryGrossSum / numPlayers;\n    club.avgEffectiveness = club.totalEffectiveness / numPlayers;\n    club.avgSalaryNet = club.salaryNetSum / numPlayers;\n    club.avgSalaryOptimal = club.salaryOptimal / numPlayers;\n    club.avgSalaryPotential = club.salaryPotential / numPlayers;\n    \n    // Medie per giocatori con più di 100 minuti\n    if (numOfPlayersExceed100Min > 0) {\n        club.avgPotentialPriceExceed100Min = club.potentialPriceExceed100Min / numPlayersExceed;\n        club.avgResidualValueExceed100Min = club.residualValueExceed100Min / numPlayersExceed;\n        club.avgResidualBookValueExceed100Min = club.residualBookValueExceed100Min / numPlayersExceed;\n        club.avgExpectedPriceExceed100Min = club.expectedPriceExceed100Min / numPlayersExceed;\n        club.avgLatestMicroVolatilityExceed100Min = club.totalLatestMicroVolatilityExceed100Min / numPlayersExceed;\n        club.avgSalaryGrossExceed100Min = club.salaryGrossSumExceed100Min / numPlayersExceed;\n        club.avgEffectivenessExceed100Min = club.totalEffectivenessExceed100Min / numPlayersExceed;\n        club.avgSalaryNetExceed100Min = club.salaryNetSumExceed100Min / numPlayersExceed;\n        club.avgSalaryOptimalExceed100Min = club.salaryOptimalExceed100Min / numPlayersExceed;\n        club.avgSalaryPotentialExceed100Min = club.salaryPotentialExceed100Min / numPlayersExceed;\n    }\n    \n    // Valori massimi\n    club.maxSalaryGross = Math.max(club.salaryGrossSum, club.salaryGross || 0);\n    club.maxSalaryNet = Math.max(club.salaryNetSum, club.salaryNet || 0);\n    \n    // Crescita finanziaria\n    club.revenueGrowth = club.oldRevenues ? (((club.lastRevenues - club.oldRevenues) / club.oldRevenues) * 100) : 0;\n    club.projectedRevenueGrowth = club.lastRevenues ? (((club.revenues - club.lastRevenues) / club.lastRevenues) * 100) : 0;\n    \n    // Altri indicatori finanziari\n    club.netProfitLoss = club.lastRevenues - club.costOperating;\n    club.playerTrading = club.salesPlayers5Y$ - club.purchasePlayers5Y$;\n    club.returnOnInvestment = 0; // Non calcolato nell'originale\n    club.costPerPoint = club.pointsCurrentSeason ? (club.playersAnnualCost / club.pointsCurrentSeason) : 0;\n    club.performanceIndex = club.avgEffectivenessExceed100Min;\n}\n\n/**\n * Aggiorna le medie di cluster per un club\n */\nfunction updateClubClusterAverages(club, clubClusterSalaryAvg, clubLeagueSalaryAvg) {\n    // Inizializzazione strutture cluster\n    if (!clubClusterSalaryAvg[club.cluster]) {\n        clubClusterSalaryAvg[club.cluster] = {\n            totalSalaryNet: 0,\n            numberOfClubs: 0,\n            numberOfPlayers: 0\n        };\n    }\n    \n    // Aggiornamento medie cluster\n    clubClusterSalaryAvg[club.cluster].totalSalaryNet += club.salaryNetSum;\n    clubClusterSalaryAvg[club.cluster].numberOfClubs++;\n    clubClusterSalaryAvg[club.cluster].numberOfPlayers += club.numOfPlayers;\n    \n    // Inizializzazione strutture lega\n    if (!clubLeagueSalaryAvg[club.leagueId]) {\n        clubLeagueSalaryAvg[club.leagueId] = {\n            totalSalaryNet: 0,\n            numberOfClubs: 0,\n            numberOfPlayers: 0\n        };\n    }\n    \n    // Aggiornamento medie lega\n    clubLeagueSalaryAvg[club.leagueId].totalSalaryNet += club.salaryNetSum;\n    clubLeagueSalaryAvg[club.leagueId].numberOfClubs++;\n    clubLeagueSalaryAvg[club.leagueId].numberOfPlayers += club.numOfPlayers;\n}\n\n/**\n * Tiene traccia del numero di giocatori posseduti da ogni club\n */\nfunction trackClubOwnedPlayers(club, clubOwnedPlayers) {\n    club.Players.forEach(player => {\n        if (!clubOwnedPlayers[player.masterClubId]) {\n            clubOwnedPlayers[player.masterClubId] = 0;\n        }\n        clubOwnedPlayers[player.masterClubId]++;\n    });\n}\n\n/**\n * Aggiorna le statistiche della lega con i dati del club\n */\nfunction updateLeagueStats(league, club, clubStats) {\n    // Aggiornamento contatori\n    league.numOfPlayers += club.numOfPlayers;\n    \n    // Aggiornamento valori economici\n    league.portfolioCost += club.portfolioCost;\n    league.residualBookValue += club.residualBookValue;\n    league.residualValue += club.residualValue;\n    league.potentialPrice += club.potentialPrice;\n    league.expectedPrice += club.expectedPrice;\n    league.totalRevenues += club.lastRevenues || 0;\n    league.totalProjectedRevenues += club.revenues || 0;\n    \n    // Aggiornamento stipendi\n    league.salaryGross += club.maxSalaryGross;\n    league.salaryNet += club.maxSalaryNet;\n    league.salaryOptimal += club.salaryOptimal;\n    league.salaryPotential += club.salaryPotential;\n    \n    // Aggiornamento valori annuali\n    league.annualBookValue += club.annualBookValue;\n}\n\n/**\n * Finalizza le statistiche della lega\n */\nfunction finalizeLeagueStats(league, stats) {\n    const numPlayers = league.numOfPlayers || 1; // Evita divisione per zero\n    \n    // Percentuali giocatori\n    league.shareOfForeignPlayers = (league.numOfForeignPlayers / numPlayers) * 100;\n    league.shareOfU23Players = (league.numOfU23Players / numPlayers) * 100;\n    league.shareOfU23ForeginPlayers = (league.numOfU23ForeignPlayers / numPlayers) * 100;\n    \n    // Medie età e contratti\n    league.avgAge = stats.totalAgeLeague / numPlayers;\n    league.avgContractDuration = stats.totalContractDurationLeague / numPlayers;\n    league.avgContractResidualDuration = stats.totalContractResidualDurationLeague / numPlayers;\n    \n    // Valori finanziari\n    league.capitalGain = league.expectedPrice - league.residualBookValue;\n    league.netProfit = league.expectedPrice - league.residualValue;\n    \n    // Deviazione salariale\n    league.salaryAbsoluteDeviation = league.salaryOptimal - league.salaryNet;\n    league.salaryPercDeviation = (league.salaryAbsoluteDeviation * 100) / league.salaryOptimal;\n    \n    // Medie finanziarie\n    league.salaryAvg = league.salaryNet / numPlayers;\n    league.avgPotentialPrice = league.potentialPrice / numPlayers;\n    league.avgPortfolioCost = league.portfolioCost / numPlayers;\n    league.avgExpectedPrice = league.expectedPrice / numPlayers;\n    league.avgResidualBookValue = league.residualBookValue / numPlayers;\n    \n    // Medie performance\n    league.avgPerformance = league.totalPerformance / numPlayers;\n    league.avgEffectiveness = league.totalEffectiveness / numPlayers;\n    league.avgLatestUniqueness = league.totalLatestUniqueness / numPlayers;\n    league.avgLatestMicroVolatility = league.totalLatestMicroVolatility / numPlayers;\n    \n    // Medie salari\n    league.avgSalaryNet = league.salaryNet / numPlayers;\n    league.avgSalaryOptimal = league.salaryOptimal / numPlayers;\n    league.avgSalaryPotential = league.salaryPotential / numPlayers;\n}\n\n/**\n * Aggiorna le medie di cluster per una lega\n */\nfunction updateLeagueClusterAverages(league, leagueClusterSalaryAvg) {\n    // Inizializzazione strutture cluster\n    if (!leagueClusterSalaryAvg[league.cluster]) {\n        leagueClusterSalaryAvg[league.cluster] = {\n            totalSalaryNet: 0,\n            count: 0\n        };\n    }\n    \n    // Aggiornamento medie cluster\n    leagueClusterSalaryAvg[league.cluster].totalSalaryNet += league.salaryNet;\n    leagueClusterSalaryAvg[league.cluster].count++;\n}\n\n/**\n * Registra una lega per il calcolo dei ranking\n */\nfunction registerLeagueForRanking(league, leagueId, leagueRanks) {\n    const leagueRank = {\n        leagueId: leagueId,\n        potentialPrice: league.potentialPrice || 0,\n        portfolioCost: league.portfolioCost || 0,\n        salaryNet: league.salaryNet || 0\n    };\n    \n    leagueRanks.push(leagueRank);\n}\n\n/**\n * Registra un club per il calcolo dei ranking\n */\nfunction registerClubForRanking(club, clubRanks) {\n    const clubRank = {\n        clubId: club.clubId,\n        potentialPrice: club.potentialPrice || 0,\n        portfolioCost: club.portfolioCost || 0,\n        salaryNet: club.salaryNet || 0\n    };\n    \n    clubRanks.push(clubRank);\n}\n\n/**\n * Calcola i ranking e applica le statistiche finali\n */\nfunction calculateRankings(ctx) {\n    const { \n        TheFootballTree, \n        playerRanks, \n        clubRanks, \n        leagueRanks,\n        clubOwnedPlayers,\n        clubClusterSalaryAvg,\n        clubLeagueSalaryAvg,\n        leagueClusterSalaryAvg,\n        allLeagueTotalRevenues\n    } = ctx;\n    \n    // Ordinamento e mappatura dei ranking\n    const leaguesByValue = leagueRanks\n        .sort((a, b) => a.potentialPrice - b.potentialPrice)\n        .map(league => league.leagueId)\n        .reverse();\n        \n    const leaguesByAcquisition = leagueRanks\n        .sort((a, b) => a.portfolioCost - b.portfolioCost)\n        .map(league => league.leagueId)\n        .reverse();\n        \n    const leaguesBySalary = leagueRanks\n        .sort((a, b) => a.salaryNet - b.salaryNet)\n        .map(league => league.leagueId)\n        .reverse();\n    \n    const clubsByValue = clubRanks\n        .sort((a, b) => a.potentialPrice - b.potentialPrice)\n        .map(club => club.clubId)\n        .reverse();\n        \n    const clubsByAcquisition = clubRanks\n        .sort((a, b) => a.portfolioCost - b.portfolioCost)\n        .map(club => club.clubId)\n        .reverse();\n        \n    const clubsBySalary = clubRanks\n        .sort((a, b) => a.salaryNet - b.salaryNet)\n        .map(club => club.clubId)\n        .reverse();\n    \n    const playersByValue = playerRanks\n        .sort((a, b) => a.potentialPrice - b.potentialPrice)\n        .map(player => player.playerId)\n        .reverse();\n        \n    const playersByPerformance = playerRanks\n        .sort((a, b) => a.performance - b.performance)\n        .map(player => player.playerId)\n        .reverse();\n        \n    const playersByEffectiveness = playerRanks\n        .sort((a, b) => a.effectiveness - b.effectiveness)\n        .map(player => player.playerId)\n        .reverse();\n    \n    // Applicazione dei ranking e delle statistiche finali\n    Object.keys(TheFootballTree).forEach(leagueId => {\n        const league = TheFootballTree[leagueId];\n        \n        // Inizializzazione statistiche finanziarie lega\n        initializeLeagueFinancials(league);\n        \n        // Assegnazione ranking lega\n        assignLeagueRankings(league, leagueId, {\n            leaguesByValue,\n            leaguesByAcquisition,\n            leaguesBySalary,\n            leagueClusterSalaryAvg\n        });\n        \n        // Elaborazione club per statistiche finali\n        league.Clubs.forEach(club => {\n            // Assegnazione ranking club\n            assignClubRankings(club, {\n                clubsByValue,\n                clubsByAcquisition,\n                clubsBySalary,\n                clubClusterSalaryAvg,\n                clubLeagueSalaryAvg,\n                clubOwnedPlayers\n            });\n            \n            // Aggiornamento metriche finanziarie della lega\n            updateLeagueFinancials(league, club);\n            \n            // Elaborazione giocatori per ranking finali\n            club.Players.forEach(player => {\n                assignPlayerRankings(player, {\n                    playersByValue,\n                    playersByPerformance,\n                    playersByEffectiveness,\n                    league,\n                    club\n                });\n                \n                calculatePlayerPerformanceMetrics(player, club, league);\n            });\n        });\n        \n        // Calcolo metriche finanziarie finali della lega\n        finalizeLeagueFinancials(league, allLeagueTotalRevenues);\n    });\n}\n\n/**\n * Inizializza le statistiche finanziarie di una lega\n */\nfunction initializeLeagueFinancials(league) {\n    league.totalProjectedRevenues = 0;\n    league.totalCostOperating = 0;\n    league.salesPlayers5Y$ = 0;\n    league.purchasePlayers5Y$ = 0;\n    league.totalBroadcasting = 0;\n    league.totalCommercial = 0;\n    league.totalMatchDay = 0;\n    league.totalOtherRevenues = 0;\n    league.revenueGrowth = 0;\n    league.projectedRevenueGrowth = 0;\n    league.revenueShare = 0;\n    league.netProfitLoss = 0;\n    league.playerTrading = 0;\n    league.returnOnInvestment = 0;\n    league.financialSustainabilityIndex = 0;\n    league.performanceIndex = 0;\n    league.oldTotalRevenues = 0;\n}\n\n/**\n * Assegna i ranking a una lega\n */\nfunction assignLeagueRankings(league, leagueId, ctx) {\n    const {\n        leaguesByValue,\n        leaguesByAcquisition,\n        leaguesBySalary,\n        leagueClusterSalaryAvg\n    } = ctx;\n    \n    // Assegnazione ranking valore\n    league.rankByValue = leaguesByValue.indexOf(leagueId) + 1;\n    league.rankByAcquisition = leaguesByAcquisition.indexOf(leagueId) + 1;\n    league.rankBySalary = leaguesBySalary.indexOf(leagueId) + 1;\n    \n    // Calcolo medie salario per cluster\n    if (leagueClusterSalaryAvg[league.cluster] && leagueClusterSalaryAvg[league.cluster].count > 0) {\n        league.avgSalaryNetCluster = leagueClusterSalaryAvg[league.cluster].totalSalaryNet / leagueClusterSalaryAvg[league.cluster].count;\n        league.absSalaryNetClusterDeviation = Math.abs(league.avgSalaryNetCluster - league.salaryNet);\n        league.percSalaryNetClusterDeviation = ((league.salaryNet - league.avgSalaryNetCluster) / league.salaryNet) * 100;\n    }\n}\n\n/**\n * Assegna i ranking a un club\n */\nfunction assignClubRankings(club, ctx) {\n    const {\n        clubsByValue,\n        clubsByAcquisition,\n        clubsBySalary,\n        clubClusterSalaryAvg,\n        clubLeagueSalaryAvg,\n        clubOwnedPlayers\n    } = ctx;\n    \n    // Assegnazione ranking valore\n    club.rankByValue = clubsByValue.indexOf(club.clubId) + 1;\n    club.rankByAcquisition = clubsByAcquisition.indexOf(club.clubId) + 1;\n    club.rankBySalary = clubsBySalary.indexOf(club.clubId) + 1;\n    \n    // Calcolo medie salario per cluster\n    if (clubClusterSalaryAvg[club.cluster] && clubClusterSalaryAvg[club.cluster].numberOfClubs > 0) {\n        club.avgSalaryNetCluster = clubClusterSalaryAvg[club.cluster].totalSalaryNet / clubClusterSalaryAvg[club.cluster].numberOfClubs;\n        club.absSalaryNetClusterDeviation = Math.abs(club.avgSalaryNetCluster - club.salaryNetSum);\n        club.percSalaryNetClusterDeviation = ((club.salaryNetSum - club.avgSalaryNetCluster) / club.salaryNetSum) * 100;\n        club.avgSalaryNetClusterByPlayer = clubClusterSalaryAvg[club.cluster].totalSalaryNet / clubClusterSalaryAvg[club.cluster].numberOfPlayers;\n    }\n    \n    // Calcolo medie salario per lega\n    if (clubLeagueSalaryAvg[club.leagueId] && clubLeagueSalaryAvg[club.leagueId].numberOfClubs > 0) {\n        club.avgLeagueSalaryNet = clubLeagueSalaryAvg[club.leagueId].totalSalaryNet / clubLeagueSalaryAvg[club.leagueId].numberOfClubs;\n        club.absLeagueSalaryNetDeviation = Math.abs(club.salaryNetSum - club.avgLeagueSalaryNet);\n        club.percLeagueSalaryNetDeviation = ((club.salaryNetSum - club.avgLeagueSalaryNet) / club.salaryNetSum) * 100;\n    }\n    \n    // Calcolo numero giocatori posseduti\n    club.numOfOwnedPlayers = clubOwnedPlayers[club.clubId] || 0;\n    \n    // Calcolo metriche di sostenibilità\n    club.financialSustainabilityIndex = club.revenues ? (((club.annualBookValue + club.maxSalaryGross) / club.revenues) * 100) : 0;\n    club.revenueShare = club.lastRevenues && club.lastRevenues > 0 ? ((club.lastRevenues / (club.leagueTotalRevenues || 1)) * 100) : 0;\n}\n\n/**\n * Aggiorna le metriche finanziarie di una lega con i dati di un club\n */\nfunction updateLeagueFinancials(league, club) {\n    league.oldTotalRevenues += club.oldRevenues || 0;\n    league.totalProjectedRevenues += club.revenues || 0;\n    league.totalCostOperating += club.costOperating || 0;\n    league.salesPlayers5Y$ += club.salesPlayers5Y$ || 0;\n    league.purchasePlayers5Y$ += club.purchasePlayers5Y$ || 0;\n    \n    league.totalBroadcasting += club.broadcastingRevenues || 0;\n    league.totalCommercial += club.commericialRevenues || 0;\n    league.totalMatchDay += club.matchDayRevenues || 0;\n    league.totalOtherRevenues += club.otherRevenues || 0;\n}\n\n/**\n * Assegna i ranking a un giocatore\n */\nfunction assignPlayerRankings(player, ctx) {\n    const {\n        playersByValue,\n        playersByPerformance,\n        playersByEffectiveness,\n        league,\n        club\n    } = ctx;\n    \n    // Assegnazione ranking valore\n    player.rankByValue = playersByValue.indexOf(player.playerId) + 1;\n    player.rankByPerformance = playersByPerformance.indexOf(player.playerId) + 1;\n    player.rankByEffectiveness = playersByEffectiveness.indexOf(player.playerId) + 1;\n    \n    // Calcolo deviazioni stipendio club\n    player.absClubAvgSalaryDeviation = Math.abs(club.salaryAvg - player.salaryNet);\n    player.percClubAvgSalaryDeviation = ((player.salaryNet - club.salaryAvg) / club.salaryAvg) * 100;\n    \n    // Calcolo deviazioni stipendio lega\n    player.absLeagueAvgSalaryDeviation = Math.abs(league.salaryAvg - player.salaryNet);\n    player.percLeagueAvgSalaryDeviation = ((player.salaryNet - league.salaryAvg) / league.salaryAvg) * 100;\n    \n    // Calcolo deviazioni stipendio cluster\n    player.absClubCusterAvgSalaryDeviation = Math.abs(club.avgSalaryNetClusterByPlayer - player.salaryNet);\n    player.percClubClusterAvgSalaryDeviation = ((player.salaryNet - club.avgSalaryNetClusterByPlayer) / club.avgSalaryNetClusterByPlayer) * 100;\n}\n\n/**\n * Calcola le metriche di performance di un giocatore\n */\nfunction calculatePlayerPerformanceMetrics(player, club, league) {\n    // Calcolo indice di contribuzione\n    let eff23 = player.effectiveness < 23.5 ? 0 : player.effectiveness;\n    player.contributionIndexPerc = (eff23 / (club.totalEffectivenessExceed23 || 1)) * 100;\n    player.revenueContributionIndex = (player.contributionIndexPerc / 100) * (club.revenues || 0);\n    \n    // Calcolo costo per minuto\n    player.costPerMinute = player.minutesLastSeason ? (player.annualCost / player.minutesLastSeason) : player.annualCost;\n    \n    // Calcolo indice di contribuzione al gol\n    player.scoringContributionIndex = (player.goal + player.assist + player.preassist) ? \n        ((player.minutes) / (player.goal + player.assist + player.preassist)) : 0;\n    \n    // Calcolo performance relativa\n    player.clubRelativePlayerPerformance = club.avgEffectiveness ? \n        (((player.effectiveness - club.avgEffectiveness) / club.avgEffectiveness) * 100) : 0;\n    \n    player.leagueRelativePlayerPerformance = league.avgEffectiveness ? \n        (((player.effectiveness - league.avgEffectiveness) / league.avgEffectiveness) * 100) : 0;\n    \n    // Calcolo impatto salariale\n    player.salaryImpactOnSalaries = club.maxSalaryGross ? ((player.salaryGross / club.maxSalaryGross) * 100) : 0;\n}\n\n/**\n * Finalizza le metriche finanziarie di una lega\n */\nfunction finalizeLeagueFinancials(league, allLeagueTotalRevenues) {\n    // Calcolo crescita\n    league.revenueGrowth = league.oldTotalRevenues ? \n        (((league.totalRevenues - league.oldTotalRevenues) / league.oldTotalRevenues) * 100) : 0;\n    \n    // Calcolo quota ricavi\n    league.revenueShare = allLeagueTotalRevenues ? \n        ((league.totalRevenues / allLeagueTotalRevenues) * 100) : 0;\n    \n    // Calcolo profitti e perdite\n    league.netProfitLoss = league.totalRevenues - league.totalCostOperating;\n    league.playerTrading = league.salesPlayers5Y$ - league.purchasePlayers5Y$;\n    \n    // Calcolo sostenibilità finanziaria\n    league.financialSustainabilityIndex = league.totalRevenues ? \n        (((league.salaryGross + league.annualBookValue) * 100) / league.totalRevenues) : 0;\n    \n    // Indice di performance\n    league.performanceIndex = league.avgEffectiveness;\n}\n\n// Esecuzione della funzione principale\nreturn analyzeClubsAndLeagues(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 800,
        "wires": [
            [
                "5fe0f052048fc655"
            ]
        ]
    },
    {
        "id": "5fe0f052048fc655",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "10 - Consumer Data",
        "func": "/**\n * Node-RED Function Node: Consumer Data Analysis\n * \n * Questo nodo calcola i valori di consumo per giocatori, club e leghe,\n * e ne classifica il ranking.\n */\n\n// Log di inizio\nflow.get(\"logmsg\").message = \"Consumer Data Begins\";\nnode.log(flow.get(\"logmsg\"));\n\n// Importazione delle dipendenze\nconst Utils = global.get(\"UTILS\");\n\n/**\n * Funzione principale per l'analisi dei dati di consumo\n */\nfunction analyzeConsumerData(msg) {\n    try {\n        // Recupero dati di input\n        const TheFootballTree = msg.payload;\n        \n        if (!TheFootballTree) {\n            throw new Error(\"Dati FootballTree mancanti\");\n        }\n        \n        // Inizializzazione strutture per i ranking\n        const playerRanks = [];\n        const clubRanks = [];\n        const leagueRanks = [];\n        \n        // Prima fase: calcolo dei valori di consumo\n        calculateConsumerValues(TheFootballTree, playerRanks, clubRanks, leagueRanks);\n        \n        // Seconda fase: calcolo e applicazione dei ranking\n        applyConsumerRankings(TheFootballTree, playerRanks, clubRanks, leagueRanks);\n        \n        // Salvataggio dei risultati\n        global.set(\"TheLatestFooballTree\", TheFootballTree);\n        global.set(\"PlayersErrors\", msg.PlayersErrors);\n        \n        // Log di completamento\n        flow.get(\"logmsg\").message = \"Consumer Data ENDS\";\n        node.log(flow.get(\"logmsg\"));\n        \n        msg.payload = TheFootballTree;\n        return msg;\n    } catch (error) {\n        console.error(\"Errore nell'analisi dei dati di consumo:\", error);\n        flow.get(\"logmsg\").message = `Consumer Data ERROR: ${error.message}`;\n        node.log(flow.get(\"logmsg\"));\n        msg.error = error.message;\n        return msg;\n    }\n}\n\n/**\n * Calcola i valori di consumo per tutti i livelli (giocatori, club, leghe)\n */\nfunction calculateConsumerValues(TheFootballTree, playerRanks, clubRanks, leagueRanks) {\n    Object.keys(TheFootballTree).forEach(leagueId => {\n        const league = TheFootballTree[leagueId];\n        \n        // Inizializzazione dei valori di consumo per la lega\n        initializeConsumerValues(league);\n        \n        // Calcolo dei valori di consumo per i club\n        league.Clubs.forEach(club => {\n            // Inizializzazione dei valori di consumo per il club\n            initializeConsumerValues(club);\n            \n            // Calcolo dei valori di consumo per i giocatori\n            club.Players.forEach(player => {\n                // Inizializzazione dei valori di consumo per il giocatore\n                initializeConsumerValues(player);\n                \n                // Calcolo del valore di consumo del giocatore\n                calculatePlayerConsumerValue(player);\n                \n                // Aggiornamento dei valori di consumo del club\n                updateClubConsumerValues(club, player);\n                \n                // Registrazione per il ranking\n                registerPlayerForRanking(player, playerRanks);\n            });\n            \n            // Registrazione per il ranking\n            registerClubForRanking(club, clubRanks);\n            \n            // Aggiornamento dei valori di consumo della lega\n            updateLeagueConsumerValues(league, club);\n        });\n        \n        // Registrazione per il ranking\n        registerLeagueForRanking(league, leagueId, leagueRanks);\n    });\n}\n\n/**\n * Inizializza i valori di consumo per un'entità (lega, club o giocatore)\n */\nfunction initializeConsumerValues(entity) {\n    entity.consumerValue = 0;\n    entity.consumerResidualValue = 0;\n    entity.consumerExpectedSalary = 0;\n    entity.consumerExpectedSalaryAbsoluteDeviation = 0;\n    entity.consumerExpectedSalaryPercDeviation = 0;\n}\n\n/**\n * Calcola i valori di consumo per un giocatore\n */\nfunction calculatePlayerConsumerValue(player) {\n    // Calcolo del valore di consumo\n    player.consumerValue = !player.tmValue ? \n        player.potentialPrice : \n        ((player.potentialPrice * 2/3) + (player.tmValue * 1/3));\n    \n    // Calcolo del valore residuo di consumo\n    player.consumerResidualValue = player.residualValue > player.consumerValue ? \n        player.consumerValue : \n        player.residualValue;\n    \n    // Calcolo del salario atteso di consumo\n    player.consumerExpectedSalary = player.salaryPotential;\n    player.consumerExpectedSalaryAbsoluteDeviation = player.consumerExpectedSalary - player.salaryNet;\n    player.consumerExpectedSalaryPercDeviation = player.consumerExpectedSalary ? \n        (player.consumerExpectedSalaryAbsoluteDeviation / player.consumerExpectedSalary) * 100 : 0;\n}\n\n/**\n * Aggiorna i valori di consumo di un club con i dati di un giocatore\n */\nfunction updateClubConsumerValues(club, player) {\n    club.consumerValue += player.consumerValue;\n    club.consumerResidualValue += player.consumerResidualValue;\n    club.consumerExpectedSalary += player.consumerExpectedSalary;\n    club.consumerExpectedSalaryAbsoluteDeviation = club.consumerExpectedSalary - club.salaryNet;\n    club.consumerExpectedSalaryPercDeviation = club.consumerExpectedSalary ? \n        (club.consumerExpectedSalaryAbsoluteDeviation / club.consumerExpectedSalary) * 100 : 0;\n}\n\n/**\n * Aggiorna i valori di consumo di una lega con i dati di un club\n */\nfunction updateLeagueConsumerValues(league, club) {\n    league.consumerValue += club.consumerValue;\n    league.consumerResidualValue += club.consumerResidualValue;\n    league.consumerExpectedSalary += club.consumerExpectedSalary;\n    league.consumerExpectedSalaryAbsoluteDeviation = league.consumerExpectedSalary - league.salaryNet;\n    league.consumerExpectedSalaryPercDeviation = league.consumerExpectedSalary ? \n        (league.consumerExpectedSalaryAbsoluteDeviation / league.consumerExpectedSalary) * 100 : 0;\n}\n\n/**\n * Registra un giocatore per il calcolo del ranking\n */\nfunction registerPlayerForRanking(player, playerRanks) {\n    playerRanks.push({\n        playerId: player.playerId,\n        consumerValue: player.consumerValue\n    });\n}\n\n/**\n * Registra un club per il calcolo del ranking\n */\nfunction registerClubForRanking(club, clubRanks) {\n    clubRanks.push({\n        clubId: club.clubId,\n        consumerValue: club.consumerValue\n    });\n}\n\n/**\n * Registra una lega per il calcolo del ranking\n */\nfunction registerLeagueForRanking(league, leagueId, leagueRanks) {\n    leagueRanks.push({\n        leagueId: leagueId,\n        consumerValue: league.consumerValue\n    });\n}\n\n/**\n * Calcola e applica i ranking di consumo\n */\nfunction applyConsumerRankings(TheFootballTree, playerRanks, clubRanks, leagueRanks) {\n    // Ordinamento e mappatura dei ranking per valore di consumo\n    const leaguesByConsumerValue = leagueRanks\n        .sort((a, b) => a.consumerValue - b.consumerValue)\n        .map(league => league.leagueId)\n        .reverse();\n    \n    const clubsByConsumerValue = clubRanks\n        .sort((a, b) => a.consumerValue - b.consumerValue)\n        .map(club => club.clubId)\n        .reverse();\n    \n    const playersByConsumerValue = playerRanks\n        .sort((a, b) => a.consumerValue - b.consumerValue)\n        .map(player => player.playerId)\n        .reverse();\n    \n    // Applicazione dei ranking\n    Object.keys(TheFootballTree).forEach(leagueId => {\n        const league = TheFootballTree[leagueId];\n        \n        // Applicazione ranking lega\n        league.rankByConsumerValue = leaguesByConsumerValue.indexOf(leagueId) + 1;\n        \n        // Applicazione ranking club\n        league.Clubs.forEach(club => {\n            club.rankByConsumerValue = clubsByConsumerValue.indexOf(club.clubId) + 1;\n            \n            // Applicazione ranking giocatore\n            club.Players.forEach(player => {\n                player.rankByConsumerValue = playersByConsumerValue.indexOf(player.playerId) + 1;\n            });\n        });\n    });\n}\n\n// Esecuzione della funzione principale\nreturn analyzeConsumerData(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 800,
        "wires": [
            []
        ]
    },
    {
        "id": "d53814e12deb4ced",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "A - Leagues",
        "func": "/**\n * Node-RED Function Node: Elaborazione Leghe\n * \n * Questo nodo importa, convalida e processa i dati delle leghe.\n */\n\nconsole.log(\"LEAGUES BEGINS\");\n\n// Importazione delle dipendenze\nconst League = global.get(\"TheLeagueObject\");\nconst Error = global.get(\"TheErrorObject\");\nconst week = flow.get(\"week\");\n\n/**\n * Processa e convalida i dati delle leghe calcistiche\n */\nfunction processLeagues(msg) {\n    try {\n        // Recupero dati di input\n        const _LEAGUES = msg._LEAGUES; // array di dati leghe\n        const _INFO = msg._INFO; // info correlate, usate per validazione\n        \n        if (!_LEAGUES || !_INFO) {\n            throw new Error(\"Dati di input mancanti\");\n        }\n        \n        // Inizializzazione strutture dati\n        const Leagues = [];\n        const LeaguesIndex = {};\n        const LeaguesNotValid = [];\n        const errors = [];\n        \n        // Elaborazione di tutte le leghe\n        _LEAGUES.forEach(league => {\n            // Creazione e popolazione dell'oggetto lega\n            const leagueObj = createLeagueObject(league, week);\n            \n            // Validazione e aggiunta alla collezione appropriata\n            const leagueErrors = validateLeague(leagueObj, errors);\n            if (leagueErrors.length === 0) {\n                Leagues.push(leagueObj);\n            } else {\n                LeaguesNotValid.push(leagueObj);\n            }\n        });\n        \n        // Log di progresso\n        flow.get(\"logmsg\").message = \"leagues array built\";\n        node.log(flow.get(\"logmsg\"));\n        \n        // Creazione indice per accesso rapido\n        buildLeaguesIndex(Leagues, LeaguesIndex);\n        \n        // Verifica che tutte le leghe presenti in INFO siano monitorate\n        validateLeaguesCoverage(_LEAGUES, _INFO, errors);\n        \n        // Log degli errori\n        console.log(\"League errors found: \" + errors.length);\n        flow.get(\"logmsg\").message = \"leagues errors found: \" + errors.length;\n        node.log(flow.get(\"logmsg\"));\n        \n        // Salvataggio errori\n        flow.set(\"errors\", errors);\n        \n        // Log di completamento\n        console.log(\"LEAGUES ENDS; valid #\" + Leagues.length + \" , invalid #\" + LeaguesNotValid.length);\n        flow.get(\"logmsg\").message = \"leagues construction done. valid #\" + Leagues.length + \" , invalid #\" + LeaguesNotValid.length;\n        node.log(flow.get(\"logmsg\"));\n        \n        // Aggiornamento messaggio con i risultati\n        msg.Leagues = Leagues;\n        msg.LeaguesIndex = LeaguesIndex;\n        return msg;\n    } catch (err) {\n        console.error(\"Errore nell'elaborazione delle leghe:\", err);\n        flow.get(\"logmsg\").message = \"Error processing leagues: \" + err.message;\n        node.log(flow.get(\"logmsg\"));\n        msg.error = err.message;\n        return msg;\n    }\n}\n\n/**\n * Crea un oggetto League dalle informazioni grezze\n */\nfunction createLeagueObject(leagueData, week) {\n    const league = new League(\n        leagueData.leagueId,\n        leagueData.nameClear,\n        leagueData.name\n    );\n    \n    // Assegnazione proprietà\n    league.country = leagueData.country;\n    league.countryCode = leagueData.countryCode;\n    league.extendedName = league.name + \" (\" + league.countryCode + \")\";\n    league.cluster = leagueData.cluster;\n    league.weight = leagueData.weight;\n    league.taxRate = leagueData.taxRate;\n    league.taxRatePerc = leagueData.taxRatePerc;\n    league.numOfForeignPlayers = 0;\n    league.eligibleForCups = leagueData.eligibleForCups;\n    league.promotions = leagueData.promotions;\n    league.relegations = leagueData.relegations;\n    league.fifaRank = leagueData.fifaRank;\n    league.memberAssociation = leagueData.memberAssociation;\n    league.confederation = leagueData.confederation;\n    \n    // Metadati temporali\n    league.week = week;\n    league.year = new Date().getFullYear(); // Potrebbe esserci un problema nei primi giorni del nuovo anno\n    \n    return league;\n}\n\n/**\n * Convalida un oggetto League\n */\nfunction validateLeague(league, errors) {\n    const leagueErrors = [];\n    \n    // Verifica che tutti i campi siano presenti\n    Object.keys(league).forEach(key => {\n        if (league[key] === undefined || league[key] === null) {\n            const error = new Error(\n                \"ERROR\", \n                \"LERR\", \n                \"League\", \n                league.leagueId, \n                league.name, \n                key + \" missing\"\n            );\n            leagueErrors.push(error);\n        }\n    });\n    \n    // Aggiungi errori alla lista globale\n    errors.push(...leagueErrors);\n    \n    return leagueErrors;\n}\n\n/**\n * Crea un indice delle leghe per accesso rapido\n */\nfunction buildLeaguesIndex(leagues, index) {\n    for (let i = 0; i < leagues.length; i++) {\n        index[leagues[i].leagueId] = i;\n    }\n}\n\n/**\n * Verifica che tutte le leghe menzionate in INFO siano monitorate in LEAGUES\n */\nfunction validateLeaguesCoverage(leaguesData, infoData, errors) {\n    try {\n        // Crea mappa delle leghe da INFO\n        const leagueObjInfo = {};\n        infoData.forEach(player => {\n            leagueObjInfo[player.leagueId] = player.leagueName;\n        });\n        \n        // Crea mappa delle leghe da LEAGUES\n        const leagueObjLeagues = {};\n        leaguesData.forEach(league => {\n            leagueObjLeagues[league.leagueID] = league.nameClear;\n        });\n        \n        // Verifica che tutte le leghe in INFO siano in LEAGUES\n        Object.keys(leagueObjInfo).forEach(leagueId => {\n            if (leagueObjLeagues[leagueId] === undefined) {\n                const error = new Error(\n                    \"ERROR\", \n                    \"LERR\", \n                    \"League\", \n                    leagueId, \n                    leagueObjInfo[leagueId], \n                    \"League not monitored in Standard Football\"\n                );\n                errors.push(error);\n            }\n        });\n    } catch (e) {\n        console.error(\"Errore nella validazione della copertura delle leghe:\", e);\n    }\n}\n\n// Esecuzione della funzione principale\nreturn processLeagues(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 250,
        "y": 1440,
        "wires": [
            [
                "dd98bf0d65139ec6"
            ]
        ]
    },
    {
        "id": "dd98bf0d65139ec6",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "B - Clubs",
        "func": "/**\n * Node-RED Function Node: Elaborazione Club\n * \n * Questo nodo importa, convalida e processa i dati dei club calcistici.\n */\n\nconsole.log(\"CLUB BEGINS\");\n\n// Importazione delle dipendenze\nconst Club = global.get(\"TheClubObject\");\nconst Error = global.get(\"TheErrorObject\");\nconst week = flow.get(\"week\");\n\n/**\n * Processa e convalida i dati dei club calcistici\n */\nfunction processClubs(msg) {\n    try {\n        // Recupero dati di input\n        const _INFO = msg._INFO;\n        const _CLUBS = msg._CLUBS;\n        const LeaguesIndex = msg.LeaguesIndex;\n        const Leagues = msg.Leagues;\n        let errors = flow.get(\"errors\") || [];\n        \n        if (!_CLUBS || !_INFO) {\n            throw new Error(\"Dati di input mancanti\");\n        }\n        \n        // Inizializzazione strutture dati\n        const Clubs = [];\n        const ClubsIndex = {};\n        const ClubsNotValid = [];\n        \n        // Elaborazione di tutti i club\n        _CLUBS.forEach(club => {\n            // Creazione e popolazione dell'oggetto club\n            const clubObj = createClubObject(club, week);\n            \n            // Validazione e aggiunta alla collezione appropriata\n            const clubErrors = validateClub(clubObj, errors);\n            if (clubErrors.length === 0) {\n                Clubs.push(clubObj);\n            } else {\n                ClubsNotValid.push(clubObj);\n            }\n        });\n        \n        // Creazione indice per accesso rapido\n        buildClubsIndex(Clubs, ClubsIndex);\n        \n        // Verifica che tutti i club presenti in INFO siano monitorati\n        validateClubsCoverage(_CLUBS, _INFO, errors);\n        \n        // Salvataggio errori\n        console.log(\"Club errors found: \" + errors.length);\n        flow.set(\"errors\", errors);\n        \n        // Log di completamento\n        console.log(\"CLUB ENDS; valid #\" + Clubs.length + \" invalid #\" + ClubsNotValid.length);\n        \n        // Aggiornamento messaggio con i risultati\n        msg.Clubs = Clubs;\n        msg.ClubsIndex = ClubsIndex;\n        return msg;\n    } catch (err) {\n        console.error(\"Errore nell'elaborazione dei club:\", err);\n        msg.error = err.message;\n        return msg;\n    }\n}\n\n/**\n * Crea un oggetto Club dalle informazioni grezze\n */\nfunction createClubObject(clubData, week) {\n    const club = new Club(clubData.clubId, clubData.name);\n    \n    // Proprietà base\n    club.cluster = clubData.cluster;\n    club.shortName = clubData.shortName;\n    club.city = clubData.city;\n    club.stadiumOwner = clubData.stadiumOwner;\n    club.perc = clubData.perc;\n    \n    // Proprietà finanziarie\n    club.salaryGross = clubData.salaryGross;\n    club.salaryNet = clubData.salaryNet;\n    club.salaryGrossFair = clubData.salaryGrossFair;\n    club.salaryNetFair = clubData.salaryNetFair;\n    club.revenues = clubData.revenues;\n    club.lastRevenues = clubData.lastRevenues;\n    club.premioFair = clubData.premioFair;\n    club.maxtr = clubData.maxtr;\n    club.costs = clubData.costs;\n    \n    // Identificatori\n    club.idTM = clubData.idTM;\n    club.uefaRank = clubData.uefaRank;\n    club.clubRank = clubData.clubRank;\n    club.noLimiteVendita = clubData.noLimiteVendita;\n    \n    // Statistiche giocatori\n    club.numOfLoanedPlayers = 0;\n    club.numOfBorrowedPlayers = 0;\n    club.numOfForeignPlayers = 0;\n    club.LoanedPlayers = {};\n    club.BorrowedPlayers = {};\n    \n    // Statistiche di stagione\n    club.lastPosition = clubData.lastPosition;\n    club.leagueWinnerProb = clubData.leagueWinnerProb;\n    club.qualifiedForCupProd = clubData.qualifiedForCupProd;\n    club.relegationProb = clubData.relegationProb;\n    \n    // Dati finanziari estesi\n    club.oldRevenues = clubData.oldRevenues;\n    club.salesPlayers5Y$ = clubData.salesPlayers5Y$;\n    club.purchasePlayers5Y$ = clubData.purchasePlayers5Y$;\n    club.costOperating = clubData.costOperating;\n    club.broadcastingRevenues = clubData.broadcastingRevenues;\n    club.commericialRevenues = clubData.commericialRevenues;\n    club.matchDayRevenues = clubData.matchDayRevenues;\n    club.otherRevenues = clubData.otherRevenues;\n    \n    // Altre informazioni\n    club.foundationYear = clubData.foundationYear;\n    club.stadiumCapacity = clubData.stadiumCapacity;\n    club.website = clubData.website;\n    club.pointsCurrentSeason = clubData.points;\n    \n    // Metadati temporali\n    club.week = week;\n    club.year = new Date().getFullYear(); // Potrebbe esserci un problema nei primi giorni del nuovo anno\n    \n    return club;\n}\n\n/**\n * Convalida un oggetto Club\n */\nfunction validateClub(club, errors) {\n    const clubErrors = [];\n    \n    try {\n        // Lista dei campi opzionali che possono essere nulli\n        const optionalFields = [\n            \"uefaRank\", \n            \"idTM\", \n            \"noLimiteVendita\", \n            \"maxtr\", \n            \"salaryGrossFair\", \n            \"salaryGross\"\n        ];\n        \n        // Verifica che tutti i campi obbligatori siano presenti\n        Object.keys(club).forEach(key => {\n            if (!optionalFields.includes(key)) {\n                if (club[key] === undefined || club[key] === null) {\n                    const error = new Error(\n                        \"ERROR\", \n                        \"CLERR\", \n                        \"Club\", \n                        club.clubId, \n                        club.name, \n                        key + \" missing\"\n                    );\n                    clubErrors.push(error);\n                }\n            }\n        });\n        \n        // Aggiungi errori alla lista globale\n        errors.push(...clubErrors);\n    } catch (e) {\n        console.error(\"Errore durante la validazione del club:\", e);\n    }\n    \n    return clubErrors;\n}\n\n/**\n * Crea un indice dei club per accesso rapido\n */\nfunction buildClubsIndex(clubs, index) {\n    for (let i = 0; i < clubs.length; i++) {\n        index[clubs[i].clubId] = i;\n    }\n}\n\n/**\n * Verifica che tutti i club menzionati in INFO siano monitorati in CLUBS\n */\nfunction validateClubsCoverage(clubsData, infoData, errors) {\n    try {\n        // Crea mappa dei club da INFO\n        const clubObjInfo = {};\n        infoData.forEach(player => {\n            clubObjInfo[player.teamId] = player.teamName;\n        });\n        \n        // Crea mappa dei club da CLUBS\n        const clubObjClubs = {};\n        clubsData.forEach(club => {\n            clubObjClubs[club.teamID] = club.team;\n        });\n        \n        // Verifica che tutti i club in INFO siano in CLUBS\n        Object.keys(clubObjInfo).forEach(clubId => {\n            if (clubObjClubs[clubId] === undefined) {\n                const error = new Error(\n                    \"ERROR\", \n                    \"CERR\", \n                    \"CLUB\", \n                    clubId, \n                    clubObjInfo[clubId], \n                    \"Club not monitored in Standard Football\"\n                );\n                errors.push(error);\n            }\n        });\n    } catch (e) {\n        console.error(\"Errore nella validazione della copertura dei club:\", e);\n    }\n}\n\n/**\n * Ottiene un oggetto lega in base all'ID\n * (Funzione mantenuta per compatibilità ma non usata direttamente nel codice refactored)\n */\nfunction getLeague(id, Leagues, LeaguesIndex) {\n    const index = LeaguesIndex[id];\n    return index !== undefined ? Leagues[index] : null;\n}\n\n// Esecuzione della funzione principale\nreturn processClubs(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1440,
        "wires": [
            [
                "15840ca23d697e56"
            ]
        ]
    },
    {
        "id": "15840ca23d697e56",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "C - Players",
        "func": "/**\n * Node-RED Function Node: Player Basic Analysis\n * \n * Questo nodo analizza i dati base dei giocatori e costruisce la struttura dati TheFootballTree\n * che rappresenta la gerarchia Lega -> Club -> Giocatore.\n */\n\nconsole.log(\"PLAYER BASIC ANALYSIS BEGINS\");\nconsole.log(\"DOMINANCE INFO IS MASTER TABLE\");\n\nflow.get(\"logmsg\").message = \"Player Basic Analysis and Tree Building Begins\";\nnode.log(flow.get(\"logmsg\"));\n\n// Importazione delle dipendenze\nconst Utils = global.get(\"UTILS\");\nconst Player = global.get(\"ThePlayerObject\");\nconst PlayerError = global.get(\"ThePlayerErrorObject\");\n\n/**\n * Funzione principale per l'analisi dei giocatori\n */\nfunction analyzePlayersAndBuildTree(msg) {\n    try {\n        // Recupero dati di input\n        const inputData = extractInputData(msg);\n\n        // Recupero dei dati memorizzati dal flusso\n        let errors = flow.get(\"errors\") || [];\n        const week = flow.get(\"week\");\n\n        // Costruzione delle strutture per le associazioni dei ruoli\n        const roleMappings = buildRoleMappings(inputData._ROLES);\n\n        // Filtraggio dei giocatori duplicati\n        const { InfoPlayerIndex, duplicatesFound } = filterDuplicates(inputData);\n        console.log(\"Found \" + duplicatesFound + \" duplicates\");\n\n        // Inizializzazione strutture dati per i risultati\n        const TheFootballTree = {};\n        const PlayersWithErrors = [];\n        const PlayersErrors = [];\n\n        // Variabili per statistiche globali\n        let maxAbsind = 0;  // usata nel calcolo del fatmol\n        let totFatmol = 0;  // usata nel calcolo dell'effectiveness\n        let playersByGroup = {};\n\n        // Elaborazione di ogni giocatore\n        const startTime = new Date();\n        console.log(\"Loop Begins at \" + startTime);\n\n        // Creazione degli oggetti Player\n        inputData._INFO.forEach(playerInfo => {\n            try {\n                // Elaborazione del singolo giocatore\n                processPlayer(\n                    playerInfo,\n                    inputData,\n                    {\n                        roleMappings,\n                        TheFootballTree,\n                        PlayersWithErrors,\n                        PlayersErrors,\n                        errors,\n                        week\n                    }\n                );\n            } catch (playerError) {\n                console.log(\"Error processing player:\", playerError);\n            }\n        });\n\n        // Impostazione dei club master per i giocatori\n        setMasterClubs(TheFootballTree, inputData);\n\n        // Impostazione dei giocatori in prestito\n        setBorrowedAndLoanedPlayers(TheFootballTree);\n\n        // Conversione delle strutture da oggetti ad array per iterabilità\n        convertToIterable(TheFootballTree);\n\n        // Calcolo statistiche finali\n        const endTime = new Date();\n        console.log(\"Loop Ends at \" + endTime);\n\n        const numOfValidPlayers = inputData._INFO.length - PlayersWithErrors.length;\n        console.log(\"Valid Players: \" + numOfValidPlayers);\n        console.log(\"Invalid Players: \" + PlayersWithErrors.length);\n\n        // Log di completamento\n        logCompletionStats(numOfValidPlayers, PlayersWithErrors.length);\n\n        // Aggiornamento messaggio con i risultati\n        msg.PlayersErrors = PlayersErrors;\n        msg.payload = TheFootballTree;\n\n        console.log(\"*** PLAYERS BASIC ANALYSIS COMPLETED ***\");\n        return msg;\n    } catch (error) {\n        console.error(\"Error in player analysis:\", error);\n        msg.error = error.message;\n        return msg;\n    }\n}\n\n/**\n * Estrae i dati di input dal messaggio\n */\nfunction extractInputData(msg) {\n    return {\n        _INFO: msg._INFO,\n        _STATS: msg._STATS,\n        _PLAYERS: msg._PLAYERS,\n        _VOLATILITY: msg._VOLATILITY,\n        _UNIQ: msg._UNIQ,\n        _ROLES: msg._ROLES,\n        _INFOIndex: msg._INFOIndex,\n        _STATSIndex: msg._STATSIndex,\n        _PLAYERSIndex: msg._PLAYERSIndex,\n        _VOLATILITYIndex: msg._VOLATILITYIndex,\n        _UNIQIndex: msg._UNIQIndex,\n        _COUNTRIES: msg._COUNTRIES,\n        _DATA: msg._DATA,\n        _MINUTES: msg._MINUTES,\n        Leagues: msg.Leagues,\n        Clubs: msg.Clubs,\n        LeaguesIndex: msg.LeaguesIndex,\n        ClubsIndex: msg.ClubsIndex\n    };\n}\n\n/**\n * Costruisce le mappature dei ruoli\n */\nfunction buildRoleMappings(roles) {\n    const mappings = {\n        getRoleIdFromRoleName: {},\n        getRoleNameFromRoleId: {},\n        getRoleGroupFromRoleId: {},\n        getRoleGroupFromRoleName: {},\n        getRoleWeightFromRoleGroup: {},\n        getRoleRisFromRoleGroup: {},\n        getRoleWeightFromRoleId: {}\n    };\n\n    try {\n        roles.forEach(role => {\n            mappings.getRoleIdFromRoleName[role.ruolo] = role.idRuolo;\n            mappings.getRoleNameFromRoleId[role.idRuolo] = role.ruolo;\n            mappings.getRoleGroupFromRoleId[role.idRuolo] = role.gruppo;\n            mappings.getRoleGroupFromRoleName[role.ruolo] = role.gruppo;\n            mappings.getRoleWeightFromRoleGroup[role.gruppo] = role.peso;\n            mappings.getRoleRisFromRoleGroup[role.gruppo] = role.ruoloris;\n            mappings.getRoleWeightFromRoleId[role.idRuolo] = role.peso;\n        });\n    } catch (e) {\n        console.log(\"Error building role mappings:\", e);\n    }\n\n    return mappings;\n}\n\n/**\n * Filtra i giocatori duplicati\n */\nfunction filterDuplicates(inputData) {\n    const InfoPlayerIndex = {};\n    let duplicatesFound = 0;\n\n    try {\n        for (let pos = 0; pos < inputData._INFO.length; pos++) {\n            const playerInfo = inputData._INFO[pos];\n            \n            if (playerInfo.leagueId && !isNaN(inputData.LeaguesIndex[playerInfo.leagueId])) {\n                if (InfoPlayerIndex[playerInfo.playerId] === undefined) {\n                    InfoPlayerIndex[playerInfo.playerId] = pos;\n                } else {\n                    duplicatesFound++;\n                    \n                    // Gestione del duplicato\n                    handleDuplicatePlayer(\n                        playerInfo,\n                        inputData._INFO[InfoPlayerIndex[playerInfo.playerId]],\n                        inputData\n                    );\n                }\n            }\n        }\n    } catch (e) {\n        console.log(\"Error filtering duplicates:\", e);\n    }\n\n    return { InfoPlayerIndex, duplicatesFound };\n}\n\n/**\n * Gestisce un giocatore duplicato\n */\nfunction handleDuplicatePlayer(currentPlayer, previousPlayer, inputData) {\n    const prevPlayerCluster = inputData.LeaguesIndex[previousPlayer.leagueId].cluster;\n    const currPlayerCluster = inputData.LeaguesIndex[currentPlayer.leagueId].cluster;\n    \n    // Cerca statistiche per questo giocatore\n    let playerStats = [];\n    \n    for (let statPos = 0; statPos < inputData._STATS.length; statPos++) {\n        if (inputData._STATS[statPos].playerId === currentPlayer.playerId) {\n            playerStats.push(inputData._STATS[statPos]);\n        }\n    }\n    \n    if (playerStats.length > 0) {\n        // Trova la statistica più recente\n        let latestStat = playerStats.reduce((prev, curr) => {\n            const d1 = new Date(prev.to);\n            const d2 = new Date(curr.to);\n            return (d2 > d1) ? curr : prev;\n        }, playerStats[0]);\n        \n        // Trova la statistica con il cluster più alto\n        let highestClusterStat = playerStats.reduce((prev, curr) => {\n            return (curr.clusterId > prev.clusterId) ? curr : prev;\n        }, playerStats[0]);\n        \n        // Trova la statistica con il cluster più basso\n        let lowestClusterStat = playerStats.reduce((prev, curr) => {\n            return (curr.clusterId < prev.clusterId) ? curr : prev;\n        }, playerStats[0]);\n        \n        // Decidi quale giocatore mantenere\n        decideDuplicateToKeep(\n            previousPlayer, \n            currentPlayer, \n            prevPlayerCluster, \n            currPlayerCluster,\n            latestStat,\n            highestClusterStat,\n            lowestClusterStat\n        );\n    } else {\n        // Nessuna statistica trovata, usa la regola del cluster più alto\n        previousPlayer.duplicate = prevPlayerCluster > currPlayerCluster ? false : true;\n        currentPlayer.duplicate = prevPlayerCluster <= currPlayerCluster ? false : true;\n        \n        if (prevPlayerCluster === currPlayerCluster) {\n            previousPlayer.duplicate = true;\n            currentPlayer.duplicate = true;\n        }\n    }\n}\n\n/**\n * Decide quale duplicato mantenere\n */\nfunction decideDuplicateToKeep(prevPlayer, currPlayer, prevCluster, currCluster, latestStat, highestStat, lowestStat) {\n    if (highestStat.minutes >= 600) {\n        // Se il giocatore ha giocato almeno 600 minuti nella squadra di cluster più elevato, mantieni quel cluster\n        prevPlayer.duplicate = prevCluster === highestStat.clusterId ? false : true;\n        currPlayer.duplicate = currCluster === highestStat.clusterId ? false : true;\n    } else if (highestStat.minutes < 600) {\n        // Altrimenti, mantieni il cluster più basso\n        prevPlayer.duplicate = prevCluster === lowestStat.clusterId ? false : true;\n        currPlayer.duplicate = currCluster === lowestStat.clusterId ? false : true;\n    } else {\n        // Se non possiamo decidere, usa la statistica più recente\n        prevPlayer.duplicate = prevCluster === latestStat.clusterId ? false : true;\n        currPlayer.duplicate = currCluster === latestStat.clusterId ? false : true;\n    }\n    \n    // Se entrambi i record hanno lo stesso stato, decidi in base al cluster più alto\n    if (prevPlayer.duplicate === currPlayer.duplicate) {\n        prevPlayer.duplicate = prevCluster > currCluster ? false : true;\n        currPlayer.duplicate = prevCluster <= currCluster ? false : true;\n        \n        if (prevCluster === currCluster) {\n            prevPlayer.duplicate = true;\n            currPlayer.duplicate = true;\n        }\n    }\n}\n\n/**\n * Elabora un singolo giocatore\n */\nfunction processPlayer(playerInfo, inputData, context) {\n    const {\n        roleMappings,\n        TheFootballTree,\n        PlayersWithErrors,\n        PlayersErrors,\n        errors,\n        week\n    } = context;\n    \n    // Se il giocatore è duplicato, salta l'elaborazione\n    if (playerInfo.duplicate) {\n        return;\n    }\n    \n    // Creazione dell'oggetto giocatore\n    const player = createPlayerObject(playerInfo, week);\n    \n    // Recupero dati Standard Football\n    const sfPlayer = getSFPlayerData(player, inputData, PlayersErrors);\n    \n    // Aggiunta dei dati anagrafici\n    addBiographicalData(player, playerInfo, sfPlayer, PlayersErrors);\n    \n    // Recupero dati club e lega\n    const { club, league } = getClubAndLeague(player, inputData, PlayersErrors);\n    \n    // Validazione iniziale\n    if (!validatePlayer(player, club, league, playerInfo, PlayersErrors)) {\n        PlayersWithErrors.push(player);\n        return;\n    }\n    \n    // Aggiunta dati di relazione con club e lega\n    addClubAndLeagueData(player, club, league);\n    \n    // Aggiunta dati master club\n    addMasterClubData(player, sfPlayer, inputData);\n    \n    // Aggiunta dati di nazionalità\n    addNationalityData(player, sfPlayer, inputData, PlayersErrors);\n    \n    // Aggiunta dati economici\n    addEconomicData(player, sfPlayer, league, PlayersErrors);\n    \n    // Validazione economica\n    if (!validateEconomicData(player, PlayersErrors)) {\n        PlayersWithErrors.push(player);\n        return;\n    }\n    \n    // Aggiunta statistiche\n    addStatisticsData(player, inputData);\n    \n    // Aggiunta parametri di performance\n    addPerformanceParams(player, inputData, roleMappings, PlayersErrors);\n    \n    // Aggiornamento dell'albero dati\n    updateFootballTree(TheFootballTree, player, league, club);\n}\n\n/**\n * Crea un nuovo oggetto Player\n */\nfunction createPlayerObject(playerInfo, week) {\n    const player = new Player(playerInfo.playerId, playerInfo.firstName, playerInfo.lastName);\n    \n    player._id = player.playerId; // PER MONGODB\n    player.week = week;\n    player.year = new Date().getFullYear();\n    \n    player.Errors = [];    // Errori bloccanti\n    player.Warnings = [];  // Errori non bloccanti\n    player.Alerts = [];    // Controlli statistici\n    \n    player.name = playerInfo.player;\n    \n    return player;\n}\n\n/**\n * Recupera i dati Standard Football per un giocatore\n */\nfunction getSFPlayerData(player, inputData, PlayersErrors) {\n    // Cerca il giocatore nei dati Standard Football\n    const sfPlayer = inputData._PLAYERSIndex[player.playerId] !== undefined ? \n                    inputData._PLAYERS[inputData._PLAYERSIndex[player.playerId]] : \n                    null;\n    \n    if (!sfPlayer) {\n        const error = new PlayerError(\n            \"ERROR\",\n            \"ERR-STDPLAYER\",\n            \"Player Missing\",\n            player,\n            \"Can't find the player in Standard Football registry\"\n        );\n        PlayersErrors.push(error);\n        player.Errors.push(error);\n    }\n    \n    return sfPlayer;\n}\n\n/**\n * Aggiunge i dati anagrafici al giocatore\n */\nfunction addBiographicalData(player, playerInfo, sfPlayer, PlayersErrors) {\n    // Dati di base\n    if (sfPlayer) {\n        player.shortFirstName = sfPlayer.shortFirstName;\n        player.shortLastName = sfPlayer.shortLastName;\n        player.knownName = sfPlayer.knownName;\n        player.roleId = sfPlayer.roleId;\n    }\n    \n    // Data di nascita\n    if (playerInfo.birthDate && !playerInfo.birthDate.toString().includes(\"1970\")) {\n        player.birthDate = new Date(playerInfo.birthDate);\n    } else if (sfPlayer && sfPlayer.birthDate) {\n        player.birthDate = new Date(sfPlayer.birthDate);\n    } else {\n        player.birthDate = new Date(\"01/01/1995\");\n    }\n    \n    // Età\n    player.age = player.birthDate ? parseInt(Utils.calculateAge(player.birthDate)) : null;\n    player.months = Math.abs(Utils.diffInMonths(player.birthDate, new Date()) % 12) || 0;\n    player.ageWithDecimals = player.birthDate ? parseInt(Utils.calculateAgeWithDecimals(player.birthDate)) : null;\n    \n    // Ruolo e posizione\n    player.currentPosition = playerInfo.position;\n    player.currentRole = !playerInfo.role || playerInfo.role === \"null\" ? playerInfo.position : playerInfo.role;\n    player.currentRole2 = playerInfo.role2;\n    \n    // Squadra e lega attuali\n    player.currentClubId = playerInfo.teamId;\n    player.currentClubName = playerInfo.teamName;\n    player.currentLeagueId = playerInfo.leagueId;\n    player.currentLeagueName = playerInfo.leagueName;\n    \n    // Flag nazionali\n    player.nationalTeamPlayer = playerInfo.nationalAppearances > 4 ? true : false;\n    \n    // Statistiche di gioco\n    player.minutesLastSeason = getFilteredValue(inputData._MINUTES, 'playerId', player.playerId, 'minutes') || 0;\n    player.goal = getFilteredValue(inputData._DATA, 'playerId', player.playerId, 'goal') || 0;\n    player.assist = getFilteredValue(inputData._DATA, 'playerId', player.playerId, 'assist') || 0;\n    player.preassist = getFilteredValue(inputData._DATA, 'playerId', player.playerId, 'preassist') || 0;\n    \n    // Validazione data di nascita\n    validateBirthDate(player, playerInfo, PlayersErrors);\n}\n\n/**\n * Helper per estrarre valori filtrati da array\n */\nfunction getFilteredValue(array, filterKey, filterValue, valueKey) {\n    const filteredItems = array.filter(item => item[filterKey] === filterValue);\n    return filteredItems.length > 0 ? filteredItems[0][valueKey] : null;\n}\n\n/**\n * Valida la data di nascita del giocatore\n */\nfunction validateBirthDate(player, playerInfo, PlayersErrors) {\n    if (!player.birthDate) {\n        const error = new PlayerError(\n            \"ERROR\",\n            \"ERR-BD\",\n            \"BirthDate Missing\",\n            player,\n            \"From Info birthdate: \" + playerInfo.birthDate\n        );\n        PlayersErrors.push(error);\n    }\n    \n    if (playerInfo.birthDate && !player.birthDate) {\n        const error = new PlayerError(\n            \"ERROR\",\n            \"ERR-BDPARSE\",\n            \"Cannot parse BirthDate\",\n            player,\n            \"From Info birthdate: \" + playerInfo.birthDate\n        );\n        PlayersErrors.push(error);\n    }\n    \n    if (isNaN(player.age)) {\n        const error = new PlayerError(\n            \"ERROR\",\n            \"ERR-AGE\",\n            \"Cannot parse age\",\n            player,\n            \"Age: \" + playerInfo.age\n        );\n        PlayersErrors.push(error);\n    }\n}\n\n/**\n * Recupera club e lega per un giocatore\n */\nfunction getClubAndLeague(player, inputData, PlayersErrors) {\n    const club = inputData.ClubsIndex[player.currentClubId] !== undefined ? \n                inputData.Clubs[inputData.ClubsIndex[player.currentClubId]] : \n                null;\n                \n    const league = inputData.LeaguesIndex[player.currentLeagueId] !== undefined ? \n                  inputData.Leagues[inputData.LeaguesIndex[player.currentLeagueId]] : \n                  null;\n    \n    // Validazione club e lega\n    if (!club) {\n        const error = new PlayerError(\n            \"ERROR\",\n            \"ERR-CLUB\",\n            \"Club Missing\",\n            player,\n            \"Can't find club for the given id\"\n        );\n        PlayersErrors.push(error);\n        player.Errors.push(error);\n    }\n    \n    if (!league) {\n        const error = new PlayerError(\n            \"ERROR\",\n            \"ERR-LEAGUE\",\n            \"League Missing\",\n            player,\n            \"Can't find league for the given id\"\n        );\n        PlayersErrors.push(error);\n        player.Errors.push(error);\n    }\n    \n    return { club, league };\n}\n\n/**\n * Valida i dati base del giocatore\n */\nfunction validatePlayer(player, club, league, playerInfo, PlayersErrors) {\n    // Se ci sono errori bloccanti, non proseguire\n    if (player.Errors.length > 0) {\n        return false;\n    }\n    \n    // Imposta la relazione club-lega\n    if (club && league) {\n        club.leagueId = league.leagueId;\n    }\n    \n    return true;\n}\n\n/**\n * Aggiunge i dati relativi a club e lega\n */\nfunction addClubAndLeagueData(player, club, league) {\n    // Dati lega\n    player.currentLeagueCluster = league.cluster;\n    player.currentLeagueWeight = league.weight;\n    player.currentLeagueTaxRate = league.taxRate;\n    player.currentLeagueCountry = league.country;\n    player.currentLeagueCountryCode = league.countryCode;\n    player.currentLeagueNameExtended = league.name + \"(\" + league.countryCode + \")\";\n    \n    // Dati club\n    player.currentClubCluster = club.cluster;\n    player.currentClubRank = club.clubRank;\n    player.currentClubShortName = club.shortName;\n}\n\n/**\n * Aggiunge i dati relativi al master club\n */\nfunction addMasterClubData(player, sfPlayer, inputData) {\n    // Master club ID\n    player.masterClubId = sfPlayer ? sfPlayer.masterClubId : null;\n    \n    // I dettagli del master club vengono aggiunti in una fase successiva\n}\n\n/**\n * Aggiunge i dati di nazionalità\n */\nfunction addNationalityData(player, sfPlayer, inputData, PlayersErrors) {\n    if (sfPlayer && sfPlayer.nationality) {\n        const nationalities = sfPlayer.nationality.split(\",\");\n        \n        player.nationality = nationalities[0] ? nationalities[0].trim() : \"\";\n        player.nationality2 = nationalities[1] ? nationalities[1].trim() : \"\";\n        \n        if (!player.nationality || player.nationality.length < 2) {\n            const error = new PlayerError(\n                \"WARNING\",\n                \"WARN-NATIONALITY\",\n                \"Nationality missing\",\n                player,\n                null\n            );\n            PlayersErrors.push(error);\n        } else {\n            // Ricerca codici nazionalità\n            player.nationalityCode = getCountryCode(inputData._COUNTRIES, player.nationality) || \"\";\n            player.nationality2Code = getCountryCode(inputData._COUNTRIES, player.nationality2) || \"\";\n        }\n    }\n}\n\n/**\n * Helper per ottenere il codice paese\n */\nfunction getCountryCode(countries, nationality) {\n    if (!nationality) return null;\n    \n    const matchingCountries = countries.filter(c => \n        c.tm === nationality || c.tm2 === nationality\n    );\n    \n    return matchingCountries.length > 0 ? matchingCountries[0].countryCode : null;\n}\n\n/**\n * Aggiunge i dati economici\n */\nfunction addEconomicData(player, sfPlayer, league, PlayersErrors) {\n    if (sfPlayer) {\n        // Dati contrattuali\n        player.contractType = sfPlayer.contractType;\n        player.salaryNet = sfPlayer.salary;\n        player.salaryGross = sfPlayer.salaryGross ? \n                            sfPlayer.salaryGross : \n                            player.salaryNet * (league.taxRate ? league.taxRate : 1.825);\n        \n        // Date contratto\n        player.startContract = parseDate(sfPlayer.startContract, \"07/01/2022\");\n        player.endContract = parseDate(sfPlayer.endContract, \"06/30/2024\");\n        \n        // Calcolo durata contratto\n        player.remainingYearsOfContract = player.endContract ? Utils.ryc(player.endContract) : null;\n        player.remainingMonthsOfContract = player.endContract ? \n                                          Utils.diffInMonths(new Date(player.endContract), new Date()) : \n                                          null;\n        \n        // Aggiustamento per contratti in scadenza\n        player.remainingYearsOfContract = player.remainingMonthsOfContract < 6 ? \n                                         0 : \n                                         player.remainingYearsOfContract;\n        \n        // Durata totale contratto\n        player.totalYearsOfContract = (player.endContract && player.startContract) ? \n                                     Utils.tyc(player.startContract, player.endContract) : \n                                     null;\n        \n        player.totalMonthsOfContract = (player.endContract && player.startContract) ? \n                                      Utils.diffInMonths(player.endContract, player.startContract) : \n                                      null;\n        \n        // Valori finanziari\n        player.transferPrice = sfPlayer.transferPrice != null ? sfPlayer.transferPrice : 0;\n        player.transferPriceYear = sfPlayer.transferPriceYear != null ? sfPlayer.transferPriceYear : 0;\n        player.tmValue = sfPlayer.tmValue != null ? sfPlayer.tmValue : 0;\n        player.percTransfPrice = sfPlayer.percTransfPrice;\n        player.withdrawalClause = sfPlayer.withdrawalClause;\n        \n        // Esperienza\n        player.experience = sfPlayer.experience ? sfPlayer.experience : 0;\n        \n        // Date contratto master club\n        player.masterClubStartContract = parseDate(sfPlayer.masterClubStartContract, \"06/30/2024\");\n        player.masterClubEndContract = parseDate(sfPlayer.masterClubEndContract, \"06/30/2024\");\n        \n        // Calcolo durata contratto master\n        player.remainingYearsOfMasterClubContract = player.masterClubEndContract ? \n                                                  Utils.ryc(player.masterClubEndContract) : \n                                                  null;\n        \n        player.remainingMonthsOfMasterClubContract = player.masterClubEndContract ? \n                                                    Utils.diffInMonths(new Date(player.masterClubEndContract), new Date()) : \n                                                    null;\n        \n        // Aggiustamento per contratti master in scadenza\n        player.remainingYearsOfMasterClubContract = player.remainingMonthsOfMasterClubContract < 6 ? \n                                                  0 : \n                                                  player.remainingYearsOfMasterClubContract;\n        \n        // Durata totale contratto master\n        player.totalYearsOfMasterClubContract = (player.masterClubEndContract && player.masterClubStartContract) ? \n                                               Utils.tyc(player.masterClubStartContract, player.masterClubEndContract) : \n                                               null;\n        \n        player.totalMonthsOfMasterClubContract = (player.masterClubEndContract && player.masterClubStartContract) ? \n                                                Utils.diffInMonths(player.masterClubEndContract, player.masterClubStartContract) : \n                                                null;\n        \n        // Altri dati\n        player.height = sfPlayer.height;\n        player.foot = sfPlayer.foot;\n        player.highestPrice = sfPlayer.highestPrice;\n        player.agent = sfPlayer.agent;\n        player.instagram = sfPlayer.instagram;\n        player.sponsor = sfPlayer.sponsor;\n        player.number = sfPlayer.number ? sfPlayer.number : 0;\n        \n        // Superstar\n        player.superStar = sfPlayer.superStar == 1 ? true : false;\n    }\n}\n\n/**\n * Helper per fare il parsing di una data con fallback\n */\nfunction parseDate(dateString, fallbackString) {\n    const date = new Date(dateString);\n    return (date instanceof Date && !isNaN(date)) ? date : new Date(fallbackString);\n}\n\n/**\n * Valida i dati economici\n */\nfunction validateEconomicData(player, PlayersErrors) {\n    // Verifica salario\n    if (player.salaryNet === undefined || player.salaryNet === null) {\n        const error = new PlayerError(\n            \"ERROR\",\n            \"ERR-salaryNet\",\n            \"Salary Missing\",\n            player,\n            null\n        );\n        PlayersErrors.push(error);\n        player.Errors.push(error);\n    }\n    \n    // Verifica date contratto\n    if (!player.startContract) {\n        const error = new PlayerError(\n            \"ERROR\",\n            \"ERR-STARTCONTRACT\",\n            \"Start Contract Date Missing\",\n            player,\n            null\n        );\n        PlayersErrors.push(error);\n        player.Errors.push(error);\n    }\n    \n    if (!player.endContract) {\n        const error = new PlayerError(\n            \"ERROR\",\n            \"ERR-ENDCONTRACT\",\n            \"End Contract Date Missing\",\n            player,\n            null\n        );\n        PlayersErrors.push(error);\n        player.Errors.push(error);\n    }\n    \n    // Verifica calcoli durata contratto\n    if (isNaN(player.remainingYearsOfContract) || player.remainingYearsOfContract == null) {\n        const error = new PlayerError(\n            \"ERROR\",\n            \"ERR-RYOC\",\n            \"Cannot calculate RYOC\",\n            player,\n            null\n        );\n        PlayersErrors.push(error);\n        player.Errors.push(error);\n    }\n    \n    if (isNaN(player.totalYearsOfContract) || player.totalYearsOfContract == null) {\n        const error = new PlayerError(\n            \"ERROR\",\n            \"ERR-TYOC\",\n            \"Cannot calculate TYOC\",\n            player,\n            null\n        );\n        PlayersErrors.push(error);\n        player.Errors.push(error);\n    }\n    \n    if (isNaN(player.remainingMonthsOfContract) || player.remainingMonthsOfContract == null) {\n        const error = new PlayerError(\n            \"ERROR\",\n            \"ERR-RMOC\",\n            \"Cannot calculate RMOC\",\n            player,\n            null\n        );\n        PlayersErrors.push(error);\n        player.Errors.push(error);\n    }\n    \n    if (isNaN(player.totalMonthsOfContract) || player.totalMonthsOfContract == null) {\n        const error = new PlayerError(\n            \"ERROR\",\n            \"ERR-TMOC\",\n            \"Cannot calculate TMOC\",\n            player,\n            null\n        );\n        PlayersErrors.push(error);\n        player.Errors.push(error);\n    }\n    \n    // Warnings (non bloccanti)\n    // Verifica tipo contratto\n    if (!player.contractType) {\n        const error = new PlayerError(\n            \"WARNING\",\n            \"WARN-CONTRACTTYPE\",\n            \"Contract type missing\",\n            player,\n            null\n        );\n        PlayersErrors.push(error);\n    }\n    \n    // Verifica contratto stesso club\n    if (player.currentClubId == player.masterClubId && !player.contractType.includes(\"Propriet\")) {\n        const error = new PlayerError(\n            \"WARNING\",\n            \"WARN-CONTRACTTYPE\",\n            \"Invalid contract type\",\n            player,\n            \"Contract type is: \" + player.contractType + \" but Current Club and Master Club are the same\"\n        );\n        PlayersErrors.push(error);\n    }\n    \n    // Verifica scadenza contratto\n    if (player.remainingYearsOfContract === 0) {\n        const error = new PlayerError(\n            \"WARNING\",\n            \"WARN-RYOC\",\n            \"Contract Expired\",\n            player,\n            \"End Contract is: \" + player.endContract\n        );\n        PlayersErrors.push(error);\n    }\n    \n    // Se ci sono errori bloccanti, interrompere l'elaborazione\n    if (player.Errors.length > 0) {\n        return false;\n    }\n    \n    return true;\n}\n\n/**\n * Aggiunge statistiche al giocatore\n */\nfunction addStatisticsData(player, inputData) {\n    player.latestStats = []; // Array per memorizzare le statistiche\n    \n    // Recupero statistiche\n    const playerStatsIndex = inputData._STATSIndex ? inputData._STATSIndex[player.playerId] : null;\n    \n    if (playerStatsIndex && playerStatsIndex.length > 0) {\n        for (let i = 0; i < playerStatsIndex.length; i++) {\n            player.latestStats[i] = inputData._STATS[playerStatsIndex[i]];\n        }\n    }\n    \n    // Calcolo statistiche derivate\n    setLatestDetectedStats(player);\n}\n\n/**\n * Calcola le statistiche derivate dagli ultimi dati rilevati\n */\nfunction setLatestDetectedStats(player) {\n    // Inizializzazione valori default\n    player.avgPlayedMinuteShare = 0;\n    player.avgMicroIndex = 0;\n    player.avgMacroIndex = 0;\n    player.minutes = 0;\n    player.minutesShare = 0;\n    player.alert = 0;\n    player.latestDetectedMicroIndexInjury = 0;\n    player.latestDetectedMacroIndexInjury = 0;\n    \n    let mostTimeSpent = true;\n    \n    // Verifica se ci sono statistiche\n    if (player.latestStats && player.latestStats.length > 0) {\n        // Trova l'ultima statistica\n        let start = player.latestStats[0];\n        let latest = player.latestStats.reduce((next, stat) => {\n            let d1 = new Date(next.to);\n            let d2 = new Date(stat.to);\n            return (d2 > d1) ? stat : next;\n        }, start);\n        \n        // Imposta i valori rilevati\n        player.latestDetectedLeagueCluster = latest.leagueCluster;\n        player.latestDetectedLeagueWeight = latest.leagueWeight;\n        player.latestDetectedRoleGroup = latest.roleGroup;\n        player.latestDetectedRoleWeight = latest.roleWeight;\n        player.latestDetectedMinutes = latest.minutes;\n        player.latestDetectedMicroIndex = latest.microIndex;\n        player.latestDetectedMicroIndexInjury = latest.microIndexInjury;\n        player.latestDetectedMacroIndexInjury = latest.macroIndexInjury;\n        \n        // Calcolo medie statistiche\n        let avgMinShare = { count: 0, tot: 0 };\n        let weightedMicroindex = { count: 0, tot: 0, minutes: 0 };\n        let weightedMacroindex = { count: 0, tot: 0, minutes: 0 };\n        \n        player.minutes = 0;\n        player.alert = 0;\n        \n        // Elaborazione di ogni statistica\n        player.latestStats.forEach(stat => {\n            // Calcolo della differenza in settimane\n            let d1 = new Date(stat.from);\n            let d2 = new Date(stat.to);\n            stat.diffInWeeks = Math.round((d2 - d1) / 1000 / 60 / 60 / 24 / 7);\n            \n            // Calcolo della percentuale di minuti giocati\n            stat.minuteShare = ((38 / stat.diffInWeeks) * stat.minutes) / (38 * 90);\n            \n            // Aggiornamento medie\n            avgMinShare.count++;\n            avgMinShare.tot += stat.minuteShare;\n            \n            weightedMicroindex.count++;\n            weightedMicroindex.minutes += stat.minutes;\n            weightedMicroindex.tot += (stat.leagueWeight * stat.microIndex * stat.minutes);\n            \n            weightedMacroindex.count++;\n            weightedMacroindex.minutes += stat.minutes;\n            weightedMacroindex.tot += (stat.leagueWeight * stat.macroIndex * stat.minutes);\n            \n            // Aggiornamento totali\n            player.minutes += stat.minutes;\n            player.alert += stat.alert;\n            \n            // Verifica tempo speso\n            mostTimeSpent = stat.minutes > player.latestDetectedMinutes ? false : mostTimeSpent;\n        });\n        \n        // Calcolo finali\n        player.avgPlayedMinuteShare = avgMinShare.tot / avgMinShare.count;\n        \n        // Calcolo indice ponderato\n        if (player.latestDetectedLeagueCluster == 1 && player.latestDetectedMinutes > 599 && mostTimeSpent) {\n            player.avgMicroIndex = player.latestDetectedMicroIndex;\n        } else {\n            player.avgMicroIndex = weightedMicroindex.minutes > 0 ? weightedMicroindex.tot / weightedMicroindex.minutes : 0;\n        }\n        \n        player.avgMacroIndex = weightedMacroindex.minutes > 0 ? weightedMacroindex.tot / weightedMacroindex.minutes : 0;\n        \n        // Limite ai minuti totali\n        player.minutes = player.minutes > 5130 ? 5130 : player.minutes;\n        player.minutesShare = player.minutes > 5130 ? 100 : (player.minutes / 5130) * 100;\n    }\n}\n\n/**\n * Aggiunge i parametri di performance al giocatore\n */\nfunction addPerformanceParams(player, inputData, roleMappings, PlayersErrors) {\n    player.latestParams = [];\n    \n    // Recupero parametri di volatilità\n    const volIndex = inputData._VOLATILITYIndex ? inputData._VOLATILITYIndex[player.playerId] : null;\n    if (volIndex) {\n        for (let i = 0; i < volIndex.length; i++) {\n            player.latestParams.push(inputData._VOLATILITY[volIndex[i]]);\n        }\n    }\n    \n    // Recupero parametri di unicità\n    const uniqIndex = inputData._UNIQIndex ? inputData._UNIQIndex[player.playerId] : null;\n    if (uniqIndex) {\n        for (let i = 0; i < uniqIndex.length; i++) {\n            player.latestParams.push(inputData._UNIQ[uniqIndex[i]]);\n        }\n    }\n    \n    // Valori predefiniti\n    player.latestUniqueness = 0;\n    player.latestMicroVolatility = 25;\n    player.latestMacroVolatility = 25;\n    \n    // Calcolo parametri finali\n    setLatestParams(player);\n    \n    // Aggiunta dati di ruolo\n    player.latestRoleGroup = player.latestDetectedRoleGroup || \n                           roleMappings.getRoleGroupFromRoleName[player.currentPosition];\n                           \n    player.latestRoleWeight = roleMappings.getRoleWeightFromRoleId[player.roleId] || \n                            player.latestDetectedRoleWeight || \n                            roleMappings.getRoleWeightFromRoleGroup[player.latestRoleGroup];\n                            \n    player.latestLeagueCluster = player.latestDetectedLeagueCluster || player.currentLeagueCluster;\n    player.latestRoleRis = roleMappings.getRoleRisFromRoleGroup[player.latestRoleGroup];\n    \n    player.latestMicroIndexInjury = player.latestDetectedMicroIndexInjury || 0;\n    player.latestMacroIndexInjury = player.latestDetectedMacroIndexInjury || 0;\n    \n    // Validazione ruolo\n    if (player.latestRoleGroup === undefined) {\n        const error = new PlayerError(\n            \"ERROR\",\n            \"ERR-ROLE\",\n            \"Role Group Missing\",\n            player,\n            \"Player position is \" + player.currentPosition\n        );\n        PlayersErrors.push(error);\n        player.Errors.push(error);\n    }\n    \n    if (player.latestRoleGroup !== undefined && player.latestRoleWeight === undefined) {\n        const error = new PlayerError(\n            \"ERROR\",\n            \"WARN-ROLE\",\n            \"Role Weight Missing\",\n            player,\n            \"Player position is \" + player.currentPosition\n        );\n        PlayersErrors.push(error);\n        player.Errors.push(error);\n    }\n}\n\n/**\n * Calcola i parametri derivati dalle ultime misurazioni\n */\nfunction setLatestParams(player) {\n    const microv = { tot: 0, count: 0 };\n    const macrov = { tot: 0, count: 0 };\n    const uniq = { tot: 0, count: 0 };\n    \n    if (player.latestParams && player.latestParams.length > 0) {\n        // Cerca parametri che corrispondono al cluster e al gruppo di ruolo\n        for (let i = 0; i < player.latestParams.length; i++) {\n            const param = player.latestParams[i];\n            \n            if (player.latestDetectedLeagueCluster == param.clusterId && \n                player.latestDetectedRoleGroup == param.group) {\n                \n                // Aggiorna microvolatilità\n                if (param.microVolatility && !isNaN(param.microVolatility)) {\n                    microv.tot += param.microVolatility;\n                    microv.count++;\n                }\n                \n                // Aggiorna macrovolatilità\n                if (param.macroVolatility && !isNaN(param.macroVolatility)) {\n                    macrov.tot += param.macroVolatility;\n                    macrov.count++;\n                }\n                \n                // Aggiorna unicità\n                if (param.uniqueness && !isNaN(param.uniqueness)) {\n                    uniq.tot += param.uniqueness;\n                    uniq.count++;\n                }\n            }\n        }\n    }\n    \n    // Calcola le medie finali\n    player.latestMicroVolatility = microv.count > 0 ? (microv.tot / microv.count) : 0;\n    player.latestMacroVolatility = macrov.count > 0 ? (macrov.tot / macrov.count) : 0;\n    player.latestUniqueness = uniq.count > 0 ? (uniq.tot / uniq.count) : 0;\n}\n\n/**\n * Aggiorna l'albero di dati calcistici con un nuovo giocatore\n */\nfunction updateFootballTree(TheFootballTree, player, league, club) {\n    // Inizializza la lega se non esiste\n    if (TheFootballTree[league.leagueId] === undefined) {\n        TheFootballTree[league.leagueId] = league;\n    }\n    \n    // Inizializza i club della lega se non esistono\n    if (TheFootballTree[league.leagueId].Clubs === undefined) {\n        TheFootballTree[league.leagueId].Clubs = {};\n    }\n    \n    // Inizializza il club specifico se non esiste\n    if (TheFootballTree[league.leagueId].Clubs[club.clubId] === undefined) {\n        TheFootballTree[league.leagueId].Clubs[club.clubId] = club;\n    }\n    \n    // Inizializza i giocatori del club se non esistono\n    if (TheFootballTree[league.leagueId].Clubs[club.clubId].Players === undefined) {\n        TheFootballTree[league.leagueId].Clubs[club.clubId].Players = {};\n    }\n    \n    // Aggiungi il giocatore al club\n    TheFootballTree[league.leagueId].Clubs[club.clubId].Players[player.playerId] = player;\n    \n    // Aggiungi dati paese ridondanti\n    TheFootballTree[league.leagueId].Clubs[club.clubId].country = TheFootballTree[league.leagueId].country;\n    TheFootballTree[league.leagueId].Clubs[club.clubId].countryCode = TheFootballTree[league.leagueId].countryCode;\n}\n\n/**\n * Imposta i dati dei master club per tutti i giocatori\n */\nfunction setMasterClubs(TheFootballTree, inputData) {\n    console.log(\"Setting Masters\");\n    \n    Object.keys(TheFootballTree).forEach(leagueId => {\n        Object.keys(TheFootballTree[leagueId].Clubs).forEach(clubId => {\n            Object.keys(TheFootballTree[leagueId].Clubs[clubId].Players).forEach(playerId => {\n                const player = TheFootballTree[leagueId].Clubs[clubId].Players[playerId];\n                \n                // Recupera il master club e la relativa lega\n                const masterClub = inputData.ClubsIndex[player.masterClubId] !== undefined ? \n                                 inputData.Clubs[inputData.ClubsIndex[player.masterClubId]] : \n                                 null;\n                                 \n                const masterLeague = masterClub && inputData.LeaguesIndex[masterClub.leagueId] !== undefined ? \n                                   inputData.Leagues[inputData.LeaguesIndex[masterClub.leagueId]] : \n                                   null;\n                \n                // Assegna i dati del master club\n                player.masterClubName = masterClub ? masterClub.name : null;\n                player.masterClubShortName = masterClub ? masterClub.shortName : \"\";\n                player.masterLeagueName = masterClub && masterLeague ? masterLeague.name : null;\n                player.masterLeagueId = masterClub && masterLeague ? masterLeague.leagueId : null;\n            });\n        });\n    });\n}\n\n/**\n * Imposta i giocatori in prestito e quelli presi in prestito\n */\nfunction setBorrowedAndLoanedPlayers(TheFootballTree) {\n    console.log(\"Setting borrowed and loaned\");\n    \n    Object.keys(TheFootballTree).forEach(leagueId => {\n        Object.keys(TheFootballTree[leagueId].Clubs).forEach(clubId => {\n            Object.keys(TheFootballTree[leagueId].Clubs[clubId].Players).forEach(playerId => {\n                const player = TheFootballTree[leagueId].Clubs[clubId].Players[playerId];\n                \n                // Se club attuale e master club sono diversi\n                if (player.currentClubId !== player.masterClubId) {\n                    // Giocatore preso in prestito\n                    if (TheFootballTree[player.currentLeagueId] && \n                        TheFootballTree[player.currentLeagueId].Clubs[player.currentClubId]) {\n                        \n                        TheFootballTree[player.currentLeagueId].Clubs[player.currentClubId]\n                                      .BorrowedPlayers[player.playerId] = player;\n                                      \n                        TheFootballTree[player.currentLeagueId].Clubs[player.currentClubId]\n                                      .numOfBorrowedPlayers++;\n                    }\n                    \n                    // Giocatore dato in prestito\n                    if (TheFootballTree[player.masterLeagueId] && \n                        TheFootballTree[player.masterLeagueId].Clubs[player.masterClubId]) {\n                        \n                        TheFootballTree[player.masterLeagueId].Clubs[player.masterClubId]\n                                      .LoanedPlayers[player.playerId] = player;\n                                      \n                        TheFootballTree[player.masterLeagueId].Clubs[player.masterClubId]\n                                      .numOfLoanedPlayers++;\n                    }\n                }\n            });\n        });\n    });\n}\n\n/**\n * Converte le strutture dati da oggetti ad array\n */\nfunction convertToIterable(TheFootballTree) {\n    console.log(\"Converting from obj to iterable\");\n    \n    Object.keys(TheFootballTree).forEach(leagueId => {\n        Object.keys(TheFootballTree[leagueId].Clubs).forEach(clubId => {\n            // Converti i giocatori, prestiti e prese in prestito da oggetti ad array\n            TheFootballTree[leagueId].Clubs[clubId].Players = \n                Object.values(TheFootballTree[leagueId].Clubs[clubId].Players);\n                \n            TheFootballTree[leagueId].Clubs[clubId].LoanedPlayers = \n                Object.values(TheFootballTree[leagueId].Clubs[clubId].LoanedPlayers);\n                \n            TheFootballTree[leagueId].Clubs[clubId].BorrowedPlayers = \n                Object.values(TheFootballTree[leagueId].Clubs[clubId].BorrowedPlayers);\n        });\n        \n        // Converti i club da oggetto ad array\n        TheFootballTree[leagueId].Clubs = Object.values(TheFootballTree[leagueId].Clubs);\n    });\n}\n\n/**\n * Log delle statistiche finali di elaborazione\n */\nfunction logCompletionStats(validPlayers, invalidPlayers) {\n    flow.get(\"logmsg\").message = \"Valid Players: \" + validPlayers;\n    node.log(flow.get(\"logmsg\"));\n    \n    flow.get(\"logmsg\").message = \"Invalid Players: \" + invalidPlayers;\n    node.log(flow.get(\"logmsg\"));\n}\n\n// Esecuzione della funzione principale\nreturn analyzePlayersAndBuildTree(msg);",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "6cf576d7a9c1c2b0",
        "type": "redis-command",
        "z": "521d26a7dba2b3ee",
        "server": "9ccf549a2f05cdc5",
        "command": "SET",
        "name": "Set Latest Football Tree",
        "topic": "latest_football_tree",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 530,
        "y": 540,
        "wires": [
            [
                "36d3a56dbd3705fd",
                "a323a4bfca01bd45"
            ]
        ]
    },
    {
        "id": "36d3a56dbd3705fd",
        "type": "debug",
        "z": "521d26a7dba2b3ee",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 700,
        "wires": []
    },
    {
        "id": "ebe2d62db0d539b4",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Clean Memory",
        "func": "\nconst v8 = require('v8')\nconsole.info(`V8 Total Heap Size: ${(v8.getHeapStatistics().total_available_size / 1024 / 1024).toFixed(2)} MB`)\nlet mem = process.memoryUsage()\nconst formatMem = (m) => ( m/1048576 ).toFixed(2)\nconsole.info(`Initial Memory Use (MB): RSS=${formatMem(mem.rss)}. Heap: Used=${formatMem(mem.heapUsed)}, Tot=${formatMem(mem.heapTotal)}. Ext C++=${formatMem(mem.external)}`)\n\n\nflow.set(\"_STATS\",null) && \nflow.set(\"_INFO\",null) && \nflow.set(\"_UNIQ\",null) && \nflow.set(\"_VOLATILITY\",null) && \nflow.set(\"_CLUBS\",null) && \nflow.set(\"_PLAYERS\",null) && \nflow.set(\"_LEAGUES\",null) && \nflow.set(\"_ROLES\",null) \n\n\n// Cancellazione di tutte le proprietà elencate\ndelete msg._STATS;\ndelete msg._STATSIndex;\ndelete msg._INFO;\ndelete msg._INFOIndex;\ndelete msg._VOLATILITY;\ndelete msg._VOLATILITYIndex;\ndelete msg._UNIQ;\ndelete msg._UNIQIndex;\ndelete msg._PLAYERS;\ndelete msg._PLAYERSIndex;\ndelete msg._CLUBS;\ndelete msg._CLUBSIndex;\ndelete msg._LEAGUES;\ndelete msg._LEAGUESIndex;\ndelete msg._ROLES;\ndelete msg._ROLESIndex;\ndelete msg._COUNTRIES;\ndelete msg._COUNTRIESIndex;\ndelete msg._DATA;\ndelete msg._DATAIndex;\ndelete msg._MINUTES;\ndelete msg._MINUTESIndex;\ndelete msg.Leagues;\ndelete msg.LeaguesIndex;\ndelete msg.Clubs;\ndelete msg.ClubsIndex;\ndelete msg.PlayersErrors;\n\nconsole.log(\"memory cleaned\")\nconsole.info(`V8 Total Heap Size: ${(v8.getHeapStatistics().total_available_size / 1024 / 1024).toFixed(2)} MB`)\nconsole.info(`Initial Memory Use (MB): RSS=${formatMem(mem.rss)}. Heap: Used=${formatMem(mem.heapUsed)}, Tot=${formatMem(mem.heapTotal)}. Ext C++=${formatMem(mem.external)}`)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 760,
        "wires": [
            [
                "36d3a56dbd3705fd"
            ]
        ]
    },
    {
        "id": "56a4e14379e2bb2f",
        "type": "redis-command",
        "z": "521d26a7dba2b3ee",
        "server": "9ccf549a2f05cdc5",
        "command": "GET",
        "name": "",
        "topic": "latest_football_tree",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 1270,
        "y": 560,
        "wires": [
            [
                "54c32d5abc693ba6"
            ]
        ]
    },
    {
        "id": "54c32d5abc693ba6",
        "type": "debug",
        "z": "521d26a7dba2b3ee",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 680,
        "wires": []
    },
    {
        "id": "a323a4bfca01bd45",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "",
        "func": "flow.get(\"logmsg\").message = \"RECUPERO DA REDIS\"\nnode.log(flow.get(\"logmsg\"))\nmsg.payload = [\"GET\", \"latest_football_tree\"];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 560,
        "wires": [
            [
                "56a4e14379e2bb2f"
            ]
        ]
    },
    {
        "id": "588db2aed8b79886",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "",
        "func": "flow.get(\"logmsg\").message = \"CARICO REDIS\"\nnode.log(flow.get(\"logmsg\"))\n\n// SET chiave valore\nmsg.payload = [\"SET\", \"latest_football_tree\", msg.payload];\n\n// Se vuoi impostare anche un tempo di scadenza (TTL)\n// SET chiave valore EX secondi\n// msg.payload = [\"SET\", \"nome-del-topic\", msg.payload, \"EX\", 3600]; // scade dopo 1 ora\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 720,
        "wires": [
            [
                "6cf576d7a9c1c2b0"
            ]
        ]
    },
    {
        "id": "974b465a0158cab4",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Football Tree by Claude",
        "func": "console.log(\"PLAYER BASIC ANALYSIS BEGINS\");\n\nconsole.log(\"DOMINANCE INFO IS MASTER TABLE\");\n\nflow.get(\"logmsg\").message = \"Player Basic Analysis and Tree Building Begins\";\nnode.log(flow.get(\"logmsg\"));\n\n/** IMPORTING ALL DATA **/\nconst _INFO = msg._INFO;\nconst _STATS = msg._STATS;\nconst _PLAYERS = msg._PLAYERS;\nconst _VOLATILITY = msg._VOLATILITY;\nconst _UNIQ = msg._UNIQ;\nconst _ROLES = msg._ROLES;\nconst _INFOIndex = msg._INFOIndex;\nconst _STATSIndex = msg._STATSIndex;\nconst _PLAYERSIndex = msg._PLAYERSIndex;\nconst _VOLATILITYIndex = msg._VOLATILITYIndex;\nconst _UNIQIndex = msg._UNIQIndex;\nconst _COUNTRIES = msg._COUNTRIES;\n\nconst _DATA = msg._DATA;\nconst _MINUTES = msg._MINUTES;\n\nconst Utils = global.get(\"UTILS\");\n\nconst Leagues = msg.Leagues;\nconst Clubs = msg.Clubs;\nconst LeaguesIndex = msg.LeaguesIndex;\nconst ClubsIndex = msg.ClubsIndex;\n\nconst errors = flow.get(\"errors\") || [];\n\n/** BUILD ASSOCIATIONS BETWEEN ROLE NAME, ROLE ID, GROUP AND ROLE WEIGHT **/\nconst getRoleIdFromRoleName = {};\nconst getRoleNameFromRoleId = {};\nconst getRoleGroupFromRoleId = {};\nconst getRoleGroupFromRoleName = {};\nconst getRoleWeightFromRoleGroup = {};\nconst getRoleRisFromRoleGroup = {};\nconst getRoleWeightFromRoleId = {};\n\ntry {\n    _ROLES.forEach(role => {\n        getRoleIdFromRoleName[role.ruolo] = role.idRuolo;\n        getRoleNameFromRoleId[role.idRuolo] = role.ruolo;\n        getRoleGroupFromRoleId[role.idRuolo] = role.gruppo;\n        getRoleGroupFromRoleName[role.ruolo] = role.gruppo;\n        getRoleWeightFromRoleGroup[role.gruppo] = role.peso;\n        getRoleRisFromRoleGroup[role.gruppo] = role.ruoloris;\n        getRoleWeightFromRoleId[role.idRuolo] = role.peso;\n    });\n} catch (e) {\n    console.log(\"Error building role associations:\", e);\n}\n\n/** IMPORT OBJECT DEFINITIONS **/\nconst Player = global.get(\"ThePlayerObject\");\nconst Error = global.get(\"TheErrorObject\");\nconst PlayerError = global.get(\"ThePlayerErrorObject\");\n\nlet TheFootballTree = {}; // This object will give the relationships between League -> Club -> Player as expressed in the INFO table\n\nlet PlayersWithErrors = []; // ARRAY CONTAINING DISCARDED PLAYERS\nlet PlayersErrors = []; // ARRAY WITH ALL ERRORS FOR REPORTING\n\n// For each run there is only one player in DOMINANCEPLAYERINFO and only one player is extracted from the allplayers table\n\n/**\n * NOT ALL PLAYERS IN INFO ARE PRESENT IN STATISTICS.\n * THEREFORE, WHEN PRESENT, WE ASSOCIATE TO THE PLAYER OBJECT ITS LAST DETECTED STATISTICS AND FOR SIMPLICITY\n * WE ADD TO THE PLAYER OBJECT THE MOST RECENT FINDINGS ON LEAGUE CLUSTER, LEAGUE WEIGHT, ROLE AND ROLE WEIGHT\n **/\nconst setLatestDetectedStats = function(player) {\n    player.avgPlayedMinuteShare = 0;\n    player.avgMicroIndex = 0;\n    player.avgMacroIndex = 0;\n    player.minutes = 0;\n    player.minutesShare = 0;\n    player.alert = 0;\n    player.latestDetectedMicroIndexInjury = 0;\n    player.latestDetectedMacroIndexInjury = 0;\n    \n    let mostTimeSpent = true;\n\n    let start = player.latestStats && player.latestStats.length > 0 ? player.latestStats[0] : null;\n    if (start) {\n        let latest = player.latestStats.reduce((next, stat) => {\n            let d1 = new Date(next.to);\n            let d2 = new Date(stat.to);\n            return (d2 > d1) ? stat : next;\n        }, start);\n        \n        player.latestDetectedLeagueCluster = latest.leagueCluster;\n        player.latestDetectedLeagueWeight = latest.leagueWeight;\n        player.latestDetectedRoleGroup = latest.roleGroup;\n        player.latestDetectedRoleWeight = latest.roleWeight;\n        player.latestDetectedMinutes = latest.minutes;\n        player.latestDetectedMicroIndex = latest.microIndex;\n        player.latestDetectedMacroIndex = latest.macroIndex;\n        player.latestDetectedMicroIndexInjury = latest.microIndexInjury || 0;\n        player.latestDetectedMacroIndexInjury = latest.macroIndexInjury || 0;\n        \n        player.latestDetectedMicroIndex = latest.microIndexInjury > 0 ? latest.microIndexInjury : player.latestDetectedMicroIndex;\n        player.latestDetectedMacroIndex = latest.macroIndexInjury > 0 ? latest.macroIndexInjury : player.latestDetectedMacroIndex;\n    }   \n    \n    // Calculate % of minutes played, weighted microindex\n    if (start) {\n        let avgMinShare = { count: 0, tot: 0 };\n        let weightedMicroindex = { count: 0, tot: 0, minutes: 0 };\n        let weightedMacroindex = { count: 0, tot: 0, minutes: 0 };\n\n        player.minutes = 0;\n        player.alert = 0;\n        \n        player.latestStats.forEach(stat => {\n            let d1 = new Date(stat.from);\n            let d2 = new Date(stat.to);\n            \n            stat.diffInWeeks = Math.round((d2 - d1) / 1000 / 60 / 60 / 24 / 7);\n            stat.minuteShare = ((38 / stat.diffInWeeks) * stat.minutes) / (38 * 90);\n            \n            avgMinShare.count++;\n            avgMinShare.tot = avgMinShare.tot + stat.minuteShare;\n            \n            weightedMicroindex.count++;\n            weightedMicroindex.minutes = weightedMicroindex.minutes + stat.minutes;\n            weightedMicroindex.tot = weightedMicroindex.tot + (stat.leagueWeight * (stat.microIndexInjury ? stat.microIndexInjury : stat.microIndex) * stat.minutes);\n            \n            weightedMacroindex.count++;\n            weightedMacroindex.minutes = weightedMacroindex.minutes + stat.minutes;\n            weightedMacroindex.tot = weightedMacroindex.tot + (stat.leagueWeight * (stat.macroIndexInjury ? stat.macroIndexInjury : stat.macroIndex) * stat.minutes);\n            \n            player.minutes = player.minutes + stat.minutes;\n            player.alert = player.alert + (stat.alert || 0);\n            \n            mostTimeSpent = stat.minutes > player.latestDetectedMinutes ? false : mostTimeSpent;\n        });\n        \n        player.avgPlayedMinuteShare = avgMinShare.count > 0 ? avgMinShare.tot / avgMinShare.count : 0;\n        \n        player.avgMicroIndex = (player.latestDetectedLeagueCluster === 1 && player.latestDetectedMinutes > 599 && mostTimeSpent) ? \n            player.latestDetectedMicroIndex : \n            (weightedMicroindex.minutes > 0 ? weightedMicroindex.tot / weightedMicroindex.minutes : 0);\n            \n        player.avgMacroIndex = weightedMacroindex.minutes > 0 ? weightedMacroindex.tot / weightedMacroindex.minutes : 0;\n        \n        // TOTAL MINUTES\n        player.minutes = Math.min(player.minutes, 5130);\n        player.minutesShare = player.minutes > 0 ? (player.minutes / 5130) * 100 : 0;\n    }\n};\n\n/**\n * NOT ALL PLAYERS IN INFO ARE PRESENT IN PARAMS.\n * THEREFORE, WHEN PRESENT, WE ASSOCIATE TO THE PLAYER OBJECT THE LAST PARAMS DETECTED AND FOR SIMPLICITY\n * WE ADD TO THE PLAYER OBJECT THE MOST RECENT FINDINGS ON UNIQUENESS AND VOLATILITY\n **/\nconst setLatestParams = function(player) {\n    let microv = { 'tot': 0, 'count': 0 };\n    let macrov = { 'tot': 0, 'count': 0 };\n    let uniq = { 'tot': 0, 'count': 0 };\n\n    if (player.latestParams && player.latestParams.length > 0) {\n        for (let i = 0; i < player.latestParams.length; i++) {\n            if (player.latestDetectedLeagueCluster === player.latestParams[i].clusterId && \n                player.latestDetectedRoleGroup === player.latestParams[i].group) {\n                \n                if (player.latestParams[i].microVolatility != null && !isNaN(player.latestParams[i].microVolatility)) {\n                    microv.tot = player.latestParams[i].microVolatility + microv.tot;\n                    microv.count++;\n                }\n                \n                if (player.latestParams[i].macroVolatility != null && !isNaN(player.latestParams[i].macroVolatility)) {\n                    macrov.tot = player.latestParams[i].macroVolatility + macrov.tot;\n                    macrov.count++;\n                }\n                \n                if (player.latestParams[i].uniqueness != null && !isNaN(player.latestParams[i].uniqueness)) {\n                    uniq.tot = player.latestParams[i].uniqueness + uniq.tot;\n                    uniq.count++;\n                }\n            }\n        }\n    }\n    \n    player.latestMicroVolatility = microv.count > 0 ? (microv.tot / microv.count) : 0;\n    player.latestMacroVolatility = macrov.count > 0 ? (macrov.tot / macrov.count) : 0;\n    player.latestUniqueness = uniq.count > 0 ? (uniq.tot / uniq.count) : 0;\n};\n\n// DUPLICATE FILTERING\nconsole.log(\"Duplicate Filtering\");\n\nlet InfoPlayerIndex = {};\nlet dup = 0;\ntry {\n    for (let pos = 0; pos < _INFO.length; pos++) {\n        if (_INFO[pos].leagueId && !isNaN(LeaguesIndex[_INFO[pos].leagueId])) { // Only records with a valid ID\n            if (InfoPlayerIndex[_INFO[pos].playerId] === undefined) {\n                InfoPlayerIndex[_INFO[pos].playerId] = pos;\n            } else {\n                dup++;\n                let prevPlayer = _INFO[InfoPlayerIndex[_INFO[pos].playerId]];\n                let currPlayer = _INFO[pos];\n                \n                let prevPlayerCluster = LeaguesIndex[prevPlayer.leagueId] ? LeaguesIndex[prevPlayer.leagueId].cluster : 99;\n                let currPlayerCluster = LeaguesIndex[currPlayer.leagueId] ? LeaguesIndex[currPlayer.leagueId].cluster : 99;\n                \n                // Find the most recent statistic\n                let statArray = [];\n                \n                for (let statPos = 0; statPos < _STATS.length; statPos++) {\n                    if (_STATS[statPos].playerId === _INFO[pos].playerId) {\n                        statArray.push(_STATS[statPos]);\n                    }\n                }\n                \n                if (statArray.length > 0) { // Found statistics\n                    let start = statArray[0];\n    \n                    let latest = statArray.reduce((next, stat) => { // Find the most recent\n                        let d1 = new Date(next.to);\n                        let d2 = new Date(stat.to);\n                        return (d2 > d1) ? stat : next;\n                    }, start);\n                    \n                    let highestClusterStat = statArray.reduce((next, stat) => {\n                        let d1 = next.clusterId;\n                        let d2 = stat.clusterId;\n                        return (d2 > d1) ? stat : next;  \n                    }, start);\n                    \n                    let lowestClusterStat = statArray.reduce((next, stat) => {\n                        let d1 = next.clusterId;\n                        let d2 = stat.clusterId;\n                        return (d2 < d1) ? stat : next;  \n                    }, start);\n                    \n                    if (highestClusterStat.minutes >= 600) { // If the player has played at least 600 minutes in the team with the highest cluster\n                        prevPlayer.duplicate = prevPlayerCluster !== highestClusterStat.clusterId;\n                        currPlayer.duplicate = currPlayerCluster !== highestClusterStat.clusterId;\n                    } else if (highestClusterStat.minutes < 600) {\n                        prevPlayer.duplicate = prevPlayerCluster !== lowestClusterStat.clusterId;\n                        currPlayer.duplicate = currPlayerCluster !== lowestClusterStat.clusterId;\n                    } else {  // Otherwise assign the most recent\n                        prevPlayer.duplicate = prevPlayerCluster !== latest.clusterId;\n                        currPlayer.duplicate = currPlayerCluster !== latest.clusterId;\n                    }\n                    \n                    // Handle cases where both are marked the same\n                    if (prevPlayer.duplicate === currPlayer.duplicate) {\n                        // If both are true or both are false, assign based on cluster priority\n                        prevPlayer.duplicate = prevPlayerCluster > currPlayerCluster;\n                        currPlayer.duplicate = prevPlayerCluster <= currPlayerCluster;\n                        \n                        if (prevPlayerCluster === currPlayerCluster) {\n                            // In case of a tie, mark the previous as duplicate (arbitrary decision)\n                            prevPlayer.duplicate = true;\n                            currPlayer.duplicate = false;\n                        }\n                    }\n                } else { // NO STATISTICS\n                    // Assign based on cluster priority\n                    prevPlayer.duplicate = prevPlayerCluster > currPlayerCluster;\n                    currPlayer.duplicate = prevPlayerCluster <= currPlayerCluster;\n                    \n                    if (prevPlayerCluster === currPlayerCluster) {\n                        // In case of a tie, mark the previous as duplicate (arbitrary decision)\n                        prevPlayer.duplicate = true;\n                        currPlayer.duplicate = false;\n                    }\n                }\n            }\n        }\n    }\n} catch (e) {\n    console.log(\"Error in duplicate filtering:\", e);\n}\nconsole.log(\"Found \" + dup + \" duplicates\");\n\nvar start = new Date(); \nconsole.log(\"Loop Begins at \" + start);\n\n// Initialize players by group object\nconst playersByGroup = {};\n\n_INFO.forEach(p => {\n    try {\n        // PLAYER ANAGRAPHIC DATA FROM PLAYER TABLE\n        let player = new Player(p.playerId, p.firstName, p.lastName);\n    \n        player._id = player.playerId; // FOR MONGO DB\n        player.week = p.week;\n        player.year = new Date().getFullYear(); // Could be a problem in the first days of the new year\n    \n        player.Errors = []; // ERRORS THAT MAKE PROCESSING IMPOSSIBLE. IF PRESENT, THE PLAYER MUST BE DISCARDED\n        player.Warnings = []; // NON-BLOCKING ERRORS FOR PROCESSING. THE PLAYER IS NOT DISCARDED.\n        player.Alerts = []; // STATISTICAL CHECKS ON DATA\n    \n        player.name = p.player;\n        \n        /**\n         * LOOK FOR THE PLAYER AMONG THOSE REGISTERED BY STANDARD FOOTBALL AND ENRICH THE OBJECT\n         **/\n        let SFPlayer = _PLAYERSIndex[player.playerId] !== undefined ? _PLAYERS[_PLAYERSIndex[player.playerId]] : null;\n        \n        if (!SFPlayer) {\n            let e = new PlayerError(\"ERROR\", \"ERR-STDPLAYER\", \"Player Missing\", player, \"Can't find the player in Standard Football registry\");\n            PlayersErrors.push(e);\n            player.Errors.push(e);\n        }\n        \n        if (SFPlayer) {\n            player.shortFirstName = SFPlayer.shortFirstName;\n            player.shortLastName = SFPlayer.shortLastName;\n            player.knownName = SFPlayer.knownName;\n            player.roleId = SFPlayer.roleId;\n        }\n        \n        // Properly handle birth date logic with null checks\n        if (p.birthDate && !p.birthDate.toString().includes(\"1970\")) {\n            player.birthDate = new Date(p.birthDate);\n        } else if (SFPlayer && SFPlayer.birthDate) {\n            player.birthDate = new Date(SFPlayer.birthDate);\n        } else {\n            player.birthDate = new Date(\"01/01/1995\");\n        }\n\n        player.age = player.birthDate ? parseInt(Utils.calculateAge(player.birthDate)) : null;\n        \n        player.months = player.birthDate ? Math.abs(Utils.diffInMonths(player.birthDate, new Date()) % 12) : 0;\n        player.ageWithDecimals = player.birthDate ? parseInt(Utils.calculateAgeWithDecimals(player.birthDate)) : null;\n        \n        player.currentPosition = p.position;\n        // CURRENT TEAM AS FROM INFO TABLE\n        player.currentRole = !p.role || p.role === \"null\" ? p.position : p.role;\n        player.currentRole2 = p.role2;\n\n        player.currentClubId = p.teamId;\n        player.currentClubName = p.teamName;\n        \n        player.currentLeagueId = p.leagueId;\n        player.currentLeagueName = p.leagueName;\n\n        player.nationalTeamPlayer = p.nationalAppearances > 4;\n        \n        // Safely handle data retrieval with proper defaults\n        const minutesData = _MINUTES.filter(d => d.playerId === player.playerId);\n        player.minutesLastSeason = minutesData.length > 0 ? minutesData[0].minutes : 0;\n        \n        const playerData = _DATA.filter(d => d.playerId === player.playerId);\n        player.goal = playerData.length > 0 ? (playerData[0].goal || 0) : 0;\n        player.assist = playerData.length > 0 ? (playerData[0].assist || 0) : 0;\n        player.preassist = playerData.length > 0 ? (playerData[0].preassist || 0) : 0;\n        \n        // FIND CLUB AND LEAGUE\n        let Club = ClubsIndex[player.currentClubId] !== undefined ? Clubs[ClubsIndex[player.currentClubId]] : null;\n        let League = LeaguesIndex[player.currentLeagueId] !== undefined ? Leagues[LeaguesIndex[player.currentLeagueId]] : null;\n        \n        // ERRORS\n        if (!player.birthDate) {\n            let e = new PlayerError(\"ERROR\", \"ERR-BD\", \"BirthDate Missing\", player, \"From Info birthdate: \" + p.birthDate);\n            PlayersErrors.push(e);\n            player.Errors.push(e);\n        }\n  \n        if (p.birthDate && !player.birthDate) {\n            let e = new PlayerError(\"ERROR\", \"ERR-BDPARSE\", \"Cannot parse BirthDate\", player, \"From Info birthdate: \" + p.birthDate);\n            PlayersErrors.push(e);\n            player.Errors.push(e);\n        }\n        \n        if (isNaN(player.age)) {\n            let e = new PlayerError(\"ERROR\", \"ERR-AGE\", \"Cannot parse age\", player, \"Age: \" + p.age);\n            PlayersErrors.push(e);\n            player.Errors.push(e);\n        }\n        \n        if (!Club) {\n            let e = new PlayerError(\"ERROR\", \"ERR-CLUB\", \"Club Missing\", player, \"Can't find club for the given id\");\n            PlayersErrors.push(e);\n            player.Errors.push(e);\n        }\n            \n        if (!League) {\n            let e = new PlayerError(\"ERROR\", \"ERR-LEAGUE\", \"League Missing\", player, \"Can't find league for the given id\");\n            PlayersErrors.push(e);\n            player.Errors.push(e);\n        }    \n            \n        if (p.duplicate) {\n            let e = new PlayerError(\"ERROR\", \"ERR-INFO\", \"Duplicate Player\", player, \"A player with same ID already exists, this player will be discarded\");\n            PlayersErrors.push(e);\n            player.Errors.push(e);\n        }\n         \n        if (SFPlayer && player.currentClubId !== SFPlayer.clubId) {\n            let e = new PlayerError(\"WARNING\", \"WARN-CLUBMISMATCH\", \"Club in info differs from club in SF\", player, \"\" + SFPlayer.clubName + \" | \" + SFPlayer.clubId);\n            PlayersErrors.push(e);\n            player.Warnings.push(e); // This is a warning.\n        }\n        \n        /**\n        * CHECKPOINT\n        * Errors so far indicate problems in the player structure (age, club, league, and data in our player table)\n        * All errors are BLOCKING and therefore if present we interrupt the execution.\n        **/\n        if (player.Errors.length > 0) {\n            PlayersWithErrors.push(player);\n            return; // Interrupt execution and move to next player\n        } \n       \n        if (Club && League) {\n            Club.leagueId = League.leagueId;\n        }\n       \n        // MASTER CLUB\n        player.masterClubId = SFPlayer ? SFPlayer.masterClubId : null;\n        let MasterClub = player.masterClubId && ClubsIndex[player.masterClubId] !== undefined ? \n            Clubs[ClubsIndex[player.masterClubId]] : null;\n\n        if (!MasterClub && player.masterClubId) {\n            let e = new PlayerError(\"WARNING\", \"WARN-MASTERCLUB\", \"Master Club Missing\", player, \"Can't find club for the given id\");\n            PlayersErrors.push(e);\n            player.Warnings.push(e); // This is a warning.\n        }\n        \n        if (League) {\n            /** LATEST */\n            player.currentLeagueCluster = League.cluster;\n            player.currentLeagueWeight = League.weight;\n            player.currentLeagueTaxRate = League.taxRate;\n            player.currentLeagueCountry = League.country;\n            player.currentLeagueCountryCode = League.countryCode;\n            player.currentLeagueNameExtended = League.name + \"(\" + League.countryCode + \")\";\n        }\n\n        if (Club) {\n            player.currentClubCluster = Club.cluster;\n            player.currentClubRank = Club.clubRank;\n            player.currentClubShortName = Club.shortName;\n        }\n\n        // Safely handle nationality logic\n        if (SFPlayer && SFPlayer.nationality) {\n            let nArr = SFPlayer.nationality.split(\",\");\n            \n            player.nationality = nArr && nArr[0] ? nArr[0].trim() : \"\";\n            player.nationality2 = nArr && nArr[1] ? nArr[1].trim() : \"\";\n            \n            if (!player.nationality || player.nationality.length < 2) {\n                let e = new PlayerError(\"WARNING\", \"WARN-NATIONALITY\", \"Nationality missing\", player, null);\n                PlayersErrors.push(e);\n                player.Warnings.push(e); // This is a warning.\n            } else {\n                // Find nationality code safely\n                const nationalityData = _COUNTRIES.filter(c => c.tm === player.nationality || c.tm2 === player.nationality);\n                player.nationalityCode = nationalityData.length > 0 ? nationalityData[0].countryCode : \"\";\n                \n                const nationality2Data = _COUNTRIES.filter(c => c.tm === player.nationality2 || c.tm2 === player.nationality2);\n                player.nationality2Code = nationality2Data.length > 0 ? nationality2Data[0].countryCode : \"\";\n            }\n        } else {\n            player.nationality = \"\";\n            player.nationality2 = \"\";\n            player.nationalityCode = \"\";\n            player.nationality2Code = \"\";\n        }\n\n        // ECONOMIC DATA COMING FROM PLAYER\n        if (SFPlayer) {\n            player.contractType = SFPlayer.contractType;\n            player.salaryNet = SFPlayer.salary;\n            player.salaryGross = SFPlayer.salaryGross ? SFPlayer.salaryGross : \n                player.salaryNet * (League && League.taxRate ? League.taxRate : 1.825);\n            \n            // Safely handle contract dates\n            try {\n                player.startContract = SFPlayer.startContract ? new Date(SFPlayer.startContract) : new Date(\"07/01/2022\");\n                player.endContract = SFPlayer.endContract ? new Date(SFPlayer.endContract) : new Date(\"06/30/2024\");\n                \n                // Validate dates are valid\n                if (isNaN(player.startContract.getTime())) {\n                    player.startContract = new Date(\"07/01/2022\");\n                }\n                if (isNaN(player.endContract.getTime())) {\n                    player.endContract = new Date(\"06/30/2024\");\n                }\n            } catch (e) {\n                console.log(\"Error parsing contract dates for player\", player.playerId, e);\n                player.startContract = new Date(\"07/01/2022\");\n                player.endContract = new Date(\"06/30/2024\");\n            }\n            \n            player.remainingYearsOfContract = Utils.ryc(player.endContract);\n            player.remainingMonthsOfContract = Utils.diffInMonths(player.endContract, new Date());\n            \n            player.remainingYearsOfContract = player.remainingMonthsOfContract < 6 ? 0 : player.remainingYearsOfContract;\n            \n            player.totalYearsOfContract = Utils.tyc(player.startContract, player.endContract);\n            player.totalMonthsOfContract = Utils.diffInMonths(player.endContract, player.startContract);\n\n            player.transferPrice = SFPlayer.transferPrice != null ? SFPlayer.transferPrice : 0;\n            player.transferPriceYear = SFPlayer.transferPriceYear != null ? SFPlayer.transferPriceYear : 0;\n            player.tmValue = SFPlayer.tmValue != null ? SFPlayer.tmValue : 0;\n            player.percTransfPrice = SFPlayer.percTransfPrice;\n            player.withdrawalClause = SFPlayer.withdrawalClause;\n            \n            // EXPERIENCE\n            player.experience = SFPlayer.experience ? SFPlayer.experience : 0;\n            \n            // Master club contract dates\n            try {\n                player.masterClubStartContract = SFPlayer.masterClubStartContract ? \n                    new Date(SFPlayer.masterClubStartContract) : new Date(\"07/01/2022\");\n                    \n                player.masterClubEndContract = SFPlayer.masterClubEndContract ? \n                    new Date(SFPlayer.masterClubEndContract) : new Date(\"06/30/2024\");\n                \n                // Validate dates are valid\n                if (isNaN(player.masterClubStartContract.getTime())) {\n                    player.masterClubStartContract = new Date(\"07/01/2022\");\n                }\n                if (isNaN(player.masterClubEndContract.getTime())) {\n                    player.masterClubEndContract = new Date(\"06/30/2024\");\n                }\n            } catch (e) {\n                console.log(\"Error parsing master club contract dates for player\", player.playerId, e);\n                player.masterClubStartContract = new Date(\"07/01/2022\");\n                player.masterClubEndContract = new Date(\"06/30/2024\");\n            }\n            \n            player.remainingYearsOfMasterClubContract = Utils.ryc(player.masterClubEndContract);\n            player.remainingMonthsOfMasterClubContract = Utils.diffInMonths(player.masterClubEndContract, new Date());\n            \n            player.remainingYearsOfMasterClubContract = player.remainingMonthsOfMasterClubContract < 6 ? \n                0 : player.remainingYearsOfMasterClubContract;\n            \n            player.totalYearsOfMasterClubContract = Utils.tyc(player.masterClubStartContract, player.masterClubEndContract);\n            player.totalMonthsOfMasterClubContract = Utils.diffInMonths(player.masterClubEndContract, player.masterClubStartContract);\n            \n            player.height = SFPlayer.height;\n            player.foot = SFPlayer.foot;\n            player.highestPrice = SFPlayer.highestPrice;\n            player.agent = SFPlayer.agent;\n            player.instagram = SFPlayer.instagram;\n            player.sponsor = SFPlayer.sponsor;\n            player.number = SFPlayer.number ? SFPlayer.number : 0;\n        }\n        \n        // Check STANDARD FOOTBALL DATA\n        if (player.salaryNet == null) {\n            let e = new PlayerError(\"ERROR\", \"ERR-salaryNet\", \"Salary Missing\", player, null);\n            PlayersErrors.push(e);\n            player.Errors.push(e);\n        }\n        \n        if (!player.startContract) {\n            let e = new PlayerError(\"ERROR\", \"ERR-STARTCONTRACT\", \"Start Contract Date Missing\", player, null);\n            PlayersErrors.push(e);\n            player.Errors.push(e);\n        }\n        \n        if (!player.endContract) {\n            let e = new PlayerError(\"ERROR\", \"ERR-ENDCONTRACT\", \"End Contract Date Missing\", player, null);\n            PlayersErrors.push(e);\n            player.Errors.push(e);\n        }\n        \n        if (isNaN(player.remainingYearsOfContract) || player.remainingYearsOfContract == null) {\n            let e = new PlayerError(\"ERROR\", \"ERR-RYOC\", \"Cannot calculate RYOC\", player, null);\n            PlayersErrors.push(e);\n            player.Errors.push(e);\n        }\n        \n        if (isNaN(player.totalYearsOfContract) || player.totalYearsOfContract == null) {\n            let e = new PlayerError(\"ERROR\", \"ERR-TYOC\", \"Cannot calculate TYOC\", player, null);\n            PlayersErrors.push(e);\n            player.Errors.push(e);\n        }\n        \n        if (isNaN(player.remainingMonthsOfContract) || player.remainingMonthsOfContract == null) {\n            let e = new PlayerError(\"ERROR\", \"ERR-RMOC\", \"Cannot calculate RMOC\", player, null);\n            PlayersErrors.push(e);\n            player.Errors.push(e);\n        }\n        \n        if (isNaN(player.totalMonthsOfContract) || player.totalMonthsOfContract == null) {\n            let e = new PlayerError(\"ERROR\", \"ERR-TMOC\", \"Cannot calculate TMOC\", player, null);\n            PlayersErrors.push(e);\n            player.Errors.push(e);\n        }\n        \n        if (!player.contractType) {\n            let e = new PlayerError(\"WARNING\", \"WARN-CONTRACTTYPE\", \"Contract type missing\", player, null);\n            PlayersErrors.push(e);\n            player.Warnings.push(e); // This is a warning.\n        }\n        \n        if (player.currentClubId === player.masterClubId && player.contractType && !player.contractType.includes(\"Propriet\")) {\n            let e = new PlayerError(\"WARNING\", \"WARN-CONTRACTTYPE\", \"Invalid contract type\", player, \"Contract type is: \" + player.contractType + \" but Current Club and Master Club are the same\");\n            PlayersErrors.push(e);\n            player.Warnings.push(e); // This is a warning.\n        }  \n        \n        if (player.remainingYearsOfContract === 0) {\n            let e = new PlayerError(\"WARNING\", \"WARN-RYOC\", \"Contract Expired\", player, \"End Contract is: \" + player.endContract);\n            PlayersErrors.push(e);\n            player.Warnings.push(e); // This is a warning.\n        }\n        \n        /**\n        * CHECKPOINT 2\n        * Errors so far indicate problems in the data in the STANDARD FOOTBALL player table\n        * All errors are BLOCKING and therefore if present we interrupt the execution.\n        **/\n        if (player.Errors.length > 0) {\n            PlayersWithErrors.push(player);\n            return; // Interrupt execution and move to next player\n        }\n        \n        // ADDING DATA FROM STATS\n        player.latestStats = []; // COULD REMAIN EMPTY => PARAMETERS DERIVED FROM THESE STATISTICS MUST HAVE A DEFAULT VALUE\n        \n        let playerStatsIndex = _STATSIndex ? _STATSIndex[player.playerId] : null;\n        \n        if (playerStatsIndex && playerStatsIndex !== undefined && playerStatsIndex.length > 0) {\n            for (let i = 0; i < playerStatsIndex.length; i++) {\n                player.latestStats[i] = _STATS[playerStatsIndex[i]];\n            }\n        }    \n        \n        setLatestDetectedStats(player);\n        \n        // Safely handle role information with proper defaults and null checks\n        player.latestRoleGroup = player.latestDetectedRoleGroup || \n            (player.currentPosition && getRoleGroupFromRoleName[player.currentPosition]);\n        \n        player.latestRoleWeight = getRoleWeightFromRoleId[player.roleId] || \n            player.latestDetectedRoleWeight || \n            (player.latestRoleGroup && getRoleWeightFromRoleGroup[player.latestRoleGroup]);\n        \n        player.latestLeagueCluster = player.latestDetectedLeagueCluster || player.currentLeagueCluster;\n        player.latestRoleRis = player.latestRoleGroup ? getRoleRisFromRoleGroup[player.latestRoleGroup] : null;\n\n        player.latestMicroIndexInjury = player.latestDetectedMicroIndexInjury || 0;\n        player.latestMacroIndexInjury = player.latestDetectedMacroIndexInjury || 0;\n        \n        if (!player.latestRoleGroup) {\n            let e = new PlayerError(\"ERROR\", \"ERR-ROLE\", \"Role Group Missing\", player, \"Player position is \" + player.currentPosition);\n            PlayersErrors.push(e);\n            player.Errors.push(e);\n        } \n        \n        if (player.latestRoleGroup && !player.latestRoleWeight) {\n            let e = new PlayerError(\"ERROR\", \"WARN-ROLE\", \"Role Weight Missing\", player, \"Player position is \" + player.currentPosition);\n            PlayersErrors.push(e);\n            player.Errors.push(e);\n        } \n        \n        // ADDING PERFORMANCE STATISTICAL PARAMS\n        player.latestParams = [];\n        \n        let volIndex = _VOLATILITYIndex ? _VOLATILITYIndex[player.playerId] : null;\n        \n        if (volIndex && volIndex.length > 0) {\n            for (let i = 0; i < volIndex.length; i++) {\n                player.latestParams.push(_VOLATILITY[volIndex[i]]);\n            }\n        }\n        \n        let uniqIndex = _UNIQIndex ? _UNIQIndex[player.playerId] : null;\n        \n        if (uniqIndex && uniqIndex.length > 0) {\n            for (let i = 0; i < uniqIndex.length; i++) {\n                player.latestParams.push(_UNIQ[uniqIndex[i]]);\n            }\n        }\n        \n        /** LATEST PARAMS FROM PARAMS */\n        player.latestUniqueness = 0; // default\n        player.latestMicroVolatility = 25; // default\n        player.latestMacroVolatility = 25; // default\n        \n        setLatestParams(player); // Given that we have matching stats\n        \n        // SUPERSTAR\n        player.superStar = SFPlayer && SFPlayer.superStar === 1;\n        \n        // THE FOOTBALL TREE - Initialize objects safely with proper checks\n        if (!TheFootballTree[League.leagueId]) {\n            TheFootballTree[League.leagueId] = League;\n        }\n        \n        if (!TheFootballTree[League.leagueId].Clubs) {\n            TheFootballTree[League.leagueId].Clubs = {};\n        }\n        \n        if (!TheFootballTree[League.leagueId].Clubs[Club.clubId]) {\n            TheFootballTree[League.leagueId].Clubs[Club.clubId] = Club;\n            // Initialize player containers\n            TheFootballTree[League.leagueId].Clubs[Club.clubId].Players = {};\n            TheFootballTree[League.leagueId].Clubs[Club.clubId].BorrowedPlayers = {};\n            TheFootballTree[League.leagueId].Clubs[Club.clubId].LoanedPlayers = {};\n            TheFootballTree[League.leagueId].Clubs[Club.clubId].numOfBorrowedPlayers = 0;\n            TheFootballTree[League.leagueId].Clubs[Club.clubId].numOfLoanedPlayers = 0;\n            TheFootballTree[League.leagueId].Clubs[Club.clubId].numOfForeignPlayers = 0;\n        }\n        \n        TheFootballTree[League.leagueId].Clubs[Club.clubId].Players[player.playerId] = player;\n        \n        // Redundant Country info\n        TheFootballTree[League.leagueId].Clubs[Club.clubId].country = TheFootballTree[League.leagueId].country;\n        TheFootballTree[League.leagueId].Clubs[Club.clubId].countryCode = TheFootballTree[League.leagueId].countryCode;\n        \n        // Track players by group for potential stats\n        if (player.latestRoleGroup) {\n            if (!playersByGroup[player.latestRoleGroup]) {\n                playersByGroup[player.latestRoleGroup] = [];\n            }\n            playersByGroup[player.latestRoleGroup].push(player.playerId);\n        }\n        \n    } catch (e) {\n        console.log(\"Error processing player:\", e);\n    }\n});\n\nconsole.log(\"Setting Masters\");\n\n// Set master club information for all players\nObject.keys(TheFootballTree).forEach(leagueId => {\n    Object.keys(TheFootballTree[leagueId].Clubs).forEach(clubId => { \n        Object.keys(TheFootballTree[leagueId].Clubs[clubId].Players).forEach(playerId => { \n            let player = TheFootballTree[leagueId].Clubs[clubId].Players[playerId];\n            \n            if (player.masterClubId) {\n                let MasterClub = ClubsIndex[player.masterClubId] !== undefined ? Clubs[ClubsIndex[player.masterClubId]] : null;\n                let MasterLeague = MasterClub && LeaguesIndex[MasterClub.leagueId] !== undefined ? \n                    Leagues[LeaguesIndex[MasterClub.leagueId]] : null;\n            \n                player.masterClubName = MasterClub ? MasterClub.name : null;\n                player.masterClubShortName = MasterClub ? MasterClub.shortName : \"\";\n                player.masterLeagueName = MasterClub && MasterLeague ? MasterLeague.name : null;\n                player.masterLeagueId = MasterClub && MasterLeague ? MasterLeague.leagueId : null;\n            }\n        });\n    });\n});\n\nconsole.log(\"Setting borrowed and loaned\");\n\n// Set borrowed and loaned player relationships\nObject.keys(TheFootballTree).forEach(leagueId => {\n    Object.keys(TheFootballTree[leagueId].Clubs).forEach(clubId => { \n        Object.keys(TheFootballTree[leagueId].Clubs[clubId].Players).forEach(playerId => { \n            let player = TheFootballTree[leagueId].Clubs[clubId].Players[playerId];\n            \n            if (player.currentClubId !== player.masterClubId && player.masterClubId) {\n                // BORROWED - Player is at current club but owned by another\n                if (TheFootballTree[player.currentLeagueId] && \n                    TheFootballTree[player.currentLeagueId].Clubs[player.currentClubId]) {\n                    \n                    TheFootballTree[player.currentLeagueId].Clubs[player.currentClubId].BorrowedPlayers[player.playerId] = player;\n                    TheFootballTree[player.currentLeagueId].Clubs[player.currentClubId].numOfBorrowedPlayers++;\n                }\n                \n                // LOANED - Player is owned by master club but playing elsewhere\n                if (player.masterLeagueId && \n                    TheFootballTree[player.masterLeagueId] && \n                    TheFootballTree[player.masterLeagueId].Clubs[player.masterClubId]) {\n                    \n                    TheFootballTree[player.masterLeagueId].Clubs[player.masterClubId].LoanedPlayers[player.playerId] = player;\n                    TheFootballTree[player.masterLeagueId].Clubs[player.masterClubId].numOfLoanedPlayers++;\n                }\n            }\n        });\n    });\n});\n\n// Initialize foreign player counts at league level\nObject.keys(TheFootballTree).forEach(leagueId => {\n    TheFootballTree[leagueId].numOfForeignPlayers = 0;\n});\n\n// Track foreign players (current country different from nationality)\nObject.keys(TheFootballTree).forEach(leagueId => {\n    Object.keys(TheFootballTree[leagueId].Clubs).forEach(clubId => { \n        Object.keys(TheFootballTree[leagueId].Clubs[clubId].Players).forEach(playerId => { \n            let player = TheFootballTree[leagueId].Clubs[clubId].Players[playerId];\n            \n            if (player.currentLeagueCountry && player.nationality && \n                player.currentLeagueCountry !== player.nationality) {\n                TheFootballTree[leagueId].Clubs[clubId].numOfForeignPlayers++;\n                TheFootballTree[leagueId].numOfForeignPlayers++;\n            }\n        });\n    });\n});\n\n// Convert objects to arrays for iteration\nconsole.log(\"Converting from obj to iterable\");\n\nObject.keys(TheFootballTree).forEach(leagueId => {\n    Object.keys(TheFootballTree[leagueId].Clubs).forEach(clubId => { \n        TheFootballTree[leagueId].Clubs[clubId].Players = Object.values(TheFootballTree[leagueId].Clubs[clubId].Players);\n        TheFootballTree[leagueId].Clubs[clubId].LoanedPlayers = Object.values(TheFootballTree[leagueId].Clubs[clubId].LoanedPlayers);\n        TheFootballTree[leagueId].Clubs[clubId].BorrowedPlayers = Object.values(TheFootballTree[leagueId].Clubs[clubId].BorrowedPlayers); \n    });\n    \n    TheFootballTree[leagueId].Clubs = Object.values(TheFootballTree[leagueId].Clubs);\n});\n\nvar end = new Date();\nconsole.log(\"Loop Ends at \" + end);\n\nlet numOfValidPlayers = _INFO.length - PlayersWithErrors.length;\n\nconsole.log(\"Valid Players: \" + numOfValidPlayers);\nconsole.log(\"Invalid Players: \" + PlayersWithErrors.length);\n\nmsg.payload = TheFootballTree;\n\nconsole.log(\"*** PLAYERS BASIC ANALYSIS COMPLETED ***\");\n\nflow.get(\"logmsg\").message = \"Valid Players: \" + numOfValidPlayers;\nnode.log(flow.get(\"logmsg\"));\nflow.get(\"logmsg\").message = \"Invalid Players: \" + PlayersWithErrors.length;\nnode.log(flow.get(\"logmsg\"));\n\n// CLEANING MEMORY - Use a more efficient approach\nconsole.log(\"CLEANING MEMORY\");\nflow.get(\"logmsg\").message = \"CLEANING MEMORY\";\nnode.log(flow.get(\"logmsg\"));\n\nif (typeof v8 !== 'undefined') {\n    console.log(`V8 Total Heap Size: ${(v8.getHeapStatistics().total_available_size / 1024 / 1024).toFixed(2)} MB`);\n}\n\n// Clear flow variables that are no longer needed\nconst flowVarsToNull = [\n    \"_CLUBS\", \"_COUNTRIES\", \"_DATA\", \"_INFO\", \"_LEAGUES\", \n    \"_MINUTES\", \"_PLAYERS\", \"_ROLES\", \"_STATS\", \"_UNIQ\", \n    \"_VOLATILY\", \"errors\"\n];\n\nfor (const varName of flowVarsToNull) {\n    flow.set(varName, null);\n}\n\nconsole.log(\"Memory cleaned\");\nif (typeof v8 !== 'undefined') {\n    console.log(`V8 Total Heap Size: ${(v8.getHeapStatistics().total_available_size / 1024 / 1024).toFixed(2)} MB`);\n}\n\nflow.get(\"logmsg\").message = \"MEMORY CLEANED\";\nnode.log(flow.get(\"logmsg\"));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 1160,
        "wires": [
            []
        ]
    },
    {
        "id": "4c7354af84925b0d",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Valori di performance by Claude",
        "func": "console.log(\"PLAYER ECONOMIC ANALYSIS BEGINS\");\n\nconsole.log(\"msg._SPECIALTIES\",msg._SPECIALTIES )\nconsole.log(\"msg._SPECIALTIESIndex\",msg._SPECIALTIESIndex )\n\nlet TheFootballTree = msg.TheFootballTree;\n\nconsole.log(\"CALCULATING PERFORMANCE VALUES\");\nflow.get(\"logmsg\").message = \"CALCULATING PERFORMANCE VALUES\"\nnode.log(flow.get(\"logmsg\"))\n\nlet maxAbsind = 0; // Used in fatmol calculation\nlet maxMinutes = 0; // Used in performance calculation\nlet totFatmol = 0; // Used in effectiveness calculation\nlet maxFatmol = 0; // Used in effectiveness calculation\nlet numOfValidPlayers = 0;\nlet playersByGroupAndCluster = {}; // Initialize here so it's available throughout the code\n\n\ntry {\n    // Costruiamo una mappa per accesso rapido ai dati aggregati\n    const sumsMap = {};\n    msg.payload.forEach(p => {\n        sumsMap[p.playerId] = {\n            sum_avgMicroIndex: p.sum_avgMicroIndex,\n            sum_avgMacroIndex: p.sum_avgMacroIndex\n        };\n    });\n\n    Object.keys(msg.TheFootballTree).forEach(leagueId => {\n        msg.TheFootballTree[leagueId].Clubs.forEach(club => { \n            club.Players.forEach(player => {\n                // Backup degli attuali valori\n                player.currentAvgMicroIndex = player.avgMicroIndex;\n                player.currentAvgMacroIndex = player.avgMacroIndex;\n\n                // Trova i dati aggregati da msg.payload\n                const sums = sumsMap[player.playerId];\n                if (sums) {\n                    // Applica la formula\n                    player.avgMicroIndex = (player.avgMicroIndex / 3) + (sums.sum_avgMicroIndex/3);\n                    player.avgMacroIndex = (player.avgMacroIndex / 3) + (sums.sum_avgMacroIndex/3);\n                } else {\n                    // Se non trova corrispondenza, lascia invariato o gestisci come preferisci\n                    //console.log(`Nessun dato aggregato per playerId: ${player.playerId}`);\n                }\n            });\n        });\n    });\n} catch (e) {\n    console.log(\"Errore durante l'elaborazione degli indici:\", e);\n}\n\nmsg.payload=null; //svuotiamo la memoria\n\n\ntry {\n    console.log(\"Calculating maxMinutes\");\n    Object.keys(msg.TheFootballTree).forEach(leagueId => {\n        msg.TheFootballTree[leagueId].Clubs.forEach(club => { \n            club.Players.forEach(player => {\n                maxMinutes = player.minutes > maxMinutes ? player.minutes : maxMinutes;\n            });\n        });\n    });\n    \n    console.log(\"maxMinutes: \" + maxMinutes);\n    \n    // Override with standard seasonal maximum (90 min * 38 matches * 1.5 to account for extra time)\n    maxMinutes = 5130;\n    \n    console.log(\"Calculating Performance, Absind, Rising Star, MAXABSIND\");\n    Object.keys(msg.TheFootballTree).forEach(leagueId => {\n        msg.TheFootballTree[leagueId].Clubs.forEach(club => { \n            club.Players.forEach(player => {\n                // Calculate minute share as percentage of maximum possible minutes\n                let minuteShare = ((player.minutes || 0) / maxMinutes) * 100;\n                \n                // Define age threshold - use 23 as default unless simulating\n                let ageThreshold = player.simulating === true ? 16 : 23;\n                \n                // Create a mixed index with 90% micro and 10% macro\n                let mixedMicroMacroIndex = (player.avgMicroIndex || 0) * 0.9 + (player.avgMacroIndex || 0) * 0.1;\n                \n                // Initialize performance with raw mixed index\n                player.performance = mixedMicroMacroIndex;\n                \n                // Different calculation based on player age\n                if ((player.age || 0) >= ageThreshold) {\n                    // Older players - performance scales with minutes played\n                    if (minuteShare < 10) {\n                        player.performance = (mixedMicroMacroIndex * player.minutes) / maxMinutes;\n                    }\n                    else if (minuteShare >= 10 && minuteShare < 15) {\n                        player.performance = mixedMicroMacroIndex * 0.2;\n                    }\n                    else if (minuteShare >= 15 && minuteShare < 20) {\n                        player.performance = mixedMicroMacroIndex * 0.4;\n                    }\n                    else if (minuteShare >= 20 && minuteShare < 25) {\n                        player.performance = mixedMicroMacroIndex * 0.65;\n                    }\n                    else if (minuteShare >= 25 && minuteShare < 30) {\n                        player.performance = mixedMicroMacroIndex * 0.85;\n                    }\n                    else if (minuteShare >= 30) {\n                        player.performance = mixedMicroMacroIndex;\n                    } else {\n                        player.performance = (mixedMicroMacroIndex * (player.minutes || 0)) / maxMinutes;\n                    }\n                } else {\n                    // Younger players - different thresholds\n                    if ((player.minutes || 0) < 200) {\n                        player.performance = (mixedMicroMacroIndex * (player.minutes || 0)) / maxMinutes;\n                    }\n                    else if ((player.minutes || 0) >= 200 && (player.minutes || 0) < 300) {\n                        player.performance = mixedMicroMacroIndex * 0.3;\n                    }\n                    else if ((player.minutes || 0) >= 300 && (player.minutes || 0) < 400) {\n                        player.performance = mixedMicroMacroIndex * 0.5;\n                    }\n                    else if ((player.minutes || 0) >= 400 && (player.minutes || 0) < 500) {\n                        player.performance = mixedMicroMacroIndex * 0.8;\n                    }\n                    else if ((player.minutes || 0) >= 500) {\n                        player.performance = mixedMicroMacroIndex;\n                    } else {\n                        player.performance = (mixedMicroMacroIndex * (player.minutes || 0)) / maxMinutes;\n                    }\n                }\n                \n                // Ensure performance is not null/undefined\n                if (player.performance === undefined || player.performance === null) {\n                    player.performance = 0;\n                }\n                \n                //Aggiunto 2025-07-04 per anomalia su Haaland (colpa di dominance)\n                if (player.playerId == 'atzboo800gv7gic2rgvgo0kq1') {\n                    player.performance = 90;\n                }\n                \n                // ABSIND calculation - combines performance, experience and role weight\n                player.absind = ((((player.performance * 0.9) + ((player.experience || 0) * 0.1)) * \n                                (player.latestRoleWeight || 1)) / 39) + 1;\n                \n                // Track maximum absind for later calculations\n                maxAbsind = maxAbsind > player.absind ? maxAbsind : player.absind;\n                \n                numOfValidPlayers++;\n            });\n        });\n    });\n    \n    // Group players by role group and cluster to calculate averages\n    console.log(\"Calculating avg performance for groups and clusters\");\n    Object.keys(msg.TheFootballTree).forEach(leagueId => {\n        msg.TheFootballTree[leagueId].Clubs.forEach(club => { \n            club.Players.forEach(player => {\n                if (player.latestRoleGroup !== undefined && player.latestLeagueCluster !== undefined) {\n                    // Initialize group and cluster if they don't exist\n                    if (playersByGroupAndCluster[player.latestRoleGroup] === undefined) {\n                        playersByGroupAndCluster[player.latestRoleGroup] = {};\n                    }\n                    \n                    if (playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster] === undefined) {\n                        playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster] = { \n                            performance: 0, \n                            count: 0, \n                            avgPerformance: 0\n                        };\n                    }\n                    \n                    // Add this player's performance to the group total\n                    playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].performance += \n                        player.performance || 0;\n                    \n                    playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].count++;\n                    \n                    // Calculate the average for this group/cluster\n                    playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].avgPerformance = \n                        playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].performance / \n                        playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].count;\n                }\n            });\n        });\n    });\n    \n    let maxPartialRisingStar = 0;\n    let maxPartialEmerging = 0;\n    \n    console.log(\"Calculating Emerging\");\n    Object.keys(msg.TheFootballTree).forEach(leagueId => {\n        msg.TheFootballTree[leagueId].Clubs.forEach(club => { \n            club.Players.forEach(player => {\n                // RISING STAR calculation\n                // New rule: cluster=1, age<24, performance>60, minute share>0.175\n                player.risingStar = (\n                    (player.performance || 0) > 60 && \n                    (player.age || 0) < 24 && \n                    (player.latestLeagueCluster || 99) < 4 && \n                    (player.avgPlayedMinuteShare || 0) > 0.175\n                ) ? true : false;\n                \n                if (player.playerId == 'b2e12l3s3dxgyr8d2rk5qb9ey' ) {\n                    player.risingStar=false;\n                }\n                \n                player.perfRatio = 0\n                player.roleClusterAvgPerformance = 0;\n                \n                // PARTIAL RISING STAR\n                player.tentativePartialRisingStar = 0;\n                \n                if (player.latestRoleGroup !== undefined && \n                    player.latestLeagueCluster !== undefined && \n                    playersByGroupAndCluster[player.latestRoleGroup] && \n                    playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster]) {\n                        // Calculate performance ratio versus average for same group/cluster\n                    player.perfRatio = (player.performance || 0) / \n                            playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].avgPerformance;\n                    \n                    player.roleClusterAvgPerformance = playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].avgPerformance;\n                    \n                    if (!player.risingStar && (player.age || 0) < 24 && (player.latestLeagueCluster || 0) === 1) {\n                        \n                        \n                            \n                        player.tentativePartialRisingStar = player.perfRatio > 1.25 && player.perfRatio <= 2 ? (player.perfRatio / 1.25) - 1 : 0;\n                    }\n                }\n                \n                // Track maximum for normalization later\n                maxPartialRisingStar = maxPartialRisingStar > player.tentativePartialRisingStar ? \n                    maxPartialRisingStar : player.tentativePartialRisingStar;\n                \n                // EMERGING calculation\n                player.emerging = false;\n                \n                if (player.superStar) {\n                    player.emerging = false;\n                } else if (player.risingStar) {\n                    player.emerging = false;\n                } else if ((player.age || 0) >= 30) {\n                    player.emerging = false;\n                } else if ((player.latestLeagueCluster || 99) < 4 && (player.alert || 0) > 3) {\n                    player.emerging = true;\n                } else if ((player.currentClubCluster || 99) < 5 && \n                          ((player.performance || 0) * (player.latestRoleWeight || 1)) > 55 && \n                          (player.avgPlayedMinuteShare || 0) > 0.35) {\n                    player.emerging = true;\n                } else if (player.latestRoleGroup !== undefined && \n                          player.latestLeagueCluster !== undefined && \n                          playersByGroupAndCluster[player.latestRoleGroup] && \n                          playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster]) {\n                    \n                    // Different multiplier based on league cluster\n                    if ((player.latestLeagueCluster || 0) === 1 && \n                        (player.avgPlayedMinuteShare || 0) > 0.35 && \n                        (player.performance || 0) > 2 * playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].avgPerformance) {\n                        player.emerging = true;\n                    } else if ((player.latestLeagueCluster || 0) === 2 && \n                               (player.avgPlayedMinuteShare || 0) > 0.35 && \n                               (player.performance || 0) > 3 * playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].avgPerformance) {\n                        player.emerging = true;\n                    } else if ((player.latestLeagueCluster || 0) === 3 && \n                               (player.avgPlayedMinuteShare || 0) > 0.35 && \n                               (player.performance || 0) > 4 * playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].avgPerformance) {\n                        player.emerging = true;\n                    } else {\n                        player.emerging = false;\n                    }\n                }\n                \n                // PARTIAL EMERGING\n                player.tentativePartialEmerging = 0;\n                \n                if (player.latestRoleGroup !== undefined && \n                    player.latestLeagueCluster !== undefined && \n                    playersByGroupAndCluster[player.latestRoleGroup] && \n                    playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster]) {\n                    \n                    if (!player.emerging && !player.superStar && (player.age || 0) < 30 && (player.latestLeagueCluster || 0) === 1) {\n                        let perfRatio = (player.performance || 0) / \n                            playersByGroupAndCluster[player.latestRoleGroup][player.latestLeagueCluster].avgPerformance;\n                            \n                        player.tentativePartialEmerging = perfRatio > 1.25 && perfRatio <= 2 ? perfRatio - 1 : 0;\n                    }\n                }\n                \n                // Track maximum for normalization later\n                maxPartialEmerging = maxPartialEmerging > player.tentativePartialEmerging ? \n                    maxPartialEmerging : player.tentativePartialEmerging;\n            });\n        });\n    });\n    \n    console.log(\"Calculating FATMOL, Final Emerging and Rising\");\n    Object.keys(msg.TheFootballTree).forEach(leagueId => {\n        msg.TheFootballTree[leagueId].Clubs.forEach(club => { \n            club.Players.forEach(player => {\n                // Normalize partial values based on maximums\n                // Prevent division by zero\n                player.partialEmerging = maxPartialEmerging > 0 ? \n                    (player.tentativePartialEmerging || 0) / maxPartialEmerging : 0;\n                    \n                player.partialEmerging = player.risingStar ? 0 : player.partialEmerging;    \n                    \n                player.partialEmerging = player.partialEmerging > 1 ? 1 : player.partialEmerging;\n                \n                player.partialRisingStar = maxPartialRisingStar > 0 ? \n                    (player.tentativePartialRisingStar || 0) / maxPartialRisingStar : 0;\n                    \n                player.partialRisingStar = player.emerging ? 0 : player.partialRisingStar;\n                \n                \n                player.partialRisingStar = player.partialRisingStar > 1 ? 1 : player.partialRisingStar;\n                \n                \n                player.partialEmerging = player.partialRisingStar > 0 ? 0 : player.partialEmerging;\n                \n               \n                \n                /** \n                \n                ECCEZIONI TABELLINA QUI\n                */\n                \n                \n                if (msg._SPECIALTIESIndex[player.playerId] !== undefined) {\n                    \n                    const playerSpecialties = msg._SPECIALTIES[msg._SPECIALTIESIndex[player.playerId]]\n                    \n                    \n                    player.nationalTeamPlayer = !!playerSpecialties.nationalTeamPlayer\n                    player.superstar = !!playerSpecialties.superstar\n                    player.risingStar =!! playerSpecialties.risingStar\n                    player.emerging = !!playerSpecialties.emerging\n                    player.partialRisingStar = playerSpecialties.partialRisingStar\n                    player.partialEmerging = playerSpecialties.partialEmerging\n                    \n                    console.log(\"SPECIALTY OVERRIDE \", playerSpecialties)\n\n                }\n                    \n                \n                \n                \n                \n                \n                \n                \n                // Calculate various awards/bonuses\n                let nteamAward = player.nationalTeamPlayer ? 0.33 : 0; \n                let emergingAward = player.emerging ? 0.33 : 0; \n                let partialEmergingAward = player.partialEmerging / 3;\n                let risingStarAward = player.risingStar ? 0.33 : 0; \n                let partialRisingStarAward = player.partialRisingStar / 3;\n                let superStarAward = player.superStar ? 0.75 : 0; \n                \n                // FATMOL calculation combines absind with all awards\n                let tmpFatmol = (player.absind || 0) + nteamAward + emergingAward + \n                               partialEmergingAward + risingStarAward + \n                               partialRisingStarAward + superStarAward;\n                \n                player.fatmol = tmpFatmol;\n                \n                // Track totals and maximums for later calculations\n                totFatmol += player.fatmol;\n                maxFatmol = maxFatmol > player.fatmol ? maxFatmol : player.fatmol;\n            });\n        });\n    });\n    \n    // Calculate average fatmol\n    const avgFatmol = numOfValidPlayers > 0 ? totFatmol / numOfValidPlayers : 0;\n    \n    let minNotZeroEffectiveness = 100;\n    \n    console.log(\"Calculating EFFECTIVENESS AND MATURITY\");\n    Object.keys(msg.TheFootballTree).forEach(leagueId => {\n        msg.TheFootballTree[leagueId].Clubs.forEach(club => { \n            club.Players.forEach(player => {\n                // EFFECTIVENESS calculation\n                player.effectiveness = maxFatmol > 0 ? ((player.fatmol || 0) / maxFatmol) * 100 : 0;\n                \n                // Track minimum non-zero effectiveness for scaling\n                if (player.effectiveness > 0 && player.effectiveness < minNotZeroEffectiveness) {\n                    minNotZeroEffectiveness = player.effectiveness;\n                }\n                \n                // MATURITY calculation\n                let emergingReward = player.emerging ? 0.5 : 0;\n                let risingStarReward = player.risingStar ? 2 : 0;\n                \n                // Complex maturity formula based on age, fatmol, and rewards\n                if ((player.age || 0) > 33) {\n                    player.maturity = 0;\n                } else {\n                    if ((player.fatmol || 0) < 1.75) {\n                        player.maturity = (player.age || 0) < 23 ? 3 : 1;\n                    } else {\n                        player.maturity = (player.age || 0) < 29 ? 4 : (33 - (player.age || 0));\n                    }\n                    \n                    // Add rewards\n                    player.maturity += emergingReward + risingStarReward;\n                }\n            });\n        });\n    });\n    \n    msg.minNotZeroEffectiveness = minNotZeroEffectiveness;\n    \n    console.log(\"Calculating MOD EFFECTIVENESS\");\n    \n    let minNotZeroUniqueness = 100;\n    Object.keys(msg.TheFootballTree).forEach(leagueId => {\n        msg.TheFootballTree[leagueId].Clubs.forEach(club => { \n            club.Players.forEach(player => {\n                // Modified effectiveness scales the range to use full 0-100\n                player.modEffectiveness = 0;\n                if (minNotZeroEffectiveness < 100) {  // Prevent division by zero\n                    player.modEffectiveness = (((player.effectiveness || 0) - minNotZeroEffectiveness) /\n                                           (100 - minNotZeroEffectiveness)) * 100;\n                }\n                \n                // Calculate uniqueness as weighted average of mod effectiveness and previous uniqueness\n                if (player.effectiveness > 0) {\n                    player.latestUniqueness = (0.7 * player.modEffectiveness) + \n                                             ((player.latestUniqueness || 0) * 0.3);\n                } else {\n                    player.latestUniqueness = 0.7 * player.modEffectiveness;\n                }\n                \n                // Apply scaling transformation to uniqueness\n                if (player.latestUniqueness > 79.1) {\n                    player.latestUniqueness = 100;\n                } else if (player.latestUniqueness > 0 && player.latestUniqueness <= 79.1) {\n                    player.latestUniqueness = Math.sqrt(player.latestUniqueness / 79.1) * 100;\n                }\n                \n                // Track minimum non-zero uniqueness\n                if (player.latestUniqueness > 0 && player.latestUniqueness < minNotZeroUniqueness) {\n                    minNotZeroUniqueness = player.latestUniqueness;\n                }\n            });\n        });\n    });\n    \n    msg.minNotZeroUniqueness = minNotZeroUniqueness;\n    \n    // RELATIVE WEIGHT IN CLUB\n    console.log(\"Calculating RELATIVE WEIGHT IN CLUB\");\n    \n    Object.keys(msg.TheFootballTree).forEach(leagueId => {\n        msg.TheFootballTree[leagueId].Clubs.forEach(club => { \n            // Initialize club totals\n            club.totFatmol = 0;\n            club.exponentialTotFatmol = 0;\n            \n            // Sum up player contributions\n            club.Players.forEach(player => { \n                club.totFatmol += player.fatmol || 0;\n                club.exponentialTotFatmol += Math.pow(player.fatmol || 0, 1.7);\n            });\n        });\n    });\n    \n} catch (e) {\n    console.log(\"Error in economic analysis:\", e);\n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 1100,
        "wires": [
            [
                "d623e764d089caeb"
            ]
        ]
    },
    {
        "id": "c472c7ae0b25e909",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Potential Price by Claude",
        "func": "let TheFootballTree = msg.payload;\nlet playersByGroup = msg.playersByGroup || {};\nlet avgGlobalFatmol = msg.avgGlobalFatmol || 0;\nlet globalMaxFatmol = msg.globalMaxFatmol || 0;\n\n// Get Utils function for calculations\nconst Utils = global.get(\"UTILS\");\n\nconsole.log(\"PLAYER PRICES BEGINS\");\n/** FUNCTION TO CALCULATE AVERAGES VALNOVAN and MAX VALNOVAN **/\n\nlet avgValNoVanGroupAgeRangeClubCluster = {};\nlet maxValNoVan = 0;\nlet maxwVANVNV = 0;\nlet maxwVANVNV_CL = 0;\n\n/**\n * Calculate averages of ValNoVan by group, age range, and club cluster\n */\nconst avgsValNoVan = function() {\n    try {\n        console.log(\"CALCOLO avgsValNoVan\");\n        /*MediaDelVanNoVan = all players of the same group and the same club cluster and age greater or less than 30\n                \n          if club.cluster >= 2 && (player.valNoVan * 0.6 + player.van * 0.4) > 55 => then the player should go into the subset of club.cluster - 1;*/\n    \n        Object.keys(TheFootballTree).forEach(leagueId => {\n            TheFootballTree[leagueId].Clubs.forEach(club => { \n                club.Players.forEach(player => {\n                    // Skip if missing required data\n                    if (!player.valNoVan || !player.van || player.latestRoleGroup===undefined || player.latestRoleGroup===null || club.cluster === undefined) {\n                        return;\n                    }\n                    \n                    maxValNoVan = player.valNoVan > maxValNoVan ? player.valNoVan : maxValNoVan;\n                    player.maxEMediePesate = 0;\n                    \n                    // Apply selling limit logic\n                    let valnovan = club.noLimiteVendita === 1 ? \n                        player.valNoVan : \n                        (player.valNoVan * 1.2 > (club.maxtr || 0) ? \n                            (player.valNoVan * 0.3 + (1.2 * (club.maxtr || 0)) * 0.7) : \n                            player.valNoVan);\n                            \n                    let van = club.noLimiteVendita === 1 ? \n                        player.van : \n                        (player.van * 1.2 > (club.maxtr || 0) ? \n                            (player.van * 0.3 + (1.2 * (club.maxtr || 0)) * 0.7) : \n                            player.van);\n                    \n                    // Calculate weighted VAN-VALNOVAN\n                    let weightedValue = (valnovan * 0.6 + van * 0.4);\n                    maxwVANVNV_CL = weightedValue > maxwVANVNV_CL ? weightedValue : maxwVANVNV_CL;\n                    \n                    // Determine effective club cluster\n                    let cc = club.cluster >= 2 && weightedValue > 55 ? (club.cluster - 1) : club.cluster;\n                    \n                    player.wVANVNV_CL = weightedValue;\n                    \n                    // Initialize data structures if necessary\n                    if (avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup] === undefined) {\n                        avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup] = {};\n                    }\n                    \n                    if (avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"] === undefined) {\n                        avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"] = {};\n                    }\n                    \n                    if (avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"] === undefined) {\n                        avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"] = {};\n                    }\n                    \n                    if (avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc] === undefined) {\n                        avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc] = {\n                            \"sum\": 0,\n                            \"sumW\": 0,\n                            \"count\": 0,\n                            \"avg\": 0,\n                            \"avgW\": 0\n                        };\n                    }\n                    \n                    if (avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc] === undefined) {\n                        avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc] = {\n                            \"sum\": 0,\n                            \"sumW\": 0,\n                            \"count\": 0,\n                            \"avg\": 0,\n                            \"avgW\": 0\n                        };\n                    }\n                    \n                    // Update statistics based on age\n                    if ((player.age || 0) > 29) {\n                        // COUNT\n                        avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc][\"count\"]++;\n                        \n                        // SUM\n                        avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc][\"sum\"] += valnovan;\n                        avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc][\"sumW\"] += weightedValue;\n                        \n                        // Avoid division by zero\n                        if (avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc][\"count\"] > 0) {\n                            // AVG\n                            avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc][\"avg\"] = \n                                avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc][\"sum\"] / \n                                avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc][\"count\"];\n                            \n                            avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc][\"avgW\"] = \n                                avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc][\"sumW\"] / \n                                avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"above30\"][cc][\"count\"];\n                        }\n                    } else {\n                        // COUNT\n                        avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc][\"count\"]++;\n                        \n                        // SUM\n                        avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc][\"sum\"] += valnovan;\n                        avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc][\"sumW\"] += weightedValue;\n                        \n                        // Avoid division by zero\n                        if (avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc][\"count\"] > 0) {\n                            // AVG\n                            avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc][\"avg\"] = \n                                avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc][\"sum\"] / \n                                avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc][\"count\"];\n                            \n                            avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc][\"avgW\"] = \n                                avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc][\"sumW\"] / \n                                avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][\"below30\"][cc][\"count\"];\n                        }\n                    }\n                });\n            });\n        });\n    } catch (e) {\n        console.log(\"Error in avgsValNoVan:\", e);\n    }\n};\n\n/**\n * Calculate ValNoVan for a player based on various factors\n */\nconst setValNoVan = function(player, clubCluster) {\n    try {\n        // Check if required data exists\n        if (!player || !playersByGroup[player.latestRoleGroup]) {\n            console.log(\"Missing data for player in setValNoVan:\", player ? player.playerId : \"undefined player\");\n            return;\n        }\n        \n        // RY (Age factor)\n        let groupAvgAge = playersByGroup[player.latestRoleGroup].avgAge || 1;\n        let maxAgeInGroup = playersByGroup[player.latestRoleGroup].maxAge || 1;\n        \n        let RY = groupAvgAge / (player.age || 1);\n        \n        // RP (Performance factor)\n        let groupAvgFatmol = playersByGroup[player.latestRoleGroup].avgFatmol || 1;\n        let maxFatmolInGroup = playersByGroup[player.latestRoleGroup].maxFatmol || 1;\n        \n        // Adjust reward based on club cluster\n        let RPClusterReward = 1;\n        if (clubCluster > 13) {\n            RPClusterReward = 0.2;\n        } else if (clubCluster > 9) {\n            RPClusterReward = 0.25;\n        } else if (clubCluster > 8) {\n            RPClusterReward = 0.28;\n        } else if (clubCluster > 6) {\n            RPClusterReward = 0.3;\n        } else if (clubCluster > 3) {\n            RPClusterReward = 0.8;\n        }\n        \n        // Reduce reward for players with few minutes\n        RPClusterReward = (player.minutes || 0) < 90 ? 0.1 : RPClusterReward;\n        \n        // Calculate fatmol ratio and set reward\n        let RPFatmolRatio = (player.fatmol || 0) / (avgGlobalFatmol || 1);\n        let RPFatmolReward = 0.285714; // Default\n        \n        if (RPFatmolRatio > 1.5) {\n            RPFatmolReward = 1;\n        } else if (RPFatmolRatio > 1.25) {\n            RPFatmolReward = 0.571429;\n        } else if (RPFatmolRatio > 1) {\n            RPFatmolReward = 0.429185;\n        }\n        \n        // Adjust for superstar status\n        let RPSuperStarReward = player.superStar ? 1.2 : \n            (((player.fatmol || 0) / (globalMaxFatmol || 1)) > 0.6 ? 0.8 : 0.6);\n        \n        // Performance reward for emerging players\n        let RPPerfReward = player.emerging ? \n            (((player.fatmol || 0) * 1.3) + (globalMaxFatmol || 0)) / 2 : \n            (player.fatmol || 0);\n        \n        // Calculate final RP\n        let RP = (RPPerfReward / (groupAvgFatmol || 1)) * RPFatmolReward * RPSuperStarReward * RPClusterReward;\n        \n        // PM (Price Multiplier)\n        // Use fixed group 5 as reference and adjust by player's transfer price percentage\n        let PM = 0;\n        if (playersByGroup[5] && playersByGroup[5].avgTransferPriceWithTreshold) {\n            PM = playersByGroup[5].avgTransferPriceWithTreshold * (player.percTransfPrice || 1);\n        }\n        \n        // Store calculated values\n        player.avgTransferPrice = PM;\n        player.PM = PM;\n        player.RY = RY;\n        player.RP = RP;\n        \n        // Calculate final valNoVan\n        player.valNoVan = RP * RY * PM * 2 * (player.latestRoleWeight || 1);\n    } catch (e) {\n        console.log(\"Error in setValNoVan for player:\", player ? player.playerId : \"unknown\", e);\n    }\n};\n\n/**\n * Calculate potential price for a player\n */\nconst setPotentialPrice = function(player, club) {\n    try {\n        // Check if required data exists\n        if (!player || !player.valNoVan || !player.van || \n            !player.wVANVNV_CL || player.latestRoleGroup===undefined || player.latestRoleGroup===null || \n            !avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup]) {\n            return;\n        }\n        \n        // Get weighted VAN-VALNOVAN\n        let wVANVNV_CL = player.wVANVNV_CL;\n        let wVANVNV = player.valNoVan * 0.6 + player.van * 0.4;\n        \n        // Determine effective club cluster\n        let cc = (club.cluster || 0) >= 2 && wVANVNV > 55 ? \n            ((club.cluster || 0) - 1) : (club.cluster || 0);\n        \n        // Get appropriate averages based on age\n        let ageCategory = (player.age || 0) > 29 ? \"above30\" : \"below30\";\n        let avgStats = null;\n        \n        // Safely get average stats\n        if (avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][ageCategory] && \n            avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][ageCategory][cc]) {\n            avgStats = avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][ageCategory][cc];\n        } else {\n            // If stats for specific cluster not found, try to find nearest cluster\n            // Start from current cluster and look both directions\n            let found = false;\n            let testCluster = cc;\n            let maxTries = 17; // Maximum number of clusters\n            let tries = 0;\n            \n            while (!found && tries < maxTries) {\n                tries++;\n                \n                // Try lower cluster first\n                if (testCluster > 1) {\n                    testCluster--;\n                    if (avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][ageCategory][testCluster]) {\n                        avgStats = avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][ageCategory][testCluster];\n                        found = true;\n                        continue;\n                    }\n                }\n                \n                // Then try higher cluster\n                testCluster = cc + tries;\n                if (testCluster <= 17 && avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][ageCategory][testCluster]) {\n                    avgStats = avgValNoVanGroupAgeRangeClubCluster[player.latestRoleGroup][ageCategory][testCluster];\n                    found = true;\n                }\n            }\n            \n            // If still not found, create default\n            if (!avgStats) {\n                avgStats = { \"avg\": wVANVNV, \"avgW\": wVANVNV_CL };\n            }\n        }\n        \n        // Set default potential price\n        player.potentialPrice = wVANVNV;\n        \n        // Special handling for specific player types and conditions\n        if ((player.age || 0) <= 31 && (player.fatmol || 0) >= 2.25 && \n            maxwVANVNV_CL / (wVANVNV_CL || 1) > 2.5) {\n            \n            if (player.emerging) { // SPECIAL HANDLING FOR EMERGING PLAYERS\n                let maxEMediePesate = ((maxwVANVNV_CL * 0.2 + avgStats.avgW * 0.8) * 0.5 + wVANVNV_CL * 0.5);\n                player.maxEMediePesate = maxEMediePesate;\n                \n                if (club.noLimiteVendita === 1) {\n                    // No selling limit\n                    player.potentialPrice = Math.max(maxEMediePesate, wVANVNV_CL);\n                } else {\n                    // Apply selling limit\n                    if (maxEMediePesate > (1.2 * (club.maxtr || 0))) {\n                        let mm = Math.max(maxEMediePesate, wVANVNV_CL);\n                        player.potentialPrice = mm * 0.3 + ((1.2 * (club.maxtr || 0)) * 0.7);\n                    } else {\n                        player.potentialPrice = Math.max(maxEMediePesate, wVANVNV_CL);\n                    }\n                }\n            } else if (player.superStar) { // SPECIAL HANDLING FOR SUPERSTARS\n                player.potentialPrice = Math.max(\n                    ((maxwVANVNV_CL * 0.3 + avgStats.avgW * 0.7) * 0.9 + wVANVNV_CL * 0.1),\n                    wVANVNV_CL\n                );\n            } else { // DEFAULT HANDLING FOR OTHERS\n                if (wVANVNV < avgStats.avgW) { // Below average\n                    player.potentialPrice = wVANVNV * 0.22 + avgStats.avgW * 0.78;\n                } else { // Above average\n                    player.potentialPrice = wVANVNV_CL;\n                }\n            }\n        }\n    } catch (e) {\n        console.log(\"Error in setPotentialPrice for player:\", player ? player.playerId : \"unknown\", e);\n    }\n};\n\ntry {\n    console.log(\"CALCOLO VALORI POTENZIALI, VAN e VALNOVAN\");\n    Object.keys(TheFootballTree).forEach(leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach(club => { \n            club.Players.forEach(player => {\n                // POTENTIAL YEARS OF CONTRACT\n                player.potentialYearsOfContract = 4; // Default\n                \n                // Adjust based on age\n                if ((player.age || 0) > 32) {\n                    player.potentialYearsOfContract = 1;\n                } else if ((player.age || 0) === 32) {\n                    player.potentialYearsOfContract = 2; \n                } else if ((player.age || 0) > 22 && (player.age || 0) <= 25) {\n                    player.potentialYearsOfContract = 4;\n                } else if ((player.age || 0) > 25 && (player.age || 0) <= 31) {\n                    player.potentialYearsOfContract = 3;\n                } else {\n                    player.potentialYearsOfContract = 5;\n                }\n                \n                // Bonus year for rising stars\n                player.potentialYearsOfContract = player.risingStar ? player.potentialYearsOfContract + 1 : player.potentialYearsOfContract;\n                \n                // Expected contract years\n                player.expectedYearsOfContract = player.potentialYearsOfContract;\n                \n                // Calculate financial metrics if Utils is available\n                if (Utils && Utils.actualValueSum && Utils.blackScholes) {\n                    // Adjust fatmol with minimum threshold\n                    let fatmolAdjusted = (player.fatmol || 0) < 2 ? 2 : (player.fatmol || 0);\n                    \n                    // Calculate potential benefits\n                    player.benefitsPotential = Utils.actualValueSum(\n                        fatmolAdjusted * (player.salaryPotential || 0), \n                        player.expectedYearsOfContract, \n                        0.05\n                    );\n                    \n                    // Calculate potential costs based on simulation status\n                    if (player.simulating === true) {\n                        player.costsPotential = Utils.actualValueSum(\n                            (player.salaryGross || 0), \n                            player.expectedYearsOfContract, \n                            0.05\n                        );\n                    } else {\n                        player.costsPotential = Utils.actualValueSum(\n                            (player.salaryPotential || 0) * (player.currentLeagueTaxRate || 1), \n                            player.expectedYearsOfContract, \n                            0.05\n                        );\n                    }\n                    \n                    // Calculate option value\n                    try {\n                        if ((player.maturity || 0) === 0) {\n                            player.optvalPotential = 0;\n                        } else {\n                            player.optvalPotential = Utils.blackScholes(\n                                (player.benefitsPotential || 0),\n                                (player.costsPotential || 0),\n                                (player.maturity || 0),\n                                ((player.latestMicroVolatility || 0) / 100),\n                                -0.085,\n                                \"call\"\n                            );\n                        }\n                    } catch (e) {\n                        console.log(\"Error calculating optvalPotential:\", e);\n                        player.optvalPotential = 0;\n                    }\n                    \n                    // Ensure optvalPotential is not null\n                    player.optvalPotential = player.optvalPotential || 0;\n                    \n                    // Calculate VAN\n                    let bcaward = ((player.benefitsPotential || 0) - (player.costsPotential || 0)) * 0.05 * (club.premioFair || 0);\n                    player.bcaward = bcaward;\n                    player.clubPremioFair = club.premioFair || 0;\n                    player.van = (player.benefitsPotential || 0) - (player.costsPotential || 0) + \n                                bcaward + (player.optvalPotential || 0);\n                    \n                    // Cap VAN at 220\n                    player.van = Math.min(player.van || 0, 220);\n                }\n                \n                // Calculate VAL NO VAN\n                setValNoVan(player, club.cluster || 0);\n            });\n        });\n    });\n    \n    // Calculate averages of VAL NO VAN\n    avgsValNoVan();\n    \n    console.log(\"CALCOLO POTENTIAL PRICE\");\n    Object.keys(TheFootballTree).forEach(leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach(club => { \n            club.Players.forEach(player => {\n                // Calculate potential price\n                setPotentialPrice(player, club);\n            });\n        });\n    });\n} catch (e) {\n    console.log(\"Error in main calculation:\", e);\n}\n\n// Prepare return message\nmsg.footballTree = TheFootballTree;\nmsg.avgValNoVanGroupAgeRangeClubCluster = avgValNoVanGroupAgeRangeClubCluster;\nmsg.playersByGroup = playersByGroup;\n\nconsole.log(\"*** POTENTIAL PRICE COMPLETED ***\");\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 1100,
        "wires": [
            [
                "3c2ca70b09b54d2e"
            ]
        ]
    },
    {
        "id": "80bc54fd81fd59be",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Salario Potenziale by Claude",
        "func": "let TheFootballTree = msg.payload;\nlet playersByGroup = msg.playersByGroup || {};\nlet playersByGroupAndClubCluster = msg.playersByGroupAndClubCluster || {};\n\n// Utils is used for calculations\nconst Utils = global.get(\"UTILS\");\n\n// Initialize data structures\nlet topClusterTeamBySalary = {};\nlet clubSalaryByRank = {};\n\nlet globalMaxFatmol = 0;\nlet totalGlobalFatmol = 0;\nlet avgGlobalFatmol = 0;\nlet fatmolCounter = 0;\n\nconsole.log(\"TOP CLUSTER TEAM BY SALARY\");\nObject.keys(TheFootballTree).forEach(leagueId => {\n    TheFootballTree[leagueId].Clubs.forEach(club => {\n        if (club.cluster === undefined) {\n            return; // Skip clubs with undefined cluster\n        }\n        \n        if (topClusterTeamBySalary[club.cluster] === undefined) {\n            topClusterTeamBySalary[club.cluster] = club;\n        } else {\n            topClusterTeamBySalary[club.cluster] = \n                (topClusterTeamBySalary[club.cluster].salaryNetFair || 0) > (club.salaryNetFair || 0) ? \n                topClusterTeamBySalary[club.cluster] : club;\n        }\n    });\n});\n\nconsole.log(\"CLUB SALARY BY CLUB RANK\");\nObject.keys(TheFootballTree).forEach(leagueId => {\n    if (leagueId !== \"arab\") { // Exclude clubs from Arab league from the ranks\n        TheFootballTree[leagueId].Clubs.forEach(club => {\n            if (club.clubRank === undefined) {\n                return; // Skip clubs with undefined rank\n            }\n            \n            if (clubSalaryByRank[club.clubRank] === undefined) {\n                clubSalaryByRank[club.clubRank] = club;\n            } else {\n                clubSalaryByRank[club.clubRank] = \n                    (clubSalaryByRank[club.clubRank].salaryNetFair || 0) > (club.salaryNetFair || 0) ? \n                    clubSalaryByRank[club.clubRank] : club;\n            }\n        });\n    }\n});\n\n// Initialize exponentialTotFatmol for all clubs if not already done\nObject.keys(TheFootballTree).forEach(leagueId => {\n    TheFootballTree[leagueId].Clubs.forEach(club => {\n        if (club.exponentialTotFatmol === undefined) {\n            club.exponentialTotFatmol = 0;\n            club.totFatmol = 0;\n            \n            club.Players.forEach(player => {\n                club.totFatmol += player.fatmol || 0;\n                club.exponentialTotFatmol += Math.pow((player.fatmol || 0), 1.7);\n            });\n        }\n    });\n});\n\n// Make sure all topClusterTeam and clubSalaryByRank entries have exponentialTotFatmol\nObject.keys(topClusterTeamBySalary).forEach(cluster => {\n    if (topClusterTeamBySalary[cluster].exponentialTotFatmol === undefined) {\n        topClusterTeamBySalary[cluster].exponentialTotFatmol = 0;\n        topClusterTeamBySalary[cluster].totFatmol = 0;\n        \n        // Calculate if needed\n        if (topClusterTeamBySalary[cluster].Players) {\n            topClusterTeamBySalary[cluster].Players.forEach(player => {\n                topClusterTeamBySalary[cluster].totFatmol += player.fatmol || 0;\n                topClusterTeamBySalary[cluster].exponentialTotFatmol += \n                    Math.pow((player.fatmol || 0), 1.7);\n            });\n        }\n    }\n});\n\nObject.keys(clubSalaryByRank).forEach(rank => {\n    if (clubSalaryByRank[rank].exponentialTotFatmol === undefined) {\n        clubSalaryByRank[rank].exponentialTotFatmol = 0;\n        clubSalaryByRank[rank].totFatmol = 0;\n        \n        // Calculate if needed\n        if (clubSalaryByRank[rank].Players) {\n            clubSalaryByRank[rank].Players.forEach(player => {\n                clubSalaryByRank[rank].totFatmol += player.fatmol || 0;\n                clubSalaryByRank[rank].exponentialTotFatmol += \n                    Math.pow((player.fatmol || 0), 1.7);\n            });\n        }\n    }\n});\n\nconsole.log(\"PLAYER BEGINS: WEIGHT, OPTIMAL SALARY, BENEFITS, COSTS, OPTVAL, RESIDUALVALUE, RESIDUAL BOOK VALUE, OPTIMAL COST\");\n\nObject.keys(TheFootballTree).forEach(leagueId => {\n    TheFootballTree[leagueId].Clubs.forEach(club => {\n        club.Players.forEach(player => {\n            // Track global fatmol statistics\n            fatmolCounter++;\n            totalGlobalFatmol += player.fatmol || 0;\n            globalMaxFatmol = globalMaxFatmol > (player.fatmol || 0) ? globalMaxFatmol : (player.fatmol || 0);\n            avgGlobalFatmol = totalGlobalFatmol / fatmolCounter;\n            \n            // EXPECTED CLUB CLUSTER\n            // Safely check for required data\n            if (player.latestRoleGroup !== undefined && \n                player.currentClubCluster !== undefined &&\n                playersByGroupAndClubCluster[player.latestRoleGroup] && \n                playersByGroupAndClubCluster[player.latestRoleGroup][player.currentClubCluster]) {\n                \n                let ftRatio = (player.fatmol || 0) / \n                    playersByGroupAndClubCluster[player.latestRoleGroup][player.currentClubCluster].avgFatmol;\n                \n                if (ftRatio >= 1.7 && player.currentClubCluster > 6) {\n                    player.expectedClubCluster = player.currentClubCluster - 3;\n                }\n                else if (ftRatio >= 1.5 && ftRatio < 1.7) {\n                    player.expectedClubCluster = player.currentClubCluster - 2;\n                } else if (ftRatio >= 1.2 && ftRatio < 1.5) {\n                    player.expectedClubCluster = player.currentClubCluster - 1;\n                } else if (ftRatio >= 1 && ftRatio < 1.2) {\n                    player.expectedClubCluster = player.currentClubCluster;\n                } else if (ftRatio >= 0.5 && ftRatio < 1) {\n                    player.expectedClubCluster = player.currentClubCluster + 1;\n                } else {\n                    player.expectedClubCluster = player.currentClubCluster + 2;\n                }\n                \n                if (player.simulating === true) {\n                    player.expectedClubCluster = player.currentClubCluster;\n                }\n                \n                player.expectedClubCluster = (player.minutes || 0) < 90 ? \n                    player.currentClubCluster + 6 : player.expectedClubCluster;\n                \n                // Ensure club cluster is within valid range\n                player.expectedClubCluster = player.expectedClubCluster < 1 ? 1 : player.expectedClubCluster;\n                player.expectedClubCluster = player.expectedClubCluster > 17 ? 17 : player.expectedClubCluster;\n                \n                // EXPECTED CLUB RANK\n                if (ftRatio >= 2) {\n                    player.expectedClubRank = player.currentClubRank - 6;\n                } else if (ftRatio >= 1.75 && ftRatio < 2) {\n                    player.expectedClubRank = player.currentClubRank - 4;\n                } else if (ftRatio >= 1.5 && ftRatio < 1.75) {\n                    player.expectedClubRank = player.currentClubRank - 3;\n                } else if (ftRatio >= 1.2 && ftRatio < 1.5) {\n                    player.expectedClubRank = player.currentClubRank - 2;\n                } else if (ftRatio >= 1 && ftRatio < 1.2) {\n                    player.expectedClubRank = player.currentClubRank;\n                } else if (ftRatio >= 0.5 && ftRatio < 1) {\n                    player.expectedClubRank = player.currentClubRank + 1;\n                } else {\n                    player.expectedClubRank = player.currentClubRank + 2;\n                }\n                \n                if (player.simulating === true) {\n                    player.expectedClubRank = player.currentClubRank;\n                }\n                \n                // Ensure club rank is within valid range\n                player.expectedClubRank = player.expectedClubRank < 1 ? 1 : player.expectedClubRank;\n                player.expectedClubRank = player.expectedClubRank > 770 ? 770 : player.expectedClubRank;\n                \n                // Find a valid club rank if the calculated one doesn't exist\n                if (clubSalaryByRank[player.expectedClubRank] === undefined) {\n                    let originalRank = player.expectedClubRank;\n                    while (player.expectedClubRank > 0 && clubSalaryByRank[player.expectedClubRank] === undefined) {\n                        player.expectedClubRank--;\n                    }\n                    \n                    // If we couldn't find a valid rank by decrementing, try incrementing from original\n                    if (player.expectedClubRank === 0) {\n                        player.expectedClubRank = originalRank;\n                        while (player.expectedClubRank <= 770 && clubSalaryByRank[player.expectedClubRank] === undefined) {\n                            player.expectedClubRank++;\n                        }\n                        \n                        // If still no valid rank, default to rank 1\n                        if (player.expectedClubRank > 770 || clubSalaryByRank[player.expectedClubRank] === undefined) {\n                            player.expectedClubRank = 1;\n                            // Find the first valid rank\n                            while (player.expectedClubRank <= 770 && clubSalaryByRank[player.expectedClubRank] === undefined) {\n                                player.expectedClubRank++;\n                            }\n                        }\n                    }\n                }\n                \n                // WEIGHT CALCULATIONS\n                // WEIGHT IN CLUB - prevent division by zero\n                player.weightInClub = club.exponentialTotFatmol > 0 ? \n                    Math.pow((player.fatmol || 0), 1.7) / club.exponentialTotFatmol : 0;\n                \n                // WEIGHT IN TOP TEAM EXPECTED CLUSTER CLUB\n                if (topClusterTeamBySalary[player.expectedClubCluster] && \n                    topClusterTeamBySalary[player.expectedClubCluster].exponentialTotFatmol > 0) {\n                    player.weightInExpectedClubCluster = \n                        Math.pow((player.fatmol || 0), 1.7) / \n                        topClusterTeamBySalary[player.expectedClubCluster].exponentialTotFatmol;\n                } else {\n                    player.weightInExpectedClubCluster = 0;\n                }\n                \n                // WEIGHT IN TOP TEAM EXPECTED CLUB RANK\n                if (clubSalaryByRank[player.expectedClubRank] && \n                    clubSalaryByRank[player.expectedClubRank].exponentialTotFatmol > 0) {\n                    player.weightInExpectedClubRank = \n                        Math.pow((player.fatmol || 0), 1.7) / \n                        clubSalaryByRank[player.expectedClubRank].exponentialTotFatmol;\n                } else {\n                    player.weightInExpectedClubRank = 0;\n                }\n                \n                // OPTIMAL SALARY\n                player.salaryOptimal = (club.salaryNetFair || 0) * player.weightInClub;\n                \n                // POTENTIAL SALARY\n                if (player.simulating === true) {\n                    player.salaryPotential = (club.salaryNetFair || 0) * player.weightInClub;\n                } else if (clubSalaryByRank[player.expectedClubRank]) {\n                    player.salaryPotential = \n                        (clubSalaryByRank[player.expectedClubRank].salaryNetFair || 0) * \n                        player.weightInExpectedClubRank;\n                } else {\n                    player.salaryPotential = player.salaryOptimal; // Fallback\n                }\n                \n                // BENEFITS\n                if (Utils && Utils.actualValueSum && player.remainingYearsOfContract !== undefined) {\n                    player.benefits = Utils.actualValueSum(\n                        (player.fatmol || 0) * player.salaryOptimal, \n                        player.remainingYearsOfContract, \n                        0.05\n                    );\n                } else {\n                    player.benefits = 0;\n                }\n                \n                // COSTS\n                if (Utils && Utils.actualValueSum && player.remainingYearsOfContract !== undefined) {\n                    player.costs = Utils.actualValueSum(\n                        player.salaryGross || 0, \n                        player.remainingYearsOfContract, \n                        0.05\n                    );\n                } else {\n                    player.costs = 0;\n                }\n                \n                // OPTVAL (Black-Scholes option value)\n                if (Utils && Utils.blackScholes) {\n                    let bcDiff = (player.costs || 0) > (player.benefits || 0) ? 0 : (player.costs || 0) - (player.benefits || 0);\n                    \n                    if ((player.maturity || 0) === 0) {\n                        player.optval = 0;\n                    } else {\n                        try {\n                            player.optval = Utils.blackScholes(\n                                player.benefits || 0,\n                                player.costs || 0,\n                                player.maturity || 0,\n                                ((player.latestMicroVolatility || 0) / 100),\n                                -0.085,\n                                \"call\"\n                            );\n                        } catch (e) {\n                            console.log(\"Error calculating optval for player:\", player.playerId, e);\n                            player.optval = 0;\n                        }\n                    }\n                } else {\n                    player.optval = 0;\n                }\n                \n                // RESIDUAL VALUE\n                player.residualValue = (player.benefits || 0) - (player.costs || 0) + (player.optval || 0);\n                \n                // RESIDUAL BOOK VALUE\n                // Complex conditional logic for book value calculation\n                try {\n                    if (!player.contractType || !player.contractType.includes(\"Propriet\") || \n                        (player.contractType.includes(\"Propriet\") && (player.transferPriceYear || 0) > 2023)) {\n                        \n                        let yearsElapsed = new Date().getFullYear() - (player.transferPriceYear || 0);\n                        let amortizationFactor = (5 - yearsElapsed) / 5;\n                        \n                        // Ensure factor is between 0 and 1\n                        amortizationFactor = Math.max(0, Math.min(1, amortizationFactor));\n                        player.residualBookValue = amortizationFactor * (player.transferPrice || 0);\n                        \n                    } else {\n                        // Calculate based on contract remaining\n                        if (player.startContract && Utils && Utils.calculateAge && \n                            Utils.calculateAge(player.startContract) > 4) {\n                            player.residualBookValue = 0;\n                        } else if (player.totalYearsOfContract > 0) {\n                            player.residualBookValue = (player.transferPrice || 0) * \n                                ((player.remainingYearsOfContract || 0) / (player.totalYearsOfContract || 1));\n                        } else {\n                            player.residualBookValue = 0;\n                        }\n                    }\n                    \n                    // Ensure non-negative\n                    player.residualBookValue = Math.max(0, player.residualBookValue);\n                    \n                } catch (e) {\n                    console.log(\"Error calculating residualBookValue for player:\", player.playerId, e);\n                    player.residualBookValue = 0;\n                }\n                \n                // BOOK VALUE RESIDUAL CONTRACT RATIO\n                player.bvResContractRatio = (player.remainingYearsOfContract || 0) > 0 ? \n                    (player.residualBookValue || 0) / (player.remainingYearsOfContract || 1) : 0;\n                \n                // PLAYERS' COSTS\n                if (Utils && Utils.actualValueSum) {\n                    player.optimalCosts = Utils.actualValueSum(\n                        (player.salaryOptimal || 0) * (player.currentLeagueTaxRate || 1),\n                        player.remainingYearsOfContract || 0,\n                        0.05\n                    );\n                } else {\n                    player.optimalCosts = 0;\n                }\n            } else {\n                // Set default values if we can't calculate properly\n                player.expectedClubCluster = player.currentClubCluster || 0;\n                player.expectedClubRank = player.currentClubRank || 0;\n                player.weightInClub = 0;\n                player.weightInExpectedClubCluster = 0;\n                player.weightInExpectedClubRank = 0;\n                player.salaryOptimal = 0;\n                player.salaryPotential = 0;\n                player.benefits = 0;\n                player.costs = 0;\n                player.optval = 0;\n                player.residualValue = 0;\n                player.residualBookValue = 0;\n                player.bvResContractRatio = 0;\n                player.optimalCosts = 0;\n            }\n        });\n    });\n});\n\nconsole.log(\"PLAYER DONE : WEIGHT, OPTIMAL SALARY, BENEFITS, COSTS, OPTVAL, RESIDUALVALUE, RESIDUAL BOOK VALUE, OPTIMAL COST\");\n\n// Add large commented block with POTENTIAL SALARY calculation here\n// This block is commented in the original code, so we keep it commented\n\nconsole.log(\"POTENTIAL SALARY COMPLETED\");\n\n// Return data\nmsg.playersByGroup = playersByGroup;\nmsg.payload = TheFootballTree;\nmsg.globalMaxFatmol = globalMaxFatmol;\nmsg.avgGlobalFatmol = avgGlobalFatmol;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 1060,
        "wires": [
            [
                "c472c7ae0b25e909"
            ]
        ]
    },
    {
        "id": "d623e764d089caeb",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Divisione in gruppi e valori di gruppo by Claude",
        "func": "let TheFootballTree = msg.TheFootballTree;\n\nconsole.log(\"DIVISIONE IN GRUPPI E CALCOLO\");\n\n// Initialize data structures to store player groups\nlet playersByGroup = {};\nlet playersByGroupAndClubCluster = {};\n\ntry {\n    // DIVIDE PLAYERS INTO GROUPS\n    Object.keys(TheFootballTree).forEach(leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach(club => { \n            club.Players.forEach(player => {\n                // Skip players with undefined role group\n                if (player.latestRoleGroup === undefined) {\n                    return;\n                }\n                \n                let playerID = player.playerId;\n                \n                // PLAYERS BY GROUP\n                // Initialize group if it doesn't exist\n                if (playersByGroup[player.latestRoleGroup] === undefined) {\n                    playersByGroup[player.latestRoleGroup] = { \"Players\": {} };\n                }\n                \n                // Add player to group\n                playersByGroup[player.latestRoleGroup].Players[player.playerId] = {\n                    age: player.age || 0,\n                    transferPrice: player.transferPrice || 0,\n                    fatmol: player.fatmol || 0\n                };\n                \n                // Skip players with undefined club cluster\n                if (player.currentClubCluster === undefined) {\n                    return;\n                }\n                \n                // PLAYERS BY GROUP AND CLUB CLUSTER\n                // Initialize group if it doesn't exist\n                if (playersByGroupAndClubCluster[player.latestRoleGroup] === undefined) {\n                    playersByGroupAndClubCluster[player.latestRoleGroup] = {};\n                }\n                \n                // Initialize club cluster if it doesn't exist\n                if (playersByGroupAndClubCluster[player.latestRoleGroup][player.currentClubCluster] === undefined) {\n                    playersByGroupAndClubCluster[player.latestRoleGroup][player.currentClubCluster] = {\n                        Players: {}\n                    };\n                }\n                \n                // Add player to group and club cluster\n                playersByGroupAndClubCluster[player.latestRoleGroup][player.currentClubCluster].Players[player.playerId] = {\n                    age: player.age || 0,\n                    transferPrice: player.transferPrice || 0,\n                    fatmol: player.fatmol || 0\n                };\n            });\n        });\n    });\n    \n    // FOR EACH GROUP AND CLUB CLUSTER CALCULATE: AVERAGE AGE, MAXIMUM AGE, AVERAGE FATMOL, MAXIMUM FATMOL, AVERAGE TRANSFER PRICE\n    Object.keys(playersByGroupAndClubCluster).forEach(roleGroup => {\n        Object.keys(playersByGroupAndClubCluster[roleGroup]).forEach(clubCluster => {\n            let maxFatmol = 0;\n            let maxAge = 0;\n            let totFatmol = 0;\n            let totAge = 0;\n            let totTransferPrice = 0;\n            let numPlayersInGroupCluster = Object.keys(playersByGroupAndClubCluster[roleGroup][clubCluster].Players).length;\n            let totTransferPriceWithTreshold = 0;\n            let numPlayersTransferPriceWithTreshold = 0;\n            let avgTreshold = 4.51;\n            \n            Object.keys(playersByGroupAndClubCluster[roleGroup][clubCluster].Players).forEach(playerId => {\n                let playerFatmol = playersByGroupAndClubCluster[roleGroup][clubCluster].Players[playerId].fatmol || 0;\n                let playerAge = playersByGroupAndClubCluster[roleGroup][clubCluster].Players[playerId].age || 0;\n                let playerTransferPrice = playersByGroupAndClubCluster[roleGroup][clubCluster].Players[playerId].transferPrice || 0;\n                \n                maxFatmol = maxFatmol > playerFatmol ? maxFatmol : playerFatmol;\n                maxAge = maxAge > playerAge ? maxAge : playerAge;\n                \n                totFatmol += playerFatmol;\n                totAge += playerAge;\n                totTransferPrice += playerTransferPrice;\n                \n                // Apply threshold logic for transfer price\n                if (playerTransferPrice >= avgTreshold) {\n                    totTransferPriceWithTreshold += playerTransferPrice;\n                    numPlayersTransferPriceWithTreshold++;\n                }\n            });\n            \n            // Store calculated metrics\n            playersByGroupAndClubCluster[roleGroup][clubCluster].maxFatmol = maxFatmol;\n            playersByGroupAndClubCluster[roleGroup][clubCluster].maxAge = maxAge;\n            \n            // Avoid division by zero\n            playersByGroupAndClubCluster[roleGroup][clubCluster].avgFatmol = \n                numPlayersInGroupCluster > 0 ? totFatmol / numPlayersInGroupCluster : 0;\n                \n            playersByGroupAndClubCluster[roleGroup][clubCluster].avgAge = \n                numPlayersInGroupCluster > 0 ? totAge / numPlayersInGroupCluster : 0;\n                \n            // Commented out in original but fixed here\n            // playersByGroupAndClubCluster[roleGroup][clubCluster].avgTransferPrice = \n            //     numPlayersInGroupCluster > 0 ? totTransferPrice / numPlayersInGroupCluster : 0;\n            \n            // playersByGroupAndClubCluster[roleGroup][clubCluster].avgTransferPriceWithTreshold = \n            //     numPlayersTransferPriceWithTreshold > 0 ? totTransferPriceWithTreshold / numPlayersTransferPriceWithTreshold : 0;\n                \n            playersByGroupAndClubCluster[roleGroup][clubCluster].totFatmol = totFatmol;\n            playersByGroupAndClubCluster[roleGroup][clubCluster].numPlayersInGroupCluster = numPlayersInGroupCluster;\n        });\n    });\n    \n    // FOR EACH GROUP CALCULATE: AVERAGE AGE, MAXIMUM AGE, AVERAGE FATMOL, MAXIMUM FATMOL, AVERAGE TRANSFER PRICE\n    Object.keys(playersByGroup).forEach(roleGroup => {\n        let maxFatmol = 0;\n        let maxAge = 0;\n        let totTransferPrice = 0;\n        let totAge = 0;\n        let totFatmol = 0;\n        let numPlayersInGroup = Object.keys(playersByGroup[roleGroup].Players).length;\n        \n        let totTransferPriceWithTreshold = 0;\n        let numPlayersTransferPriceWithTreshold = 0;\n        \n        let avgTreshold = 4.51;\n        \n        Object.keys(playersByGroup[roleGroup].Players).forEach(playerId => {\n            let playerFatmol = playersByGroup[roleGroup].Players[playerId].fatmol || 0;\n            let playerAge = playersByGroup[roleGroup].Players[playerId].age || 0;\n            let playerTransferPrice = playersByGroup[roleGroup].Players[playerId].transferPrice || 0;\n            \n            maxFatmol = maxFatmol > playerFatmol ? maxFatmol : playerFatmol;\n            maxAge = maxAge > playerAge ? maxAge : playerAge;\n            \n            totFatmol += playerFatmol;\n            totAge += playerAge;\n            totTransferPrice += playerTransferPrice;\n            \n            // Apply threshold logic for transfer price\n            if (playerTransferPrice >= avgTreshold) {\n                totTransferPriceWithTreshold += playerTransferPrice;\n                numPlayersTransferPriceWithTreshold++;\n            }\n        });\n        \n        // Store calculated metrics\n        playersByGroup[roleGroup].maxFatmol = maxFatmol;\n        playersByGroup[roleGroup].maxAge = maxAge;\n        \n        // Avoid division by zero\n        playersByGroup[roleGroup].avgFatmol = \n            numPlayersInGroup > 0 ? totFatmol / numPlayersInGroup : 0;\n            \n        playersByGroup[roleGroup].avgAge = \n            numPlayersInGroup > 0 ? totAge / numPlayersInGroup : 0;\n            \n        playersByGroup[roleGroup].avgTransferPrice = \n            numPlayersInGroup > 0 ? totTransferPrice / numPlayersInGroup : 0;\n            \n        playersByGroup[roleGroup].avgTransferPriceWithTreshold = \n            numPlayersTransferPriceWithTreshold > 0 ? totTransferPriceWithTreshold / numPlayersTransferPriceWithTreshold : 0;\n            \n        playersByGroup[roleGroup].numPlayersInGroup = numPlayersInGroup;\n        playersByGroup[roleGroup].numPlayersTransferPriceWithTreshold = numPlayersTransferPriceWithTreshold;\n    });\n\n} catch(e) {\n    console.log(\"Error in group analysis:\", e);\n}\n\n// Add results to message object\nmsg.playersByGroup = playersByGroup;\nmsg.playersByGroupAndClubCluster = playersByGroupAndClubCluster;\nmsg.payload = TheFootballTree;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1160,
        "wires": [
            [
                "80bc54fd81fd59be"
            ]
        ]
    },
    {
        "id": "d71c23cd2f2c2d87",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Prezzi",
        "func": "\nlet TheFootballTree = msg.payload;\nlet PlayersErrors = msg.PlayersErrors;\nlet playersByGroup = msg.playersByGroup;\nlet avgGlobalFatmol = msg.avgGlobalFatmol;\nlet globalMaxFatmol = msg.globalMaxFatmol;\n\n/** IMPORTO LE DEFINIZIONI DEGLI OGGETTI CHE VERRANNO CREATI \nconst Player = global.get(\"ThePlayerObject\");\nconst Error = global.get(\"TheErrorObject\");\nconst PlayerError = global.get(\"ThePlayerErrorObject\");\nconst Utils = global.get(\"UTILS\");**/\n\n\nconsole.log(\"PLAYER EXPECTED PRICE BEGINS\");\n\n\nconst setExpectedPrice = function(player) {\n    //Expected PRICE\n    let contractRemainingMonths = player.remainingMonthsOfContract;\n    \n    let beta = 0.5\n    \n    switch(true) {\n        \n        case (contractRemainingMonths <= 6) :\n            beta = 0;\n            break;\n        case (contractRemainingMonths > 6 && contractRemainingMonths <= 12 ) : {\n            \n            beta= player.superstar ? 0.8 : 0.5\n        }\n            break;\n        case ( contractRemainingMonths > 12 && contractRemainingMonths <= 18 ) :\n            beta = 0.65;\n            break;\n        case  ( contractRemainingMonths > 18 && contractRemainingMonths <= 24 ) :\n            beta = 0.8\n            break;\n        case  ( contractRemainingMonths > 24 ) :\n            beta = 1\n            break;\n        default :\n            beta = 0.5\n        break;\n        \n    }\n    \n    player.expectedPrice = player.potentialPrice * beta;\n    \n    if (player.withdrawalClause && player.withdrawalClause != 0 ) {\n        \n        player.expectedPrice =  ( player.potentialPrice * beta ) < player.withdrawalClause ? ( player.potentialPrice * beta ) : player.withdrawalClause\n    } \n    \n    \n    if ( !player.contractType.includes(\"Propriet\") ) {\n        player.expectedPrice =  player.potentialPrice\n    }\n}\n\n\n\n\ntry {    \n\n    console.log(\"CALCOLO EXPECTED PRICE\")\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            club.Players.forEach( player => {\n                \n           \n    \n                //SET EXPECTEDPRICE\n                setExpectedPrice(player);\n                \n                let dirtyCoeff = (0.3 * ( (player.latestUniqueness - msg.minNotZeroUniqueness)  / ( 100 - msg.minNotZeroUniqueness ) ) )\n                \n                let dirty = ( 1 + dirtyCoeff ) * player.expectedPrice\n                \n                \n                player.perceivedExpectedPrice = player.tmValue > dirty ? (player.tmValue + dirty ) / 2 : dirty;\n                \n                player.perceivedExpectedPrice = player.withdrawalClause > 0  && player.perceivedExpectedPrice > player.withdrawalClause ? player.withdrawalClause : player.perceivedExpectedPrice;\n                \n                \n               // player.perceivedExpectedPrice = player.contractType.includes(\"Propriet\") && player.remainingMonthsOfContract < 7 ? 0 : player.perceivedExpectedPrice;\n                \n                player.perceivedExpectedPrice =  player.expectedPrice > player.tmValue ? player.expectedPrice : player.perceivedExpectedPrice;\n                \n                \n                player.residualValue = player.residualValue > player.potentialPrice ? player.potentialPrice : player.residualValue            \n    \n    \n                player.capitalGain = player.expectedPrice - player.residualBookValue\n                \n                player.profit = player.expectedPrice - player.residualValue;\n                \n                player.salaryAbsoluteDeviation = player.salaryOptimal - player.salaryNet;\n                player.salaryPercDeviation = !isNaN(player.salaryOptimal) ? ( player.salaryAbsoluteDeviation * 100) / player.salaryOptimal : 0;\n                \n                //aggiunto il 16/01/2023\n                player.deviation = player.potentialPrice - player.residualValue;\n                \n                if (player.playerId == \"2k5g68ywtr79lc45wozvifqlm\") {\n                    \n                    console.log(\"dirty\", dirty)\n                    console.log(\"dirtyCoeff\", dirtyCoeff)\n                    console.log(\"player.perceivedExpectedPrice\", player.perceivedExpectedPrice)\n                    console.log(\"player.player.tmValue\", player.tmValue)\n                    \n                }\n                \n            })\n            \n           \n        })\n    })\n\n\n}\n\ncatch(e) {\n    console.log(e)\n}\n\n\n\n\n\n//msg.payload=TheFootballTree\nmsg.footballTree=TheFootballTree\nmsg.PlayersErrors=PlayersErrors\nmsg.playersByGroup=playersByGroup;\n console.log(\"*** PLAYERS ANALISYS COMPLETED ***\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 900,
        "wires": [
            [
                "871ef051aefa2d11"
            ]
        ]
    },
    {
        "id": "db88cb5e2ab1af0a",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Archive Set",
        "func": "\nconsole.log(\"REQUESTING ARCHIVE POTENTIAL PRICES\")\nmsg.topic = \"with dataset as (SELECT playerId, currentPotentialPrice,potentialPrice,currentExpectedPrice,expectedPrice,elaborationNum,  week, year from latestplayers_archive where 1=1 and elaborationNum in (select max(elaborationNum) from latestplayers_archive GROUP BY year, week) order by elaborationNum asc) select * from dataset d join ( select distinct elaborationNum from dataset order by elaborationNum desc limit 4) e on d.elaborationNum =e.elaborationNum;\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 900,
        "wires": [
            [
                "1129920ecbc612e0"
            ]
        ]
    },
    {
        "id": "1129920ecbc612e0",
        "type": "mysql",
        "z": "521d26a7dba2b3ee",
        "mydb": "ea1e5103bb9e91ad",
        "name": "PRODUZIONE",
        "x": 1300,
        "y": 900,
        "wires": [
            [
                "3795a9eb4f249b0a"
            ]
        ]
    },
    {
        "id": "3795a9eb4f249b0a",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Compute avarage",
        "func": "\nconsole.log(\"AVARAGIN POTENTIAL PRICE\")\n\nlet TheFootballTree = msg.footballTree; //global.get(\"TheLatestFooballTree\")\nlet playerData = msg.payload;\n\nlet topic\n\nlet yamal = {}\n\n\n Object.keys(TheFootballTree).forEach( leagueId => {\n     TheFootballTree[leagueId].Clubs.forEach( club => { \n         club.Players.forEach( player => {\n             \n             \n             \n             // PUNTO CRITICO INVERTO I VALORI DI POTENTIAL PRICE\n             \n            player.currentPotentialPrice = player.potentialPrice\n            player.currentExpectedPrice = 0\n             \n            let previousSet =  playerData.filter( pd => pd.playerId == player.playerId).filter( pv=> pv.week !== player.week).sort((a,b) => a.elaborationNum - b.elaborationNum).slice( -3);\n            \n            \n            player.potentialPrice = ( previousSet.reduce((acc, playerPrevSet) => acc+playerPrevSet.currentPotentialPrice, 0) +  player.currentPotentialPrice ) / ( previousSet.length+ 1);\n            player.expectedPrice = ( previousSet.reduce((acc, playerPrevSet) => acc+playerPrevSet.currentExpectedPrice, 0) +  player.currentExpectedPrice ) / ( previousSet.length+ 1);\n            \n            \n            if (player.playerId == \"abr79wsl0folgkyvl821ggs2c\") {\n                \n                yamal[\"week\"] = player.week;\n                yamal[\"currentPotentialPrice\"] = player.currentPotentialPrice;\n                yamal[\"potentialPrice\"] = player.potentialPrice;\n                yamal[\"previousSet\"] = previousSet;\n                \n            }\n             \n         })\n     })\n })\n\n\nmsg.yamal=yamal;\nmsg.payload = TheFootballTree;\nconsole.log(\"AVARAGIN POTENTIAL PRICE COMPLETED\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1510,
        "y": 900,
        "wires": [
            [
                "d71c23cd2f2c2d87"
            ]
        ]
    },
    {
        "id": "69a4e2760e9c7979",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Prezzi",
        "func": "\nlet TheFootballTree = msg.payload;\nlet PlayersErrors = msg.PlayersErrors;\nlet playersByGroup = msg.playersByGroup;\nlet avgGlobalFatmol = msg.avgGlobalFatmol;\nlet globalMaxFatmol = msg.globalMaxFatmol;\n\n/** IMPORTO LE DEFINIZIONI DEGLI OGGETTI CHE VERRANNO CREATI \nconst Player = global.get(\"ThePlayerObject\");\nconst Error = global.get(\"TheErrorObject\");\nconst PlayerError = global.get(\"ThePlayerErrorObject\");\nconst Utils = global.get(\"UTILS\");**/\n\n\nconsole.log(\"PLAYER EXPECTED PRICE BEGINS\");\n\n\nconst setExpectedPrice = function(player) {\n    //Expected PRICE\n    let contractRemainingMonths = player.remainingMonthsOfContract;\n    \n    let beta = 0.5\n    \n    switch(true) {\n        \n        case (contractRemainingMonths <= 6) :\n            beta = 0;\n            break;\n        case (contractRemainingMonths > 6 && contractRemainingMonths <= 12 ) : {\n            \n            beta= player.superstar ? 0.8 : 0.5\n        }\n            break;\n        case ( contractRemainingMonths > 12 && contractRemainingMonths <= 18 ) :\n            beta = 0.65;\n            break;\n        case  ( contractRemainingMonths > 18 && contractRemainingMonths <= 24 ) :\n            beta = 0.8\n            break;\n        case  ( contractRemainingMonths > 24 ) :\n            beta = 1\n            break;\n        default :\n            beta = 0.5\n        break;\n        \n    }\n    \n    player.expectedPrice = player.potentialPrice * beta;\n    \n    if (player.withdrawalClause && player.withdrawalClause != 0 ) {\n        \n        player.expectedPrice =  ( player.potentialPrice * beta ) < player.withdrawalClause ? ( player.potentialPrice * beta ) : player.withdrawalClause\n    } \n    \n    \n    if ( !player.contractType.includes(\"Propriet\") ) {\n        player.expectedPrice =  player.potentialPrice\n    }\n}\n\n\n\n\ntry {    \n\n    console.log(\"CALCOLO EXPECTED PRICE\")\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            club.Players.forEach( player => {\n                \n           \n    \n                //SET EXPECTEDPRICE\n                setExpectedPrice(player);\n                \n                let dirtyCoeff = (0.3 * ( (player.latestUniqueness - msg.minNotZeroUniqueness)  / ( 100 - msg.minNotZeroUniqueness ) ) )\n                \n                let dirty = ( 1 + dirtyCoeff ) * player.expectedPrice\n                \n                \n                player.perceivedExpectedPrice = player.tmValue > dirty ? (player.tmValue + dirty ) / 2 : dirty;\n                \n                player.perceivedExpectedPrice = player.withdrawalClause > 0  && player.perceivedExpectedPrice > player.withdrawalClause ? player.withdrawalClause : player.perceivedExpectedPrice;\n                \n                \n               // player.perceivedExpectedPrice = player.contractType.includes(\"Propriet\") && player.remainingMonthsOfContract < 7 ? 0 : player.perceivedExpectedPrice;\n                \n                player.perceivedExpectedPrice =  player.expectedPrice > player.tmValue ? player.expectedPrice : player.perceivedExpectedPrice;\n                \n                \n                player.residualValue = player.residualValue > player.potentialPrice ? player.potentialPrice : player.residualValue            \n    \n    \n                player.capitalGain = player.expectedPrice - player.residualBookValue\n                \n                player.profit = player.expectedPrice - player.residualValue;\n                \n                player.salaryAbsoluteDeviation = player.salaryOptimal - player.salaryNet;\n                player.salaryPercDeviation = !isNaN(player.salaryOptimal) ? ( player.salaryAbsoluteDeviation * 100) / player.salaryOptimal : 0;\n                \n                //aggiunto il 16/01/2023\n                player.deviation = player.potentialPrice - player.residualValue;\n                \n                if (player.playerId == \"2k5g68ywtr79lc45wozvifqlm\") {\n                    \n                    console.log(\"dirty\", dirty)\n                    console.log(\"dirtyCoeff\", dirtyCoeff)\n                    console.log(\"player.perceivedExpectedPrice\", player.perceivedExpectedPrice)\n                    console.log(\"player.player.tmValue\", player.tmValue)\n                    \n                }\n                \n            })\n            \n           \n        })\n    })\n\n\n}\n\ncatch(e) {\n    console.log(e)\n}\n\n\n\n\n\n//msg.payload=TheFootballTree\nmsg.footballTree=TheFootballTree\nmsg.PlayersErrors=PlayersErrors\nmsg.playersByGroup=playersByGroup;\n console.log(\"*** PLAYERS ANALISYS COMPLETED ***\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1550,
        "y": 1100,
        "wires": [
            [
                "bcd3842402ecb143"
            ]
        ]
    },
    {
        "id": "3c2ca70b09b54d2e",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Archive Set",
        "func": "\nconsole.log(\"REQUESTING ARCHIVE AVGMICORMACRO & POTENTIAL PRICES\")\nmsg.topic = \"with dataset as (SELECT playerId, currentPotentialPrice,potentialPrice,currentExpectedPrice,expectedPrice,elaborationNum,  week, year from latestplayers_archive where 1=1 and elaborationNum in (select max(elaborationNum) from latestplayers_archive GROUP BY year, week) order by elaborationNum asc) select * from dataset d join ( select distinct elaborationNum from dataset order by elaborationNum desc limit 4) e on d.elaborationNum =e.elaborationNum;\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1020,
        "wires": [
            [
                "8f1ff5b4ed6dc1fc"
            ]
        ]
    },
    {
        "id": "8f1ff5b4ed6dc1fc",
        "type": "mysql",
        "z": "521d26a7dba2b3ee",
        "mydb": "ea1e5103bb9e91ad",
        "name": "PRODUZIONE",
        "x": 1340,
        "y": 1100,
        "wires": [
            [
                "7f27a63d494bb40e"
            ]
        ]
    },
    {
        "id": "7f27a63d494bb40e",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Compute avarage",
        "func": "\nconsole.log(\"AVARAGIN POTENTIAL PRICE\")\n\nlet TheFootballTree = msg.footballTree; //global.get(\"TheLatestFooballTree\")\nlet playerData = msg.payload;\n\nlet topic\n\nlet yamal = {}\n\n\n Object.keys(TheFootballTree).forEach( leagueId => {\n     TheFootballTree[leagueId].Clubs.forEach( club => { \n         club.Players.forEach( player => {\n             \n             \n             \n             // PUNTO CRITICO INVERTO I VALORI DI POTENTIAL PRICE\n             \n            player.currentPotentialPrice = player.potentialPrice\n            player.currentExpectedPrice = 0\n             \n            let previousSet =  playerData.filter( pd => pd.playerId == player.playerId).filter( pv=> pv.week !== player.week).sort((a,b) => a.elaborationNum - b.elaborationNum).slice( -3);\n            \n            \n            player.potentialPrice = ( previousSet.reduce((acc, playerPrevSet) => acc+playerPrevSet.currentPotentialPrice, 0) +  player.currentPotentialPrice ) / ( previousSet.length+ 1);\n            player.expectedPrice = ( previousSet.reduce((acc, playerPrevSet) => acc+playerPrevSet.currentExpectedPrice, 0) +  player.currentExpectedPrice ) / ( previousSet.length+ 1);\n            \n            \n            if (player.playerId == \"abr79wsl0folgkyvl821ggs2c\") {\n                \n                yamal[\"week\"] = player.week;\n                yamal[\"currentPotentialPrice\"] = player.currentPotentialPrice;\n                yamal[\"potentialPrice\"] = player.potentialPrice;\n                yamal[\"previousSet\"] = previousSet;\n                \n            }\n             \n         })\n     })\n })\n\n\nmsg.yamal=yamal;\nmsg.payload = TheFootballTree;\nconsole.log(\"AVARAGIN POTENTIAL PRICE COMPLETED\")\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 1020,
        "wires": [
            [
                "69a4e2760e9c7979"
            ]
        ]
    },
    {
        "id": "c74b50b7f72ae912",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Clean Memory",
        "func": "flow.set(\"_STATS\",null) && \nflow.set(\"_INFO\",null) && \nflow.set(\"_UNIQ\",null) && \nflow.set(\"_VOLATILITY\",null) && \nflow.set(\"_CLUBS\",null) && \nflow.set(\"_PLAYERS\",null) && \nflow.set(\"_LEAGUES\",null) && \nflow.set(\"_ROLES\",null) \n\nmsg.payload = \"Elaboration Completed\" \n\nflow.get(\"logmsg\").message = \"Elaboration Completed\"\nnode.log(flow.get(\"logmsg\"))\n\n\n\n\n\n\nconsole.log(\"CLEANING MEMORY\")\nflow.get(\"logmsg\").message = \"CLEANING MEMORY\"\nnode.log(flow.get(\"logmsg\"))\n\n//const v8 = require('v8')\nconsole.log(`V8 Total Heap Size: ${(v8.getHeapStatistics().total_available_size / 1024 / 1024).toFixed(2)} MB`)\n/*let mem = process.memoryUsage()\nconst formatMem = (m) => ( m/1048576 ).toFixed(2)\nconsole.log(`Initial Memory Use (MB): RSS=${formatMem(mem.rss)}. Heap: Used=${formatMem(mem.heapUsed)}, Tot=${formatMem(mem.heapTotal)}. Ext C++=${formatMem(mem.external)}`)*/\n\nconsole.log(\"Cancello variabili nel flow\")\n\n\nflow.set(\"_CLUBS\",null)\nflow.set(\"_COUNTRIES\",null)\nflow.set(\"_DATA\",null)\nflow.set(\"_INFO\",null)\nflow.set(\"_LEAGUES\",null)\nflow.set(\"_MINUTES\",null)\nflow.set(\"_PLAYERS\",null)\nflow.set(\"_ROLES\",null)\nflow.set(\"_STATS\",null)\nflow.set(\"_UNIQ\",null)\nflow.set(\"_VOLATILY\",null)\n\nflow.set(\"errors\",null)\n// Cancellazione di tutte le proprietà elencate\nconsole.log(\"Cancello oggetti in msg\")\n\n// Annullamento dei riferimenti prima delle delete\n\nmsg._STATS = null;\nmsg._STATSIndex = null;\nmsg._INFO = null;\nmsg._INFOIndex = null;\nmsg._VOLATILITY = null;\nmsg._VOLATILITYIndex = null;\nmsg._UNIQ = null;\nmsg._UNIQIndex = null;\nmsg._PLAYERS = null;\nmsg._PLAYERSIndex = null;\nmsg._CLUBS = null;\nmsg._CLUBSIndex = null;\nmsg._LEAGUES = null;\nmsg._LEAGUESIndex = null;\nmsg._ROLES = null;\nmsg._ROLESIndex = null;\nmsg._COUNTRIES = null;\nmsg._COUNTRIESIndex = null;\nmsg._DATA = null;\nmsg._DATAIndex = null;\nmsg._MINUTES = null;\nmsg._MINUTESIndex = null;\nmsg.Leagues = null;\nmsg.LeaguesIndex = null;\nmsg.Clubs = null;\nmsg.ClubsIndex = null;\nmsg.PlayersErrors = null;\n\ndelete msg._STATS;\ndelete msg._STATSIndex;\ndelete msg._INFO;\ndelete msg._INFOIndex;\ndelete msg._VOLATILITY;\ndelete msg._VOLATILITYIndex;\ndelete msg._UNIQ;\ndelete msg._UNIQIndex;\ndelete msg._PLAYERS;\ndelete msg._PLAYERSIndex;\ndelete msg._CLUBS;\ndelete msg._CLUBSIndex;\ndelete msg._LEAGUES;\ndelete msg._LEAGUESIndex;\ndelete msg._ROLES;\ndelete msg._ROLESIndex;\ndelete msg._COUNTRIES;\ndelete msg._COUNTRIESIndex;\ndelete msg._DATA;\ndelete msg._DATAIndex;\ndelete msg._MINUTES;\ndelete msg._MINUTESIndex;\ndelete msg.Leagues;\ndelete msg.LeaguesIndex;\ndelete msg.Clubs;\ndelete msg.ClubsIndex;\ndelete msg.PlayersErrors;\n\n\nconsole.log(\"memory cleaned\")\nconsole.log(`V8 Total Heap Size: ${(v8.getHeapStatistics().total_available_size / 1024 / 1024).toFixed(2)} MB`)\nflow.get(\"logmsg\").message = \"MEMORY CLEANED\"\nnode.log(flow.get(\"logmsg\"))\n\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "v8",
                "module": "v8"
            }
        ],
        "x": 2060,
        "y": 1020,
        "wires": [
            [
                "2df98cd5f713c014"
            ]
        ]
    },
    {
        "id": "2df98cd5f713c014",
        "type": "link out",
        "z": "521d26a7dba2b3ee",
        "name": "MODELOUT",
        "mode": "return",
        "links": [],
        "x": 2225,
        "y": 1020,
        "wires": []
    },
    {
        "id": "3fde063a678b3921",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Consumer Data",
        "func": "flow.get(\"logmsg\").message = \"Consumer Data Begins\"\nnode.log(flow.get(\"logmsg\"))\n\nlet TheFootballTree = msg.payload;\nconst Utils = global.get(\"UTILS\");\n\nvar Players = [];\nvar Clubs = [];\nvar Leagues = [];\n\n\nlet leagueRanks = []\nlet clubRanks = []\nlet playerRanks = []\n\n\n\ntry {\n    \n\n\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        \n        \n        TheFootballTree[leagueId].consumerValue = 0;\n        TheFootballTree[leagueId].consumerResidualValue = 0;\n        TheFootballTree[leagueId].consumerExpectedSalary = 0;\n        TheFootballTree[leagueId].consumerExpectedSalaryAbsoluteDeviation = 0;\n        TheFootballTree[leagueId].consumerExpectedSalaryPercDeviation = 0;\n\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n           \n            club.consumerValue = 0;\n            club.consumerResidualValue = 0;\n            club.consumerExpectedSalary = 0;\n            club.consumerExpectedSalaryAbsoluteDeviation = 0;\n            club.consumerExpectedSalaryPercDeviation = 0;\n            \n            club.Players.forEach( player => {\n                \n                player.consumerValue = 0;\n                player.consumerResidualValue = 0;\n                player.consumerExpectedSalary = 0;\n                player.consumerExpectedSalaryAbsoluteDeviation = 0;\n                player.consumerExpectedSalaryPercDeviation = 0;\n                \n               \n                player.consumerValue = !player.tmValue ? player.potentialPrice : ( (player.potentialPrice * 2/3) + (player.tmValue * 1/3) );\n                \n                player.consumerResidualValue = player.residualValue > player.consumerValue ? player.consumerValue : player.residualValue            \n\n                // manca residual\n                //manca rank\n                player.consumerExpectedSalary = player.salaryPotential;\n                player.consumerExpectedSalaryAbsoluteDeviation = player.consumerExpectedSalary - player.salaryNet;\n                player.consumerExpectedSalaryPercDeviation = (player.consumerExpectedSalaryAbsoluteDeviation / player.consumerExpectedSalary )*100\n                \n                club.consumerValue = club.consumerValue + player.consumerValue;\n                club.consumerResidualValue =  club.consumerResidualValue  + player.consumerResidualValue\n                club.consumerExpectedSalary = club.consumerExpectedSalary + player.consumerExpectedSalary;\n                club.consumerExpectedSalaryAbsoluteDeviation = club.consumerExpectedSalary - club.salaryNet;\n                club.consumerExpectedSalaryPercDeviation = (club.consumerExpectedSalaryAbsoluteDeviation / club.consumerExpectedSalary )*100\n                \n                \n                let pranks = { \n                    playerId : player.playerId,\n                    consumerValue :  player.consumerValue\n            \n                } \n                playerRanks.push(pranks)\n                \n                \n            })\n            \n             let cranks = { \n                    clubId : club.clubId,\n                    consumerValue :  club.consumerValue\n            \n                } \n            clubRanks.push(cranks)\n            \n            \n            TheFootballTree[leagueId].consumerValue = TheFootballTree[leagueId].consumerValue + club.consumerValue;\n            TheFootballTree[leagueId].consumerResidualValue = TheFootballTree[leagueId].consumerResidualValue + club.consumerResidualValue;\n            TheFootballTree[leagueId].consumerExpectedSalary = TheFootballTree[leagueId].consumerExpectedSalary + club.consumerExpectedSalary;\n            TheFootballTree[leagueId].consumerExpectedSalaryAbsoluteDeviation = TheFootballTree[leagueId].consumerExpectedSalary - TheFootballTree[leagueId].salaryNet;\n            TheFootballTree[leagueId].consumerExpectedSalaryPercDeviation = (TheFootballTree[leagueId].consumerExpectedSalaryAbsoluteDeviation / TheFootballTree[leagueId].consumerExpectedSalary )*100\n           \n         \n        })   \n        let lranks = { \n            leagueId : leagueId,\n            consumerValue :  TheFootballTree[leagueId].consumerValue\n            \n        } \n        \n        \n        leagueRanks.push(lranks)\n        \n    })\n\n\n\n//RANKS\n\n      const leaguesByConsumerValue = leagueRanks.sort((a,b) => a.consumerValue - b.consumerValue).map((league, index, array) => league.leagueId).reverse()\n      const clubsByConsumerValue = clubRanks.sort((a,b) => a.consumerValue - b.consumerValue).map((club, index, array) => club.clubId).reverse()\n      const playersByConsumerValue = playerRanks.sort((a,b) => a.consumerValue - b.consumerValue).map((player, index, array) => player.playerId).reverse()\n      \n      //console.log(\"leaguesByConsumerValue\",leaguesByConsumerValue.length)\n     //console.log(\"clubsByConsumerValue\",clubsByConsumerValue.length)\n     //console.log(\"playersByConsumerValue\",playersByConsumerValue.length)\n    \n    /*\n    flow.get(\"logmsg\").message = \"leaguesByConsumerValue: \"\n    node.log(flow.get(\"logmsg\"))\n    flow.get(\"logmsg\").message = leaguesByConsumerValue\n    node.log(flow.get(\"logmsg\"))\n    flow.get(\"logmsg\").message = \"clubsByConsumerValue: \"+clubsByConsumerValue\n    node.log(flow.get(\"logmsg\"))\n    flow.get(\"logmsg\").message = \"playersByConsumerValue: \"+playersByConsumerValue\n    node.log(flow.get(\"logmsg\"))\n*/\nObject.keys(TheFootballTree).forEach( leagueId => {\n        \n        TheFootballTree[leagueId].rankByConsumerValue = 0\n        \n        TheFootballTree[leagueId].rankByConsumerValue = leaguesByConsumerValue.indexOf(leagueId) +1\n       \n        //TheFootballTree[leagueId].rankByConsumerValue = isNaN(TheFootballTree[leagueId].rankByConsumerValue) || TheFootballTree[leagueId].rankByConsumerValue === undefined ? 0 : TheFootballTree[leagueId].rankByConsumerValue;\n          // console.log(\"TheFootballTree[leagueId].rankByConsumerValue\",TheFootballTree[leagueId].rankByConsumerValue) \n            \n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            \n            club.rankByConsumerValue = 1;\n            \n            club.rankByConsumerValue = clubsByConsumerValue.indexOf(club.clubId)  +1 \n          \n            club.Players.forEach( player => {\n                player.rankByConsumerValue = 0;\n                player.rankByConsumerValue = playersByConsumerValue.indexOf(player.playerId)  +1\n              \n           \n           \n           \n            })\n            \n            \n        \n            \n          \n            \n        })\n       \n      \n    \n    })\n\n} catch(e) {\n    \n    console.log(e)\n}\n\n\n//flow.set(\"Players\",Players)\n//flow.set(\"Clubs\",Clubs)\n//flow.set(\"Leagues\",Leagues)\n//flow.set(\"TheFootballTree\",TheFootballTree)\nglobal.set(\"TheLatestFooballTree\",TheFootballTree)\nglobal.set(\"PlayersErrors\",msg.PlayersErrors)\nflow.get(\"logmsg\").message = \"Consumer Data ENDS\"\nnode.log(flow.get(\"logmsg\"))\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1900,
        "y": 1100,
        "wires": [
            [
                "c74b50b7f72ae912"
            ]
        ]
    },
    {
        "id": "1c563e23907dbf84",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Clubs and Leagues Analisys by Claude",
        "func": "flow.get(\"logmsg\").message = \"Clubs and Leagues Analysis Begins\";\nnode.log(flow.get(\"logmsg\"));\n\nlet TheFootballTree = msg.payload || {};\nconst Utils = global.get(\"UTILS\");\n\n// Initialize data structures\nvar allStats = {\n    'players': 0,\n    'foreignPlayers': 0,\n    'foreignPlayersRatio': 0,\n    'mostExpensiveTransferFee': null,\n    'mostExpensiveTraded': null,\n    'highestNetSalary': null,\n    'mostPayed': null, \n    'youngest': null,\n    'lowestAge': 0,\n    'oldest': null,\n    'highestAge': 0,\n    'highestEffectiveness': 0,\n    'highestEffectivenessPlayer': null,\n    'highestFairSalary': 0,\n    'highestFairSalaryPlayer': null,\n    'highestFairValue': 0,\n    'highestFairValuePlayer': null,\n    'highestExpectedPrice': 0,\n    'highestExpectedPricePlayer': null,\n    'risingStarTopFairValue': 0,\n    'risingStarTopFairValuePlayer': null,\n    'overperformerTopFairValue': 0,\n    'overperformerTopFairValuePlayer': null,\n    'superstarTopFairValue': 0,\n    'superstarTopFairValuePlayer': null,\n    'goalkeeperTopFairValue': 0,\n    'goalkeeperTopFairValuePlayer': null,\n    'defenderTopFairValue': 0,\n    'defenderTopFairValuePlayer': null,\n    'midfielderTopFairValue': 0,\n    'midfielderTopFairValuePlayer': null,\n    'forwardTopFairValue': 0,\n    'forwardTopFairValuePlayer': null,\n    'superstars': 0,\n    'risingstars': 0,\n    'overperformers': 0,\n    'regulars': 0,\n    'goalkeepers': 0,\n    'defenders': 0,\n    'midfielders': 0,\n    'forward': 0,\n    'mostEffectiveTeam': null,\n    'mostExpensiveTeam': null\n};\n\n// Initialize tracking variables\nlet leagueClusterSalaryAvg = {};\nlet leagueRanks = [];\n\nlet clubClusterSalaryAvg = {};\nlet clubLeagueSalaryAvg = {};\nlet clubRanks = [];\n\nlet playerRanks = [];\n\nlet clubOwnedPlayers = {};\n\ntry {\n    let allLeagueTotalRevenues = 0;\n\n    // Process each league\n    Object.keys(TheFootballTree).forEach(leagueId => {\n        const league = TheFootballTree[leagueId];\n        \n        // Initialize league statistics\n        league.numOfPlayers = 0; \n        league.avgAge = 0;\n        league.avgContractDuration = 0;\n        league.avgContractResidualDuration = 0;\n        \n        league.portfolioCost = 0;\n        league.residualBookValue = 0;\n        league.residualValue = 0;\n        league.potentialPrice = 0;\n        league.expectedPrice = 0;\n        league.capitalGain = 0;\n        league.netProfit = 0;\n        \n        league.salaryGross = 0;\n        league.salaryNet = 0;\n        league.salaryOptimal = 0;\n        league.salaryPotential = 0;\n        league.salaryAbsoluteDeviation = 0;\n        league.salaryPercDeviation = 0;\n        \n        // Added on 07/02/2023\n        league.numOfClubs = 0;\n        league.numOfForeignPlayers = 0;\n        league.numOfU23Players = 0;\n        league.numOfU23ForeignPlayers = 0;\n        league.shareOfForeignPlayers = 0;\n        league.shareOfU23Players = 0;\n        league.shareOfU23ForeginPlayers = 0;\n        league.salaryAvg = 0;\n        \n        league.rankByValue = 0;\n        league.rankByAcquisition = 0;\n        league.rankBySalary = 0;\n        league.avgSalaryNetCluster = 0;\n        league.absSalaryNetClusterDeviation = 0;\n        league.percSalaryNetClusterDeviation = 0;\n        \n        league.totalPerformance = 0;\n        league.totalEffectiveness = 0;\n        league.totalLatestUniqueness = 0;\n        league.totalLatestMicroVolatility = 0;\n\n        league.totalRevenues = 0;\n        league.totalProjectedRevenues = 0;\n        \n        league.annualBookValue = 0;\n        \n        let totalAgeLeague = 0;\n        let totalContractDurationLeague = 0;\n        let totalContractResidualDurationLeague = 0;\n        \n        // Process each club in the league\n        if (league.Clubs && Array.isArray(league.Clubs)) {\n            league.Clubs.forEach(club => {\n                // Skip if club is null or undefined\n                if (!club) return;\n                \n                // Initialize club statistics\n                club.avgAge = 0;\n                club.avgContractDuration = 0;\n                club.avgContractResidualDuration = 0;\n                \n                club.portfolioCost = 0;\n                club.residualBookValue = 0;\n                club.residualBookValueExceed100Min = 0;\n                club.residualValue = 0;\n                club.residualValueExceed100Min = 0;\n                club.potentialPrice = 0;\n                club.potentialPriceExceed100Min = 0;\n                club.expectedPrice = 0;\n                club.expectedPriceExceed100Min = 0;\n                club.capitalGain = 0;\n                club.netProfit = 0;\n                \n                club.salaryGrossSum = 0;\n                club.salaryGrossSumExceed100Min = 0;\n                club.salaryNetSum = 0;\n                club.salaryNetSumExceed100Min = 0;\n                club.salaryOptimal = 0;\n                club.salaryOptimalExceed100Min = 0;\n                club.salaryPotential = 0;\n                club.salaryPotentialExceed100Min = 0;\n                club.salaryAbsoluteDeviation = 0;\n                club.salaryPercDeviation = 0;\n                \n                // Added on 07/02/2023\n                club.salaryAvg = 0;\n                club.salaryAvgExceed100Min = 0;\n                \n                club.numOfForeignPlayers = 0;\n                club.numOfU23Players = 0;\n                club.numOfU23ForeignPlayers = 0;\n                club.shareOfForeignPlayers = 0;\n                club.shareOfU23Players = 0;\n                club.shareOfU23ForeignPlayers = 0;\n                club.numOfNationalPlayers = 0;\n                club.numOfExpiringContracts = 0;\n                club.numOfOwnedPlayers = 0;\n                club.avgSalaryNetCluster = 0;\n                club.absSalaryNetClusterDeviation = 0;\n                club.percSalaryNetClusterDeviation = 0;\n                club.rankByValue = 0;\n                club.rankBySalary = 0;\n                club.rankByAcquisition = 0;\n                \n                club.avgEffectiveness = 0;\n                club.totalEffectiveness = 0;\n                club.totalEffectivenessExceed100Min = 0;\n                club.totalEffectivenessExceed23 = 0;\n                \n                club.totalLatestMicroVolatility = 0;\n                club.totalLatestMicroVolatilityExceed100Min = 0;\n                \n                club.playersAnnualCost = 0;\n                club.annualBookValue = 0;\n               \n                league.numOfClubs++;\n                club.numOfPlayers = club.Players && Array.isArray(club.Players) ? club.Players.length : 0;\n                \n                let totalAge = 0;\n                let totalContractDuration = 0;\n                let totalContractResidualDuration = 0;\n                let numOfPlayersExceed100Min = 0;\n                \n                // Process each player in the club\n                if (club.Players && Array.isArray(club.Players)) {\n                    club.Players.forEach(player => {\n                        // Skip if player is null or undefined\n                        if (!player) return;\n                        \n                        // Check if player meets minimum minutes threshold\n                        if ((player.minutes || 0) > 100) {\n                            numOfPlayersExceed100Min++;\n                        }\n                        \n                        // Update league totals for performance metrics\n                        league.totalPerformance += player.performance || 0;\n                        league.totalEffectiveness += player.effectiveness || 0;\n                        league.totalLatestUniqueness += player.latestUniqueness || 0;\n                        league.totalLatestMicroVolatility += player.latestMicroVolatility || 0;\n                        \n                        // Initialize player rankings\n                        player.rankByPerformance = 0;\n                        player.rankByEffectiveness = 0;\n                        player.rankByValue = 0;\n                        \n                        player.absClubAvgSalaryDeviation = 0;\n                        player.percClubAvgSalaryDeviation = 0;\n                        \n                        player.absLeagueAvgSalaryDeviation = 0;\n                        player.percLeagueAvgSalaryDeviation = 0;\n\n                        player.absClubCusterAvgSalaryDeviation = 0;\n                        player.percClubClusterAvgSalaryDeviation = 0;\n                        player.annualCost = 0;\n                        player.annualBookValue = 0;\n                        \n                        // Calculate player metrics\n                        player.capitalGain = (player.perceivedExpectedPrice || 0) - (player.residualBookValue || 0);\n                        \n                        player.annualCost = (player.salaryGross || 0) + \n                                        ((player.remainingYearsOfMasterClubContract || 0) > 0 ? \n                                            ((player.residualBookValue || 0) / (player.remainingYearsOfMasterClubContract || 1)) : 0);\n                        \n                        player.annualBookValue = (player.remainingYearsOfMasterClubContract || 0) > 0 ? \n                                                ((player.residualBookValue || 0) / (player.remainingYearsOfMasterClubContract || 1)) : 0;\n                        \n                        player.costImpactOnRevenues = (club.revenues || 0) > 0 ? \n                                                    (((player.annualCost || 0) / (club.revenues || 1)) * 100) : 0;\n                        player.costImpactOnCosts = (club.costs || 0) > 0 ? \n                                                ((player.annualCost || 0) / (club.costs || 1)) : 0;\n                        \n                        // Update club totals\n                        club.annualBookValue += player.annualBookValue || 0;\n                        club.playersAnnualCost += player.annualCost || 0;\n                        \n                        totalAge += player.age || 0;\n                        \n                        // Calculate contract durations if Utils is available\n                        if (Utils && Utils.diffInMonths) {\n                            totalContractDuration += player.remainingMonthsOfContract || 0;\n                            \n                            if (player.endContract instanceof Date) {\n                                totalContractResidualDuration += Utils.diffInMonths(player.endContract, new Date());\n                            }\n                        }\n                        \n                        // Update club financial metrics\n                        club.portfolioCost += player.transferPrice || 0;\n                        club.residualBookValue += parseFloat(player.residualBookValue || 0);\n                        club.residualBookValueExceed100Min += (player.minutes || 0) > 100 ? \n                                                            parseFloat(player.residualBookValue || 0) : 0;\n                        club.residualValue += player.residualValue || 0;\n                        club.residualValueExceed100Min += (player.minutes || 0) > 100 ? \n                                                        (player.residualValue || 0) : 0;\n                        club.potentialPrice += player.potentialPrice || 0;\n                        club.potentialPriceExceed100Min += (player.minutes || 0) > 100 ? \n                                                        (player.potentialPrice || 0) : 0;\n                        club.expectedPrice += player.expectedPrice || 0;\n                        club.expectedPriceExceed100Min += (player.minutes || 0) > 100 ? \n                                                        (player.expectedPrice || 0) : 0;\n                        \n                        // Update club salary metrics\n                        club.salaryGrossSum += player.salaryGross || 0;\n                        club.salaryGrossSumExceed100Min += (player.minutes || 0) > 100 ? \n                                                        (player.salaryGross || 0) : 0;\n                        club.salaryNetSum += player.salaryNet || 0;\n                        club.salaryNetSumExceed100Min += (player.minutes || 0) > 100 ? \n                                                        (player.salaryNet || 0) : 0;\n                        club.salaryOptimal += player.salaryOptimal || 0;\n                        club.salaryOptimalExceed100Min += (player.minutes || 0) > 100 ? \n                                                        (player.salaryOptimal || 0) : 0;\n                        club.salaryPotential += player.salaryPotential || 0;\n                        club.salaryPotentialExceed100Min += (player.minutes || 0) > 100 ? \n                                                            (player.salaryPotential || 0) : 0;\n                        \n                        // Update club performance metrics\n                        club.totalLatestMicroVolatility += player.latestMicroVolatility || 0;\n                        club.totalLatestMicroVolatilityExceed100Min += (player.minutes || 0) > 100 ? \n                                                                    (player.latestMicroVolatility || 0) : 0;\n                        \n                        club.totalEffectiveness += player.effectiveness || 0;\n                        club.totalEffectivenessExceed100Min += (player.minutes || 0) > 100 ? \n                                                            (player.effectiveness || 0) : 0;\n                        club.totalEffectivenessExceed23 += (player.effectiveness || 0) > 23.5 ? \n                                                        (player.effectiveness || 0) : 0;\n                        \n                        // Check for expiring contracts\n                        if ((player.remainingMonthsOfContract || 0) <= 6) {\n                            club.numOfExpiringContracts++;\n                        }\n                        \n                        // Track foreign players\n                        if (player.currentLeagueCountryCode !== player.nationalityCode) {\n                            club.numOfForeignPlayers++;\n                            league.numOfForeignPlayers++;\n                            \n                            if (club.numOfPlayers > 0) {\n                                club.shareOfForeignPlayers = (club.numOfForeignPlayers / club.numOfPlayers) * 100;\n                            }\n                        }\n                        \n                        // Track young players (U23)\n                        if ((player.age || 0) < 24) {\n                            club.numOfU23Players++;\n                            league.numOfU23Players++;\n                            \n                            if (club.numOfPlayers > 0) {\n                                club.shareOfU23Players = (club.numOfU23Players / club.numOfPlayers) * 100;\n                            }\n                        }\n                        \n                        // Track young foreign players\n                        if ((player.age || 0) < 24 && player.currentLeagueCountryCode !== player.nationalityCode) {\n                            club.numOfU23ForeignPlayers++;\n                            league.numOfU23ForeignPlayers++;\n                            \n                            if (club.numOfPlayers > 0) {\n                                club.shareOfU23ForeignPlayers = (club.numOfU23ForeignPlayers / club.numOfPlayers) * 100;\n                            }\n                        }\n                        \n                        // Track national team players\n                        if (player.nationalTeamPlayer) {\n                            club.numOfNationalPlayers++;\n                        }\n                        \n                        // Track club-owned players\n                        if (player.masterClubId) {\n                            clubOwnedPlayers[player.masterClubId] = (clubOwnedPlayers[player.masterClubId] || 0) + 1;\n                        }\n                        \n                        // Add player to rankings\n                        playerRanks.push({\n                            playerId: player.playerId,\n                            potentialPrice: player.potentialPrice || 0,\n                            effectiveness: player.fatmol || 0,\n                            performance: player.absind || 0\n                        });\n                    });\n                }\n                \n                // Update club cluster salary averages\n                if (club.cluster !== undefined) {\n                    if (clubClusterSalaryAvg[club.cluster] === undefined) {\n                        clubClusterSalaryAvg[club.cluster] = {\n                            totalSalaryNet: 0,\n                            numberOfClubs: 0,\n                            numberOfPlayers: 0\n                        };\n                    }\n                    \n                    clubClusterSalaryAvg[club.cluster].totalSalaryNet += club.salaryNetSum || 0;\n                    clubClusterSalaryAvg[club.cluster].numberOfClubs++;\n                    clubClusterSalaryAvg[club.cluster].numberOfPlayers += club.numOfPlayers || 0;\n                }\n                \n                // Update club league salary averages\n                if (club.leagueId) {\n                    if (clubLeagueSalaryAvg[club.leagueId] === undefined) {\n                        clubLeagueSalaryAvg[club.leagueId] = {\n                            totalSalaryNet: 0,\n                            numberOfClubs: 0,\n                            numberOfPlayers: 0\n                        };\n                    }\n                    \n                    clubLeagueSalaryAvg[club.leagueId].totalSalaryNet += club.salaryNetSum || 0;\n                    clubLeagueSalaryAvg[club.leagueId].numberOfClubs++;\n                    clubLeagueSalaryAvg[club.leagueId].numberOfPlayers += club.numOfPlayers || 0;\n                }\n                \n                // Calculate age and contract averages\n                if (club.numOfPlayers > 0) {\n                    club.avgAge = totalAge / club.numOfPlayers;\n                    club.avgContractDuration = totalContractDuration / club.numOfPlayers;\n                    club.avgContractResidualDuration = totalContractResidualDuration / club.numOfPlayers;\n                \n                    // Calculate salary averages\n                    club.salaryAvg = club.salaryNetSum / club.numOfPlayers;\n                }\n                if (numOfPlayersExceed100Min > 0) {\n                    club.salaryAvgExceed100Min = club.salaryNetSumExceed100Min / numOfPlayersExceed100Min;\n                }\n                \n                // Calculate financial metrics\n                club.capitalGain = (club.expectedPrice || 0) - (club.residualBookValue || 0);\n                club.netProfit = (club.lastRevenues || 0) - (club.costs || 0);\n                \n                // Calculate salary deviations\n                club.salaryAbsoluteDeviation = (club.salaryNetFair || 0) - (club.salaryNet || 0);\n                if (club.salaryNet > 0) {\n                    club.salaryPercDeviation = ((club.salaryAbsoluteDeviation || 0) * 100) / (club.salaryNet || 1);\n                }\n                \n                club.salaryExtracost = (club.salaryGrossFair || 0) - (club.salaryGrossSum || 0);\n                \n                // Calculate metrics for players with >100 minutes\n                if (club.numOfPlayers > 0) {\n                    club.avgPotentialPrice = club.potentialPrice / club.numOfPlayers;\n                    club.avgResidualValue = club.residualValue / club.numOfPlayers;\n                    club.avgResidualBookValue = club.residualBookValue / club.numOfPlayers;\n                    club.avgExpectedPrice = club.expectedPrice / club.numOfPlayers;\n                    club.avgLatestMicroVolatility = club.totalLatestMicroVolatility / club.numOfPlayers;\n                    club.avgSalaryGross = club.salaryGrossSum / club.numOfPlayers;\n                    club.avgEffectiveness = club.totalEffectiveness / club.numOfPlayers;\n                    club.avgSalaryNet = club.salaryNetSum / club.numOfPlayers;\n                    club.avgSalaryOptimal = club.salaryOptimal / club.numOfPlayers;\n                    club.avgSalaryPotential = club.salaryPotential / club.numOfPlayers;\n                }\n                \n                if (numOfPlayersExceed100Min > 0) {\n                    club.avgPotentialPriceExceed100Min = club.potentialPriceExceed100Min / numOfPlayersExceed100Min;\n                    club.avgResidualValueExceed100Min = club.residualValueExceed100Min / numOfPlayersExceed100Min;\n                    club.avgResidualBookValueExceed100Min = club.residualBookValueExceed100Min / numOfPlayersExceed100Min;\n                    club.avgExpectedPriceExceed100Min = club.expectedPriceExceed100Min / numOfPlayersExceed100Min;\n                    club.avgLatestMicroVolatilityExceed100Min = club.totalLatestMicroVolatilityExceed100Min / numOfPlayersExceed100Min;\n                    club.avgSalaryGrossExceed100Min = club.salaryGrossSumExceed100Min / numOfPlayersExceed100Min;\n                    club.avgEffectivenessExceed100Min = club.totalEffectivenessExceed100Min / numOfPlayersExceed100Min;\n                    club.avgSalaryNetExceed100Min = club.salaryNetSumExceed100Min / numOfPlayersExceed100Min;\n                    club.avgSalaryOptimalExceed100Min = club.salaryOptimalExceed100Min / numOfPlayersExceed100Min;\n                    club.avgSalaryPotentialExceed100Min = club.salaryPotentialExceed100Min / numOfPlayersExceed100Min;\n                }\n                \n                // Set maximum salary values\n                club.maxSalaryGross = Math.max((club.salaryGrossSum || 0), (club.salaryGross || 0));\n                club.maxSalaryNet = Math.max((club.salaryNetSum || 0), (club.salaryNet || 0));\n                \n                // Calculate growth metrics\n                club.revenueGrowth = (club.oldRevenues || 0) > 0 ? \n                                    ((((club.lastRevenues || 0) - (club.oldRevenues || 0)) / (club.oldRevenues || 1)) * 100) : 0;\n                club.projectedRevenueGrowth = (club.lastRevenues || 0) > 0 ? \n                                            ((((club.revenues || 0) - (club.lastRevenues || 0)) / (club.lastRevenues || 1)) * 100) : 0;\n                \n                // Calculate performance metrics\n                club.netProfitLoss = (club.lastRevenues || 0) - (club.costOperating || 0);\n                club.playerTrading = (club.salesPlayers5Y$ || 0) - (club.purchasePlayers5Y$ || 0);\n                club.returnOnInvestment = 0;\n                club.costPerPoint = (club.pointsCurrentSeason || 0) > 0 ? \n                                    ((club.playersAnnualCost || 0) / (club.pointsCurrentSeason || 1)) : 0;\n                club.performanceIndex = club.avgEffectivenessExceed100Min || 0;\n                \n                // Update league totals\n                totalAgeLeague += totalAge;\n                totalContractDurationLeague += totalContractDuration;\n                totalContractResidualDurationLeague += totalContractResidualDuration;\n                \n                league.numOfPlayers += club.numOfPlayers;\n                \n                league.portfolioCost += club.portfolioCost || 0;\n                league.residualBookValue += club.residualBookValue || 0;\n                league.residualValue += club.residualValue || 0;\n                league.potentialPrice += club.potentialPrice || 0;\n                league.expectedPrice += club.expectedPrice || 0;\n                league.totalRevenues += club.lastRevenues || 0;\n                \n                allLeagueTotalRevenues += club.lastRevenues || 0;\n                \n                league.totalProjectedRevenues += club.revenues || 0;\n                \n                league.salaryGross += club.maxSalaryGross || 0;\n                league.salaryNet += club.maxSalaryNet || 0;\n                league.salaryOptimal += club.salaryOptimal || 0;\n                league.salaryPotential += club.salaryPotential || 0;\n                \n                league.annualBookValue += club.annualBookValue || 0;\n                \n                // Add club to rankings\n                clubRanks.push({\n                    clubId: club.clubId,\n                    potentialPrice: club.potentialPrice || 0,\n                    portfolioCost: club.portfolioCost || 0,\n                    salaryNet: club.salaryNet || 0\n                });\n            });\n        }\n        \n        // Calculate league averages\n        if (league.numOfPlayers > 0) {\n            // Calculate shares and percentages\n            league.shareOfForeignPlayers = (league.numOfForeignPlayers / league.numOfPlayers) * 100;\n            league.shareOfU23Players = (league.numOfU23Players / league.numOfPlayers) * 100;\n            league.shareOfU23ForeginPlayers = (league.numOfU23ForeignPlayers / league.numOfPlayers) * 100;\n            \n            // Calculate age and contract averages\n            league.avgAge = totalAgeLeague / league.numOfPlayers;\n            league.avgContractDuration = totalContractDurationLeague / league.numOfPlayers;\n            league.avgContractResidualDuration = totalContractResidualDurationLeague / league.numOfPlayers;\n            \n            // Calculate financial metrics\n            league.capitalGain = league.expectedPrice - league.residualBookValue;\n            league.netProfit = league.expectedPrice - league.residualValue;\n            \n            // Calculate salary deviations\n            league.salaryAbsoluteDeviation = league.salaryOptimal - league.salaryNet;\n            if (league.salaryOptimal > 0) {\n                league.salaryPercDeviation = (league.salaryAbsoluteDeviation * 100) / league.salaryOptimal;\n            }\n            \n            // Calculate salary average\n            league.salaryAvg = league.salaryNet / league.numOfPlayers;\n            \n            // Calculate averages for various metrics\n            league.avgPotentialPrice = league.potentialPrice / league.numOfPlayers;\n            league.avgPortfolioCost = league.portfolioCost / league.numOfPlayers;\n            league.avgExpectedPrice = league.expectedPrice / league.numOfPlayers;\n            league.avgResidualBookValue = league.residualBookValue / league.numOfPlayers;\n            league.avgPerformance = league.totalPerformance / league.numOfPlayers;\n            league.avgEffectiveness = league.totalEffectiveness / league.numOfPlayers;\n            league.avgLatestUniqueness = league.totalLatestUniqueness / league.numOfPlayers;\n            league.avgLatestMicroVolatility = league.totalLatestMicroVolatility / league.numOfPlayers;\n            league.avgSalaryNet = league.salaryNet / league.numOfPlayers;\n            league.avgSalaryOptimal = league.salaryOptimal / league.numOfPlayers;\n            league.avgSalaryPotential = league.salaryPotential / league.numOfPlayers;\n        }\n        \n        // Update league cluster salary averages\n        if (league.cluster !== undefined) {\n            if (leagueClusterSalaryAvg[league.cluster] === undefined) {\n                leagueClusterSalaryAvg[league.cluster] = {\n                    totalSalaryNet: 0,\n                    count: 0\n                };\n            }\n            \n            leagueClusterSalaryAvg[league.cluster].totalSalaryNet += league.salaryNet || 0;\n            leagueClusterSalaryAvg[league.cluster].count++;\n        }\n        \n        // Add league to rankings\n        leagueRanks.push({\n            leagueId: leagueId,\n            potentialPrice: league.potentialPrice || 0,\n            portfolioCost: league.portfolioCost || 0,\n            salaryNet: league.salaryNet || 0\n        });\n    });\n\n    // Calculate rankings\n    const leaguesByValue = leagueRanks.sort((a, b) => a.potentialPrice - b.potentialPrice)\n                            .map(league => league.leagueId).reverse();\n    const leaguesByAcquisition = leagueRanks.sort((a, b) => a.portfolioCost - b.portfolioCost)\n                                .map(league => league.leagueId).reverse();\n    const leaguesBySalary = leagueRanks.sort((a, b) => a.salaryNet - b.salaryNet)\n                            .map(league => league.leagueId).reverse();\n      \n    const clubsByValue = clubRanks.sort((a, b) => a.potentialPrice - b.potentialPrice)\n                         .map(club => club.clubId).reverse();\n    const clubsByAcquisition = clubRanks.sort((a, b) => a.portfolioCost - b.portfolioCost)\n                               .map(club => club.clubId).reverse();\n    const clubsBySalary = clubRanks.sort((a, b) => a.salaryNet - b.salaryNet)\n                          .map(club => club.clubId).reverse();\n\n    const playersByValue = playerRanks.sort((a, b) => a.potentialPrice - b.potentialPrice)\n                           .map(player => player.playerId).reverse();\n    const playersByPerformance = playerRanks.sort((a, b) => a.performance - b.performance)\n                                .map(player => player.playerId).reverse();\n    const playersByEffectiveness = playerRanks.sort((a, b) => a.effectiveness - b.effectiveness)\n                                  .map(player => player.playerId).reverse();\n\n    // Update all objects with rankings\n    Object.keys(TheFootballTree).forEach(leagueId => {\n        const league = TheFootballTree[leagueId];\n        \n        // Initialize additional league metrics\n        league.totalProjectedRevenues = 0;\n        league.totalCostOperating = 0;\n        league.salesPlayers5Y$ = 0;\n        league.purchasePlayers5Y$ = 0;\n        league.totalBroadcasting = 0;\n        league.totalCommercial = 0;\n        league.totalMatchDay = 0;\n        league.totalOtherRevenues = 0;\n        league.revenueGrowth = 0;\n        league.projectedRevenueGrowth = 0;\n        league.revenueShare = 0;\n        league.netProfitLoss = 0;\n        league.playerTrading = 0;\n        league.returnOnInvestment = 0;\n        league.financialSustainabilityIndex = 0;\n        league.performanceIndex = 0;\n        league.oldTotalRevenues = 0;\n        \n        // Update league rankings\n        league.rankByValue = leaguesByValue.indexOf(leagueId) + 1;\n        league.rankByAcquisition = leaguesByAcquisition.indexOf(leagueId) + 1;\n        league.rankBySalary = leaguesBySalary.indexOf(leagueId) + 1;\n        \n        // Calculate cluster average salary and deviations\n        if (league.cluster !== undefined && \n            leagueClusterSalaryAvg[league.cluster] && \n            leagueClusterSalaryAvg[league.cluster].count > 0) {\n            \n            league.avgSalaryNetCluster = leagueClusterSalaryAvg[league.cluster].totalSalaryNet / \n                                       leagueClusterSalaryAvg[league.cluster].count;\n            \n            league.absSalaryNetClusterDeviation = Math.abs(league.avgSalaryNetCluster - league.salaryNet);\n            \n            if (league.salaryNet > 0) {\n                league.percSalaryNetClusterDeviation = ((league.salaryNet - league.avgSalaryNetCluster) / league.salaryNet) * 100;\n            }\n        }\n        \n        // Process clubs for final data\n        if (league.Clubs && Array.isArray(league.Clubs)) {\n            league.Clubs.forEach(club => {\n                if (!club) return;\n                \n                // Update club rankings\n                club.rankByValue = clubsByValue.indexOf(club.clubId) + 1;\n                club.rankByAcquisition = clubsByAcquisition.indexOf(club.clubId) + 1;\n                club.rankBySalary = clubsBySalary.indexOf(club.clubId) + 1;\n                \n                // Calculate cluster average salary by club\n                if (club.cluster !== undefined && \n                    clubClusterSalaryAvg[club.cluster] && \n                    clubClusterSalaryAvg[club.cluster].numberOfClubs > 0) {\n                    \n                    club.avgSalaryNetCluster = clubClusterSalaryAvg[club.cluster].totalSalaryNet / \n                                             clubClusterSalaryAvg[club.cluster].numberOfClubs;\n                    \n                    club.absSalaryNetClusterDeviation = Math.abs(club.avgSalaryNetCluster - club.salaryNetSum);\n                    \n                    if (club.salaryNetSum > 0) {\n                        club.percSalaryNetClusterDeviation = ((club.salaryNetSum - club.avgSalaryNetCluster) / club.salaryNetSum) * 100;\n                    }\n                    \n                    if (clubClusterSalaryAvg[club.cluster].numberOfPlayers > 0) {\n                        club.avgSalaryNetClusterByPlayer = clubClusterSalaryAvg[club.cluster].totalSalaryNet / \n                                                         clubClusterSalaryAvg[club.cluster].numberOfPlayers;\n                    }\n                }\n                \n                // Calculate league average salary by club\n                if (club.leagueId && \n                    clubLeagueSalaryAvg[club.leagueId] && \n                    clubLeagueSalaryAvg[club.leagueId].numberOfClubs > 0) {\n                    \n                    club.avgLeagueSalaryNet = clubLeagueSalaryAvg[club.leagueId].totalSalaryNet / \n                                            clubLeagueSalaryAvg[club.leagueId].numberOfClubs;\n                    \n                    club.absLeagueSalaryNetDeviation = Math.abs(club.salaryNetSum - club.avgLeagueSalaryNet);\n                    \n                    if (club.salaryNetSum > 0) {\n                        club.percLeagueSalaryNetDeviation = ((club.salaryNetSum - club.avgLeagueSalaryNet) / club.salaryNetSum) * 100;\n                    }\n                }\n                \n                // Set number of owned players\n                club.numOfOwnedPlayers = clubOwnedPlayers[club.clubId] || 0;\n                \n                // Calculate financial sustainability index\n                if (club.revenues > 0) {\n                    club.financialSustainabilityIndex = (((club.annualBookValue || 0) + (club.maxSalaryGross || 0)) / club.revenues) * 100;\n                }\n                \n                // Calculate revenue share\n                if (league.totalRevenues > 0) {\n                    club.revenueShare = ((club.lastRevenues || 0) / league.totalRevenues) * 100;\n                }\n                \n                // Process players for final data\n                if (club.Players && Array.isArray(club.Players)) {\n                    club.Players.forEach(player => {\n                        if (!player) return;\n                        \n                        // Update player rankings\n                        player.rankByValue = playersByValue.indexOf(player.playerId) + 1;\n                        player.rankByPerformance = playersByPerformance.indexOf(player.playerId) + 1;\n                        player.rankByEffectiveness = playersByEffectiveness.indexOf(player.playerId) + 1;\n                        \n                        // Calculate club average salary deviations\n                        if (club.salaryAvg > 0) {\n                            player.absClubAvgSalaryDeviation = Math.abs(club.salaryAvg - (player.salaryNet || 0));\n                            player.percClubAvgSalaryDeviation = (((player.salaryNet || 0) - club.salaryAvg) / club.salaryAvg) * 100;\n                        }\n                        \n                        // Calculate league average salary deviations\n                        if (league.salaryAvg > 0) {\n                            player.absLeagueAvgSalaryDeviation = Math.abs(league.salaryAvg - (player.salaryNet || 0));\n                            player.percLeagueAvgSalaryDeviation = (((player.salaryNet || 0) - league.salaryAvg) / league.salaryAvg) * 100;\n                        }\n                        \n                        // Calculate cluster average salary by player deviations\n                        if (club.avgSalaryNetClusterByPlayer > 0) {\n                            player.absClubCusterAvgSalaryDeviation = Math.abs(club.avgSalaryNetClusterByPlayer - (player.salaryNet || 0));\n                            player.percClubClusterAvgSalaryDeviation = (((player.salaryNet || 0) - club.avgSalaryNetClusterByPlayer) / \n                                                                     club.avgSalaryNetClusterByPlayer) * 100;\n                        }\n                        \n                        // Calculate performance metrics\n                        let eff23 = (player.effectiveness || 0) < 23.5 ? 0 : (player.effectiveness || 0);\n                        \n                        if (club.totalEffectivenessExceed23 > 0) {\n                            player.contributionIndexPerc = (eff23 / club.totalEffectivenessExceed23) * 100;\n                        }\n                        \n                        player.revenueContributionIndex = (player.contributionIndexPerc / 100) * (club.revenues || 0);\n                        \n                        // Calculate cost metrics\n                        if ((player.minutesLastSeason || 0) > 0) {\n                            player.costPerMinute = (player.annualCost || 0) / (player.minutesLastSeason || 1);\n                        } else {\n                            player.costPerMinute = player.annualCost || 0;\n                        }\n                        \n                        // Calculate scoring contribution index\n                        let goalPlusAssistsPlusPreassists = (player.goal || 0) + (player.assist || 0) + (player.preassist || 0);\n                        if (goalPlusAssistsPlusPreassists > 0) {\n                            player.scoringContributionIndex = (player.minutes || 0) / goalPlusAssistsPlusPreassists;\n                        } else {\n                            player.scoringContributionIndex = 0;\n                        }\n                        \n                        // Calculate relative performance metrics\n                        if (club.avgEffectiveness > 0) {\n                            player.clubRelativePlayerPerformance = ((((player.effectiveness || 0) - club.avgEffectiveness) / \n                                                                 club.avgEffectiveness) * 100);\n                        }\n                        \n                        if (league.avgEffectiveness > 0) {\n                            player.leagueRelativePlayerPerformance = ((((player.effectiveness || 0) - league.avgEffectiveness) / \n                                                                    league.avgEffectiveness) * 100);\n                        }\n                        \n                        // Calculate salary impact\n                        if (club.maxSalaryGross > 0) {\n                            player.salaryImpactOnSalaries = (((player.salaryGross || 0) / club.maxSalaryGross) * 100);\n                        }\n                    });\n                }\n                \n                // Update league totals for final metrics\n                league.oldTotalRevenues += club.oldRevenues || 0;\n                league.totalProjectedRevenues += club.revenues || 0;\n                league.totalCostOperating += club.costOperating || 0;\n                league.salesPlayers5Y$ += club.salesPlayers5Y$ || 0;\n                league.purchasePlayers5Y$ += club.purchasePlayers5Y$ || 0;\n                \n                league.totalBroadcasting += club.broadcastingRevenues || 0;\n                league.totalCommercial += club.commericialRevenues || 0;\n                league.totalMatchDay += club.matchDayRevenues || 0;\n                league.totalOtherRevenues += club.otherRevenues || 0;\n            });\n        }\n        \n        // Calculate final league metrics\n        // Calculate revenue growth\n        if (league.oldTotalRevenues > 0) {\n            league.revenueGrowth = (((league.totalRevenues - league.oldTotalRevenues) / league.oldTotalRevenues) * 100);\n        }\n        \n        // Calculate revenue share\n        if (allLeagueTotalRevenues > 0) {\n            league.revenueShare = (league.totalRevenues / allLeagueTotalRevenues) * 100;\n        }\n        \n        // Calculate profit/loss and trading metrics\n        league.netProfitLoss = league.totalRevenues - league.totalCostOperating;\n        league.playerTrading = league.salesPlayers5Y$ - league.purchasePlayers5Y$;\n        \n        // Calculate financial sustainability index\n        if (league.totalRevenues > 0) {\n            league.financialSustainabilityIndex = ((league.salaryGross + league.annualBookValue) * 100) / league.totalRevenues;\n        }\n        \n        // Set performance index\n        league.performanceIndex = league.avgEffectiveness || 0;\n    });\n} catch(e) {\n    console.log(\"Error in league and club analysis:\", e);\n    console.log(\"Error stack:\", e.stack);\n}\n\n// Store the football tree in global variables\nglobal.set(\"TheLatestFooballTree\", TheFootballTree);\n\nflow.get(\"logmsg\").message = \"Clubs and Leagues Analysis ENDS\";\nnode.log(flow.get(\"logmsg\"));\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1890,
        "y": 1640,
        "wires": [
            []
        ]
    },
    {
        "id": "bcd3842402ecb143",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Clubs and Leagues Analisys",
        "func": "flow.get(\"logmsg\").message = \"Clubs and Leagues Analisys Begins\"\nnode.log(flow.get(\"logmsg\"))\n\nlet TheFootballTree = msg.payload;\nconst Utils = global.get(\"UTILS\");\n\nvar Players = [];\nvar Clubs = [];\nvar Leagues = [];\n\nvar allStats = {\n    \n    'players' : 0,\n    'foreignPlayers' : 0,\n    'foreignPlayersRatio' : 0,\n    'mostExpensiveTransferFee' : null,\n    'mostExpensiveTraded' : null,\n    'highestNetSalary' : null,\n    'mostPayed' : null, \n    'youngest' : null,\n    'lowestAge' : 0,\n    'oldest' : null,\n    'highestAge' : 0,\n    'highestEffectiveness' : 0,\n    'highestEffectivenessPlayer' : null,\n    'highestFairSalary' : 0,\n    'highestFairSalaryPlayer' : null,\n    'highestFairValue' : 0,\n    'highestFairValuePlayer' : null,\n    'highestExpectedPrice' : 0,\n    'highestExpectedPricePlayer' : null,\n    'risingStarTopFairValue' : 0,\n    'risingStarTopFairValuePlayer' : null,\n    'overperformerTopFairValue' : 0,\n    'overperformerTopFairValuePlayer' : null,\n    'superstarTopFairValue' : 0,\n    'superstarTopFairValuePlayer' : null,\n    'goalkeeperTopFairValue' : 0,\n    'goalkeeperTopFairValuePlayer' : null,\n    'defenderTopFairValue' : 0,\n    'defenderTopFairValuePlayer' : null,\n    'midfielderTopFairValue' : 0,\n    'midfielderTopFairValuePlayer' : null,\n    'forwardTopFairValue' : 0,\n    'forwardTopFairValuePlayer' : null,\n    'superstars' : 0,\n    'risingstars' : 0,\n    'overperformers' : 0,\n    'regulars' : 0,\n    'goalkeepers' : 0,\n    'defenders' : 0,\n    'midfielders' : 0,\n    'forward' : 0,\n    'mostEffectiveTeam' : null,\n    'mostExpensiveTeam' : null\n};\n\n\nlet leagueClusterSalaryAvg = {}\nlet leagueRanks = []\n\nlet clubClusterSalaryAvg = {}\nlet clubLeagueSalaryAvg = {}\nlet clubRanks = []\n\nlet playerRanks = []\n\nlet clubOwnedPlayers = {}\n\ntry {\n    \nlet allLeagueTotalRevenues = 0;\n\n\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        \n        \n        let totalAgeLeague = 0;\n        let totalContractDurationLeague = 0;\n        let totalContractResiduaDurationLeauge = 0;\n        \n        TheFootballTree[leagueId].numOfPlayers = 0; \n        TheFootballTree[leagueId].avgAge = 0\n        TheFootballTree[leagueId].avgContractDuration = 0\n        TheFootballTree[leagueId].avgContractResidualDuration = 0\n        \n        TheFootballTree[leagueId].portfolioCost = 0\n        TheFootballTree[leagueId].residualBookValue = 0\n        TheFootballTree[leagueId].residualValue = 0\n        TheFootballTree[leagueId].potentialPrice = 0\n        TheFootballTree[leagueId].expectedPrice = 0\n        TheFootballTree[leagueId].capitalGain = 0\n        TheFootballTree[leagueId].netProfit = 0\n        \n        TheFootballTree[leagueId].salaryGross = 0\n        TheFootballTree[leagueId].salaryNet = 0\n        TheFootballTree[leagueId].salaryOptimal = 0\n        TheFootballTree[leagueId].salaryPotential = 0\n        TheFootballTree[leagueId].salaryAbsoluteDeviation = 0\n        TheFootballTree[leagueId].salaryPercDeviation = 0\n        \n        //aggiunti il 07/02/2023\n        TheFootballTree[leagueId].numOfClubs = 0 //fatto\n        TheFootballTree[leagueId].numOfForeignPlayers = 0 //fatto\n        TheFootballTree[leagueId].numOfU23Players = 0 // fatto\n        TheFootballTree[leagueId].numOfU23ForeignPlayers = 0 // fatto\n        TheFootballTree[leagueId].shareOfForeignPlayers = 0 //fatto\n        TheFootballTree[leagueId].shareOfU23Players = 0 //fatt0\n        TheFootballTree[leagueId].shareOfU23ForeginPlayers = 0 //fatt0\n        TheFootballTree[leagueId].salaryAvg = 0  //fatto\n        \n        TheFootballTree[leagueId].rankByValue = 0 //fatto\n        TheFootballTree[leagueId].rankByAcquisition = 0 //fatto\n        TheFootballTree[leagueId].rankBySalary = 0 //fatto\n        TheFootballTree[leagueId].avgSalaryNetCluster = 0 //fatto\n        TheFootballTree[leagueId].absSalaryNetClusterDeviation = 0 //fatto\n        TheFootballTree[leagueId].percSalaryNetClusterDeviation = 0 //fatto\n        \n        TheFootballTree[leagueId].totalPerformance = 0;\n        TheFootballTree[leagueId].totalEffectiveness = 0;\n        TheFootballTree[leagueId].totalLatestUniqueness = 0;\n        TheFootballTree[leagueId].totalLatestMicroVolatility = 0;\n\n        TheFootballTree[leagueId].totalRevenues = 0; //aggiunto il 08/01/2024\n        TheFootballTree[leagueId].totalProjectedRevenues = 0;\n        \n        TheFootballTree[leagueId].annualBookValue = 0;\n\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n           \n            let totalAge = 0;\n            let totalContractDuration = 0;\n            let totalContractResiduaDuration = 0;\n            let numOfPlayersExceed100Min = 0;\n           \n           TheFootballTree[leagueId].numOfClubs ++;\n            club.numOfPlayers = club.Players.length;\n            \n            club.avgAge = 0\n            club.avgContractDuration = 0\n            club.avgContractResidualDuration = 0\n            \n            club.portfolioCost = 0\n            club.residualBookValue = 0\n            club.residualBookValueExceed100Min = 0\n            club.residualValue = 0\n            club.residualValueExceed100Min = 0\n            club.potentialPrice = \n            club.potentialPriceExceed100Min = 0\n            club.expectedPrice = 0\n            club.expectedPriceExceed100Min = 0\n            club.capitalGain = 0\n            club.netProfit = 0\n            \n            club.salaryGrossSum = 0\n            club.salaryGrossSumExceed100Min = 0\n            club.salaryNetSum = 0\n            club.salaryNetSumExceed100Min = 0\n            club.salaryOptimal = 0\n            club.salaryOptimalExceed100Min = 0\n            club.salaryPotential = 0\n            club.salaryPotentialExceed100Min = 0\n            club.salaryAbsoluteDeviation = 0\n            club.salaryPercDeviation = 0\n            \n            //aggiunti il 07/02/2023\n            \n            club.salaryAvg = 0 //fatto\n            club.salaryAvgExceed100Min = 0\n\n           \n            club.numOfForeignPlayers = 0 //fatto\n            club.numOfU23Players = 0 // fatto\n            club.numOfU23ForeignPlayers = 0 // fatto\n            club.shareOfForeignPlayers = 0 //fatto\n            club.shareOfU23Players = 0 //fatto\n            club.shareOfU23ForeignPlayers = 0 //fatto\n            club.numOfNationalPlayers = 0 //fatto\n            club.numOfExpiringContracts = 0\n            club.numOfOwnedPlayers = 0 //fatto\n            club.avgSalaryNetCluster = 0 //fatto\n            club.absSalaryNetClusterDeviation = 0 //fatto\n            club.percSalaryNetClusterDeviation = 0 //fatto\n            club.rankByValue = 0 //fatto\n            club.rankBySalary = 0 //fatto\n            club.rankByAcquisition = 0 //fatto\n            \n            club.avgEffectiveness = 0;\n            club.totalEffectiveness = 0;\n            club.totalEffectivenessExceed100Min = 0;\n            club.totalEffectivenessExceed23 = 0;\n            \n            club.totalLatestMicroVolatility = 0\n            club.totalLatestMicroVolatilityExceed100Min = 0\n            \n            club.playersAnnualCost = 0\n            club.annualBookValue = 0;\n            \n            club.Players.forEach( player => {\n                // COUNT NUMBERS OF PLAYERS THAT EXCEED 100 MIN\n                if(player.minutes > 100) {\n                    numOfPlayersExceed100Min++;\n                }\n                \n                TheFootballTree[leagueId].totalPerformance = TheFootballTree[leagueId].totalPerformance + player.performance\n                TheFootballTree[leagueId].totalEffectiveness = TheFootballTree[leagueId].totalEffectiveness + player.effectiveness\n                TheFootballTree[leagueId].totalLatestUniqueness = TheFootballTree[leagueId].totalLatestUniqueness + player.latestUniqueness\n                TheFootballTree[leagueId].totalLatestMicroVolatility = TheFootballTree[leagueId].totalLatestMicroVolatility + player.latestMicroVolatility\n                \n                player.rankByPerformance = 0 //fatto\n                player.rankByEffectiveness = 0 //fatto\n                player.rankByValue = 0 //fatto\n                \n                player.absClubAvgSalaryDeviation = 0  //fatto\n                player.percClubAvgSalaryDeviation = 0 //fatto\n                \n                player.absLeagueAvgSalaryDeviation = 0 //fatto\n                player.percLeagueAvgSalaryDeviation = 0 //fatto\n\n                player.absClubCusterAvgSalaryDeviation = 0 //fatto\n                player.percClubClusterAvgSalaryDeviation = 0 //fatto\n                player.annualCost = 0;\n                player.annualBookValue = 0;\n                \n                //player.capitalGain = player.expectedPrice  - player.residualBookValue;\n                \n                player.capitalGain = player.perceivedExpectedPrice  - player.residualBookValue;\n                \n                player.annualCost = player.salaryGross  + (  player.remainingYearsOfMasterClubContract ? (player.residualBookValue / player.remainingYearsOfMasterClubContract) : 0 );\n               \n                player.annualBookValue = (  player.remainingYearsOfMasterClubContract ? (player.residualBookValue / player.remainingYearsOfMasterClubContract) : 0 );\n               \n               \n                player.costImpactOnRevenues = club.revenues ? (( player.annualCost / club.revenues) * 100 ): 0;\n                player.costImpactOnCosts = club.costs ? ( player.annualCost / club.costs) : 0;\n               \n               \n                club.annualBookValue = club.annualBookValue + player.annualBookValue;\n               \n                club.playersAnnualCost = club.playersAnnualCost + player.annualCost;\n                \n                totalAge = totalAge + player.age;\n                totalContractDuration = totalContractDuration +  player.remainingMonthsOfContract // ERRORE DURATA TOTALE NON RESIDUA \n                totalContractResiduaDuration = totalContractResiduaDuration + Utils.diffInMonths(player.endContract,new Date());\n                \n                \n                club.portfolioCost = club.portfolioCost + player.transferPrice;\n                club.residualBookValue = club.residualBookValue + parseFloat(player.residualBookValue);\n                club.residualBookValueExceed100Min = player.minutes > 100 ? club.residualBookValueExceed100Min + parseFloat(player.residualBookValue) : club.residualBookValueExceed100Min + 0;\n                club.residualValue = club.residualValue + player.residualValue;\n                club.residualValueExceed100Min = player.minutes > 100 ? club.residualValueExceed100Min + player.residualValue : club.residualValueExceed100Min + 0;\n                club.potentialPrice = club.potentialPrice + player.potentialPrice;\n                club.potentialPriceExceed100Min = player.minutes > 100 ? club.potentialPriceExceed100Min + player.potentialPrice : club.potentialPriceExceed100Min + 0;\n                club.expectedPrice = club.expectedPrice + player.expectedPrice;\n                club.expectedPriceExceed100Min = player.minutes > 100 ? club.expectedPriceExceed100Min + player.expectedPrice : club.expectedPriceExceed100Min + 0;\n                \n                club.salaryGrossSum = club.salaryGrossSum + player.salaryGross;\n                club.salaryGrossSumExceed100Min = player.minutes > 100 ? club.salaryGrossSumExceed100Min + player.salaryGross : club.salaryGrossSumExceed100Min + 0\n                club.salaryNetSum = club.salaryNetSum + player.salaryNet;\n                club.salaryNetSumExceed100Min = player.minutes > 100 ? club.salaryNetSumExceed100Min + player.salaryNet : club.salaryNetSumExceed100Min + 0;\n                club.salaryOptimal = club.salaryOptimal + player.salaryOptimal;\n                club.salaryOptimalExceed100Min = player.minutes > 100 ? club.salaryOptimalExceed100Min + player.salaryOptimal : club.salaryOptimalExceed100Min + 0;\n                club.salaryPotential = club.salaryPotential + player.salaryPotential;\n                club.salaryPotentialExceed100Min = player.minutes > 100 ? club.salaryPotentialExceed100Min + player.salaryPotential : club.salaryPotentialExceed100Min + 0;\n                club.salaryAvg = club.salaryNetSum / club.numOfPlayers;\n                club.salaryAvgExceed100Min = club.salaryNetSumExceed100Min / numOfPlayersExceed100Min;\n                club.totalLatestMicroVolatility = club.totalLatestMicroVolatility + player.latestMicroVolatility\n                club.totalLatestMicroVolatilityExceed100Min = player.minutes > 100 ? club.totalLatestMicroVolatilityExceed100Min + player.latestMicroVolatility : club.totalLatestMicroVolatilityExceed100Min + 0;\n                \n                club.totalEffectiveness = club.totalEffectiveness + player.effectiveness;\n                club.totalEffectivenessExceed100Min = player.minutes > 100 ? club.totalEffectivenessExceed100Min + player.effectiveness : club.totalEffectivenessExceed100Min + 0;\n                club.totalEffectivenessExceed23 = player.effectiveness > 23.5 ? ( club.totalEffectivenessExceed23 + player.effectiveness) :  ( club.totalEffectivenessExceed23 + 0)\n                /* fino al 03/05/2023 calcolavamo la media del cluster come la media dei giocatori nel cluster\n                clubClusterSalaryAvg[club.cluster] = clubClusterSalaryAvg[club.cluster]  === undefined ? { totalSalaryNet : 0, count : 0} : clubClusterSalaryAvg[club.cluster];\n                clubClusterSalaryAvg[club.cluster].totalSalaryNet = player.salaryNet + clubClusterSalaryAvg[club.cluster].totalSalaryNet\n                clubClusterSalaryAvg[club.cluster].count++;\n                */\n                 \n                 \n                 \n                if ( player.remainingMonthsOfContract <= 6 ) {\n                    \n                    club.numOfExpiringContracts++;\n                }\n                 \n                 \n                 if (player.currentLeagueCountryCode !== player.nationalityCode) {\n                    \n                    \n                      club.numOfForeignPlayers++;\n                      TheFootballTree[leagueId].numOfForeignPlayers++;\n                      \n                      \n                      club.shareOfForeignPlayers = ( club.numOfForeignPlayers/club.numOfPlayers ) *100\n                      TheFootballTree[leagueId].shareOfForeignPlayers = ( TheFootballTree[leagueId].numOfForeignPlayers/TheFootballTree[leagueId].numOfPlayers ) *100\n                }\n                \n                if (player.age <24 ) {\n                    \n                    \n                      club.numOfU23Players++;\n                      TheFootballTree[leagueId].numOfU23Players++;\n                      \n                      club.shareOfU23Players = ( club.numOfU23Players/club.numOfPlayers ) *100\n                      TheFootballTree[leagueId].shareOfU23Players = ( TheFootballTree[leagueId].numOfU23Players/TheFootballTree[leagueId].numOfPlayers ) *100\n\n                }\n                \n                if (player.age <24 && player.currentLeagueCountryCode !== player.nationalityCode) {\n                    \n                    \n                      club.numOfU23ForeignPlayers++;\n                      TheFootballTree[leagueId].numOfU23ForeignPlayers++;\n                      \n                      club.shareOfU23ForeignPlayers = ( club.numOfU23ForeignPlayers/club.numOfPlayers ) *100\n                      TheFootballTree[leagueId].shareOfU23ForeignPlayers = ( TheFootballTree[leagueId].numOfU23ForeignPlayers/TheFootballTree[leagueId].numOfPlayers ) *100\n\n                }\n                \n                club.numOfNationalPlayers = player.nationalTeamPlayer ? club.numOfNationalPlayers + 1 : club.numOfNationalPlayers\n                \n                clubOwnedPlayers[player.masterClubId] = clubOwnedPlayers[player.masterClubId] === undefined ? 0 : clubOwnedPlayers[player.masterClubId];\n                clubOwnedPlayers[player.masterClubId] = clubOwnedPlayers[player.masterClubId] + 1\n                \n                let pranks = { \n                    playerId : player.playerId,\n                    potentialPrice :  player.potentialPrice,  \n                    effectiveness : player.fatmol, \n                    performance :  player.absind\n            \n                } \n                playerRanks.push(pranks)\n            })\n            \n            \n            /* dall 03/05/2023 facciamo la media dei club*/\n            clubClusterSalaryAvg[club.cluster] = clubClusterSalaryAvg[club.cluster]  === undefined ? { totalSalaryNet : 0, numberOfClubs : 0, numberOfPlayers : 0} : clubClusterSalaryAvg[club.cluster];\n            clubClusterSalaryAvg[club.cluster].totalSalaryNet = club.salaryNetSum + clubClusterSalaryAvg[club.cluster].totalSalaryNet\n            clubClusterSalaryAvg[club.cluster].numberOfClubs ++;\n            clubClusterSalaryAvg[club.cluster].numberOfPlayers =  club.numOfPlayers + clubClusterSalaryAvg[club.cluster].numberOfPlayers;\n\n            \n            \n            clubLeagueSalaryAvg[club.leagueId] = clubLeagueSalaryAvg[club.leagueId]  === undefined ? { totalSalaryNet : 0, numberOfClubs : 0,numberOfPlayers : 0} : clubLeagueSalaryAvg[club.leagueId];\n            clubLeagueSalaryAvg[club.leagueId].totalSalaryNet = club.salaryNetSum + clubLeagueSalaryAvg[club.leagueId].totalSalaryNet\n            clubLeagueSalaryAvg[club.leagueId].numberOfClubs ++;\n            clubLeagueSalaryAvg[club.leagueId].numberOfPlayers =  club.numOfPlayers + clubLeagueSalaryAvg[club.leagueId].numberOfPlayers;\n            \n            \n            \n            club.avgAge = totalAge / club.numOfPlayers;\n            club.avgContractDuration =  totalContractDuration / club.numOfPlayers;\n            club.avgContractResidualDuration  =  totalContractResiduaDuration / club.numOfPlayers;\n        \n            club.capitalGain = club.expectedPrice - club.residualBookValue;\n            club.netProfit =  club.lastRevenues - club.costs;\n            //club.netProfit =  club.expectedPrice - club.residualValue;\n            \n            /*cambiato il 16/01/2023\n            club.salaryAbsoluteDeviation = club.salaryOptimal - club.salaryNet;\n            club.salaryPercDeviation =  (club.salaryAbsoluteDeviation * 100 ) / club.salaryOptimal*/\n            \n            \n            club.salaryAbsoluteDeviation = club.salaryNetFair - club.salaryNet; //modifica del 27/09/2023 - Non prende più il salary net sum ma salary net \n            club.salaryPercDeviation =  (club.salaryAbsoluteDeviation * 100 ) / club.salaryNet //modifica del 27/09/2023 - Non prende più il salary net sum ma salary net \n            \n            club.salaryExtracost = club.salaryGrossFair - club.salaryGrossSum; // aggiunto il 16/01/2023\n            \n            \n            club.avgPotentialPrice = club.potentialPrice / club.numOfPlayers;\n            club.avgPotentialPriceExceed100Min = club.potentialPriceExceed100Min / numOfPlayersExceed100Min;\n            club.avgResidualValue = club.residualValue / club.numOfPlayers;\n            club.avgResidualValueExceed100Min = club.residualValueExceed100Min / numOfPlayersExceed100Min;\n            club.avgResidualBookValue = club.residualBookValue / club.numOfPlayers;\n            club.avgResidualBookValueExceed100Min = club.residualBookValueExceed100Min / numOfPlayersExceed100Min;\n            club.avgExpectedPrice = club.expectedPrice / club.numOfPlayers;\n            club.avgExpectedPriceExceed100Min = club.expectedPriceExceed100Min / numOfPlayersExceed100Min;\n            club.avgLatestMicroVolatility = club.totalLatestMicroVolatility / club.numOfPlayers;\n            club.avgLatestMicroVolatilityExceed100Min = club.totalLatestMicroVolatilityExceed100Min / numOfPlayersExceed100Min;\n            club.avgSalaryGross = club.salaryGrossSum / club.numOfPlayers\n            club.avgSalaryGrossExceed100Min = club.salaryGrossSumExceed100Min / numOfPlayersExceed100Min;\n            club.avgEffectiveness  = club.totalEffectiveness / club.numOfPlayers;\n            club.avgEffectivenessExceed100Min = club.totalEffectivenessExceed100Min / numOfPlayersExceed100Min;\n            club.avgSalaryNet = club.salaryNetSum / club.numOfPlayers;\n            club.avgSalaryNetExceed100Min = club.salaryNetSumExceed100Min / numOfPlayersExceed100Min;\n            club.avgSalaryOptimal = club.salaryOptimal / club.numOfPlayers;\n            club.avgSalaryOptimalExceed100Min = club.salaryOptimalExceed100Min / numOfPlayersExceed100Min;\n            club.avgSalaryPotential = club.salaryPotential / club.numOfPlayers;\n            club.avgSalaryPotentialExceed100Min = club.salaryPotentialExceed100Min / numOfPlayersExceed100Min;\n            \n            club.maxSalaryGross = Math.max(club.salaryGrossSum, club.salaryGross)\n            club.maxSalaryNet = Math.max(club.salaryNetSum,club.salaryNet)\n\n            \n            \n            \n            \n            club.revenueGrowth = club.oldRevenues ? (( ( club.lastRevenues - club.oldRevenues) / club.oldRevenues)  *100): 0 ;\n            club.projectedRevenueGrowth = club.lastRevenues ? (((club.revenues - club.lastRevenues) / club.lastRevenues )*100) : 0;\n            \n            \n            club.netProfitLoss = club.lastRevenues - club.costOperating;\n            club.playerTrading = club.salesPlayers5Y$ - club.purchasePlayers5Y$;\n            club.returnOnInvestment = 0 // club.returnOnInvestment = ((player benefit – player costs) ;\n            club.costPerPoint = club.pointsCurrentSeason ?  (club.playersAnnualCost  / club.pointsCurrentSeason) : 0\n            club.performanceIndex = club.avgEffectivenessExceed100Min;\n            \n            \n            \n            totalAgeLeague = totalAgeLeague + totalAge;\n            totalContractDurationLeague = totalContractDurationLeague + totalContractDuration;\n            totalContractResiduaDurationLeauge = totalContractResiduaDurationLeauge + totalContractResiduaDuration;\n            \n            TheFootballTree[leagueId].numOfPlayers = TheFootballTree[leagueId].numOfPlayers + club.numOfPlayers;\n            \n            TheFootballTree[leagueId].portfolioCost = TheFootballTree[leagueId].portfolioCost + club.portfolioCost;\n            TheFootballTree[leagueId].residualBookValue = TheFootballTree[leagueId].residualBookValue + club.residualBookValue;\n            TheFootballTree[leagueId].residualValue = TheFootballTree[leagueId].residualValue + club.residualValue;\n            TheFootballTree[leagueId].potentialPrice = TheFootballTree[leagueId].potentialPrice + club.potentialPrice;\n            TheFootballTree[leagueId].expectedPrice = TheFootballTree[leagueId].expectedPrice + club.expectedPrice;\n            TheFootballTree[leagueId].totalRevenues = TheFootballTree[leagueId].totalRevenues + club.lastRevenues; //aggiunto il 08/1/2024\n            \n            allLeagueTotalRevenues = allLeagueTotalRevenues + club.lastRevenues\n            \n            \n            TheFootballTree[leagueId].totalProjectedRevenues = TheFootballTree[leagueId].totalProjectedRevenues + club.revenues; \n\n            \n                \n            //TheFootballTree[leagueId].salaryGross = TheFootballTree[leagueId].salaryGross + club.salaryGrossSum;\n            TheFootballTree[leagueId].salaryGross = TheFootballTree[leagueId].salaryGross + club.maxSalaryGross;\n            //TheFootballTree[leagueId].salaryNet = TheFootballTree[leagueId].salaryNet + club.salaryNetSum;\n            TheFootballTree[leagueId].salaryNet = TheFootballTree[leagueId].salaryNet + club.maxSalaryNet;\n            TheFootballTree[leagueId].salaryOptimal = TheFootballTree[leagueId].salaryOptimal + club.salaryOptimal;\n            TheFootballTree[leagueId].salaryPotential = TheFootballTree[leagueId].salaryPotential + club.salaryPotential;\n            TheFootballTree[leagueId].salaryAvg = TheFootballTree[leagueId].salaryNet / TheFootballTree[leagueId].numOfPlayers\n            //Clubs.push(club);\n            \n            TheFootballTree[leagueId].avgPotentialPrice =  TheFootballTree[leagueId].potentialPrice / TheFootballTree[leagueId].numOfPlayers\n            TheFootballTree[leagueId].avgPortfolioCost = TheFootballTree[leagueId].portfolioCost / TheFootballTree[leagueId].numOfPlayers\n            TheFootballTree[leagueId].avgExpectedPrice = TheFootballTree[leagueId].expectedPrice / TheFootballTree[leagueId].numOfPlayers\n            TheFootballTree[leagueId].avgResidualBookValue = TheFootballTree[leagueId].residualBookValue / TheFootballTree[leagueId].numOfPlayers\n            TheFootballTree[leagueId].avgPerformance = TheFootballTree[leagueId].totalPerformance / TheFootballTree[leagueId].numOfPlayers\n            TheFootballTree[leagueId].avgEffectiveness = TheFootballTree[leagueId].totalEffectiveness / TheFootballTree[leagueId].numOfPlayers\n            TheFootballTree[leagueId].avgLatestUniqueness = TheFootballTree[leagueId].totalLatestUniqueness / TheFootballTree[leagueId].numOfPlayers\n            TheFootballTree[leagueId].avgLatestMicroVolatility = TheFootballTree[leagueId].totalLatestMicroVolatility / TheFootballTree[leagueId].numOfPlayers\n            TheFootballTree[leagueId].avgSalaryNet =  TheFootballTree[leagueId].salaryNet / TheFootballTree[leagueId].numOfPlayers\n            TheFootballTree[leagueId].avgSalaryOptimal =  TheFootballTree[leagueId].salaryOptimal / TheFootballTree[leagueId].numOfPlayers\n            TheFootballTree[leagueId].avgSalaryPotential =  TheFootballTree[leagueId].salaryPotential / TheFootballTree[leagueId].numOfPlayers\n\n            TheFootballTree[leagueId].annualBookValue = TheFootballTree[leagueId].annualBookValue + club.annualBookValue;\n            \n            let cranks = { \n                clubId : club.clubId,\n                potentialPrice :  club.potentialPrice,  \n                portfolioCost : club.portfolioCost, \n                salaryNet :  club.salaryNet\n            \n                } \n            clubRanks.push(cranks)\n        })   \n        \n        \n        TheFootballTree[leagueId].shareOfForeignPlayers = ( TheFootballTree[leagueId].numOfForeignPlayers / TheFootballTree[leagueId].numOfPlayers ) *100\n        TheFootballTree[leagueId].shareOfU23Players = ( TheFootballTree[leagueId].numOfU23Players / TheFootballTree[leagueId].numOfPlayers ) *100\n\n        \n        TheFootballTree[leagueId].avgAge = totalAgeLeague / TheFootballTree[leagueId].numOfPlayers;\n        TheFootballTree[leagueId].avgContractDuration =  totalContractDurationLeague / TheFootballTree[leagueId].numOfPlayers;\n        TheFootballTree[leagueId].avgContractResidualDuration  =  totalContractResiduaDurationLeauge / TheFootballTree[leagueId].numOfPlayers;\n        \n        TheFootballTree[leagueId].capitalGain = TheFootballTree[leagueId].expectedPrice - TheFootballTree[leagueId].residualBookValue;\n        TheFootballTree[leagueId].netProfit =  TheFootballTree[leagueId].expectedPrice - TheFootballTree[leagueId].residualValue;\n            \n        TheFootballTree[leagueId].salaryAbsoluteDeviation = TheFootballTree[leagueId].salaryOptimal - TheFootballTree[leagueId].salaryNet;\n        TheFootballTree[leagueId].salaryPercDeviation =  (TheFootballTree[leagueId].salaryAbsoluteDeviation * 100 ) / TheFootballTree[leagueId].salaryOptimal\n      \n        leagueClusterSalaryAvg[TheFootballTree[leagueId].cluster] = leagueClusterSalaryAvg[TheFootballTree[leagueId].cluster]  === undefined ? { totalSalaryNet : 0, count : 0} : leagueClusterSalaryAvg[TheFootballTree[leagueId].cluster];\n        leagueClusterSalaryAvg[TheFootballTree[leagueId].cluster].totalSalaryNet = TheFootballTree[leagueId].salaryNet + leagueClusterSalaryAvg[TheFootballTree[leagueId].cluster].totalSalaryNet\n        leagueClusterSalaryAvg[TheFootballTree[leagueId].cluster].count++;\n        \n        let lranks = { \n            leagueId : leagueId,\n            potentialPrice :  TheFootballTree[leagueId].potentialPrice,  \n            portfolioCost : TheFootballTree[leagueId].portfolioCost, \n            salaryNet :  TheFootballTree[leagueId].salaryNet\n            \n        } \n        \n        \n        leagueRanks.push(lranks)\n    })\n\n\n\n//RANKS\n\n      const leaguesByValue = leagueRanks.sort((a,b) => a.potentialPrice - b.potentialPrice).map((league, index, array) => league.leagueId).reverse()\n      const leaguesByAcquisition = leagueRanks.sort((a,b) => a.portfolioCost - b.portfolioCost).map((league, index, array) => league.leagueId).reverse()\n      const leaguesBySalary = leagueRanks.sort((a,b) => a.salaryNet - b.salaryNet).map((league, index, array) => league.leagueId).reverse()\n      \n      const clubsByValue = clubRanks.sort((a,b) => a.potentialPrice - b.potentialPrice).map((club, index, array) => club.clubId).reverse()\n      const clubsByAcquisition = clubRanks.sort((a,b) => a.portfolioCost - b.portfolioCost).map((club, index, array) => club.clubId).reverse()\n      const clubsBySalary = clubRanks.sort((a,b) => a.salaryNet - b.salaryNet).map((club, index, array) => club.clubId).reverse()\n\n      const playersByValue = playerRanks.sort((a,b) => a.potentialPrice - b.potentialPrice).map((player, index, array) => player.playerId).reverse()\n      const playersByPerformance = playerRanks.sort((a,b) => a.performance - b.performance).map((player, index, array) => player.playerId).reverse()\n      const playersByEffectiveness = playerRanks.sort((a,b) => a.effectiveness - b.effectiveness).map((player, index, array) => player.playerId).reverse()\n\n\nObject.keys(TheFootballTree).forEach( leagueId => {\n        \n        TheFootballTree[leagueId].totalProjectedRevenues = 0;\n        TheFootballTree[leagueId].totalCostOperating = 0;\n        TheFootballTree[leagueId].salesPlayers5Y$ = 0;\n        TheFootballTree[leagueId].purchasePlayers5Y$ = 0;\n        TheFootballTree[leagueId].totalBroadcasting = 0;\n        TheFootballTree[leagueId].totalCommercial = 0;\n        TheFootballTree[leagueId].totalMatchDay = 0;\n        TheFootballTree[leagueId].totalOtherRevenues = 0;\n        TheFootballTree[leagueId].revenueGrowth = 0;\n        TheFootballTree[leagueId].projectedRevenueGrowth = 0;\n        TheFootballTree[leagueId].revenueShare = 0;\n        TheFootballTree[leagueId].netProfitLoss = 0;\n        TheFootballTree[leagueId].playerTrading = 0;\n        TheFootballTree[leagueId].returnOnInvestment = 0;\n        TheFootballTree[leagueId].financialSustainabilityIndex = 0;\n        TheFootballTree[leagueId].performanceIndex = 0;\n        TheFootballTree[leagueId].oldTotalRevenues = 0;\n        \n        TheFootballTree[leagueId].rankByValue = leaguesByValue.indexOf(leagueId) +1\n        TheFootballTree[leagueId].rankByAcquisition = leaguesByAcquisition.indexOf(leagueId) +1\n        TheFootballTree[leagueId].rankBySalary = leaguesBySalary.indexOf(leagueId) +1\n        TheFootballTree[leagueId].avgSalaryNetCluster = leagueClusterSalaryAvg[TheFootballTree[leagueId].cluster].totalSalaryNet / leagueClusterSalaryAvg[TheFootballTree[leagueId].cluster].count\n        TheFootballTree[leagueId].absSalaryNetClusterDeviation = Math.abs(TheFootballTree[leagueId].avgSalaryNetCluster - TheFootballTree[leagueId].salaryNet ) \n        TheFootballTree[leagueId].percSalaryNetClusterDeviation = ( (TheFootballTree[leagueId].salaryNet - TheFootballTree[leagueId].avgSalaryNetCluster) / TheFootballTree[leagueId].salaryNet ) * 100\n            \n            \n            \n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            \n            club.rankByValue = clubsByValue.indexOf(club.clubId)  +1 \n            club.rankByAcquisition = clubsByAcquisition.indexOf(club.clubId)  +1\n            club.rankBySalary = clubsBySalary.indexOf(club.clubId)  +1\n            \n            club.avgSalaryNetCluster = clubClusterSalaryAvg[club.cluster].totalSalaryNet / clubClusterSalaryAvg[club.cluster].numberOfClubs\n            club.absSalaryNetClusterDeviation = Math.abs(club.avgSalaryNetCluster - club.salaryNetSum ) \n            club.percSalaryNetClusterDeviation = ( (club.salaryNetSum - club.avgSalaryNetCluster) / club.salaryNetSum ) * 100\n            club.avgSalaryNetClusterByPlayer = clubClusterSalaryAvg[club.cluster].totalSalaryNet / clubClusterSalaryAvg[club.cluster].numberOfPlayers\n            \n            // club.avgLeagueSalaryNet = TheFootballTree[leagueId].avgSalaryNet il 03/05/2023 cambiamo facciamo la media per club \n            club.avgLeagueSalaryNet = clubLeagueSalaryAvg[club.leagueId].totalSalaryNet / clubLeagueSalaryAvg[club.leagueId].numberOfClubs \n            club.absLeagueSalaryNetDeviation = Math.abs(club.salaryNetSum - club.avgLeagueSalaryNet ) \n            club.percLeagueSalaryNetDeviation = (( club.salaryNetSum - club.avgLeagueSalaryNet ) / club.salaryNetSum ) * 100;\n\n            \n            club.numOfOwnedPlayers = clubOwnedPlayers[club.clubId] ? clubOwnedPlayers[club.clubId] : 0\n            \n            //club.financialSustainabilityIndex = club.lastRevenues ? ( ( club.playersAnnualCost / club.lastRevenues)*100) : 0;\n            club.financialSustainabilityIndex = club.revenues ? ( ( (club.annualBookValue + club.maxSalaryGross) / club.revenues)*100) : 0;\n            \n            club.revenueShare = TheFootballTree[leagueId].totalRevenues ? (( club.lastRevenues / TheFootballTree[leagueId].totalRevenues )*100) : 0;\n            club.Players.forEach( player => {\n                \n                player.rankByValue = playersByValue.indexOf(player.playerId)  +1\n                player.rankByPerformance = playersByPerformance.indexOf(player.playerId)  +1\n                player.rankByEffectiveness = playersByEffectiveness.indexOf(player.playerId)  +1\n                \n                \n                player.absClubAvgSalaryDeviation = Math.abs(club.salaryAvg - player.salaryNet )\n                player.percClubAvgSalaryDeviation = ( ( player.salaryNet - club.salaryAvg ) / club.salaryAvg ) * 100\n                \n                player.absLeagueAvgSalaryDeviation = Math.abs(TheFootballTree[leagueId].salaryAvg - player.salaryNet )\n                player.percLeagueAvgSalaryDeviation = ( ( player.salaryNet - TheFootballTree[leagueId].salaryAvg ) / TheFootballTree[leagueId].salaryAvg ) * 100\n\n                player.absClubCusterAvgSalaryDeviation =  Math.abs(club.avgSalaryNetClusterByPlayer - player.salaryNet )\n                player.percClubClusterAvgSalaryDeviation = ( ( player.salaryNet - club.avgSalaryNetClusterByPlayer ) /club.avgSalaryNetClusterByPlayer ) * 100\n                \n           \n                //player.revenueContributionIndex = club.revenues ? ( player.benefits / club.revenues) : 0;\n                \n                let eff23 = player.effectiveness < 23.5 ? 0 : player.effectiveness;\n                \n                player.contributionIndexPerc = ( eff23 / club.totalEffectivenessExceed23 )*100\n                player.revenueContributionIndex = player.contributionIndexPerc/100 * club.revenues;\n                \n                \n                player.costPerMinute =  player.minutesLastSeason ? ( player.annualCost / player.minutesLastSeason ) : player.annualCost;\n               //player.scoringContributionIndex = player.minutes ? ( ( player.goal + player.assist + player.preassist) / ( player.minutes/90)) : 0;\n                \n                \n                player.scoringContributionIndex = ( player.goal + player.assist + player.preassist) ? ( ( player.minutes) / ( player.goal + player.assist + player.preassist) ) : 0;\n\n                \n                player.clubRelativePlayerPerformance = club.avgEffectiveness ? (( ( player.effectiveness - club.avgEffectiveness)  / club.avgEffectiveness )*100) : 0;\n                player.leagueRelativePlayerPerformance = TheFootballTree[leagueId].avgEffectiveness ? ((( player.effectiveness-TheFootballTree[leagueId].avgEffectiveness) / TheFootballTree[leagueId].avgEffectiveness  )*100) : 0;\n           \n                player.salaryImpactOnSalaries = club.maxSalaryGross ? ( ( player.salaryGross / club.maxSalaryGross)* 100) : 0;\n           \n           \n           \n            })\n            \n            TheFootballTree[leagueId].oldTotalRevenues = TheFootballTree[leagueId].oldTotalRevenues + club.oldRevenues;\n            TheFootballTree[leagueId].totalProjectedRevenues = TheFootballTree[leagueId].totalProjectedRevenues + club.revenues;\n            TheFootballTree[leagueId].totalCostOperating = TheFootballTree[leagueId].totalCostOperating + club.costOperating;\n            TheFootballTree[leagueId].salesPlayers5Y$ = TheFootballTree[leagueId].salesPlayers5Y$ + club.salesPlayers5Y$;\n            TheFootballTree[leagueId].purchasePlayers5Y$ = TheFootballTree[leagueId].purchasePlayers5Y$ + club.purchasePlayers5Y$;\n            \n            TheFootballTree[leagueId].totalBroadcasting = TheFootballTree[leagueId].totalBroadcasting + club.broadcastingRevenues;\n            TheFootballTree[leagueId].totalCommercial = TheFootballTree[leagueId].totalCommercial + club.commericialRevenues;\n            TheFootballTree[leagueId].totalMatchDay = TheFootballTree[leagueId].totalMatchDay + club.matchDayRevenues;\n            TheFootballTree[leagueId].totalOtherRevenues = TheFootballTree[leagueId].totalOtherRevenues + club.otherRevenues;\n            \n        })\n       \n        \n        TheFootballTree[leagueId].revenueGrowth =  TheFootballTree[leagueId].oldTotalRevenues ? (( ( TheFootballTree[leagueId].totalRevenues - TheFootballTree[leagueId].oldTotalRevenues ) / TheFootballTree[leagueId].oldTotalRevenues)*100) : 0;\n        // TheFootballTree[leagueId].projectedRevenueGrowth  = TheFootballTree[leagueId].totalRevenues ? ((TheFootballTree[leagueId].totalProjectedRevenues  - TheFootballTree[leagueId].totalRevenues) / TheFootballTree[leagueId].totalRevenues ) : 0;\n        TheFootballTree[leagueId].revenueShare = (TheFootballTree[leagueId].totalRevenues / allLeagueTotalRevenues)*100;\n        TheFootballTree[leagueId].netProfitLoss = TheFootballTree[leagueId].totalRevenues -  TheFootballTree[leagueId].totalCostOperating ;\n        TheFootballTree[leagueId].playerTrading = TheFootballTree[leagueId].salesPlayers5Y$ - TheFootballTree[leagueId].purchasePlayers5Y$ ;\n        //TheFootballTree[leagueId].returnOnInvestment double;\n        //TheFootballTree[leagueId].financialSustainabilityIndex =  TheFootballTree[leagueId].totalRevenues ? ( ( ( TheFootballTree[leagueId].salaryGross + TheFootballTree[leagueId].residualBookValue )*100)/ TheFootballTree[leagueId].totalRevenues) : 0;\n        TheFootballTree[leagueId].financialSustainabilityIndex = TheFootballTree[leagueId].totalRevenues ? ( ( ( TheFootballTree[leagueId].salaryGross + TheFootballTree[leagueId].annualBookValue )*100)/ TheFootballTree[leagueId].totalRevenues) : 0;\n        TheFootballTree[leagueId].performanceIndex = TheFootballTree[leagueId].avgEffectiveness;\n        \n    \n    })\n\n} catch(e) {\n    \n    console.log(e)\n}\n\n\n//flow.set(\"Players\",Players)\n//flow.set(\"Clubs\",Clubs)\n//flow.set(\"Leagues\",Leagues)\n//flow.set(\"TheFootballTree\",TheFootballTree)\nglobal.set(\"TheLatestFooballTree\",TheFootballTree)\n//global.set(\"PlayersErrors\",msg.PlayersErrors)\nflow.get(\"logmsg\").message = \"Clubs and Leagues Analisys ENDS\"\nnode.log(flow.get(\"logmsg\"))\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 1020,
        "wires": [
            [
                "3fde063a678b3921"
            ]
        ]
    },
    {
        "id": "da9ecfd6c427217b",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "The Players and The Football Tree",
        "func": "console.log(\"PLAYER BASIC ANALISYS BEGINS\");\n\nconsole.log(\"DOMINANCE INFO IS MASTER TABLE\")\n\nflow.get(\"logmsg\").message = \"Player Basic Analisys and Tree Building Begins\"\nnode.log(flow.get(\"logmsg\"))\n\n    /**\n     *  Select \n            di.playerId, \n            di.player, \n            di.lastName, \n            di.firstName, \n            di.birthDate,\n            di.position, \n            di.teamId, \n            di.optaTeamId, \n            di.teamName, \n            (select c1.salaryCapFair from club c1 where c1.teamID = di.teamId) as salayCapFair, \n            (select c.cluster from club c where c.teamID = di.teamId) as clubCluster, \n            di.leagueId, \n            di.leagueName, \n            (select l.taxRate from league l where l.leagueID = di.leagueId) as currentLeagueTaxRate \n        from \n            dominanceplayerinfo di \n        where \n            di.run = (select max(di1.run) from dominanceplayerinfo di1 );\";\n    **/\n\n/** IMPORTO TUTTI I DATI **/\nconst _INFO = msg._INFO; //flow.get(\"_INFO\");\nconst _STATS = msg._STATS; //flow.get(\"_STATS\");\nconst _PLAYERS = msg._PLAYERS; //flow.get(\"_PLAYERS\");\nconst _VOLATILITY = msg._VOLATILITY; //flow.get(\"_VOLATILITY\");\nconst _UNIQ = msg._UNIQ; //flow.get(\"_UNIQ\");\nconst _ROLES = msg._ROLES; //flow.get(\"_ROLES\");\nconst _INFOIndex = msg._INFOIndex;\nconst _STATSIndex = msg._STATSIndex;\nconst _PLAYERSIndex = msg._PLAYERSIndex;\nconst _VOLATILITYIndex = msg._VOLATILITYIndex;\nconst _UNIQIndex = msg._UNIQIndex;\nconst _COUNTRIES = msg._COUNTRIES; //flow.get(\"_ROLES\");\n\nconst _DATA = msg._DATA; //flow.get(\"_ROLES\");\nconst _MINUTES = msg._MINUTES; //flow.get(\"_ROLES\");\n\nconst Utils = global.get(\"UTILS\");\n\nvar Leagues = msg.Leagues;\nvar Clubs = msg.Clubs;\nvar LeaguesIndex = msg.LeaguesIndex;\nvar ClubsIndex = msg.ClubsIndex;\n\nvar errors=flow.get(\"errors\");\n\n\n/** COSTRUISCO LE ASSOCIAZIONI TRA NOME RUOLO, RUOLO ID, GRUPPO e PESO DEL RUOLO**/\nvar getRoleIdFromRoleName = {}\nvar getRoleNameFromRoleId = {}\nvar getRoleGroupFromRoleId = {}\nvar getRoleGroupFromRoleName = {}\nvar getRoleWeightFromRoleGroup = {}\nvar getRoleRisFromRoleGroup = {}\nvar getRoleWeightFromRoleId = {}\n\ntry {\n    \n    _ROLES.forEach( role => {\n    \n        getRoleIdFromRoleName[role.ruolo] = role.idRuolo;\n        getRoleNameFromRoleId[role.idRuolo] = role.ruolo;\n        getRoleGroupFromRoleId[role.idRuolo] = role.gruppo;\n        getRoleGroupFromRoleName[role.ruolo] = role.gruppo;\n        getRoleWeightFromRoleGroup[role.gruppo] = role.peso\n        getRoleRisFromRoleGroup[role.gruppo] = role.ruoloris\n        getRoleWeightFromRoleId[role.idRuolo] = role.peso;\n    })\n    \n} catch (e) {\n    console.log(e)\n}\n\n\n/** IMPORTO LE DEFINIZIONI DEGLI OGGETTI CHE VERRANNO CREATI **/\nconst Player = global.get(\"ThePlayerObject\");\nconst Error = global.get(\"TheErrorObject\");\nconst PlayerError = global.get(\"ThePlayerErrorObject\");\n\nlet TheFootballTree = {} //Questo oggetto mi darà le relazioni tra Lega -> Club -> Giocatore così come sono espresse dalla tabella INFO\n\n\nlet PlayersWithErrors = []; // ARRAY CONTENTE I GIOCATORI SCARTATI\nlet PlayersErrors = [] //ARRAY CON TUTTI GLI ERRORI PER REPORT\n\nvar maxAbsind = 0; //usata nel calcolo del fatmol\nvar totFatmol = 0; //usata nel calcolo dell'effectiveness\nvar playersByGroup = {}\n\n//Per ogni run esiste un solo giocatore nella DOMINANCEPLAYERINFO e un solo giocatore viene estratto dalla tabella allplayers\n\n/**\n * NON TUTTI I GIOCATORI DELLA INFO SONO PRESENTI NELLE STATISTICHE. \n * QUINDI, QUANDO PRESENTI ASSOCIAMO ALL'OGGETTO PLAYER LE SUE ULTIME STATISTICHE RILEVATE E PER SEMPLICITA' \n * AGGIUNGIAMO ALL'OGGETTO PLAYER LE PIU' RECENTI RILEVAZIONI SU CLUSTER DI LEGA, PESO DELLA LEGA, RUOLO E PESO DEL RUOLO\n * **/\n\nconst setLatestDetectedStats = function(player) {\n    \n    player.avgPlayedMinuteShare = 0;\n    player.avgMicroIndex = 0;\n    player.avgMacroIndex = 0;\n    player.minutes = 0 ;\n    player.minutesShare = 0 ;\n    player.alert = 0 ;\n    player.macroAlert = 0 ;\n    player.latestDetectedMicroIndexInjury = 0;\n    player.latestDetectedMacroIndexInjury = 0;\n    \n \n    \n    let mostTimeSpent = true;\n\n    let start = player.latestStats ? player.latestStats[0] :  null;\n    if (start) {\n        let latest = player.latestStats.reduce( (next, stat) => {\n            \n            let d1 = new Date(next.to);\n            let d2 = new Date(stat.to);\n            \n            return (d2 > d1) ? stat : next \n                    \n                    \n            \n        },start)\n        \n        player.latestDetectedLeagueCluster  = latest.leagueCluster;\n        player.latestDetectedLeagueWeight   = latest.leagueWeight;\n        player.latestDetectedRoleGroup      = latest.roleGroup;\n        player.latestDetectedRoleWeight     = latest.roleWeight;\n        player.latestDetectedMinutes        = latest.minutes;\n        player.latestDetectedMicroIndex     = latest.microIndex;\n        player.latestDetectedMacroIndex     = latest.macroIndex;\n        player.latestDetectedMicroIndexInjury     = latest.microIndexInjury;\n        player.latestDetectedMacroIndexInjury     = latest.macroIndexInjury;\n        \n        player.latestDetectedMicroIndex = latest.microIndexInjury > 0 ? latest.microIndexInjury : player.latestDetectedMicroIndex;\n        player.latestDetectedMacroIndex = latest.macroIndexInjury > 0 ? latest.macroIndexInjury : player.latestDetectedMacroIndex;\n        \n\n    }   \n    \n    //calcolo %mingiocati, weighteMicroindex\n    if(start) {\n        \n        let avgMinShare = { count : 0 , tot : 0 }\n        let weightedMicroindex = { count : 0 , tot : 0, minutes : 0 }\n        let weightedMacroindex = { count : 0 , tot : 0, minutes : 0 }\n\n        player.minutes = 0 ;\n        player.alert = 0;\n        player.macroAlert = 0;\n        \n        player.latestStats.forEach( stat => {\n            \n            let d1 = new Date(stat.from);\n            let d2 = new Date(stat.to);\n            \n            stat.diffInWeeks  = Math.round( (d2 - d1)/1000/60/60/24/7);\n            \n            stat.minuteShare = ( (38/stat.diffInWeeks)*stat.minutes) /(38*90)\n            \n            \n            avgMinShare.count++\n            avgMinShare.tot = avgMinShare.tot + stat.minuteShare;\n            \n            /*weightedMicroindex.count++\n            weightedMicroindex.tot = weightedMicroindex.tot + ( stat.leagueWeight * stat.microIndex)  ;\n            \n            weightedMacroindex.count++\n            weightedMacroindex.tot = weightedMacroindex.tot + ( stat.leagueWeight * stat.macroIndex)  ;\n            \n            */\n            \n            weightedMicroindex.count++\n            weightedMicroindex.minutes = weightedMicroindex.minutes + stat.minutes\n            weightedMicroindex.tot = weightedMicroindex.tot + ( stat.leagueWeight * (stat.microIndexInjury ? stat.microIndexInjury : stat.microIndex) * stat.minutes)  ;\n            \n            weightedMacroindex.count++\n            weightedMacroindex.minutes = weightedMacroindex.minutes + stat.minutes\n            weightedMacroindex.tot = weightedMacroindex.tot + ( stat.leagueWeight * (stat.macroIndexInjury ? stat.macroIndexInjury : stat.macroIndex)  * stat.minutes )  ; //prima non consideravo l'injury\n            \n            player.minutes = player.minutes + stat.minutes;\n            player.alert = player.alert + stat.microAlert;\n            player.macroAlert = player.macroAlert + stat.macroAlert;\n            \n            mostTimeSpent = stat.minutes > player.latestDetectedMinutes ? false : mostTimeSpent;\n            \n        })\n        \n        player.avgPlayedMinuteShare = avgMinShare.tot/avgMinShare.count;\n        //player.avgMicroIndex = player.latestDetectedLeagueCluster ==1 && player.latestDetectedMinutes > 599 && mostTimeSpent ? player.latestDetectedMicroIndex :  weightedMicroindex.tot/weightedMicroindex.count;\n        //player.avgMacroIndex = weightedMacroindex.tot/weightedMacroindex.count;\n        \n        player.avgMicroIndex = player.latestDetectedLeagueCluster ==1 && player.latestDetectedMinutes > 599 && mostTimeSpent ? player.latestDetectedMicroIndex :  weightedMicroindex.tot/weightedMicroindex.minutes;\n        player.avgMacroIndex = weightedMacroindex.minutes ?  weightedMacroindex.tot/weightedMacroindex.minutes : 0;\n\n        \n        //ALERT sono calcolati come la somma dei microAlert nel periodo di riferimento\n        //player.alert = player.latestStats && player.latestStats.length > 0 ? player.latestStats.reduce( (totAlert, stat) => { return totAlert + stat.microAlert; },0) : 0 //default 0\n    \n        //PERFORMANCE è calcolata come la media aritmetica dei prodotti microIndex * peso della lega \n         /*let tmpArr = player.latestStats && player.latestStats.length > 0 \n                                ? player.latestStats.reduce( (totals, stat) => { \n        \n                                    totals[0] = totals[0] + ( stat.leagueWeight * stat.microIndex ) \n                                    totals[1] = totals[1] + 1 // stat.leagueWeight Passaggio d amedia ponderata a media pesata\n       \n                                    return totals;\n        \n                                },[0,0]) : [0,0]\n        \n        player.avgMicroIndex =  tmpArr[1]!==0 ? tmpArr[0]/tmpArr[1] : 0 */ //default 0\n        \n       //MINUTI TOTALI\n       // player.minutes =  player.latestStats && player.latestStats.length > 0 ? player.latestStats.reduce( (totMinutes, stat) => { return totMinutes + stat.minutes; },0) : 0 //default 0\n        \n        player.minutes = player.minutes > 5130 ? 5130 : player.minutes;\n        player.minutesShare = player.minutes > 5130 ? 100 : ( player.minutes/5130) * 100;\n\n    }\n    \n}\n\n/**\n * NON TUTTI I GIOCATORI DELLA INFO SONO PRESENTI NEI PARAMS . \n * QUINDI, QUANDO PRESENTI ASSOCIAMO ALL'OGGETTO PLAYER LE ULTIME PARAMS RILEVATE E PER SEMPLICITA' \n * AGGIUNGIAMO ALL'OGGETTO PLAYER LE PIU' RECENTI RILEVAZIONI SU UNICITA' E VOLATITLITA'\n * **/\n\nconst setLatestParams = function(player) {\n    \n    let microv = { 'tot' : 0, 'count' : 0};\n    let macrov = { 'tot' : 0, 'count' : 0};\n    let uniq = { 'tot' : 0, 'count' : 0};\n\n    \n    if (player.latestParams && player.latestParams.length>0){\n        \n        //console.log(\"id : \", player. playerId, \" latestDetectedLeagueCluster \" , player.latestDetectedLeagueCluster , \" latestDetectedRoleGroup \" , player.latestDetectedRoleGroup)\n       \n        for (let i=0;i<player.latestParams.length;i++) {\n            \n            //console.log(\"latestParams[i]\", player.latestParams[i]  )\n            \n            if (player.latestDetectedLeagueCluster==player.latestParams[i].clusterId && player.latestDetectedRoleGroup==player.latestParams[i].group ) {\n                \n                \n                if ( player.latestParams[i].microVolatility && !isNaN(player.latestParams[i].microVolatility) ) {\n                     microv.tot = player.latestParams[i].microVolatility + microv.tot;\n                     microv.count++ \n                }\n                \n                if ( player.latestParams[i].macroVolatility && !isNaN(player.latestParams[i].macroVolatility) ) {\n                     macrov.tot = player.latestParams[i].macroVolatility + macrov.tot;\n                     macrov.count++ \n                }\n                \n                if ( player.latestParams[i].uniqueness && !isNaN(player.latestParams[i].uniqueness) ) {\n                     uniq.tot = player.latestParams[i].uniqueness + uniq.tot;\n                     uniq.count++ \n                }\n            }\n            \n        }\n    \n    \n        //console.log(microv)\n        \n    } \n    \n    player.latestMicroVolatility = microv.count > 0 ? ( microv.tot / microv.count ) : 0;\n    player.latestMacroVolatility = macrov.count > 0 ? ( macrov.tot / macrov.count ) : 0;\n    player.latestUniqueness = uniq.count > 0 ? ( uniq.tot / uniq.count ) : 0;\n    \n    \n\n    if (player.latestMicroVolatility) {\n       // console.log(player.playerId, \"vol \", player.latestMicroVolatility)\n    }\n}\n\n\n\n// BLOCCO ORIGINALE\n/*\nconsole.log(\"Duplicate Filtering\");\n\n//DUPLICATE FILTERING\n let InfoPlayerIndex = {};\n let dup = 0;\ntry {\n    \n    for(let pos = 0; pos<_INFO.length; pos++) {\n    \n    if(_INFO[pos].leagueId && !isNaN(LeaguesIndex[_INFO[pos].leagueId]) ) { //solo i record che hanno un id valido\n        \n        if (InfoPlayerIndex[_INFO[pos].playerId]===undefined) {\n            \n            InfoPlayerIndex[_INFO[pos].playerId] = pos;\n           \n        \n            \n        } else {\n            dup++\n            let prevPlayer = _INFO[InfoPlayerIndex[_INFO[pos].playerId]]; // Croazia 6\n            let currPlayer = _INFO[pos]; // ENg 3\n            \n            let prevPlayerCluster =  LeaguesIndex[prevPlayer.leagueId].cluster; // 6\n            let currPlayerCluster =  LeaguesIndex[currPlayer.leagueId].cluster; // 3\n            \n            // Cerco la statistica più recente\n            let statArray = [];\n            \n            for(let statPos = 0; statPos<_STATS.length; statPos++) { \n                \n               if ( _STATS[statPos].playerId == _INFO[pos].playerId) {\n                    statArray.push(_STATS[statPos])\n                }\n            }\n            \n            \n            if ( statArray.length > 0 ) { //ho trovato le statistiche\n                \n                let start = statArray[0];\n    \n                let latest = statArray.reduce( (next, stat) => { // cerco la più recente\n            \n                    let d1 = new Date(next.to);\n                    let d2 = new Date(stat.to);\n                \n                    return (d2 > d1) ? stat : next \n                    \n                \n                },start) // stat cluster 6\n                \n                \n                let highestClusterStat = statArray.reduce( (next, stat) => { // cerco la più recente\n            \n                    let d1 = next.clusterId\n                    let d2 = stat.clusterId;\n                \n                    return (d2 > d1) ? stat : next  \n                },start) // stat cluster 8\n                \n                let lowestClusterStat = statArray.reduce( (next, stat) => { // cerco la più recente\n            \n                    let d1 = next.clusterId\n                    let d2 = stat.clusterId;\n                \n                    return (d2 < d1) ? stat : next  \n                },start) //stat cluster 1\n                \n                if(highestClusterStat.minutes >= 600 ) { //Se il giocatore ha giocato almeno 600 minuti nella squadra di cluster più elevato allora assegno quel cluster\n                    \n                    prevPlayer.duplicate = prevPlayerCluster == highestClusterStat.clusterId ? false : true;\n                    currPlayer.duplicate = currPlayerCluster == highestClusterStat.clusterId ? false : true;\n                    \n                } else if (highestClusterStat.minutes < 600 ) {\n                    \n                    prevPlayer.duplicate = prevPlayerCluster == lowestClusterStat.clusterId ? false : true;\n                    currPlayer.duplicate = currPlayerCluster == lowestClusterStat.clusterId ? false : true;\n                    \n                } else {  // altrimenti assegno il più recente\n                \n                    prevPlayer.duplicate = prevPlayerCluster == latest.clusterId ? false : true;\n                    currPlayer.duplicate = currPlayerCluster == latest.clusterId ? false : true;\n                    \n                }\n                \n                if (prevPlayer.duplicate && currPlayer.duplicate ) { // se sono entrambi veri o entrambi falsi non posso prendere una decisione... assegno cluster più alto\n                \n                    prevPlayer.duplicate = prevPlayerCluster > currPlayerCluster ? true : false;\n                    currPlayer.duplicate = prevPlayerCluster < currPlayerCluster ? true : false;\n                    \n                     if ( prevPlayerCluster == currPlayerCluster) {\n                        \n                        prevPlayer.duplicate = true;\n                        currPlayer.duplicate= true;\n                        \n                    } \n\n                }\n                if (!prevPlayer.duplicate && !currPlayer.duplicate ) { // se sono entrambi veri o entrambi falsi non posso prendere una decisione... assegno cluster più alto\n                \n                    prevPlayer.duplicate = prevPlayerCluster > currPlayerCluster ? true : false;\n                    currPlayer.duplicate = prevPlayerCluster < currPlayerCluster ? true : false;\n                    \n                    if ( prevPlayerCluster == currPlayerCluster) {\n                        \n                        prevPlayer.duplicate = true;\n                        currPlayer.duplicate= true;\n                        \n                    } \n                    \n                }\n            } else { // NON HO STATISTICHE\n            \n                prevPlayer.duplicate = prevPlayerCluster > currPlayerCluster ? true : false;\n                currPlayer.duplicate = prevPlayerCluster < currPlayerCluster ? true : false;\n                \n               if ( prevPlayerCluster == currPlayerCluster) {\n                        \n                        prevPlayer.duplicate = true;\n                        currPlayer.duplicate= true;\n                        \n                    } \n            }\n            \n            \n        \n            \n        }\n   \n    }\n    \n}\n    \n} catch (e) {\n    console.log(e)\n}\nconsole.log(\"Found \"+dup+\" duplicates\")\n*/\n\n\nconsole.log(\"Duplicate Filtering\");\n\n// Mappatura delle relazioni tra prime e seconde squadre\nconst secondTeamsMapping = {\n    \"d0zdg647gvgc95xdtk1vpbkys\": \"6lzy9iiqoysvtdsgx719fng9n\", // Ajax -> Ajax II\n    \"3kfktv64h7kg7zryax1wktr5r\": \"1wyg1tunyt7go9tnjea1hjqxb\", // Alkmaar Zaanstreek -> Alkmaar Zaanstreek II\n    \"66bsnl0zjb7l5akwo00h0y5me\": \"bviyo2cuobo1dmlchlmpwdrgj\", // FC Porto -> Porto II\n    \"ccpscwdcm65czscrun048ecn5\": \"ch82doz9w9t1sw9ae3a4ffh0j\", // FC Utrecht -> FC Utrecht II\n    \"24fvcruwqrqvqa3aonf8c3zuy\": \"2xlnfgrl6r18ftv38unwp7h4s\", // PSV Eindhoven -> PSV Eindhoven II\n    \"9ldqu49smv1xg2va0n2cy28zl\": \"72kig6stvco9u4fe04gkef4jy\", // SL Benfica -> SL Benfica II\n};\n\n// Mappatura inversa (seconda squadra -> prima squadra)\nconst mainTeamsMapping = {\n    \"6lzy9iiqoysvtdsgx719fng9n\": \"d0zdg647gvgc95xdtk1vpbkys\", // Ajax II -> Ajax\n    \"1wyg1tunyt7go9tnjea1hjqxb\": \"3kfktv64h7kg7zryax1wktr5r\", // Alkmaar Zaanstreek II -> Alkmaar Zaanstreek\n    \"bviyo2cuobo1dmlchlmpwdrgj\": \"66bsnl0zjb7l5akwo00h0y5me\", // Porto II -> FC Porto\n    \"ch82doz9w9t1sw9ae3a4ffh0j\": \"ccpscwdcm65czscrun048ecn5\", // FC Utrecht II -> FC Utrecht\n    \"2xlnfgrl6r18ftv38unwp7h4s\": \"24fvcruwqrqvqa3aonf8c3zuy\", // PSV Eindhoven II -> PSV Eindhoven\n    \"72kig6stvco9u4fe04gkef4jy\": \"9ldqu49smv1xg2va0n2cy28zl\", // SL Benfica II -> SL Benfica\n};\n\n// Funzione che verifica se una squadra è una seconda squadra\nfunction isSecondTeam(teamId) {\n    return mainTeamsMapping.hasOwnProperty(teamId);\n}\n\n// Funzione che verifica se due squadre sono legate (una è la seconda dell'altra)\nfunction isRelatedTeam(teamIdA, teamIdB) {\n    return secondTeamsMapping[teamIdA] === teamIdB || mainTeamsMapping[teamIdA] === teamIdB;\n}\n\n//DUPLICATE FILTERING\nlet InfoPlayerIndex = {};\nlet dup = 0;\ntry {\n    // MOKIO brfa9yhy2llgt9l75unddogk\n    for(let pos = 0; pos<_INFO.length; pos++) {\n    \n    if(_INFO[pos].leagueId && !isNaN(LeaguesIndex[_INFO[pos].leagueId]) ) { //solo i record che hanno un id valido\n        \n        if (InfoPlayerIndex[_INFO[pos].playerId]===undefined) {\n            \n            InfoPlayerIndex[_INFO[pos].playerId] = pos;\n           \n        } else {\n            dup++\n            let prevPlayer = _INFO[InfoPlayerIndex[_INFO[pos].playerId]]; \n            let currPlayer = _INFO[pos]; \n            \n           \n            \n            // NUOVA ECCEZIONE: Verifico se una delle due squadre è la seconda squadra dell'altra\n            let prevTeamId = prevPlayer.teamId;\n            let currTeamId = currPlayer.teamId;\n            \n            \n            \n            // Se il giocatore appartiene sia a una prima squadra che alla sua seconda\n            if (isRelatedTeam(prevTeamId, currTeamId)) {\n                // Se il record corrente è di una seconda squadra, lo marco come duplicato\n                if (isSecondTeam(currTeamId)) {\n                    currPlayer.duplicate = true;\n                    prevPlayer.duplicate = false;\n                } \n                // Se il record precedente è di una seconda squadra, lo marco come duplicato\n                else if (isSecondTeam(prevTeamId)) {\n                    prevPlayer.duplicate = true;\n                    currPlayer.duplicate = false;\n                }\n                // Continua con il prossimo record dopo aver applicato l'eccezione\n                continue;\n            }\n            \n            // Se non si applica l'eccezione, prosegue con la logica originale\n            let prevPlayerCluster =  LeaguesIndex[prevPlayer.leagueId].cluster; \n            let currPlayerCluster =  LeaguesIndex[currPlayer.leagueId].cluster; \n            \n            // Cerco la statistica più recente\n            let statArray = [];\n            \n            for(let statPos = 0; statPos<_STATS.length; statPos++) { \n                \n               if ( _STATS[statPos].playerId == _INFO[pos].playerId) {\n                    statArray.push(_STATS[statPos])\n                }\n            }\n            \n            \n            if ( statArray.length > 0 ) { //ho trovato le statistiche\n                \n                let start = statArray[0];\n    \n                let latest = statArray.reduce( (next, stat) => { // cerco la più recente\n            \n                    let d1 = new Date(next.to);\n                    let d2 = new Date(stat.to);\n                \n                    return (d2 > d1) ? stat : next \n                    \n                \n                },start) // stat cluster 6\n                \n                \n                let highestClusterStat = statArray.reduce( (next, stat) => { // cerco la più recente\n            \n                    let d1 = next.clusterId\n                    let d2 = stat.clusterId;\n                \n                    return (d2 > d1) ? stat : next  \n                },start) // stat cluster 8\n                \n                let lowestClusterStat = statArray.reduce( (next, stat) => { // cerco la più recente\n            \n                    let d1 = next.clusterId\n                    let d2 = stat.clusterId;\n                \n                    return (d2 < d1) ? stat : next  \n                },start) //stat cluster 1\n                \n                if(highestClusterStat.minutes >= 270 ) { //Se il giocatore ha giocato almeno 600 minuti nella squadra di cluster più elevato allora assegno quel cluster\n                    \n                    prevPlayer.duplicate = prevPlayerCluster == highestClusterStat.clusterId ? false : true;\n                    currPlayer.duplicate = currPlayerCluster == highestClusterStat.clusterId ? false : true;\n                    \n                } else if (highestClusterStat.minutes < 270 ) {\n                    \n                    prevPlayer.duplicate = prevPlayerCluster == lowestClusterStat.clusterId ? false : true;\n                    currPlayer.duplicate = currPlayerCluster == lowestClusterStat.clusterId ? false : true;\n                    \n                } else {  // altrimenti assegno il più recente\n                \n                    prevPlayer.duplicate = prevPlayerCluster == latest.clusterId ? false : true;\n                    currPlayer.duplicate = currPlayerCluster == latest.clusterId ? false : true;\n                    \n                }\n                \n                if (prevPlayer.duplicate && currPlayer.duplicate ) { // se sono entrambi veri o entrambi falsi non posso prendere una decisione... assegno cluster più alto\n                \n                    prevPlayer.duplicate = prevPlayerCluster > currPlayerCluster ? false : true;\n                    currPlayer.duplicate = currPlayerCluster > prevPlayerCluster ? false : true;\n                    \n                     if ( prevPlayerCluster == currPlayerCluster) {\n                        // Cerco di decidere in base alla data più recente se ho statistiche\n                        if (statArray.length > 0) {\n                            // Trovo la statistica più recente per ciascun record\n                            let prevPlayerLatestDate = null;\n                            let currPlayerLatestDate = null;\n                            \n                            for(let statPos = 0; statPos < _STATS.length; statPos++) {\n                                if (_STATS[statPos].playerId == prevPlayer.playerId && \n                                    _STATS[statPos].clusterId == prevPlayerCluster) {\n                                    let statDate = new Date(_STATS[statPos].to);\n                                    if (!prevPlayerLatestDate || statDate > prevPlayerLatestDate) {\n                                        prevPlayerLatestDate = statDate;\n                                    }\n                                }\n                                \n                                if (_STATS[statPos].playerId == currPlayer.playerId && \n                                    _STATS[statPos].clusterId == currPlayerCluster) {\n                                    let statDate = new Date(_STATS[statPos].to);\n                                    if (!currPlayerLatestDate || statDate > currPlayerLatestDate) {\n                                        currPlayerLatestDate = statDate;\n                                    }\n                                }\n                            }\n                            \n                            if (prevPlayerLatestDate && currPlayerLatestDate) {\n                                // Decido in base alla data più recente\n                                prevPlayer.duplicate = prevPlayerLatestDate >= currPlayerLatestDate ? false : true;\n                                currPlayer.duplicate = currPlayerLatestDate > prevPlayerLatestDate ? false : true;\n                            } else {\n                                // Se non riesco a determinare le date, scelgo arbitrariamente il primo record\n                                prevPlayer.duplicate = false;\n                                currPlayer.duplicate = true;\n                            }\n                        } else {\n                            // Nessuna statistica, scelgo arbitrariamente il primo record\n                            prevPlayer.duplicate = false;\n                            currPlayer.duplicate = true;\n                        }\n                    } \n\n                }\n                if (!prevPlayer.duplicate && !currPlayer.duplicate ) { // se sono entrambi veri o entrambi falsi non posso prendere una decisione... assegno cluster più alto\n                \n                    prevPlayer.duplicate = prevPlayerCluster > currPlayerCluster ? false : true;\n                    currPlayer.duplicate = currPlayerCluster > prevPlayerCluster ? false : true;\n                    \n                    if ( prevPlayerCluster == currPlayerCluster) {\n                    // In questo caso non abbiamo statistiche, quindi scegliamo arbitrariamente il primo record\n                    prevPlayer.duplicate = false;\n                    currPlayer.duplicate = true;\n                } \n                    \n                }\n            } else { // NON HO STATISTICHE\n            \n                prevPlayer.duplicate = prevPlayerCluster > currPlayerCluster ? false : true;\n                currPlayer.duplicate = currPlayerCluster > prevPlayerCluster ? false : true;\n                \n               if ( prevPlayerCluster == currPlayerCluster) {\n                        \n                        prevPlayer.duplicate = true;\n                        currPlayer.duplicate = true;\n                        \n                    } \n            }\n            \n        }\n   \n    }\n    \n}\n    \n} catch (e) {\n    console.log(e)\n}\nconsole.log(\"Found \"+dup+\" duplicates\")\n\n\n\n\n/*console.log(\"Duplicate Filtering\");\n\n//DUPLICATE FILTERING\n let InfoPlayerIndex = {};\n let dup = 0;\ntry {\n    \n    for(let pos = 0; pos<_INFO.length; pos++) {\n    \n    if(_INFO[pos].leagueId && !isNaN(LeaguesIndex[_INFO[pos].leagueId]) ) { //solo i record che hanno un id valido\n        \n        if (InfoPlayerIndex[_INFO[pos].playerId]===undefined) {\n            \n            InfoPlayerIndex[_INFO[pos].playerId] = pos;\n           \n        \n            \n        } else {\n            dup++\n            let prevPlayer = _INFO[InfoPlayerIndex[_INFO[pos].playerId]]; \n            let currPlayer = _INFO[pos]; \n            \n            let prevPlayerCluster =  LeaguesIndex[prevPlayer.leagueId].cluster;\n            let currPlayerCluster =  LeaguesIndex[currPlayer.leagueId].cluster;\n            \n            // Cerco la statistica più recente\n            let statArray = [];\n            \n            for(let statPos = 0; statPos<_STATS.length; statPos++) { \n                \n               if ( _STATS[statPos].playerId == _INFO[pos].playerId) {\n                    statArray.push(_STATS[statPos])\n                }\n            }\n            \n            \n            if ( statArray.length > 0 ) { //ho trovato le statistiche\n                \n                let start = statArray[0];\n    \n                let latest = statArray.reduce( (next, stat) => { // cerco la più recente\n            \n                    let d1 = new Date(next.to);\n                    let d2 = new Date(stat.to);\n                \n                    return (d2 > d1) ? stat : next \n                    \n                \n                },start)\n                \n                \n                let highestClusterStat = statArray.reduce( (next, stat) => { // cerco la più alta (numero più basso)\n            \n                    let d1 = next.clusterId\n                    let d2 = stat.clusterId;\n                \n                    return (d2 < d1) ? stat : next  \n                },start)\n                \n                let lowestClusterStat = statArray.reduce( (next, stat) => { // cerco la più bassa (numero più alto)\n            \n                    let d1 = next.clusterId\n                    let d2 = stat.clusterId;\n                \n                    return (d2 > d1) ? stat : next  \n                },start)\n                \n                if(highestClusterStat.minutes >= 270 ) { //Se il giocatore ha giocato almeno 270 minuti nella squadra di cluster più elevato\n                    \n                    prevPlayer.duplicate = prevPlayerCluster == highestClusterStat.clusterId ? false : true;\n                    currPlayer.duplicate = currPlayerCluster == highestClusterStat.clusterId ? false : true;\n                    \n                } else { // Se non ha almeno 270 minuti nel cluster più alto, prendi il cluster più basso\n                    \n                    prevPlayer.duplicate = prevPlayerCluster == lowestClusterStat.clusterId ? false : true;\n                    currPlayer.duplicate = currPlayerCluster == lowestClusterStat.clusterId ? false : true;\n                    \n                }\n                \n                if (prevPlayer.duplicate && currPlayer.duplicate ) { // se sono entrambi duplicati, prendi il record più recente\n                \n                    prevPlayer.duplicate = prevPlayerCluster == latest.clusterId ? false : true;\n                    currPlayer.duplicate = currPlayerCluster == latest.clusterId ? false : true;\n                    \n                     if (prevPlayer.duplicate && currPlayer.duplicate) {\n                        // Se ancora entrambi duplicati, scegli arbitrariamente\n                        prevPlayer.duplicate = true;\n                        currPlayer.duplicate = false;\n                    }\n\n                }\n                if (!prevPlayer.duplicate && !currPlayer.duplicate ) { // se nessuno è duplicato, prendi il record più recente\n                \n                    prevPlayer.duplicate = prevPlayerCluster == latest.clusterId ? false : true;\n                    currPlayer.duplicate = currPlayerCluster == latest.clusterId ? false : true;\n                    \n                    if (!prevPlayer.duplicate && !currPlayer.duplicate) {\n                        // Se ancora nessuno è duplicato, scegli arbitrariamente\n                        prevPlayer.duplicate = true;\n                        currPlayer.duplicate = false;\n                    }\n                    \n                }\n            } else { // NON HO STATISTICHE\n            \n                // Se il cluster è più basso (numero più piccolo), mantieni quel record\n                if (prevPlayerCluster < currPlayerCluster) {\n                    prevPlayer.duplicate = false;\n                    currPlayer.duplicate = true;\n                } else if (prevPlayerCluster > currPlayerCluster) {\n                    prevPlayer.duplicate = true;\n                    currPlayer.duplicate = false;\n                } else {\n                    // Se i cluster sono uguali, scegli arbitrariamente\n                    prevPlayer.duplicate = true;\n                    currPlayer.duplicate = false;\n                }\n            }\n            \n            \n        \n            \n        }\n   \n    }\n    \n}\n    \n} catch (e) {\n    console.log(e)\n}\nconsole.log(\"Found \"+dup+\" duplicates\")\n*/\n\n var start = new Date(); \nconsole.log(\"Loop Begins at \"+start);\n_INFO.forEach( p => {\n    \n    try {\n        \n    // ANAGRAFICA DALLA TABELLA PLAYER\n    let player = new Player(p.playerId,p.firstName,p.lastName)\n    \n        player._id = player.playerId; // PER MONGO DB\n        player.week = p.week\n        player.year = new Date().getFullYear() // Potrebbe esserci un problema nei primi giorni del nuovo anno\n    \n        player.Errors = []; // ERRORI CHE RENDONO IMPOSSIBILE L'ELABORAZIONE. SE PRESENTI IL GIOCATORE DEVE ESSERE SCARTATO\n        player.Warnings = []; // ERRORI NON BLOCCANTI PER L'ELABORAZIONE. IL GIOCATORE NON VIENE SCARTATO.\n        player.Alerts = []; // CONTROLLI STATISTICI SUI DATI\n    \n        player.name = p.player\n        \n        \n       \n        \n        /**\n         * CERCHIAMO IL GIOCATORE TRA I GIOCATORI CENSITI DA STANDARD FOOTBALL E ARRICCHIAMO L'OGGETTO\n         * */\n         \n        let SFPlayer = _PLAYERSIndex[player.playerId] !== undefined ? _PLAYERS[_PLAYERSIndex[player.playerId]] : null; //PLayers INdex è costruito nell ipotesi di avere più di unrecord per lo stesso id, ad oggi però questo non avviene\n        \n        if(!SFPlayer) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-STDPLAYER\",\"Player Missing\",player,\"Can't find the player in Standard Football registry \"); \n            PlayersErrors.push(e);\n            player.Errors.push(e);\n          \n            //errors.push(new Error(\"EPLAYER\",\"Player\",player.playerId, player.name,\"Player not monitored in Standard Fottoball\"))\n        }\n        \n        if( SFPlayer) {\n            player.shortFirstName = SFPlayer.shortFirstName\n            player.shortLastName = SFPlayer.shortLastName\n            player.knownName = SFPlayer.knownName\n            player.roleId = SFPlayer.roleId\n            \n        }\n        \n        if(p.birthDate && !p.birthDate.toString().includes(\"1970\")){\n            player.birthDate=new Date(p.birthDate)\n        } else if( SFPlayer && SFPlayer.birthDate) {\n             player.birthDate=new Date(SFPlayer.birthDate)\n        } else {\n            player.birthDate=new Date(\"01/01/1995\");\n        } \n\n        \n        //player.birthDate =  p.birthDate && !p.birthDate.toString().includes(\"1970\") ? new Date(p.birthDate) : SFPlayer && SFPlayer.birthDate ?  new Date(SFPlayer.birthDate) : new Date(\"01/01/1995\") ;\n        \n        player.age = player.birthDate ? parseInt(Utils.calculateAge(player.birthDate)) : null;\n        \n        if (player.playerId == '1iki63yupn9fwwy4k5w7wus5w') {\n            \n            console.log('1iki63yupn9fwwy4k5w7wus5w',player)\n        }\n        player.months = Math.abs(Utils.diffInMonths(player.birthDate,new Date()) % 12)\n        player.months = player.months ? player.months : 0;\n        player.ageWithDecimals = player.birthDate ? parseInt(Utils.calculateAgeWithDecimals(player.birthDate)) : null; \n        \n        player.currentPosition = p.position;\n        //SQUADRA ATTUALE COME DA TABELLA INFO\n        player.currentRole           = !p.role || p.role==\"null\" ? p.position : p.role;\n        player.currentRole2          = p.role2;\n\n    \n        player.currentClubId = p.teamId;\n        player.currentClubName = p.teamName;\n        \n        player.currentLeagueId = p.leagueId;\n        player.currentLeagueName = p.leagueName;\n\n        player.nationalTeamPlayer = p.nationalAppearances > 1 ? true : false; \n        \n      \n        \n        player.minutesLastSeason =  _MINUTES.filter(d =>  d.playerId===player.playerId).map(d => d.minutes)[0]\n        player.goal =  _DATA.filter(d =>  d.playerId===player.playerId).map(d => d.goal)[0]\n        player.assist =  _DATA.filter(d =>  d.playerId===player.playerId).map(d => d.assist)[0]\n        player.preassist =  _DATA.filter(d =>  d.playerId===player.playerId).map(d => d.preassist)[0]\n        \n        \n        player.minutesLastSeason =  player.minutesLastSeason ? player.minutesLastSeason : 0;\n        player.goal =  player.goal ? player.goal : 0;\n        player.assist =  player.assist ? player.assist : 0;\n        player.preassist =  player.preassist ? player.preassist : 0;\n        \n\n        \n        \n        // CERCHIAMO IL CLUB E LA LEGA\n        \n        let Club = ClubsIndex[player.currentClubId] !== undefined ? Clubs[ClubsIndex[player.currentClubId]] : null;\n        let League =  LeaguesIndex[player.currentLeagueId] !== undefined ? Leagues[LeaguesIndex[player.currentLeagueId]] : null;\n        \n        \n         //ERRORI\n    \n     \n        if (!player.birthDate) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-BD\",\"BirthDate Missing\",player,\"From Info birthdate : \"+p.birthDate); \n            PlayersErrors.push(e);\n            //player.Errors.push(e);\n            \n        }\n  \n        if (p.birthDate && !player.birthDate) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-BDPARSE\",\"Cannot parse BirthDate\",player,\"From Info birthdate : \"+p.birthDate); \n            PlayersErrors.push(e);\n            //player.Errors.push(e);\n            \n        }\n        \n        if (isNaN(player.age)) {\n            \n            \n            let e = new PlayerError(\"ERROR\",\"ERR-AGE\",\"Cannot parte age\",player,\"Age: \"+p.age); \n            PlayersErrors.push(e);\n            //player.Errors.push(e);\n            \n            console.log('isNaN(player.age)',player)\n            \n        }\n        \n        if (!Club || Club===null || Club === undefined) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-CLUB\",\"Club Missing\",player,\"Can't find club for the given id\"); \n            PlayersErrors.push(e);\n            player.Errors.push(e);\n            \n           \n        }\n            \n        if (!League || League===null || League === undefined) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-LEAGUE\",\"League Missing\",player,\"Can't find league for the given id\"); \n            PlayersErrors.push(e);\n            player.Errors.push(e);\n           \n        }    \n            \n        \n        \n       if (p.duplicate) {\n           \n           let e = new PlayerError(\"ERROR\",\"ERR-INFO\",\"Duplicate Player\",player,\"A player with same ID already exists, this player will be discarded \"); \n            PlayersErrors.push(e);\n            player.Errors.push(e);\n           \n       }\n         //ERRORE UN GIOCATORE CON LO STESSO ID E' GIA' PRESENTE. Consideriamo il giocatore che gioca nella lega di cluster migliore\n    \n        if (SFPlayer && player.currentClubId !== SFPlayer.clubId ) {\n            \n            \n            let e = new PlayerError(\"WARNING\",\"WARN-CLUBMISMATCH\",\"Club in info differes from club in SF\",player, \"\"+SFPlayer.clubName + \" | \" +SFPlayer.clubId); \n            PlayersErrors.push(e);\n            //player.Warnings.push(e); //Questo è un warning.\n            \n        }\n        \n       \n        /**\n        * CHECKPOINT\n        * \n        * Gli errori fino ad ora mi indicano problemi nella struttura del giocatore (età, club, lega e dati sulla nostra tabella player)\n        * \n        * Tutti gli errori sono BLOCCANTI e quindi se presenti interrompiamo l'esecuzione.\n        * */\n        \n        if (player.Errors.length>0) {\n            \n            PlayersWithErrors.push(player);\n            return; // interrompiamo l'esecuzione e passiamo al prossimo giocaotre\n        } \n       \n       \n       Club.leagueId = League.leagueId;\n       \n       \n        //MASTER CLUB\n        player.masterClubId = SFPlayer.masterClubId;\n        let MasterClub = ClubsIndex[player.masterClubId] !== undefined ? Clubs[ClubsIndex[player.masterClubId]] : null;\n\n        if (!MasterClub) {\n            \n            let e = new PlayerError(\"WARNING\",\"WARN-MASTERCLUB\",\"Master Club Missing\",player,\"Can't find club for the given id\"); \n            PlayersErrors.push(e);\n            //player.Warnings.push(e); //Questo è un warning.\n            \n            //PROSEGUIAMO\n        } /*else {\n            \n            let MasterClub = ClubsIndex[player.masterClubId] !== undefined ? Clubs[ClubsIndex[player.masterClubId]] : null;\n            let MasterLeague =  MasterClub && LeaguesIndex[MasterClub.leagueId] !== undefined ? Leagues[LeaguesIndex[MasterClub.leagueId]] : null;\n        \n            player.masterClubName = MasterClub ?  MasterClub.name : null;\n            player.masterLeagueName = MasterClub && MasterLeague ?  MasterLeague.name : null;\n            player.masterLeagueId = MasterClub && MasterLeague ?  MasterLeague.leagueId : null;\n\n            \n            \n        }*/\n        \n        \n       \n        /** LATEST */\n        player.currentLeagueCluster = League.cluster;\n        player.currentLeagueWeight = League.weight;\n        player.currentLeagueTaxRate = League.taxRate;\n        player.currentLeagueCountry = League.country;\n        player.currentLeagueCountryCode = League.countryCode;\n        player.currentLeagueNameExtended = League.name + \"(\"+League.countryCode+\")\";\n\n        player.currentClubCluster = Club.cluster;\n        player.currentClubRank = Club.clubRank;\n        player.currentClubShortName = Club.shortName;\n\n        \n\n        let nArr = SFPlayer.nationality.split(\",\")\n        \n        player.nationality = nArr && nArr[0] ? nArr[0].trim() : \"\"\n        player.nationality2 = nArr && nArr[1] ? nArr[1].trim() : \"\"\n        \n        if (!player.nationality || player.nationality.length < 2 ) {\n            \n            \n            let e = new PlayerError(\"WARNING\",\"WARN-NATIONALITY\",\"Nationality missing\",player,null); \n            PlayersErrors.push(e);\n            //player.Warnings.push(e); //Questo è un warning.\n            \n        } else {\n           \n            player.nationalityCode = _COUNTRIES.filter(c =>  c.tm===player.nationality || c.tm2===player.nationality).map(c => c.countryCode)[0]\n            player.nationality2Code = _COUNTRIES.filter(c => c.tm===player.nationality2 || c.tm2===player.nationality2).map(c => c.countryCode)[0]\n\n            player.nationalityCode = player.nationalityCode ? player.nationalityCode : \"\";\n            player.nationality2Code = player.nationality2Code ? player.nationality2Code : \"\";\n\n            \n        }\n        \n        \n\n        //ECONOMIC DATA COMING FROM PLAYER\n        player.contractType = SFPlayer.contractType;\n        player.salaryNet = SFPlayer.salary;\n        player.salaryGross = SFPlayer.salaryGross ? SFPlayer.salaryGross : player.salaryNet * ( League.taxRate ?  League.taxRate : 1.825 );\n        player.startContract = new Date(SFPlayer.startContract);\n        player.endContract = new Date(SFPlayer.endContract);\n        \n        player.startContract = ( player.startContract instanceof Date && !isNaN(player.startContract) ) ? player.startContract : new Date(\"07/01/2022\");\n        player.endContract = ( player.endContract instanceof Date && !isNaN(player.endContract) ) ? player.endContract : new Date(\"06/30/2024\");\n        \n        if(player.playerId==\"ch9vdm5iaz7gsmb3s592oyf3d\") {\n            \n            console.log(\"player.startContract\",player.startContract)\n            console.log(\"player.endContract\",player.endContract)\n\n        }\n        \n        player.remainingYearsOfContract = player.endContract ? Utils.ryc(player.endContract) : null;\n        player.remainingMonthsOfContract = (player.endContract) ?  Utils.diffInMonths(new Date(player.endContract),new Date()) : null;\n        \n        player.remainingYearsOfContract =  player.remainingMonthsOfContract < 6 ? 0 : player.remainingYearsOfContract;\n        \n       \n        player.totalYearsOfContract = (player.endContract && player.startContract ) ? Utils.tyc(player.startContract,player.endContract) : null;\n        player.totalMonthsOfContract = (player.endContract && player.startContract) ?  Utils.diffInMonths(player.endContract,player.startContract) : null;\n\n        player.transferPrice = SFPlayer.transferPrice != null ? SFPlayer.transferPrice : 0;\n        player.transferPriceYear = SFPlayer.transferPriceYear != null ? SFPlayer.transferPriceYear : 0;\n        player.tmValue = SFPlayer.tmValue != null ? SFPlayer.tmValue : 0;\n        player.percTransfPrice = SFPlayer.percTransfPrice\n        player.withdrawalClause = SFPlayer.withdrawalClause\n        \n        //EXPERIENCE\n        player.experience = SFPlayer.experience ? SFPlayer.experience : 0;\n        \n        player.masterClubStartContract = SFPlayer && SFPlayer.masterClubStartContract ? new Date(SFPlayer.masterClubStartContract) : null;\n        player.masterClubStartContract = ( player.masterClubStartContract instanceof Date && !isNaN(player.masterClubStartContract) ) ? player.masterClubStartContract : new Date(\"06/30/2024\");\n        \n        player.masterClubEndContract = SFPlayer && SFPlayer.masterClubEndContract ? new Date(SFPlayer.masterClubEndContract) : null;\n        player.masterClubEndContract = ( player.masterClubEndContract instanceof Date && !isNaN(player.masterClubEndContract) ) ? player.masterClubEndContract : new Date(\"06/30/2024\");\n        \n        \n        \n        player.remainingYearsOfMasterClubContract = player.masterClubEndContract ? Utils.ryc(player.masterClubEndContract) : null;\n        player.remainingMonthsOfMasterClubContract = (player.masterClubEndContract) ?  Utils.diffInMonths(new Date(player.masterClubEndContract),new Date()) : null;\n        \n        player.remainingYearsOfMasterClubContract =  player.remainingMonthsOfMasterClubContract < 6 ? 0 : player.remainingYearsOfMasterClubContract;\n        \n       \n        player.totalYearsOfMasterClubContract = (player.masterClubEndContract && player.masterClubStartContract ) ? Utils.tyc(player.masterClubStartContract,player.masterClubEndContract) : null;\n        player.totalMonthsOfMasterClubContract = (player.masterClubEndContract && player.masterClubStartContract) ?  Utils.diffInMonths(player.masterClubEndContract,player.masterClubStartContract) : null;\n        \n        \n        player.height=SFPlayer.height\n        player.foot=SFPlayer.foot\n        player.highestPrice=SFPlayer.highestPrice\n        player.agent=SFPlayer.agent\n        player.instagram=SFPlayer.instagram\n        player.sponsor=SFPlayer.sponsor\n        player.number = SFPlayer.number ? SFPlayer.number : 0;\n        \n        //Check DATI STANDARD FOOTBALL\n        \n        if (!player.salaryNet && player.salaryNet !== 0) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-salaryNet\",\"Salary Missing\",player,null); \n            PlayersErrors.push(e);\n            player.Errors.push(e); \n            \n        }\n        \n        if (!player.startContract) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-STARTCONTRACT\",\"Start Contract Date Missing\",player,null); \n            PlayersErrors.push(e);\n            player.Errors.push(e); \n        }\n        \n        if (!player.endContract) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-ENDCONTRACT\",\"End Contract Date Missing\",player,null); \n            PlayersErrors.push(e);\n            player.Errors.push(e);\n            \n        }\n        \n        if (isNaN(player.remainingYearsOfContract) || player.remainingYearsOfContract == null) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-RYOC\",\"Cannnot calculare RYOC\",player,null); \n            PlayersErrors.push(e);\n            player.Errors.push(e);\n        }\n        \n        if (isNaN(player.totalYearsOfContract) || player.totalYearsOfContract == null) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-TYOC\",\"Cannnot calculare TYOC\",player,null); \n            PlayersErrors.push(e);\n            player.Errors.push(e);\n            \n        }\n        \n        if (isNaN(player.remainingMonthsOfContract) || player.remainingMonthsOfContract == null) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-RMOC\",\"Cannnot calculare RMOC\",player,null); \n            PlayersErrors.push(e);\n            player.Errors.push(e);\n        }\n        \n        if (isNaN(player.totalMonthsOfContract) || player.totalMonthsOfContract == null) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-TMOC\",\"Cannnot calculare TMOC\",player,null); \n            PlayersErrors.push(e);\n            player.Errors.push(e);\n            \n        }\n        \n        if (!player.contractType) {\n            \n            let e = new PlayerError(\"WARNING\",\"WARN-CONTRACTTYPE\",\"Contract type missing\",player,null); \n            PlayersErrors.push(e);\n            //player.Warnings.push(e); //Questo è un warning.\n            \n        }\n        \n        if (player.currentClubId==player.masterClubId &&  !player.contractType.includes(\"Propriet\")){\n            \n            let e = new PlayerError(\"WARNING\",\"WARN-CONTRACTTYPE\",\"Invalid contract type\",player,\"Contract type is: \"+player.contractType+\" but Current Club and Master Club are the same\"); \n            PlayersErrors.push(e);\n            //player.Warnings.push(e); //Questo è un warning.\n            \n        }  \n        \n        \n        if (player.remainingYearsOfContract===0) {\n            \n            let e = new PlayerError(\"WARNING\",\"WARN-RYOC\",\"Contract Expired\",player,\"End Contract is: \"+player.endContract); \n            PlayersErrors.push(e);\n            //player.Warnings.push(e); //Questo è un warning.\n\n        }\n        \n        \n        \n         /**\n        * CHECKPOINT 2\n        * \n        * Gli errori fino ad ora mi indicano problemi nei dati sulla tabella player di STANDARD FOOTBALL\n        *  \n        * Tutti gli errori sono BLOCCANTI e quindi se presenti interrompiamo l'esecuzione.\n        * */\n        \n        if (player.Errors.lenght>0) {\n            \n            PlayersWithErrors.push(player);\n            return; // interrompiamo l'esecuzione e passiamo al prossimo giocaotre\n        }\n        \n       \n        //ADDING DATA FROM STATS\n        player.latestStats = []; // POTREBBE RIMANERE VUOTO => I PARAMETRI DERIVANTI DA QUESTE STATISTICHE DOVRANNO AVERE UN VALORE DI DEFAULT\n        \n        let playerStatsIndex = _STATSIndex ? _STATSIndex[player.playerId] : null;\n        \n        if (playerStatsIndex && playerStatsIndex !== undefined && playerStatsIndex.length>0) {\n            for (let i=0;i<playerStatsIndex.length;i++) {\n                player.latestStats[i] = _STATS[playerStatsIndex[i]];\n            }\n        }    \n        \n        setLatestDetectedStats(player);\n        \n        \n        player.latestRoleGroup = player.latestDetectedRoleGroup ? player.latestDetectedRoleGroup :  getRoleGroupFromRoleName[player.currentPosition];\n        player.latestRoleWeight = getRoleWeightFromRoleId[player.roleId] ? getRoleWeightFromRoleId[player.roleId] : ( player.latestDetectedRoleWeight ? player.latestDetectedRoleWeight : getRoleWeightFromRoleGroup[player.latestRoleGroup]);\n        player.latestLeagueCluster = player.latestDetectedLeagueCluster ? player.latestDetectedLeagueCluster : player.currentLeagueCluster;\n        player.latestRoleRis = getRoleRisFromRoleGroup[player.latestRoleGroup];\n\n        player.latestMicroIndexInjury = player.latestDetectedMicroIndexInjury ? player.latestDetectedMicroIndexInjury : 0;\n        player.latestMacroIndexInjury = player.latestDetectedMacroIndexInjury ? player.latestDetectedMacroIndexInjury : 0;\n        \n        if (player.latestRoleGroup == undefined) {\n            \n            let e = new PlayerError(\"ERROR\",\"ERR-ROLE\",\"Role Group Missing\",player,\"Player position is  \"+player.currentPosition); \n            PlayersErrors.push(e);\n            player.Errors.push(e); //Questo è un warning.\n            \n        } \n        \n        if (player.latestRoleGroup  != undefined && player.latestRoleWeight == undefined) {\n            \n            let e = new PlayerError(\"ERROR\",\"WARN-ROLE\",\"Role Weight Missing\",player,\"Player position is  \"+player.currentPosition); \n            PlayersErrors.push(e);\n            player.Errors.push(e); //Questo è un warning.\n            \n        } \n        \n    \n        //ADDING PERFORMANCE STATISTICAL PARAMS\n        player.latestParams = []\n        \n        let volIndex =  _VOLATILITYIndex ? _VOLATILITYIndex[player.playerId] : null;\n        \n\n        for (let i=0;volIndex && i<volIndex.length;i++) {\n            player.latestParams.push(_VOLATILITY[volIndex[i]]);\n        }\n        \n        let uniqIndex =  _UNIQIndex ? _UNIQIndex[player.playerId] : null;\n        \n        for (let i=0;uniqIndex && i<uniqIndex.length;i++) {\n            player.latestParams.push(_UNIQ[uniqIndex[i]]);\n        }\n        \n\n        /** LATEST PARAMS FROM PARAMS*/\n        player.latestUniqueness = 0; //default\n        player.latestMicroVolatility = 25; //default\n        player.latestMacroVolatility  = 25; //default\n        \n        setLatestParams(player); //given that we have a matching stats\n        \n    \n       \n         //SUPERSTAR\n        player.superStar = SFPlayer.superStar==1 ? true : false;\n        \n        //FUTURA COMPATIBILITA' CON MONGO\n        \n        //Club._id = Club.clubId;\n        //League._id = League.leagueId;\n        \n       \n        \n        \n        //THE FOOTBALL TREE\n        \n        TheFootballTree[League.leagueId] === undefined ?  TheFootballTree[League.leagueId] = League : true;\n        \n        TheFootballTree[League.leagueId].Clubs === undefined ?  TheFootballTree[League.leagueId].Clubs = {} : true;\n        \n        TheFootballTree[League.leagueId].Clubs[Club.clubId] === undefined ?  TheFootballTree[League.leagueId].Clubs[Club.clubId] = Club : true;\n        \n        TheFootballTree[League.leagueId].Clubs[Club.clubId].Players === undefined ? TheFootballTree[League.leagueId].Clubs[Club.clubId].Players = {} : true;\n        \n        //TheFootballTree[League.leagueId].Clubs[Club.clubId].Players[player.playerId] = player;\n        \n        if (!p.duplicate) {\n            TheFootballTree[League.leagueId].Clubs[Club.clubId].Players[player.playerId] = player;\n        }\n        \n       //Redundant Country \n        TheFootballTree[League.leagueId].Clubs[Club.clubId].country = TheFootballTree[League.leagueId].country\n        TheFootballTree[League.leagueId].Clubs[Club.clubId].countryCode = TheFootballTree[League.leagueId].countryCode\n        \n        \n    } catch (e) {\n        \n        console.log(e)\n    }\n    \n    \n    \n    \n    \n})\n\nconsole.log(\"Setting Masters\");\n\n\n Object.keys(TheFootballTree).forEach( leagueId => {\n        \n        Object.keys(TheFootballTree[leagueId].Clubs).forEach( clubId => { \n            \n            Object.keys(TheFootballTree[leagueId].Clubs[clubId].Players).forEach( playerId => { \n                \n                let player = TheFootballTree[leagueId].Clubs[clubId].Players[playerId]\n                \n                let MasterClub = ClubsIndex[player.masterClubId] !== undefined ? Clubs[ClubsIndex[player.masterClubId]] : null;\n                let MasterLeague =  MasterClub && LeaguesIndex[MasterClub.leagueId] !== undefined ? Leagues[LeaguesIndex[MasterClub.leagueId]] : null;\n        \n                player.masterClubName = MasterClub ?  MasterClub.name : null;\n                player.masterClubShortName = MasterClub ?  MasterClub.shortName : \"\";\n                player.masterLeagueName = MasterClub && MasterLeague ?  MasterLeague.name : null;\n                player.masterLeagueId = MasterClub && MasterLeague ?  MasterLeague.leagueId : null;\n                \n\n                \n            })\n        })\n })\nconsole.log(\"Setting borrowed and loaned\");\n\n Object.keys(TheFootballTree).forEach( leagueId => {\n        \n        Object.keys(TheFootballTree[leagueId].Clubs).forEach( clubId => { \n            \n            Object.keys(TheFootballTree[leagueId].Clubs[clubId].Players).forEach( playerId => { \n                \n                let player = TheFootballTree[leagueId].Clubs[clubId].Players[playerId]\n                \n                if (player.currentClubId !== player.masterClubId) {\n                    \n                    \n                        //BORROWED\n                        if (TheFootballTree[player.currentLeagueId] && TheFootballTree[player.currentLeagueId].Clubs[player.currentClubId] ) {\n                            \n                            TheFootballTree[player.currentLeagueId].Clubs[player.currentClubId].BorrowedPlayers[player.playerId] = player;\n\n                            TheFootballTree[player.currentLeagueId].Clubs[player.currentClubId].numOfBorrowedPlayers++;\n                                    \n\n                        }\n                    \n                        //LOANED\n                        if (TheFootballTree[player.masterLeagueId] && TheFootballTree[player.masterLeagueId].Clubs[player.masterClubId] ) {\n                            \n                                    TheFootballTree[player.masterLeagueId].Clubs[player.masterClubId].LoanedPlayers[player.playerId] = player;\n                                    \n                                    TheFootballTree[player.masterLeagueId].Clubs[player.masterClubId].numOfLoanedPlayers++;\n\n                        }\n                }\n\n                \n            })\n        })\n })\n \n\n/*console.log(\"Foreign Players\");\n\n Object.keys(TheFootballTree).forEach( leagueId => {\n        \n        Object.keys(TheFootballTree[leagueId].Clubs).forEach( clubId => { \n            \n            Object.keys(TheFootballTree[leagueId].Clubs[clubId].Players).forEach( playerId => { \n                \n                let player = TheFootballTree[leagueId].Clubs[clubId].Players[playerId]\n                \n                if (player.currentLeagueCountry !== player.nationality) {\n                    \n                    \n                      TheFootballTree[leagueId].Clubs[clubId].numOfForeignPlayers++;\n                      TheFootballTree[leagueId].numOfForeignPlayers++;\n                }\n\n                \n            })\n        })\n })\n\n*/\n// DA OGGETTO A ITERABILE\nconsole.log(\"Converting from obj to iterable\");\n\n\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        \n        Object.keys(TheFootballTree[leagueId].Clubs).forEach( clubId => { \n           \n            TheFootballTree[leagueId].Clubs[clubId].Players = Object.values(TheFootballTree[leagueId].Clubs[clubId].Players);\n            TheFootballTree[leagueId].Clubs[clubId].LoanedPlayers = Object.values(TheFootballTree[leagueId].Clubs[clubId].LoanedPlayers);\n            TheFootballTree[leagueId].Clubs[clubId].BorrowedPlayers = Object.values(TheFootballTree[leagueId].Clubs[clubId].BorrowedPlayers); \n\n       \n        \n        })   \n        \n        TheFootballTree[leagueId].Clubs = Object.values(TheFootballTree[leagueId].Clubs);\n        \n    })\n\nvar end = new Date();\nconsole.log(\"Loop Ends at \"+end);\n\nlet numOfValidPlayers = _INFO.length-PlayersWithErrors.length;\n\nconsole.log(\"Valid Players : \"+numOfValidPlayers);\nconsole.log(\"Invalid Player :\"+PlayersWithErrors.length);\n\n//node.log(PlayersWithErrors);\n//msg.PlayersErrors=PlayersErrors;\n\n\n\n console.log(\"*** PLAYERS BASIC ANALISYS COMPLETED ***\")\n \nflow.get(\"logmsg\").message = \"Valid Players : \"+numOfValidPlayers\nnode.log(flow.get(\"logmsg\"))\nflow.get(\"logmsg\").message = \"Invalid Player :\"+PlayersWithErrors.length\nnode.log(flow.get(\"logmsg\"))\nflow.get(\"logmsg\").message = \"Invalid Player :\"+PlayersWithErrors.length\nnode.log(flow.get(\"logmsg\"))\n\n//////////////////////////// CLEANING MEMORY\nconsole.log(\"CLEANING MEMORY\")\nflow.get(\"logmsg\").message = \"CLEANING MEMORY\"\nnode.log(flow.get(\"logmsg\"))\n\n//const v8 = require('v8')\nconsole.log(`V8 Total Heap Size: ${(v8.getHeapStatistics().total_available_size / 1024 / 1024).toFixed(2)} MB`)\n/*let mem = process.memoryUsage()\nconst formatMem = (m) => ( m/1048576 ).toFixed(2)\nconsole.log(`Initial Memory Use (MB): RSS=${formatMem(mem.rss)}. Heap: Used=${formatMem(mem.heapUsed)}, Tot=${formatMem(mem.heapTotal)}. Ext C++=${formatMem(mem.external)}`)*/\n\nconsole.log(\"Cancello variabili nel flow\")\n\n\nflow.set(\"_CLUBS\",null)\nflow.set(\"_COUNTRIES\",null)\nflow.set(\"_DATA\",null)\nflow.set(\"_INFO\",null)\nflow.set(\"_LEAGUES\",null)\nflow.set(\"_MINUTES\",null)\nflow.set(\"_PLAYERS\",null)\nflow.set(\"_ROLES\",null)\nflow.set(\"_STATS\",null)\nflow.set(\"_UNIQ\",null)\nflow.set(\"_VOLATILY\",null)\n\nflow.set(\"errors\",null)\n// Cancellazione di tutte le proprietà elencate\nconsole.log(\"Cancello oggetti in msg\")\n\n// Annullamento dei riferimenti prima delle delete\n/*\nmsg._STATS = null;\nmsg._STATSIndex = null;\nmsg._INFO = null;\nmsg._INFOIndex = null;\nmsg._VOLATILITY = null;\nmsg._VOLATILITYIndex = null;\nmsg._UNIQ = null;\nmsg._UNIQIndex = null;\nmsg._PLAYERS = null;\nmsg._PLAYERSIndex = null;\nmsg._CLUBS = null;\nmsg._CLUBSIndex = null;\nmsg._LEAGUES = null;\nmsg._LEAGUESIndex = null;\nmsg._ROLES = null;\nmsg._ROLESIndex = null;\nmsg._COUNTRIES = null;\nmsg._COUNTRIESIndex = null;\nmsg._DATA = null;\nmsg._DATAIndex = null;\nmsg._MINUTES = null;\nmsg._MINUTESIndex = null;\nmsg.Leagues = null;\nmsg.LeaguesIndex = null;\nmsg.Clubs = null;\nmsg.ClubsIndex = null;\nmsg.PlayersErrors = null;*/\n\n/*delete msg._STATS;\ndelete msg._STATSIndex;\ndelete msg._INFO;\ndelete msg._INFOIndex;\ndelete msg._VOLATILITY;\ndelete msg._VOLATILITYIndex;\ndelete msg._UNIQ;\ndelete msg._UNIQIndex;\ndelete msg._PLAYERS;\ndelete msg._PLAYERSIndex;\ndelete msg._CLUBS;\ndelete msg._CLUBSIndex;\ndelete msg._LEAGUES;\ndelete msg._LEAGUESIndex;\ndelete msg._ROLES;\ndelete msg._ROLESIndex;\ndelete msg._COUNTRIES;\ndelete msg._COUNTRIESIndex;\ndelete msg._DATA;\ndelete msg._DATAIndex;\ndelete msg._MINUTES;\ndelete msg._MINUTESIndex;\ndelete msg.Leagues;\ndelete msg.LeaguesIndex;\ndelete msg.Clubs;\ndelete msg.ClubsIndex;\ndelete msg.PlayersErrors;*/\n\n\nconsole.log(\"memory cleaned\")\nconsole.log(`V8 Total Heap Size: ${(v8.getHeapStatistics().total_available_size / 1024 / 1024).toFixed(2)} MB`)\nflow.get(\"logmsg\").message = \"MEMORY CLEANED\"\nnode.log(flow.get(\"logmsg\"))\n//console.log(`Initial Memory Use (MB): RSS=${formatMem(mem.rss)}. Heap: Used=${formatMem(mem.heapUsed)}, Tot=${formatMem(mem.heapTotal)}. Ext C++=${formatMem(mem.external)}`)\n//console.log('process.memoryUsage()')\n//console.log(process.memoryUsage())\n\n//global.get(\"TheLatestFootballTree\")=msg.payload\n//msg.payload=null;\n\n/**\n * Finds duplicate players in the football tree structure\n * @param {Object} footballTree - The football tree object containing leagues, clubs, and players\n * @returns {Array} An array of objects containing information about duplicate players\n */\nfunction findDuplicatePlayers(footballTree) {\n  // Create a map to track all players by ID\n  const playerMap = new Map();\n  const duplicates = [];\n  \n  // Iterate through each league\n  Object.keys(footballTree).forEach(leagueId => {\n    const league = footballTree[leagueId];\n    \n    // Iterate through each club in the league\n    league.Clubs.forEach(club => {\n      // Check if Players is an array (as per the later conversion in the code)\n      const players = Array.isArray(club.Players) ? club.Players : Object.values(club.Players);\n      \n      // Iterate through each player in the club\n      players.forEach(player => {\n        if (!player.playerId) return; // Skip if no playerId\n        \n        // If player already exists in our map, we found a duplicate\n        if (playerMap.has(player.playerId)) {\n          const existingEntry = playerMap.get(player.playerId);\n          \n          duplicates.push({\n            playerId: player.playerId,\n            playerName: player.name || `${player.firstName} ${player.lastName}`,\n            instances: [\n              {\n                leagueId: existingEntry.leagueId,\n                leagueName: existingEntry.leagueName,\n                clubId: existingEntry.clubId,\n                clubName: existingEntry.clubName,\n                duplicate: existingEntry.duplicate\n              },\n              {\n                leagueId: leagueId,\n                leagueName: league.name,\n                clubId: club.clubId,\n                clubName: club.name,\n                duplicate: player.duplicate\n              }\n            ]\n          });\n        } else {\n          // First time seeing this player, add to map\n          playerMap.set(player.playerId, {\n            playerId: player.playerId,\n            leagueId: leagueId,\n            leagueName: league.name,\n            clubId: club.clubId,\n            clubName: club.name,\n            duplicate: player.duplicate\n          });\n        }\n      });\n    });\n  });\n  \n  // Return the array of duplicates with full information\n  return duplicates;\n}\n\nmsg.TheFootballTree=TheFootballTree\nmsg.payload=null;\nmsg.duplicates=findDuplicatePlayers(msg.TheFootballTree)\n\n// Example usage:\n// const duplicates = findDuplicatePlayers(TheFootballTree);\n// console.log(`Found ${duplicates.length} duplicate players`);\n// console.log(duplicates);\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "v8",
                "module": "v8"
            }
        ],
        "x": 280,
        "y": 960,
        "wires": [
            [
                "1af29928b7d78ce0"
            ]
        ]
    },
    {
        "id": "71ff3a3ea034de94",
        "type": "debug",
        "z": "521d26a7dba2b3ee",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "TheFootballTree",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 980,
        "y": 960,
        "wires": []
    },
    {
        "id": "d054908be2bbb806",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "",
        "func": "var dbConn = global.get('databaseConnection');\n\nmsg.payload=dbConn;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 1260,
        "wires": [
            [
                "7ae443d27cf53dd4"
            ]
        ]
    },
    {
        "id": "03fb691f7c207246",
        "type": "inject",
        "z": "521d26a7dba2b3ee",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 440,
        "y": 1260,
        "wires": [
            [
                "1af29928b7d78ce0"
            ]
        ]
    },
    {
        "id": "7ae443d27cf53dd4",
        "type": "debug",
        "z": "521d26a7dba2b3ee",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 990,
        "y": 1260,
        "wires": []
    },
    {
        "id": "1af29928b7d78ce0",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "Medie MicroMacro",
        "func": "flow.get(\"logmsg\").message = \"Estraggo i micro macro in archivio\"\nnode.log(flow.get(\"logmsg\"))\n\nconsole.log(\"Estraggo i micro macro in archivio\")\n\nconst topic_vecchio = `WITH last2 AS (\n    SELECT DISTINCT elaborationNum\n    FROM latestplayers_archive\n    WHERE elaborationNum IN (\n        SELECT MAX(elaborationNum)\n        FROM latestplayers_archive\n        GROUP BY year, week\n    )\n    ORDER BY elaborationNum DESC\n    LIMIT 2\n)\nSELECT\n    playerId,\n    SUM(avgMicroIndex) AS sum_avgMicroIndex,\n    SUM(avgMacroIndex) AS sum_avgMacroIndex\nFROM latestplayers_archive\nWHERE elaborationNum IN (SELECT elaborationNum FROM last2)\nGROUP BY playerId;`\n\n\n\nconst topic = `WITH last2 AS (\n    SELECT DISTINCT elaborationNum\n    FROM latestplayers_archive\n    WHERE elaborationNum IN (\n        SELECT MAX(elaborationNum)\n        FROM latestplayers_archive\n        GROUP BY year, week\n    )\n    ORDER BY elaborationNum DESC\n    LIMIT 2\n)\nSELECT\n    playerId,\n    SUM(currentAvgMicroIndex) AS sum_avgMicroIndex,\n    SUM(currentAvgMacroIndex) AS sum_avgMacroIndex\nFROM latestplayers_archive\nWHERE elaborationNum IN (SELECT elaborationNum FROM last2)\nGROUP BY playerId;`\n\n\nmsg.topic=topic\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 1040,
        "wires": [
            [
                "685b773814213026"
            ]
        ]
    },
    {
        "id": "685b773814213026",
        "type": "mysql",
        "z": "521d26a7dba2b3ee",
        "mydb": "ea1e5103bb9e91ad",
        "name": "PRODUZIONE",
        "x": 560,
        "y": 1020,
        "wires": [
            [
                "4c7354af84925b0d"
            ]
        ]
    },
    {
        "id": "bdcdea8aba4ff72f",
        "type": "function",
        "z": "521d26a7dba2b3ee",
        "name": "SPECIALTIES",
        "func": "\nmsg.topic=\"select * from players_specialties;\";\nmsg.dataSet = \"SPECIALTIES\";\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1680,
        "y": 440,
        "wires": [
            [
                "afb31ee290792b56"
            ]
        ]
    },
    {
        "id": "59da289f4aa6663e",
        "type": "mysql",
        "z": "da3f380d47320561",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 1080,
        "y": 120,
        "wires": [
            [
                "f6bdc78bebd2132d"
            ]
        ]
    },
    {
        "id": "1fd1ed3149cafd04",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Elimina GIocatori, Club e Leghe",
        "func": "let q = \"delete from latestplayers_staging;delete from latestclubs_staging;delete from latestleagues_staging;delete from latestclubborrowed_staging; delete from latestclubloaned_staging;\"\nmsg.topic = q;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 120,
        "wires": [
            [
                "59da289f4aa6663e"
            ]
        ]
    },
    {
        "id": "f6bdc78bebd2132d",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Checkpoint",
        "func": "\n    \n    console.log(\"ALL RECORDS DELETED\")\n    flow.get(\"logmsg\").message = \"All staging records deleted\"\n    node.log(flow.get(\"logmsg\"))\n\n    return msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1290,
        "y": 120,
        "wires": [
            [
                "95e3bcf27cedba8b"
            ]
        ]
    },
    {
        "id": "3ce3606cfb635418",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Retrieve and Parse Leagues",
        "func": "try {\n    \n    flow.get(\"logmsg\").message = \"Staging Leagues Begins\";\n    node.log(flow.get(\"logmsg\"))\n    \n   \n    let TheFootballTree = global.get(\"TheLatestFooballTree\");\n\n\n    var Players = [];\n    var BorrowedPlayers = [];\n    var LoanedPlayers = [];\n    var Clubs = [];\n    var Leagues = [];\n\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        \n        \n        TheFootballTree[leagueId].Clubs.forEach( club => { \n           \n            club.Players.forEach( player => {\n                \n                Players.push(JSON.parse(JSON.stringify(player)));\n                \n            })\n            \n            club.BorrowedPlayers.forEach( player => {\n                \n                BorrowedPlayers.push(JSON.parse(JSON.stringify(player)));\n                \n            })\n            \n            club.LoanedPlayers.forEach( player => {\n                \n                LoanedPlayers.push(JSON.parse(JSON.stringify(player)));\n                \n            })\n            \n\n            let c = JSON.parse(JSON.stringify(club))\n            delete c.Players;\n            delete c.LoanedPlayers;\n            delete c.BorrowedPlayers;\n            \n            Clubs.push(c);\n            \n        \n        }) \n        \n        \n       \n       let l = JSON.parse(JSON.stringify(TheFootballTree[leagueId]))\n       \n        delete l.Clubs;\n\n        Leagues.push(l)\n       \n    })\n\n\n    const chunkSize = 5000;\n    const PlayersChunks = [];\n    \n    for (let i = 0; i < Players.length; i += chunkSize) {\n        PlayersChunks.push(Players.slice(i, i + chunkSize));\n    }\n    \n    \n    console.log(\"#Leagues \"+Leagues.length);\n    console.log(\"#Clubs \"+Clubs.length);\n    console.log(\"#players \"+Players.length);\n    \n    flow.get(\"logmsg\").message = \"#Leagues to be saved: \"+Leagues.length\n    node.log(flow.get(\"logmsg\"))\n    \n    flow.set(\"LeaguesArray\",Leagues)\n    flow.set(\"ClubsArray\",Clubs)\n    flow.set(\"PlayersArrayChunks\", PlayersChunks)// flow.set(\"PlayersArray\",Players)\n    flow.set(\"LoanedPlayersArray\",LoanedPlayers)\n    flow.set(\"BorrowedPlayersArray\",BorrowedPlayers)\n\n    \n    //msg.payload=Leagues;\n    \n    return msg\n\n}\ncatch (e) {\n    \n    console.log(e)\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 220,
        "wires": [
            [
                "a1cc502dc1b1287b"
            ]
        ]
    },
    {
        "id": "a1cc502dc1b1287b",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Salva Leghe",
        "func": "try {\n    msg.dataSet = \"LEAGUES\"\nlet Leagues = flow.get(\"LeaguesArray\")\nlet elaborationNum = global.get(\"elaborationNum\") || 0\n\n     \n\n\nlet q = \"INSERT INTO latestleagues_staging ( \";\n                            q=q+\"`leagueId`,\"\n                            q=q+\"`name`,\"\n                            q=q+\"`extendedName`,\"\n                            q=q+\"`country`,\"\n                            q=q+\"`countryCode`,\"\n                            q=q+\"`cluster`,\"\n                            q=q+\"`fifaRank`,\"\n                            q=q+\"`memberAssociation`,\"\n                            q=q+\"`confederation`,\"\n                            q=q+\"`weight`,\"\n                            q=q+\"`taxRate`,\"\n                            q=q+\"`taxRatePerc`,\"\n                            q=q+\"`numOfPlayers`,\"\n                            q=q+\"`numOfForeignPlayers`,\"\n                            q=q+\"`avgAge`,\"\n                            q=q+\"`avgContractDuration`,\"\n                            q=q+\"`avgContractResidualDuration`,\"\n                            q=q+\"`portfolioCost`,\"\n                            q=q+\"`residualBookValue`,\"\n                            q=q+\"`residualValue`,\"\n                            q=q+\"`potentialPrice`,\"\n                            q=q+\"`expectedPrice`,\"\n                            q=q+\"`capitalGain`,\"\n                            q=q+\"`netProfit`,\"\n                            q=q+\"`salaryGross`,\"\n                            q=q+\"`salaryNet`,\"\n                            q=q+\"`salaryOptimal`,\"\n                            q=q+\"`salaryPotential`,\"\n                            q=q+\"`salaryAbsoluteDeviation`,\"\n                            q=q+\"`salaryPercDeviation`,\"\n                            q=q+\"`numOfClubs`,\"\n                            q=q+\"`numOfU23Players`,\"\n                             q=q+\"`numOfU23ForeignPlayers`,\"\n                            q=q+\"`shareOfForeignPlayers`,\"\n                            q=q+\"`shareOfU23Players`,\"\n                             q=q+\"`shareOfU23ForeignPlayers`,\"\n                            q=q+\"`salaryAvg`,\"\n                            q=q+\"`rankByValue`,\"\n                            q=q+\"`rankByAcquisition`,\"\n                            q=q+\"`rankBySalary`,\"\n                            q=q+\"`avgSalaryNetCluster`,\"\n                            q=q+\"`absSalaryNetClusterDeviation`,\"\n                            q=q+\"`percSalaryNetClusterDeviation`,\"\n                            q=q+\"`avgPotentialPrice`,\"\n                            q=q+\"`avgPortfolioCost`,\" \n                            q=q+\"`avgExpectedPrice`,\"\n                            q=q+\"`avgResidualBookValue`,\"\n                            q=q+\"`avgPerformance`,\"\n                            q=q+\"`avgEffectiveness`,\"\n                            q=q+\"`avgLatestUniqueness`,\"\n                            q=q+\"`avgLatestMicroVolatility`,\"\n                            q=q+\"`avgSalaryNet`,\"\n                            q=q+\"`avgSalaryOptimal`,\"\n                            q=q+\"`avgSalaryPotential`,\"\n                            q=q+\"`eligibleForCups`,\"\n                            q=q+\"`relegations`,\"\n                            q=q+\"`promotions`,\"\n                            q=q+\"`oldTotalRevenues`,\"\n                            q=q+\"`totalProjectedRevenues`,\"\n                            q=q+\"`totalCostOperating`,\"\n                            q=q+\"`salesPlayers5Y$`,\"\n                            q=q+\"`purchasePlayers5Y$`,\"\n                            q=q+\"`totalBroadcasting`,\"\n                            q=q+\"`totalCommercial`,\"\n                            q=q+\"`totalMatchDay`,\"\n                            q=q+\"`totalOtherRevenues`,\"\n                            q=q+\"`revenueGrowth`,\"\n                            q=q+\"`projectedRevenueGrowth`,\"\n                            q=q+\"`revenueShare`,\"\n                            q=q+\"`netProfitLoss`,\"\n                            q=q+\"`playerTrading`,\"\n                            q=q+\"`returnOnInvestment`,\"\n                            q=q+\"`financialSustainabilityIndex`,\"\n                            q=q+\"`performanceIndex`,\"\n                            q=q+\"`consumerValue`,\"\n                            q=q+\"`consumerResidualValue`,\"\n                            q=q+\"`consumerExpectedSalary`,\"\n                            q=q+\"`consumerExpectedSalaryAbsoluteDeviation`,\"\n                            q=q+\"`consumerExpectedSalaryPercDeviation`,\"\n                            q=q+\"`rankByConsumerValue`,\"\n                            q=q+\"`week`,\"\n                            q=q+\"`year`,\"\n                            q=q+\"`elaborationNum`,\"\n                            q=q+\"`totalRevenues`,\"\n                            q=q+\"`annualBookValue` \"\n                            q=q+\") values \";\n\nlet values = \"\";\n    \nlet count = 0;\n\n//console.log(q);\n\nLeagues.forEach( league => { \n    \n    //console.log(league.leagueId); \n    \n    //console.log(league)\n    Object.keys(league).forEach( key => {\n        \n        league[key] = league[key] === undefined ?  null : league[key];\n    })\n    \n    /*if ( count > 1 ){\n        return;\n    } */\n    try {\n        \n        let value = values == \"\" ? \"('\" : \",('\";\n    \n     \n    \n        value =     value \n                    +league.leagueId+\"','\"\n                    +league.name.replace(\"'\", \"'\"+\"'\")+\"','\"\n                    +league.extendedName.replace(\"'\", \"'\"+\"'\")+\"','\"\n                    +league.country.replace(\"'\", \"'\"+\"'\")+\"','\"\n                    +league.countryCode.replace(\"'\", \"'\"+\"'\")+\"',\"\n                    +league.cluster+\",\"\n                    +league.fifaRank+\",'\"\n                    +league.memberAssociation.trim().replace(\"'\", \"'\"+\"'\")+\"','\"\n                    +league.confederation.trim().replace(\"'\", \"'\"+\"'\")+\"',\"\n                    +league.weight+\",\"\n                    +league.taxRate+\",\"\n                    +league.taxRatePerc+\",\"\n                    +league.numOfPlayers+\",\"\n                    +league.numOfForeignPlayers+\",\"\n                    +league.avgAge+\",\"\n                    +league.avgContractDuration+\",\"\n                    +league.avgContractResidualDuration+\",\"\n                    +league.portfolioCost+\",\"\n                    +league.residualBookValue+\",\"\n                    +league.residualValue+\",\"\n                    +league.potentialPrice+\",\"\n                    +league.expectedPrice+\",\"\n                    +league.capitalGain+\",\"\n                    +league.netProfit+\",\"\n                    +league.salaryGross+\",\"\n                    +league.salaryNet+\",\"\n                    +league.salaryOptimal+\",\"\n                    +league.salaryPotential+\",\"\n                    +league.salaryAbsoluteDeviation+\",\"\n                    +league.salaryPercDeviation+\",\"\n                    +league.numOfClubs+\",\"\n                    +league.numOfU23Players+\",\"\n                    +league.numOfU23ForeignPlayers+\",\"\n                    +league.shareOfForeignPlayers+\",\"\n                    +league.shareOfU23Players+\",\"\n                    +league.shareOfU23ForeignPlayers+\",\"\n                    +league.salaryAvg+\",\"\n                    +league.rankByValue+\",\"\n                    +league.rankByAcquisition+\",\"\n                    +league.rankBySalary+\",\"\n                    +league.avgSalaryNetCluster+\",\"\n                    +league.absSalaryNetClusterDeviation+\",\"\n                    +league.percSalaryNetClusterDeviation+\",\"\n                    +league.avgPotentialPrice+\",\"\n                    +league.avgPortfolioCost+\",\" \n                    +league.avgExpectedPrice+\",\"\n                    +league.avgResidualBookValue+\",\"\n                    +league.avgPerformance+\",\"\n                    +league.avgEffectiveness+\",\"\n                    +league.avgLatestUniqueness+\",\"\n                    +league.avgLatestMicroVolatility+\",\"\n                    +league.avgSalaryNet+\",\"\n                    +league.avgSalaryOptimal+\",\"\n                    +league.avgSalaryPotential+\",\"\n                    +league.eligibleForCups+\",\"\n                    +league.relegations+\",\"\n                    +league.promotions+\",\"\n                    \n                    +league.oldTotalRevenues+\",\"\n                    +league.totalProjectedRevenues+\",\"\n                    +league.totalCostOperating+\",\"\n                    +league.salesPlayers5Y$+\",\"\n                    +league.purchasePlayers5Y$+\",\"\n                    +league.totalBroadcasting+\",\"\n                    +league.totalCommercial+\",\"\n                    +league.totalMatchDay+\",\"\n                    +league.totalOtherRevenues+\",\"\n                    +league.revenueGrowth+\",\"\n                    +league.projectedRevenueGrowth+\",\"\n                    +league.revenueShare+\",\"\n                    +league.netProfitLoss+\",\"\n                    +league.playerTrading+\",\"\n                    +league.returnOnInvestment+\",\"\n                    +league.financialSustainabilityIndex+\",\"\n                    +league.performanceIndex+\",\"\n                    \n                    +league.consumerValue+\",\"\n                    +league.consumerResidualValue+\",\"\n                    +league.consumerExpectedSalary+\",\"\n                    +league.consumerExpectedSalaryAbsoluteDeviation+\",\"\n                    +league.consumerExpectedSalaryPercDeviation+\",\"\n                   +league.rankByConsumerValue+\",\"\n                    \n                    +league.week+\",\"\n                    +league.year+\",\"\n                    +elaborationNum+\",\"\n                    +league.totalRevenues+\",\"\n                    +league.annualBookValue\n                    \n        value = value + \")\"            \n        //console.log(value);\n        values = values + value;\n        \n    } catch (e) {\n        console.log(e)\n    }\n    \n    count++;\n    \n    \n})\n\n\n\n\nmsg.topic = q+values;\n\nconsole.log(\"Leagues topic built\")\n//console.log(msg.topic)\n\n} catch(e) {\n    console.log(e)\n}\n\n//console.log(msg.topic)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 220,
        "wires": [
            [
                "9acfed3b5f8a4302"
            ]
        ]
    },
    {
        "id": "9acfed3b5f8a4302",
        "type": "mysql",
        "z": "da3f380d47320561",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 1080,
        "y": 220,
        "wires": [
            [
                "5da9ebbff4647f31"
            ]
        ]
    },
    {
        "id": "5da9ebbff4647f31",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Count",
        "func": "console.log(\"LEAGUES INSERT COMPLETED\")\nflow.get(\"logmsg\").message = \"Leagues Saved\";\nnode.log(flow.get(\"logmsg\"))\nreturn msg;\n ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1270,
        "y": 220,
        "wires": [
            [
                "77ff2493e763f2a1"
            ]
        ]
    },
    {
        "id": "e6ab939ff65bfd65",
        "type": "mysql",
        "z": "da3f380d47320561",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 980,
        "y": 600,
        "wires": [
            [
                "792fe7cbece024a6"
            ]
        ]
    },
    {
        "id": "30f01ea57c090807",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Salva Giocatori",
        "func": "try {\n    \n    console.log(\"Building query for players\")\n    flow.get(\"logmsg\").message = \"Building query for players\"\n    node.log(flow.get(\"logmsg\"))\n\n    let Players = msg.payload; //flow.get(\"PlayersArray\")//msg.payload;\n    \n    flow.get(\"logmsg\").message = \"Saving \"+Players.length+\" players\"\n    node.log(flow.get(\"logmsg\"))\n    \n    \n    let elaborationNum = global.get(\"elaborationNum\") || 0\n\n\n\nlet q = \"INSERT INTO latestplayers_staging ( \";\n                            q=q+\"`playerId`,\"\n                            q=q+\"`firstName`,\"\n                            q=q+\"`lastName`,\"\n                            q=q+\"`shortFirstName`,\"\n                            q=q+\"`shortLastName`,\"\n                            q=q+\"`knownName`,\"\n                            q=q+\"`fullName`,\"\n                            q=q+\"`name`,\"\n                            q=q+\"`birthDate`,\"\n                            q=q+\"`age`,\"\n                            q=q+\"`months`,\"\n                            q=q+\"`currentPosition`,\"\n                            q=q+\"`currentRole`,\"\n                            q=q+\"`currentRole2`,\"\n                            q=q+\"`currentClubId`,\"\n                            q=q+\"`currentClubName`,\"\n                            q=q+\"`currentClubShortName`,\"\n                            q=q+\"`currentClubCluster`,\"\n                            q=q+\"`currentLeagueId`,\"\n                            q=q+\"`currentLeagueName`,\"\n                            q=q+\"`currentLeagueCluster`,\"\n                            q=q+\"`currentLeagueWeight`,\"\n                            q=q+\"`currentLeagueTaxRate`,\"\n                            q=q+\"`masterClubId`,\"\n                            q=q+\"`masterClubName`,\"\n                            q=q+\"`masterClubShortName`,\"\n                            q=q+\"`masterClubStartContract`,\"\n                            q=q+\"`masterClubEndContract`,\"\n                            q=q+\"`remainingYearsOfMasterClubContract`,\"\n                            q=q+\"`remainingMonthsOfMasterClubContract`,\"\n                            q=q+\"`totalYearsOfMasterClubContract`,\"\n                            q=q+\"`totalMonthsOfMasterClubContract`,\"\n                            q=q+\"`latestRoleGroup`,\"\n                            q=q+\"`latestRoleWeight`,\"\n                            q=q+\"`nationalTeamPlayer`,\"\n                            q=q+\"`superstar`,\"\n                            q=q+\"`risingStar`,\"\n                            q=q+\"`emerging`,\"\n                            q=q+\"`alert`,\"\n                            q=q+\"`absind`,\"\n                            q=q+\"`performance`,\"\n                            q=q+\"`fatmol`,\"\n                            q=q+\"`effectiveness`,\"\n                            q=q+\"`maturity`,\"\n                            q=q+\"`weightInClub`,\"\n                            q=q+\"`latestUniqueness`,\"\n                            q=q+\"`latestMicroVolatility`,\"\n                            q=q+\"`latestMacroVolatility`,\"\n                            q=q+\"`contractType`,\"\n                            q=q+\"`startContract`,\"\n                            q=q+\"`endContract`,\"\n                            q=q+\"`totalYearsOfContract`,\"\n                            q=q+\"`remainingYearsOfContract`,\"\n                            q=q+\"`transferPrice`,\"\n                            q=q+\"`transferPriceYear`,\"\n                            q=q+\"`salaryNet`,\"\n                            q=q+\"`salaryGross`,\"\n                            q=q+\"`salaryOptimal`,\"\n                            q=q+\"`salaryPotential`,\"\n                            q=q+\"`salaryAbsoluteDeviation`,\"\n                            q=q+\"`salaryPercDeviation`,\"\n                            q=q+\"`latestDetectedLeagueCluster`,\"\n                            q=q+\"`latestDetectedLeagueWeight`,\"\n                            q=q+\"`latestDetectedRoleGroup`,\"\n                            q=q+\"`latestDetectedRoleWeight`,\"\n                            q=q+\"`benefits`,\"\n                            q=q+\"`costs`,\"\n                            q=q+\"`optval`,\"\n                            q=q+\"`residualValue`,\"\n                            q=q+\"`residualBookValue`,\"\n                            q=q+\"`optimalCosts`,\"\n                            q=q+\"`van`,\"\n                            q=q+\"`valNoVan`,\"\n                            q=q+\"`potentialPrice`,\"\n                            q=q+\"`expectedPrice`,\"\n                            q=q+\"`perceivedExpectedPrice`,\"\n                            q=q+\"`currentPotentialPrice`,\"\n                            q=q+\"`capitalGain`,\"\n                            q=q+\"`profit`,\"\n                            q=q+\"`deviation`,\"\n                            q=q+\"`remainingMonthsOfContract`,\"\n                            q=q+\"`totalMonthsOfContract`,\"\n                            q=q+\"`potentialYearsOfContract`,\"\n                            q=q+\"`expectedYearsOfContract`,\"\n                            q=q+\"`benefitsPotential`,\"\n                            q=q+\"`costsPotential`,\"\n                            q=q+\"`optvalPotential`,\"\n                            q=q+\"`avgTransferPrice`,\"\n                            q=q+\"`minutes`,\"\n                            q=q+\"`minutesShare`,\"\n                            q=q+\"`avgMicroIndex`,\"\n                            q=q+\"`avgMacroIndex`,\"\n                            q=q+\"`avgPlayedMinuteShare`,\"\n                            q=q+\"`expectedClubCluster`,\"\n                            q=q+\"`weightInExpectedClubCluster`,\"\n                            q=q+\"`latestLeagueCluster`,\"\n                            q=q+\"`partialEmerging`,\"\n                            q=q+\"`partialRisingStar`,\"\n                            q=q+\"`ageWithDecimals`,\"\n                            q=q+\"`PM`,\"\n                            q=q+\"`RY`,\"\n                            q=q+\"`RP`,\"\n                            q=q+\"`wVANVNV_CL`,\"\n                            q=q+\"`maxEMediePesate`,\"\n                            q=q+\"`currentLeagueNameExtended`,\"\n                            q=q+\"`currentLeagueCountry`,\"\n                             q=q+\"`currentLeagueCountryCode`,\"\n                            q=q+\"`withdrawalClause`,\"\n                            q=q+\"`percTransfPrice`,\"\n                            q=q+\"`nationality`,\"\n                            q=q+\"`nationality2`,\"\n                            q=q+\"`nationalityCode`,\"\n                            q=q+\"`nationality2Code`,\"\n                            q=q+\"`masterLeagueId`,\"\n                            q=q+\"`masterLeagueName`,\"\n                            q=q+\"`latestRoleRis`,\"\n                             q=q+\"`rankByPerformance`,\"\n                             q=q+\"`rankByEffectiveness`,\"\n                             q=q+\"`rankByValue`,\"\n                             q=q+\"`absClubAvgSalaryDeviation`,\"\n                             q=q+\"`percClubAvgSalaryDeviation`,\"\n                             q=q+\"`absLeagueAvgSalaryDeviation`,\"\n                             q=q+\"`percLeagueAvgSalaryDeviation`,\"\n                             q=q+\"`absClubCusterAvgSalaryDeviation`,\"\n                             q=q+\"`percClubClusterAvgSalaryDeviation`,\"\n                             \n                             q=q+\"`revenueContributionIndex`,\"\n                            q=q+\"`costPerMinute`,\"\n                            q=q+\"`scoringContributionIndex`,\"\n                            q=q+\"`clubRelativePlayerPerformance`,\"\n                            q=q+\"`leagueRelativePlayerPerformance`,\"\n                            \n                            q=q+\"`annualCost`,\"\n                            q=q+\"`contributionIndexPerc`,\" \n                            \n                            \n                            \n                            q=q+\"`consumerValue`,\"\n                            q=q+\"`consumerResidualValue`,\"\n                            q=q+\"`consumerExpectedSalary`,\"\n                            q=q+\"`consumerExpectedSalaryAbsoluteDeviation`,\"\n                            q=q+\"`consumerExpectedSalaryPercDeviation`,\"\n                            q=q+\"`rankByConsumerValue`,\"\n                             \n                             \n                            q=q+\"`height`,\"\n                            q=q+\"`foot`,\"\n                            q=q+\"`highestPrice`,\"\n                            q=q+\"`agent`,\"\n                            q=q+\"`instagram`,\"\n                            q=q+\"`sponsor`,\"\n                             \n                            q=q+\"`week`,\"\n                            q=q+\"`year`,\"\n                            q=q+\"`elaborationNum`,\"\n                            q=q+\"`currentClubRank`,\"\n                            q=q+\"`expectedClubRank`,\"\n                            q=q+\"`bvResContractRatio`,\"\n                            q=q+\"`experience`,\"\n                            q=q+\"`slug`\"\n                            q=q+\") values \";\n\n\n\n\n\n\nlet values = \"\";\n    \nlet count = 0;\n\n\n\nconst slugify = function (player) {\n    \n    let str = \"\";\n    \n    if (player.shortFirstName && player.shortLastName ) {\n        \n        str = player.shortFirstName.replace(/'/g, \"'\"+\"'\")+\" \"+player.shortLastName.replace(/'/g, \"'\"+\"'\")+\" \"+player.birthDate.slice(0, 10)    \n        \n    } else {\n        \n        str = player.firstName.replace(/'/g, \"'\"+\"'\")+\" \"+player.lastName.replace(/'/g, \"'\"+\"'\")+\" \"+player.birthDate.slice(0, 10)    \n        \n    }\n    \n    \n   \n    \n  return String(str)\n    .normalize('NFKD') // split accented characters into their base characters and diacritical marks\n    .replace(/[\\u0300-\\u036f]/g, '') // remove all the accents, which happen to be all in the \\u03xx UNICODE block.\n    .trim() // trim leading or trailing whitespace\n    .toLowerCase() // convert to lowercase\n    .replace(/[^a-z0-9 -]/g, '') // remove non-alphanumeric characters\n    .replace(/\\s+/g, '-') // replace spaces with hyphens\n    .replace(/-+/g, '-'); // remove consecutive hyphens\n}\n\n\n\n\n\nPlayers.forEach( player => { \n    \n    Object.keys(player).forEach( key => {\n        \n        player[key] = player[key] === undefined ?  null : player[key];\n    })\n    \n    /*if ( count > 1 ){\n        return;\n    } */\n    try {\n        \n        let value = values == \"\" ? \"('\" : \",('\";\n    \n        player.latestDetectedLeagueCluster = player.latestDetectedLeagueCluster === undefined ? null : player.latestDetectedLeagueCluster\n        player.latestDetectedLeagueWeight  = player.latestDetectedLeagueWeight === undefined ? null : player.latestDetectedLeagueWeight\n        player.latestDetectedRoleGroup = player.latestDetectedRoleGroup === undefined ? null : player.latestDetectedRoleGroup\n        player.latestDetectedRoleWeight = player.latestDetectedRoleWeight === undefined ? null : player.latestDetectedRoleWeight\n    \n        player.masterClubName = player.masterClubName !== undefined && player.masterClubName !== null ? player.masterClubName.replace(/'/g, \"'\"+\"'\") : \"\"\n        player.masterLeagueName = player.masterLeagueName !== undefined && player.masterLeagueName !== null ? player.masterLeagueName.replace(/'/g, \"'\"+\"'\") : \"\"\n        \n        player.currentLeagueCountry = player.currentLeagueCountry !== undefined && player.currentLeagueCountry!=null ? player.currentLeagueCountry.replace(/'/g, \"'\"+\"'\") : \"\"\n        player.currentLeagueCountryCode = player.currentLeagueCountryCode !== undefined && player.currentLeagueCountryCode !=null ? player.currentLeagueCountryCode.replace(/'/g, \"'\"+\"'\") : \"\"\n\n        \n        \n        player.nationality = player.nationality !== undefined && player.nationality !=null ? player.nationality.replace(/'/g, \"'\"+\"'\") : \"\"\n        player.nationalityCode = player.nationalityCode !== undefined && player.nationalityCode !=null ? player.nationalityCode.replace(/'/g, \"'\"+\"'\") : \"\"\n\n        player.nationality2 = player.nationality2 !== undefined && player.nationality2 !=null ? player.nationality2.replace(/'/g, \"'\"+\"'\") : \"\"\n        player.nationality2Code = player.nationality2Code !== undefined && player.nationality2Code !=null ? player.nationality2Code.replace(/'/g, \"'\"+\"'\") : \"\"\n        \n        player.shortFirstName = player.shortFirstName !== undefined && player.shortFirstName !== null ? player.shortFirstName.replace(/'/g, \"'\"+\"'\") : \"\"\n        player.shortLastName = player.shortLastName !== undefined && player.shortLastName !== null ? player.shortLastName.replace(/'/g, \"'\"+\"'\") : \"\"\n        player.knownName = player.knownName !== undefined && player.knownName !== null ? player.knownName.replace(/'/g, \"'\"+\"'\") : \"\"\n        \n        \n                player.foot = player.foot !== undefined && player.foot !== null ? player.foot.replace(/'/g, \"'\"+\"'\") : \"\"\n\n        player.agent = player.agent !== undefined && player.agent !== null ? player.agent.replace(/'/g, \"'\"+\"'\") : \"\"\n        player.instagram = player.instagram !== undefined && player.instagram !== null ? player.instagram.replace(/'/g, \"'\"+\"'\") : \"\"\n        player.sponsor = player.sponsor !== undefined && player.sponsor !== null ? player.sponsor.replace(/'/g, \"'\"+\"'\") : \"\"\n        \n        if(!player.startContract || !player.endContract ) {\n            \n            console.log(player.playerId, \" - \",player.name)\n        }\n    \n        value =     value \n                    +player.playerId+\"','\"\n                    +player.firstName.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.lastName.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.shortFirstName.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.shortLastName.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.knownName.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.fullName.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.name.replace(/'/g, \"'\"+\"'\")+\"',\"\n                    +\"STR_TO_DATE('\"+player.birthDate.slice(0, 10)+\"','%Y-%m-%d'),\"\n                    +player.age+\",\"\n                    +player.months+\",'\"\n                    +player.currentPosition+\"','\"\n                    +player.currentRole+\"','\"\n                    +player.currentRole2+\"','\"\n                    +player.currentClubId+\"','\"\n                    +player.currentClubName.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.currentClubShortName.replace(/'/g, \"'\"+\"'\")+\"',\"\n                    +player.currentClubCluster+\",'\"\n                    +player.currentLeagueId+\"','\"\n                    +player.currentLeagueName.replace(/'/g, \"'\"+\"'\")+\"',\"\n                    +player.currentLeagueCluster+\",\"\n                    +player.currentLeagueWeight+\",\"\n                    +player.currentLeagueTaxRate+\",'\"\n                    +player.masterClubId+\"','\"\n                    +player.masterClubName.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.masterClubShortName.replace(/'/g, \"'\"+\"'\")+\"',\"\n                    +\"STR_TO_DATE('\"+player.masterClubStartContract.slice(0, 10)+\"','%Y-%m-%d'),\"\n                    +\"STR_TO_DATE('\"+player.masterClubEndContract.slice(0, 10)+\"','%Y-%m-%d'),\"\n                    +player.remainingYearsOfMasterClubContract+\",\"\n                    +player.remainingMonthsOfMasterClubContract+\",\"\n                    +player.totalYearsOfMasterClubContract+\",\"\n                    +player.totalMonthsOfMasterClubContract+\",\"\n                    +player.latestRoleGroup+\",\"\n                    +player.latestRoleWeight+\",\"\n                    +player.nationalTeamPlayer+\",\"\n                    +player.superStar+\",\"\n                    +player.risingStar+\",\"\n                    +player.emerging+\",\"\n                    +player.alert+\",\"\n                    +player.absind+\",\"\n                    +player.performance+\",\"\n                    +player.fatmol+\",\"\n                    +player.effectiveness+\",\"\n                    +player.maturity+\",\"\n                    +player.weightInClub+\",\"\n                    +player.latestUniqueness+\",\"\n                    +player.latestMicroVolatility+\",\"\n                    +player.latestMacroVolatility+\",'\"\n                    +player.contractType+\"',\"\n                    +\"STR_TO_DATE('\"+player.startContract.slice(0, 10)+\"','%Y-%m-%d'),\"\n                    +\"STR_TO_DATE('\"+player.endContract.slice(0, 10)+\"','%Y-%m-%d'),\"\n                    +player.totalYearsOfContract+\",\"\n                    +player.remainingYearsOfContract+\",\"\n                    +player.transferPrice+\",\"\n                    +player.transferPriceYear+\",\"\n                    +player.salaryNet+\",\"\n                    +player.salaryGross+\",\"\n                    +player.salaryOptimal+\",\"\n                    +player.salaryPotential+\",\"\n                    +player.salaryAbsoluteDeviation+\",\"\n                    +player.salaryPercDeviation+\",\"\n                    +player.latestDetectedLeagueCluster+\",\"\n                    +player.latestDetectedLeagueWeight+\",\"\n                    +player.latestDetectedRoleGroup+\",\"\n                    +player.latestDetectedRoleWeight+\",\"\n                    +player.benefits+\",\"\n                    +player.costs+\",\"\n                    +player.optval+\",\"\n                    +player.residualValue+\",\"\n                    +player.residualBookValue+\",\"\n                    +player.optimalCosts+\",\"\n                    +player.van+\",\"\n                    +player.valNoVan+\",\"\n                    +player.potentialPrice+\",\"\n                    +player.expectedPrice+\",\"\n                    +player.perceivedExpectedPrice+\",\"\n                    +player.currentPotentialPrice+\",\"\n                    +player.capitalGain+\",\"\n                    +player.profit+\",\"\n                    +player.deviation+\",\"\n                    +player.remainingMonthsOfContract+\",\"\n                    +player.totalMonthsOfContract+\",\"\n                    +player.potentialYearsOfContract+\",\"\n                    +player.expectedYearsOfContract+\",\"\n                    +player.benefitsPotential+\",\"\n                    +player.costsPotential+\",\"\n                    +player.optvalPotential+\",\"\n                    +player.avgTransferPrice+\",\"\n                    +player.minutes+\",\" \n                    +player.minutesShare+\",\" \n                    +player.avgMicroIndex+\",\"\n                    +player.avgMacroIndex+\",\"\n                    +player.avgPlayedMinuteShare+\",\"\n                    +player.expectedClubCluster+\",\"\n                    +player.weightInExpectedClubCluster+\",\"\n                    +player.latestLeagueCluster+\",\"\n                    +player.partialEmerging+\",\"\n                    +player.partialRisingStar+\",\"\n                    +player.ageWithDecimals+\",\"\n                    +player.PM+\",\"\n                    +player.RY+\",\"\n                    +player.RP+\",\"\n                    +player.wVANVNV_CL+\",\"\n                    +player.maxEMediePesate+\",'\"\n                    +player.currentLeagueNameExtended.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.currentLeagueCountry.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.currentLeagueCountryCode.replace(/'/g, \"'\"+\"'\")+\"',\"\n                    +player.withdrawalClause+\",\"\n                    +player.percTransfPrice+\",'\"\n                    +player.nationality.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.nationality2.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.nationalityCode.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.nationality2Code.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.masterLeagueId+\"','\"\n                    +player.masterLeagueName.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.latestRoleRis+\"',\"\n                    +player.rankByPerformance+\",\"\n                    +player.rankByEffectiveness+\",\"\n                    +player.rankByValue+\",\"\n                    +player.absClubAvgSalaryDeviation+\",\"\n                    +player.percClubAvgSalaryDeviation+\",\"\n                    +player.absLeagueAvgSalaryDeviation+\",\"\n                    +player.percLeagueAvgSalaryDeviation+\",\"\n                    +player.absClubCusterAvgSalaryDeviation+\",\"\n                    +player.percClubClusterAvgSalaryDeviation+\",\"\n                    \n                    +player.revenueContributionIndex+\",\"\n                    +player.costPerMinute+\",\"\n                    +player.scoringContributionIndex+\",\"\n                    +player.clubRelativePlayerPerformance+\",\"\n                    +player.leagueRelativePlayerPerformance+\",\"\n                    \n                    +player.annualCost+\",\"\n                    +player.contributionIndexPerc+\",\"\n                    \n                    +player.consumerValue+\",\"\n                     +player.consumerResidualValue+\",\"\n                    +player.consumerExpectedSalary+\",\"\n                    +player.consumerExpectedSalaryAbsoluteDeviation+\",\"\n                    +player.consumerExpectedSalaryPercDeviation+\",\"\n                    +player.rankByConsumerValue+\",\"\n                    \n                    +player.height+\",'\"\n                    +player.foot.replace(/'/g, \"'\"+\"'\")+\"',\"\n                    +player.highestPrice+\",'\"\n                    +player.agent.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.instagram.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.sponsor.replace(/'/g, \"'\"+\"'\")+\"',\"\n                    \n                    +player.week+\",\"\n                    +player.year+\",\"\n                    +elaborationNum+\",\"\n                    +player.currentClubRank+\",\"\n                    +player.expectedClubRank+\",\"\n                    +player.bvResContractRatio+\",\"\n                    +player.experience+\",'\"\n                    +slugify(player)+\"'\"\n                    \n                    \n                    \n        value = value + \")\"            \n        \n        values = values + value;\n        \n    } catch (e) {\n        console.log(e)\n    }\n    \n    count++;\n    \n    \n})\n\n\n\n\n\n\nmsg.topic = q+values;\n\n} catch(e) {\n    console.log(e)\n}\n\n//console.log(msg.topic)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 700,
        "wires": [
            [
                "41f9c6c077e5c941"
            ]
        ]
    },
    {
        "id": "24a9647b43575d26",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Retrieve and Parse Players",
        "func": "try {\n    \n    flow.get(\"logmsg\").message = \"Staging Players Begins\";\n    node.log(flow.get(\"logmsg\"))\n    \n    let TheFootballTree = global.get(\"TheLatestFooballTree\");\n\n\n    var Players = [];\n    var Clubs = [];\n    var Leagues = [];\n\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        \n    \n        TheFootballTree[leagueId].Clubs.forEach( club => { \n           \n            club.Players.forEach( player => {\n                \n                Players.push(JSON.parse(JSON.stringify(player)));\n                \n            })\n            \n\n            //Clubs.push(club);\n            \n        \n        })   \n        \n        \n       \n      \n        //Leagues.push(TheFootballTree[leagueId])\n       \n    })\n    \n    // Portiamo a stringa e riparsiamo gli oggetti per crearne di nuovi ed evitare che siano riferimenti agli stessi\n    console.log(\"Retrieving Players\")\n    let load = Players //JSON.parse(JSON.stringify(Players));\n   // let load = JSON.parse(JSON.stringify(flow.get(\"Clubs\")));\n    // let load = JSON.parse(JSON.stringify(flow.get(\"Leagues\")));\n\n    console.log(\"#Players \"+load.length);\n    flow.get(\"logmsg\").message = \"#Players to be saved: \"+load.length\n    node.log(flow.get(\"logmsg\"))\n    msg.payload=load\n    \n    return msg\n\n}\ncatch (e) {\n    \n    console.log(e)\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2300,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "7adc44bceeca318a",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Retrieve and Parse Clubs",
        "func": "try {\n    \n    flow.get(\"logmsg\").message = \"Staging Clubs Begins\";\n    node.log(flow.get(\"logmsg\"))\n    \n    let TheFootballTree = global.get(\"TheLatestFooballTree\");\n\n\n    let Players = [];\n    let Clubs = [];\n    let Leagues = [];\n\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        \n    \n        TheFootballTree[leagueId].Clubs.forEach( club => { \n           \n            /*club.Players.forEach( player => {\n                \n                Players.push(player);\n                \n            })*/\n            \n            let c = JSON.parse(JSON.stringify(club))\n                delete c.Players;\n                delete c.LoanedPlayers;\n                delete c.BorrowedPlayers;\n\n                \n            Clubs.push(c);\n            \n        \n        })   \n        \n        \n       \n      \n        //Leagues.push(TheFootballTree[leagueId])\n       \n    })\n   let load = Clubs //JSON.parse(JSON.stringify(Clubs));\n    // let load = JSON.parse(JSON.stringify(flow.get(\"Leagues\")));\n\n    flow.get(\"logmsg\").message = \"#Clubs to be saved: \"+load.length\n    node.log(flow.get(\"logmsg\"))\n    msg.payload=load\n    //flow.set(\"clubarray\",load)\n    return msg\n\n}\ncatch (e) {\n    \n    console.log(e)\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2290,
        "y": 560,
        "wires": [
            []
        ]
    },
    {
        "id": "41f9c6c077e5c941",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Count",
        "func": "/*let ind= msg.parts.index+1\nconsole.log(\"PLAYERS SAVING \"+ ind+ \"/\" + msg.parts.count)\nflow.get(\"logmsg\").message = \"#Players saving part : \"+ ind+ \"/\" + msg.parts.count\nnode.log(flow.get(\"logmsg\"))\n\nif (  msg.parts.count==msg.parts.index+1 ) {\n\n    console.log(\"PLAYERS INSERT COMPLETED\")\n    flow.get(\"logmsg\").message = \"#Players saving completed\";\n    node.log(flow.get(\"logmsg\"))\n    flow.get(\"logmsg\").taskRunning = false;\n    return msg;\n}\n \n \n */\n \n\n\nif (msg.continue === false) {\n    flow.get(\"logmsg\").message = \"Players Saved\";\n    node.log(flow.get(\"logmsg\"))\n} else {\n    \n    flow.get(\"logmsg\").message = \"Saving chunk \"+flow.get(\"playersChunks\").length;\n    node.log(flow.get(\"logmsg\"))\n}\n\n    return msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 840,
        "wires": [
            [
                "15230bc8a31f0983"
            ]
        ]
    },
    {
        "id": "8de741c736f22de1",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Salva Clubs",
        "func": "\n    //let ind= msg.parts.index+1\n    //console.log(\"Building query for part \"+ ind+ \"/\" + msg.parts.count)\n    console.log(\"Building query for clubs\")\n    \nlet Clubs = flow.get(\"ClubsArray\")//msg.payload;\nlet elaborationNum = global.get(\"elaborationNum\") || 0\n\n\n\nlet q = \"INSERT INTO latestclubs_staging ( \";\nq = q + \"`clubId`,\"\nq = q + \"`name`,\"\nq = q + \"`shortName`,\"\nq = q + \"`cluster`,\"\nq = q + \"`clubRank`,\"\nq = q + \"`leagueId`,\"\nq = q + \"`country`,\"\nq = q + \"`countryCode`,\"\nq = q + \"`city`,\"\nq = q + \"`stadiumOwner`,\"\nq = q + \"`perc`,\"\nq = q + \"`revenues`,\"\nq = q + \"`lastRevenues`,\"\nq = q + \"`uefaRank`,\"\nq = q + \"`maxtr`,\"\nq = q + \"`idTM`,\"\nq = q + \"`totFatmol`,\"\nq = q + \"`numOfPlayers`,\"\nq = q + \"`avgAge`,\"\nq = q + \"`avgContractDuration`,\"\nq = q + \"`avgContractResidualDuration`,\"\nq = q + \"`portfolioCost`,\"\nq = q + \"`residualBookValue`,\"\nq = q + \"`residualValue`,\"\nq = q + \"`residualValueExceed100Min`,\"\nq = q + \"`potentialPrice`,\"\nq = q + \"`potentialPriceExceed100Min`,\"\nq = q + \"`expectedPrice`,\"\nq = q + \"`expectedPriceExceed100Min`,\"\nq = q + \"`capitalGain`,\"\nq = q + \"`netProfit`,\"\nq = q + \"`salaryNet`,\"\nq = q + \"`salaryNetFair`,\"\nq = q + \"`salaryNetSum`,\"\nq = q + \"`maxSalaryNet`,\"\nq = q + \"`salaryNetSumExceed100Min`,\"\nq = q + \"`salaryGross`,\"\nq = q + \"`salaryGrossFair`,\"\nq = q + \"`salaryGrossSum`,\"\nq = q + \"`maxSalaryGross`,\"\nq = q + \"`salaryGrossSumExceed100Min`,\"\nq = q + \"`salaryOptimal`,\"\nq = q + \"`salaryOptimalExceed100Min`,\"\nq = q + \"`salaryPotential`,\"\nq = q + \"`salaryPotentialExceed100Min`,\"\nq = q + \"`salaryAbsoluteDeviation`,\"\nq = q + \"`salaryPercDeviation`,\"\nq = q + \"`premioFair`,\"\nq = q + \"`numOfLoanedPlayers`,\"\nq = q + \"`numOfBorrowedPlayers`,\"\nq = q + \"`numOfForeignPlayers`,\"\nq = q + \"`numOfU23Players`,\"\nq = q + \"`numOfU23ForeignPlayers`,\"\nq = q + \"`shareOfForeignPlayers`,\"\nq = q + \"`shareOfU23Players`,\"\nq = q + \"`shareOfU23ForeignPlayers`,\"\nq = q + \"`numOfNationalPlayers`,\"\nq = q + \"`numOfExpiringContracts`,\"\nq = q + \"`numOfOwnedPlayers`,\"\nq = q + \"`salaryAvg`,\"\nq = q + \"`salaryAvgExceed100Min`,\"\nq = q + \"`rankByValue`,\"\nq = q + \"`rankByAcquisition`,\"\nq = q + \"`rankBySalary`,\"\nq = q + \"`avgSalaryNetCluster`,\"\nq = q + \"`absSalaryNetClusterDeviation`,\"\nq = q + \"`percSalaryNetClusterDeviation`,\"\nq = q + \"`avgEffectiveness`,\"\nq = q + \"`avgEffectivenessExceed100Min`,\"\nq = q + \"`avgPotentialPrice`,\"\nq = q + \"`avgPotentialPriceExceed100Min`,\"\nq = q + \"`avgResidualValue`,\"\nq = q + \"`avgResidualValueExceed100Min`,\"\nq = q + \"`avgResidualBookValue`,\"\nq = q + \"`avgResidualBookValueExceed100Min`,\"\nq = q + \"`avgExpectedPrice`,\"\nq = q + \"`avgExpectedPriceExceed100Min`,\"\nq = q + \"`avgLatestMicroVolatility`,\"\nq = q + \"`avgLatestMicroVolatilityExceed100Min`,\"\nq = q + \"`avgSalaryGross`,\"\nq = q + \"`avgSalaryGrossExceed100Min`,\"\nq = q + \"`avgSalaryNet`,\"\nq = q + \"`avgSalaryNetExceed100Min`,\"\nq = q + \"`avgSalaryOptimal`,\"\nq = q + \"`avgSalaryOptimalExceed100Min`,\"\nq = q + \"`avgSalaryPotential`,\"\nq = q + \"`avgSalaryPotentialExceed100Min`,\"\nq = q + \"`avgLeagueSalaryNet`,\"\nq = q + \"`absLeagueSalaryNetDeviation`,\"\nq = q + \"`percLeagueSalaryNetDeviation`,\"\nq = q + \"`costs`,\"\n\nq = q + \"`lastPosition`,\"\nq = q + \"`leagueWinnerProb`,\"\nq = q + \"`qualifiedForCupProd`,\"\nq = q + \"`relegationProb`,\"\nq = q + \"`oldRevenues`,\"\nq = q + \"`salesPlayers5Y$`,\"\nq = q + \"`purchasePlayers5Y$`,\"\nq = q + \"`costOperating`,\"\nq = q + \"`broadcastingRevenues`,\"\nq = q + \"`commericialRevenues`,\"\nq = q + \"`matchDayRevenues`,\"\nq = q + \"`otherRevenues`,\"\n\n\nq = q + \"`revenueGrowth`,\"\nq = q + \"`projectedRevenueGrowth`,\"\nq = q + \"`revenueShare`,\"\nq = q + \"`netProfitLoss`,\"\nq = q + \"`playerTrading`,\"\nq = q + \"`returnOnInvestment`,\"\nq = q + \"`financialSustainabilityIndex`,\"\nq = q + \"`costPerPoint`,\"\nq = q + \"`performanceIndex`,\"\nq = q + \"`playersAnnualCost`,\"\nq = q + \"`annualBookValue`,\"\n\nq=q+\"`consumerValue`,\"\nq=q+\"`consumerResidualValue`,\"\nq=q+\"`consumerExpectedSalary`,\"\nq=q+\"`consumerExpectedSalaryAbsoluteDeviation`,\"\nq=q+\"`consumerExpectedSalaryPercDeviation`,\"\nq=q+\"`rankByConsumerValue`,\"\n\nq=q+\"`foundationYear`,\"\nq=q+\"`stadiumCapacity`,\"\nq=q+\"`website`,\"\n\n\n\nq=q+\"`pointsCurrentSeason`,\"\n\nq = q + \"`week`,\"\nq = q + \"`year`,\"\nq = q + \"`elaborationNum`\"\nq = q + \") values \";\n\nlet values = \"\";\nlet value = \"\";\n\n\n\n\n   Clubs.map(club => {\n\n    /*Object.keys(club).forEach( key => {\n        \n        club[key] = club[key] === undefined ?  null : club[key];\n    })*/\n\n    /*if ( count > 1 ){\n        return;\n    } */\n\n\n        club.website = club.website !== undefined && club.website !== null ? club.website.replace(/'/g, \"'\"+\"'\") : \"\"\n        club.foundationYear = club.foundationYear !== undefined && club.foundationYear !== null ? club.foundationYear : 0\n        club.stadiumCapacity = club.stadiumCapacity !== undefined && club.stadiumCapacity !== null ? club.stadiumCapacity : 0\n        \n\n\n    value = values == \"\" ? \"('\" : \",('\";\n\n\n\n    value = value\n        + club.clubId + \"','\"\n        + club.name.replace(\"'\", \"'\" + \"'\") + \"','\"\n        + club.shortName.replace(\"'\", \"'\" + \"'\") + \"',\"\n        + club.cluster + \",\"\n        + club.clubRank + \",'\"\n        + club.leagueId + \"','\"\n        + club.country.replace(\"'\", \"'\" + \"'\") + \"','\"\n        + club.countryCode.replace(\"'\", \"'\" + \"'\") + \"','\"\n        + club.city.replace(\"'\", \"'\" + \"'\") + \"',\"\n        + club.stadiumOwner + \",\"\n        + club.perc + \",\"\n        + club.revenues + \",\"\n        + club.lastRevenues + \",\"\n        + club.uefaRank + \",\"\n        + club.maxtr + \",\"\n        + club.idTM + \",\"\n        + club.totFatmol + \",\"\n        + club.numOfPlayers + \",\"\n        + club.avgAge + \",\"\n        + club.avgContractDuration + \",\"\n        + club.avgContractResidualDuration + \",\"\n        + club.portfolioCost + \",\"\n        + club.residualBookValue + \",\"\n        + club.residualValue + \",\"\n        + club.residualValueExceed100Min + \",\"\n        + club.potentialPrice + \",\"\n        + club.potentialPriceExceed100Min + \",\"\n        + club.expectedPrice + \",\"\n        + club.expectedPriceExceed100Min + \",\"\n        + club.capitalGain + \",\"\n        + club.netProfit + \",\"\n        + club.salaryNet + \",\"\n        + club.salaryNetFair + \",\"\n        + club.salaryNetSum + \",\"\n        + club.maxSalaryNet + \",\"\n        + club.salaryNetSumExceed100Min + \",\"\n        + club.salaryGross + \",\"\n        + club.salaryGrossFair + \",\"\n        + club.salaryGrossSum + \",\"\n        + club.maxSalaryGross + \",\"\n        + club.salaryGrossSumExceed100Min + \",\"\n        + club.salaryOptimal + \",\"\n        + club.salaryOptimalExceed100Min + \",\"\n        + club.salaryPotential + \",\"\n        + club.salaryPotentialExceed100Min + \",\"\n        + club.salaryAbsoluteDeviation + \",\"\n        + club.salaryPercDeviation + \",\"\n        + club.premioFair + \",\"\n        + club.numOfLoanedPlayers + \",\"\n        + club.numOfBorrowedPlayers + \",\"\n        + club.numOfForeignPlayers + \",\"\n        + club.numOfU23Players + \",\"\n        + club.numOfU23ForeignPlayers + \",\"\n        + club.shareOfForeignPlayers + \",\"\n        + club.shareOfU23Players + \",\"\n        + club.shareOfU23ForeignPlayers + \",\"\n        + club.numOfNationalPlayers + \",\"\n        + club.numOfExpiringContracts + \",\"\n        + club.numOfOwnedPlayers + \",\"\n        + club.salaryAvg + \",\"\n        + club.salaryAvgExceed100Min + \",\"\n        + club.rankByValue + \",\"\n        + club.rankByAcquisition + \",\"\n        + club.rankBySalary + \",\"\n        + club.avgSalaryNetCluster + \",\"\n        + club.absSalaryNetClusterDeviation + \",\"\n        + club.percSalaryNetClusterDeviation + \",\"\n        + club.avgEffectiveness + \",\"\n        + club.avgEffectivenessExceed100Min + \",\"\n        + club.avgPotentialPrice + \",\"\n        + club.avgPotentialPriceExceed100Min + \",\"\n        + club.avgResidualValue + \",\"\n        + club.avgResidualValueExceed100Min + \",\"\n        + club.avgResidualBookValue + \",\"\n        + club.avgResidualBookValueExceed100Min + \",\"\n        + club.avgExpectedPrice + \",\"\n        + club.avgExpectedPriceExceed100Min + \",\"\n        + club.avgLatestMicroVolatility + \",\"\n        + club.avgLatestMicroVolatilityExceed100Min + \",\"\n        + club.avgSalaryGross + \",\"\n        + club.avgSalaryGrossExceed100Min + \",\"\n        + club.avgSalaryNet + \",\"\n        + club.avgSalaryNetExceed100Min + \",\"\n        + club.avgSalaryOptimal + \",\"\n        + club.avgSalaryOptimalExceed100Min + \",\"\n        + club.avgSalaryPotential + \",\"\n        + club.avgSalaryPotentialExceed100Min + \",\"\n        + club.avgLeagueSalaryNet + \",\"\n        + club.absLeagueSalaryNetDeviation + \",\"\n        + club.percLeagueSalaryNetDeviation + \",\"\n        + club.costs + \",\"\n        \n        + club.lastPosition + \",\"\n        + club.leagueWinnerProb + \",\"\n        + club.qualifiedForCupProd + \",\"\n        + club.relegationProb + \",\"\n        + club.oldRevenues + \",\"\n        + club.salesPlayers5Y$ + \",\"\n        + club.purchasePlayers5Y$ + \",\"\n        + club.costOperating + \",\"\n        + club.broadcastingRevenues + \",\"\n        + club.commericialRevenues + \",\"\n        + club.matchDayRevenues + \",\"\n        + club.otherRevenues + \",\"\n        \n        + club.revenueGrowth + \",\"\n        + club.projectedRevenueGrowth + \",\"\n        + club.revenueShare + \",\"\n        + club.netProfitLoss + \",\"\n        + club.playerTrading + \",\"\n        + club.returnOnInvestment + \",\"\n        + club.financialSustainabilityIndex + \",\"\n        + club.costPerPoint + \",\"\n        + club.performanceIndex + \",\"\n        + club.playersAnnualCost + \",\"\n        + club.annualBookValue + \",\"\n        \n        \n        \n+club.consumerValue+\",\"\n +club.consumerResidualValue+\",\"\n+club.consumerExpectedSalary+\",\"\n+club.consumerExpectedSalaryAbsoluteDeviation+\",\"\n+club.consumerExpectedSalaryPercDeviation+\",\"\n+club.rankByConsumerValue+\",\"\n\n+club.foundationYear + \",\"\n+club.stadiumCapacity + \",'\"\n+club.website.replace(\"'\", \"'\" + \"'\") + \"',\"\n\n\n  + club.pointsCurrentSeason + \",\"\n  \n        + club.week + \",\"\n        + club.year + \",\"\n        + elaborationNum\n\n    value = value + \")\"\n\n    values = values + value;\n\n\n\n})\n\n    console.log(\"Cycle clubs ends\")\n\n\nmsg.topic = q+values;\nreturn msg;\n\n\n//console.log(msg.topic)\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 360,
        "wires": [
            [
                "74bb333e5a2bf25a"
            ]
        ]
    },
    {
        "id": "74bb333e5a2bf25a",
        "type": "mysql",
        "z": "da3f380d47320561",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 820,
        "y": 360,
        "wires": [
            [
                "943d2fb2bc7cfa2d"
            ]
        ]
    },
    {
        "id": "943d2fb2bc7cfa2d",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Count",
        "func": "/*let ind= msg.parts.index+1\nconsole.log(\"CLUBS SAVING \"+ ind+ \"/\" + msg.parts.count)\nflow.get(\"logmsg\").message = \"#Clubs saving part : \"+ ind+ \"/\" + msg.parts.count\n    node.log(flow.get(\"logmsg\"))\n\nif (msg.parts.index == msg.parts.count -1 )  {\n    console.log(\"CLUBS SAVING COMPLETED\" ) \n    flow.get(\"logmsg\").message = \"#Clubs saving completed\";\n    node.log(flow.get(\"logmsg\"))\n    return msg;\n}\n\nif (msg.error && msg.error.message) {\n    console.log(msg.error.message)\n}\n*/\n\nflow.get(\"logmsg\").message = \"Clubs Saved\";\nnode.log(flow.get(\"logmsg\"))\n\n    console.log(\"CLUBS SAVING COMPLETED\" ) \nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 360,
        "wires": [
            [
                "e9db2288d7af0f41"
            ]
        ]
    },
    {
        "id": "7853cd0daa9627b0",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Salvataggio",
        "func": "console.log(\"ENTITY SAVING BEGING\")\n\nflow.get(\"logmsg\").message = \"Entity Saving Begins\"\n    \nnode.log(flow.get(\"logmsg\"))\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 120,
        "wires": [
            [
                "1fd1ed3149cafd04"
            ]
        ]
    },
    {
        "id": "e33c0ba1c34e99ce",
        "type": "link in",
        "z": "da3f380d47320561",
        "name": "DELETESTAGINGDDATA",
        "links": [],
        "x": 205,
        "y": 120,
        "wires": [
            [
                "fd2cb5fc42646875"
            ]
        ]
    },
    {
        "id": "95e3bcf27cedba8b",
        "type": "link out",
        "z": "da3f380d47320561",
        "name": "DELETESTAGINGDDATAOUT",
        "mode": "return",
        "links": [],
        "x": 1415,
        "y": 120,
        "wires": []
    },
    {
        "id": "dc8a5ed114a6a8bc",
        "type": "link in",
        "z": "da3f380d47320561",
        "name": "STAGELEAGUES",
        "links": [],
        "x": 205,
        "y": 220,
        "wires": [
            [
                "91d8b515cbabfd59"
            ]
        ]
    },
    {
        "id": "7caeb178bb1b42c6",
        "type": "link in",
        "z": "da3f380d47320561",
        "name": "STAGECLUBS",
        "links": [],
        "x": 205,
        "y": 360,
        "wires": [
            [
                "365b3f0a1cdbe6e7"
            ]
        ]
    },
    {
        "id": "d066a90f9e48eb05",
        "type": "link in",
        "z": "da3f380d47320561",
        "name": "STAGEPLAYERS",
        "links": [],
        "x": 205,
        "y": 600,
        "wires": [
            [
                "4be3adb22d5213eb"
            ]
        ]
    },
    {
        "id": "09daa2b1ddc62ce0",
        "type": "link out",
        "z": "da3f380d47320561",
        "name": "STAGELEAGUESOUT",
        "mode": "return",
        "links": [],
        "x": 1705,
        "y": 220,
        "wires": []
    },
    {
        "id": "6566827091fc6c3e",
        "type": "link out",
        "z": "da3f380d47320561",
        "name": "STAGECLUBSOUT",
        "mode": "return",
        "links": [],
        "x": 1315,
        "y": 360,
        "wires": []
    },
    {
        "id": "13d5923a3a779dde",
        "type": "link out",
        "z": "da3f380d47320561",
        "name": "STAGEPLAYERSOUT",
        "mode": "return",
        "links": [],
        "x": 1595,
        "y": 620,
        "wires": []
    },
    {
        "id": "741be46ee902af76",
        "type": "comment",
        "z": "da3f380d47320561",
        "name": "FLUSSO PER AGGIORNARE RIS, INPUT e PLAYER_TEMP per RETROCOMPATIBILITA'",
        "info": "",
        "x": 550,
        "y": 1020,
        "wires": []
    },
    {
        "id": "bdbcbfca97cc83aa",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "DELETE RIS, INPUT, PLAYER_TEMP",
        "func": "let logmsg = global.get(\"logmsg\");\n\nif(!logmsg) {\n    \n    logmsg = {}\n    logmsg.type = \"db\"\n    logmsg.taskType = \"elaboration\"\n    logmsg.taskId = Math.floor(Math.random() * 1000001);\n    logmsg.message = \"updating legacy tables\"\n    logmsg.taskRunning = true\n}\n\n\nlogmsg.message = \"updating legacy tables\"\nflow.set(\"logmsg\",logmsg)\n\nmsg.payload = logmsg;\n    \n\n\nnode.log(logmsg)\n\n\nlet q = \"delete from ris;delete from player_temp;delete from input;\"\nmsg.topic = q;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1100,
        "wires": [
            [
                "271f1c7f9732c07a"
            ]
        ]
    },
    {
        "id": "6192c2748deb6769",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Checkpoint",
        "func": "\n    console.log(\"ALL RIS INPUT, PLAYER_TEMP RECORDS DELETED \")\n    return msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1100,
        "wires": [
            [
                "c3ceb39ff48e9eb2"
            ]
        ]
    },
    {
        "id": "c3ceb39ff48e9eb2",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "INSERT RIS, INPUT, PLAYER_TEMP",
        "func": "let q = \"insert into ris (select * from ris_view);insert into player_temp (select * from player_temp_view);insert into input (select * from input_view);\"\nmsg.topic = q;\nmsg.dataset = \"ris\"\nflow.set(\"rck\",false);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 1100,
        "wires": [
            [
                "6f9c1b60244cf333"
            ]
        ]
    },
    {
        "id": "07e37952c7265a34",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Checkpoint",
        "func": "let logmsg = global.get(\"logmsg\");\n\nif(!logmsg) {\n    \n    logmsg = {}\n    logmsg.type = \"db\"\n    logmsg.taskType = \"elaboration\"\n    logmsg.taskId = Math.floor(Math.random() * 1000001);\n    logmsg.message = \"ALL FINESHED\"\n    logmsg.taskRunning = true\n}\n\n\nlogmsg.message = \"ALL COMPLETED\"\nflow.set(\"logmsg\",logmsg)\n\nmsg.payload = logmsg;\n    \n\n\nnode.log(logmsg)\n    console.log(\"ALL RECORDS UPDATED\")\n    msg.payload=\"ALL RECORDS UPDATED\";\n    return msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1690,
        "y": 1100,
        "wires": [
            [
                "61956b2c15d26d79"
            ]
        ]
    },
    {
        "id": "271f1c7f9732c07a",
        "type": "mysql",
        "z": "da3f380d47320561",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 680,
        "y": 1100,
        "wires": [
            [
                "6192c2748deb6769"
            ]
        ]
    },
    {
        "id": "6f9c1b60244cf333",
        "type": "mysql",
        "z": "da3f380d47320561",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 1480,
        "y": 1100,
        "wires": [
            [
                "07e37952c7265a34"
            ]
        ]
    },
    {
        "id": "3c6891ea224b7285",
        "type": "link in",
        "z": "da3f380d47320561",
        "name": "UPDATEOLD",
        "links": [],
        "x": 185,
        "y": 1280,
        "wires": [
            [
                "bdbcbfca97cc83aa"
            ]
        ]
    },
    {
        "id": "61956b2c15d26d79",
        "type": "link out",
        "z": "da3f380d47320561",
        "name": "UPDATEOLDOUT",
        "mode": "return",
        "links": [],
        "x": 1815,
        "y": 1100,
        "wires": []
    },
    {
        "id": "6379ede01e241729",
        "type": "comment",
        "z": "da3f380d47320561",
        "name": "STAGE DATI",
        "info": "",
        "x": 370,
        "y": 60,
        "wires": []
    },
    {
        "id": "fd2cb5fc42646875",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "INIT",
        "func": "let logmsg = global.get(\"logmsg\");\n\nif(!logmsg) {\n    \n    logmsg = {}\n    logmsg.type = \"db\"\n    logmsg.taskType = \"elaboration\"\n    logmsg.taskId = Math.floor(Math.random() * 1000001);\n    logmsg.message = \"delete staging data\"\n    logmsg.taskRunning = true\n}\n\n\nlogmsg.message = \"delete staging data\"\nflow.set(\"logmsg\",logmsg)\n\nmsg.payload = logmsg;\n    \n\n\nnode.log(logmsg)\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 120,
        "wires": [
            [
                "7853cd0daa9627b0"
            ]
        ]
    },
    {
        "id": "91d8b515cbabfd59",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "INIT",
        "func": "let logmsg = global.get(\"logmsg\");\n\nif(!logmsg) {\n    \n    logmsg = {}\n    logmsg.type = \"db\"\n    logmsg.taskType = \"elaboration\"\n    logmsg.taskId = Math.floor(Math.random() * 1000001);\n    logmsg.message = \"staging leagues\"\n    logmsg.taskRunning = true\n}\n\n\nlogmsg.message = \"staging leagues\"\nflow.set(\"logmsg\",logmsg)\n\nmsg.payload = logmsg;\n    \n\n\nnode.log(logmsg)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 220,
        "wires": [
            [
                "3ce3606cfb635418"
            ]
        ]
    },
    {
        "id": "365b3f0a1cdbe6e7",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "INIT",
        "func": "let logmsg = global.get(\"logmsg\");\n\nif(!logmsg) {\n    \n    logmsg = {}\n    logmsg.type = \"db\"\n    logmsg.taskType = \"elaboration\"\n    logmsg.taskId = Math.floor(Math.random() * 1000001);\n    logmsg.message = \"staging clubs\"\n    logmsg.taskRunning = true\n}\n\n\nlogmsg.message = \"staging clubs\"\nflow.set(\"logmsg\",logmsg)\n\nmsg.payload = logmsg;\n    \n\n\nnode.log(logmsg)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 360,
        "wires": [
            [
                "8de741c736f22de1"
            ]
        ]
    },
    {
        "id": "4be3adb22d5213eb",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "INIT",
        "func": "let logmsg = global.get(\"logmsg\");\n\nif(!logmsg) {\n    \n    logmsg = {}\n    logmsg.type = \"db\"\n    logmsg.taskType = \"elaboration\"\n    logmsg.taskId = Math.floor(Math.random() * 1000001);\n    logmsg.message = \"staging player\"\n    logmsg.taskRunning = true\n}\n\n\nlogmsg.message = \"staging player\"\nflow.set(\"logmsg\",logmsg)\n\nmsg.payload = logmsg;\n    \n\n\nnode.log(logmsg)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 600,
        "wires": [
            [
                "6a43ce58c436f909"
            ]
        ]
    },
    {
        "id": "9693fa50826002b9",
        "type": "inject",
        "z": "da3f380d47320561",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 1100,
        "wires": [
            [
                "bdbcbfca97cc83aa"
            ]
        ]
    },
    {
        "id": "5062d40f59a4b439",
        "type": "debug",
        "z": "da3f380d47320561",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "error",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2240,
        "y": 320,
        "wires": []
    },
    {
        "id": "dbf4dbb1a49e310d",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Retrieve and Parse Borrowed Players",
        "func": "try {\n    \n    flow.get(\"logmsg\").message = \"Staging Borrowed Players Begins\";\n    node.log(flow.get(\"logmsg\"))\n    \n    let TheFootballTree = global.get(\"TheLatestFooballTree\");\n\n\n    let BorrowedPlayers = [];\n   \n\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        \n    \n        TheFootballTree[leagueId].Clubs.forEach( club => { \n           \n            if (club.BorrowedPlayers && club.BorrowedPlayers.length > 0) {\n                \n                club.BorrowedPlayers.forEach( p => {\n                    \n                    let cb = {\n                        clubId : club.clubId,\n                        playerId : p.playerId,\n                        from : p.masterClubId,\n                        week : club.week,\n                        year :club.year\n                    }\n                    \n                    BorrowedPlayers.push(cb)\n                })\n                \n            }\n        \n        })   \n        \n        \n       \n      \n        //Leagues.push(TheFootballTree[leagueId])\n       \n    })\n    \n   let load = BorrowedPlayers //JSON.parse(JSON.stringify(Clubs));\n    // let load = JSON.parse(JSON.stringify(flow.get(\"Leagues\")));\n\n    flow.get(\"logmsg\").message = \"#BorrowedPlayers to be saved: \"+load.length\n    node.log(flow.get(\"logmsg\"))\n    msg.payload=load\n    \n    return msg\n\n}\ncatch (e) {\n    \n    console.log(e)\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2330,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "73403368ec314230",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Salva Borrowed Players",
        "func": "console.log(\"Building query for BorrowedPlayers\")\n    \nlet BorrowedPlayers = flow.get(\"BorrowedPlayersArray\")\nlet elaborationNum = global.get(\"elaborationNum\") || 0\nconsole.log(\"BorrowedPlayers count: \" + (BorrowedPlayers ? BorrowedPlayers.length : 0))\nconsole.log(BorrowedPlayers)\n// Inizializza direttamente msg.topic con la prima parte della query\nmsg.topic = \"INSERT INTO latestclubborrowed_staging (`clubId`,`playerId`,`from`,`week`,`year`,`elaborationNum`) VALUES \";\n\nconsole.log(\"Cycle clubs starts\")\n// Prima iterazione speciale per evitare la virgola iniziale\nif (BorrowedPlayers.length > 0) {\n    const bp = BorrowedPlayers[0];\n    msg.topic += \"('\" + bp.currentClubId + \"',\" +\n                \"'\" + bp.playerId + \"',\" +\n                \"'\" + bp.from + \"',\" +\n                bp.week + \",\" +\n                bp.year + \",\" +\n                elaborationNum + \")\";\n                \n    // Aggiungi il resto degli elementi\n    for (let i = 1; i < BorrowedPlayers.length; i++) {\n        const bp = BorrowedPlayers[i];\n        msg.topic += \",('\" + bp.currentClubId + \"',\" +\n                    \"'\" + bp.playerId + \"',\" +\n                    \"'\" + bp.masterClubId + \"',\" +\n                    bp.week + \",\" +\n                    bp.year + \",\" +\n                    elaborationNum + \")\";\n    }\n}\n\nconsole.log(\"Cycle BorrowedPlayers ends - query length: \" + msg.topic.length);\nconsole.log(msg.topic)\nreturn msg;\n\n//console.log(msg.topic)\n \n \n    //let ind= msg.parts.index+1\n    //console.log(\"Building query for part \"+ ind+ \"/\" + msg.parts.count)\n   /* console.log(\"Building query for BorrowedPlayers\")\n    \nlet BorrowedPlayers = flow.get(\"BorrowedPlayersArray\")//msg.payload;\nlet elaborationNum = global.get(\"elaborationNum\") || 0\n\nconsole.log(\"BorrowedPlayers\")\nconsole.log(BorrowedPlayers)\n\nlet q = \"INSERT INTO latestclubborrowed_staging ( \";\n                            q=q+\"`clubId`,\"\n                            q=q+\"`playerId`,\"\n                            q=q+\"`from`,\"\n                            q=q+\"`week`,\"\n                            q=q+\"`year`,\"\n                            q=q+\"`elaborationNum`\"\n                            q=q+\") values \";\n\nlet values = \"\";\nlet value = \"\";    \n\n\n\n    console.log(\"Cycle clubs starts\")\n\n    BorrowedPlayers.map( bp => { \n        \n \n            value = values == \"\" ? \"('\" : \",('\";\n        \n         \n        \n            value =     value \n                       +bp.clubId+\"','\"\n                        +bp.playerId+\"','\"\n                        +bp.from+\"',\"\n                        +bp.week+\",\"\n                        +bp.year+\",\"\n                    +elaborationNum\n                        \n            value = value + \")\"            \n            \n            values = values + value;\n\n        \n        \n    })\n\n    console.log(\"Cycle BorrowedPLayers ends\")\n\n\nmsg.topic = q+values;\nreturn msg;\n\n\n//console.log(msg.topic)\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 440,
        "wires": [
            [
                "822056652b887c06"
            ]
        ]
    },
    {
        "id": "822056652b887c06",
        "type": "mysql",
        "z": "da3f380d47320561",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 820,
        "y": 440,
        "wires": [
            [
                "5a800fe90952b954"
            ]
        ]
    },
    {
        "id": "5a800fe90952b954",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Count",
        "func": "/*let ind= msg.parts.index+1\nconsole.log(\"CLUBS SAVING \"+ ind+ \"/\" + msg.parts.count)\nflow.get(\"logmsg\").message = \"#Clubs saving part : \"+ ind+ \"/\" + msg.parts.count\n    node.log(flow.get(\"logmsg\"))\n\nif (msg.parts.index == msg.parts.count -1 )  {\n    console.log(\"CLUBS SAVING COMPLETED\" ) \n    flow.get(\"logmsg\").message = \"#Clubs saving completed\";\n    node.log(flow.get(\"logmsg\"))\n    return msg;\n}\n\nif (msg.error && msg.error.message) {\n    console.log(msg.error.message)\n}\n*/\n\nflow.get(\"logmsg\").message = \"Borrowed Players Saved\";\nnode.log(flow.get(\"logmsg\"))\n\n    console.log(\"BORROWED PLAYERS SAVING COMPLETED\" ) \nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 440,
        "wires": [
            [
                "306a4b594f9fe592"
            ]
        ]
    },
    {
        "id": "382e21b5ae267ff5",
        "type": "link in",
        "z": "da3f380d47320561",
        "name": "STAGEBORROWEDPLAYERS",
        "links": [],
        "x": 205,
        "y": 440,
        "wires": [
            [
                "8b16034f79d124ea"
            ]
        ]
    },
    {
        "id": "91c4aa79194f536e",
        "type": "link out",
        "z": "da3f380d47320561",
        "name": "STAGEBORROWEDPLAYERSOUT",
        "mode": "return",
        "links": [],
        "x": 1315,
        "y": 440,
        "wires": []
    },
    {
        "id": "8b16034f79d124ea",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "INIT",
        "func": "let logmsg = global.get(\"logmsg\");\n\nif(!logmsg) {\n    \n    logmsg = {}\n    logmsg.type = \"db\"\n    logmsg.taskType = \"elaboration\"\n    logmsg.taskId = Math.floor(Math.random() * 1000001);\n    logmsg.message = \"staging borrowed players\"\n    logmsg.taskRunning = true\n}\n\n\nlogmsg.message = \"staging borrowed players\"\nflow.set(\"logmsg\",logmsg)\n\nmsg.payload = logmsg;\n    \n\n\nnode.log(logmsg)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 440,
        "wires": [
            [
                "73403368ec314230"
            ]
        ]
    },
    {
        "id": "dde4db87174f642a",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Retrieve and Parse Loaned Players",
        "func": "try {\n    \n    flow.get(\"logmsg\").message = \"Staging Loaned  Players Begins\";\n    node.log(flow.get(\"logmsg\"))\n    \n    let TheFootballTree = global.get(\"TheLatestFooballTree\");\n\n\n    let LoanedPlayers = [];\n   \n\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        \n    \n        TheFootballTree[leagueId].Clubs.forEach( club => { \n           \n            if (club.LoanedPlayers && club.LoanedPlayers.length > 0) {\n                \n                club.LoanedPlayers.forEach( p => {\n                    \n                    let cb = {\n                        clubId : club.clubId,\n                        playerId : p.playerId,\n                        to : p.currentClubId,\n                        week : club.week,\n                        year :club.year\n                    }\n                    \n                    LoanedPlayers.push(cb)\n                })\n                \n            }\n        \n        })   \n        \n        \n       \n      \n        //Leagues.push(TheFootballTree[leagueId])\n       \n    })\n    \n   let load = LoanedPlayers //JSON.parse(JSON.stringify(Clubs));\n    // let load = JSON.parse(JSON.stringify(flow.get(\"Leagues\")));\n\n    flow.get(\"logmsg\").message = \"#Loaned Players to be saved: \"+load.length\n    node.log(flow.get(\"logmsg\"))\n    msg.payload=load\n    \n    return msg\n\n}\ncatch (e) {\n    \n    console.log(e)\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2320,
        "y": 500,
        "wires": [
            []
        ]
    },
    {
        "id": "8facf4a7b4c85b1b",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Salva Loaned Players",
        "func": "console.log(\"Building query for LoanedPlayers\")\n    \nlet LoanedPlayers = flow.get(\"LoanedPlayersArray\")//msg.payload;\nlet elaborationNum = global.get(\"elaborationNum\") || 0\nconsole.log(\"LoanedPlayers count: \" + (LoanedPlayers ? LoanedPlayers.length : 0))\n\n// Inizializza direttamente msg.topic con la query base\nmsg.topic = \"INSERT INTO latestclubloaned_staging (`clubId`,`playerId`,`to`,`week`,`year`,`elaborationNum`) VALUES \";\n\nconsole.log(\"Cycle clubs starts\")\n\n// Gestisci il caso di un array vuoto\nif (LoanedPlayers.length > 0) {\n    // Prima iterazione speciale per evitare la virgola iniziale\n    const bp = LoanedPlayers[0];\n    msg.topic += \"('\" + bp.masterClubId + \"','\" +\n                bp.playerId + \"','\" +\n                bp.currentClubId + \"',\" +\n                bp.week + \",\" +\n                bp.year + \",\" +\n                elaborationNum + \")\";\n                \n    // Aggiungi il resto degli elementi\n    for (let i = 1; i < LoanedPlayers.length; i++) {\n        const bp = LoanedPlayers[i];\n        msg.topic += \",('\" + bp.masterClubId + \"','\" +\n                    bp.playerId + \"','\" +\n                    bp.currentClubId + \"',\" +\n                    bp.week + \",\" +\n                    bp.year + \",\" +\n                    elaborationNum + \")\";\n    }\n}\n\nconsole.log(\"Cycle LoanedPlayers ends - query length: \" + msg.topic.length);\nreturn msg;\n\n/*\n    //let ind= msg.parts.index+1\n    //console.log(\"Building query for part \"+ ind+ \"/\" + msg.parts.count)\n    console.log(\"Building query for LoanedPlayers\")\n    \nlet LoanedPlayers = flow.get(\"LoanedPlayersArray\")//msg.payload;\nlet elaborationNum = global.get(\"elaborationNum\") || 0\n\n\n\nlet q = \"INSERT INTO latestclubloaned_staging ( \";\n                            q=q+\"`clubId`,\"\n                            q=q+\"`playerId`,\"\n                            q=q+\"`to`,\"\n                            q=q+\"`week`,\"\n                            q=q+\"`year`,\"\n                            q=q+\"`elaborationNum`\"\n                            q=q+\") values \";\n\nlet values = \"\";\nlet value = \"\";    \n\n\n\n    console.log(\"Cycle clubs starts\")\n\n    LoanedPlayers.map( bp => { \n        \n \n            value = values == \"\" ? \"('\" : \",('\";\n        \n         \n        \n            value =     value \n                       +bp.clubId+\"','\"\n                        +bp.playerId+\"','\"\n                        +bp.to+\"',\"\n                        +bp.week+\",\"\n                        +bp.year+\",\"\n                    +elaborationNum\n                        \n            value = value + \")\"            \n            \n            values = values + value;\n\n        \n        \n    })\n\n    console.log(\"Cycle LoanedPlayers ends\")\n\n\nmsg.topic = q+values;\nreturn msg;\n\n\n//console.log(msg.topic)\n*/",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 520,
        "wires": [
            [
                "a26ae4b8fcb51810"
            ]
        ]
    },
    {
        "id": "a26ae4b8fcb51810",
        "type": "mysql",
        "z": "da3f380d47320561",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 820,
        "y": 520,
        "wires": [
            [
                "4c0faffdb8ebf1c1"
            ]
        ]
    },
    {
        "id": "4c0faffdb8ebf1c1",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Count",
        "func": "/*let ind= msg.parts.index+1\nconsole.log(\"CLUBS SAVING \"+ ind+ \"/\" + msg.parts.count)\nflow.get(\"logmsg\").message = \"#Clubs saving part : \"+ ind+ \"/\" + msg.parts.count\n    node.log(flow.get(\"logmsg\"))\n\nif (msg.parts.index == msg.parts.count -1 )  {\n    console.log(\"CLUBS SAVING COMPLETED\" ) \n    flow.get(\"logmsg\").message = \"#Clubs saving completed\";\n    node.log(flow.get(\"logmsg\"))\n    return msg;\n}\n\nif (msg.error && msg.error.message) {\n    console.log(msg.error.message)\n}\n*/\n\nflow.get(\"logmsg\").message = \"Loaned  Players Saved\";\nnode.log(flow.get(\"logmsg\"))\n\n    console.log(\"LOANED PLAYERS SAVING COMPLETED\" ) \nreturn msg",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 520,
        "wires": [
            [
                "feff25913585c193"
            ]
        ]
    },
    {
        "id": "bf36f7fc190cacac",
        "type": "link in",
        "z": "da3f380d47320561",
        "name": "STAGELOANEDPLAYERS",
        "links": [],
        "x": 205,
        "y": 520,
        "wires": [
            [
                "12f93a5c8f22a903"
            ]
        ]
    },
    {
        "id": "90ead9b9efceb558",
        "type": "link out",
        "z": "da3f380d47320561",
        "name": "STAGELOANEDPLAYERSOUT",
        "mode": "return",
        "links": [],
        "x": 1315,
        "y": 520,
        "wires": []
    },
    {
        "id": "12f93a5c8f22a903",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "INIT",
        "func": "let logmsg = global.get(\"logmsg\");\n\nif(!logmsg) {\n    \n    logmsg = {}\n    logmsg.type = \"db\"\n    logmsg.taskType = \"elaboration\"\n    logmsg.taskId = Math.floor(Math.random() * 1000001);\n    logmsg.message = \"staging Loaned  players\"\n    logmsg.taskRunning = true\n}\n\n\nlogmsg.message = \"staging Loaned  players\"\nflow.set(\"logmsg\",logmsg)\n\nmsg.payload = logmsg;\n    \n\n\nnode.log(logmsg)\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 520,
        "wires": [
            [
                "8facf4a7b4c85b1b"
            ]
        ]
    },
    {
        "id": "d66932b3f69dfa99",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Array Popper",
        "func": "\nif(flow.get(\"clubarray\").length > 0 ) {\n    \n    let cArr = [];\n    cArr[0] = flow.get(\"clubarray\").pop(); \n    \n    msg.payload = cArr\n    console.log(\"saving \"+cArr[0].name+\" - \"+cArr[0].clubId)\n    msg.exit = false;\n    return msg;\n} else {\n    \n    msg.exit = true;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2250,
        "y": 380,
        "wires": [
            [
                "3c1167ad23d6d68c"
            ]
        ]
    },
    {
        "id": "3c1167ad23d6d68c",
        "type": "switch",
        "z": "da3f380d47320561",
        "name": "",
        "property": "exit",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2410,
        "y": 380,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "fa68aafecc3468b2",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "",
        "func": "\nlet playerId = msg.payload.playerId;\n\nlet topic = \"SELECT playerId, potentialPrice,expectedPrice,elaborationNum,  week, year from latestplayers_archive where playerId = '\"+playerId+\"' and elaborationNum in (select max(elaborationNum) from latestplayers_archive GROUP BY year, week) order by elaborationNum asc;\"\n\nmsg.topic=topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 940,
        "wires": [
            [
                "ad7f835988297884"
            ]
        ]
    },
    {
        "id": "50184f6f092d6be2",
        "type": "mysql",
        "z": "da3f380d47320561",
        "mydb": "14f41b2b.4deca5",
        "name": "STAGE",
        "x": 160,
        "y": 940,
        "wires": [
            [
                "46808e673557452a"
            ]
        ]
    },
    {
        "id": "f80ec9af66a37c10",
        "type": "split",
        "z": "da3f380d47320561",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": "1",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 470,
        "y": 940,
        "wires": [
            [
                "d1c62b71b290da01"
            ]
        ]
    },
    {
        "id": "d1c62b71b290da01",
        "type": "delay",
        "z": "da3f380d47320561",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "5",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 630,
        "y": 940,
        "wires": [
            [
                "fa68aafecc3468b2"
            ]
        ]
    },
    {
        "id": "ad7f835988297884",
        "type": "mysql",
        "z": "da3f380d47320561",
        "mydb": "ea1e5103bb9e91ad",
        "name": "PRODUZIONE",
        "x": 980,
        "y": 940,
        "wires": [
            [
                "b82ce7aef3640b54"
            ]
        ]
    },
    {
        "id": "b82ce7aef3640b54",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "",
        "func": "\nlet playerData = msg.payload;\n\n\nplayerData.forEach(p => {\n    \n    let index = playerData.indexOf(p);\n    \n    let playerSet = playerData.slice(index-3, index+1);\n    \n    p.avgPotentialPrice = playerSet.reduce((acc, p) => acc+p.potentialPrice, 0) / 4;\n    p.avgExpectedPrice = playerSet.reduce((acc, p) => acc+p.expectedPrice, 0) / 4;\n\n    \n    \n})\n\n\n\n\n\n\n\n\n\nmsg.payload=playerData\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 940,
        "wires": [
            [
                "c53350b51e88642a"
            ]
        ]
    },
    {
        "id": "c53350b51e88642a",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "",
        "func": "\nconst table =  \"latestplayers_feedbackvalues\"\nconst clause = \" ON DUPLICATE KEY UPDATE `id`=\"\n\nmsg.topic=\"\";\n\n\nlet data = msg.payload;\n\ndata.forEach( obj =>{\n    \n    let topic = \"INSERT INTO \"+table+\" ( \"\n    let values = \"VALUES ( \" \n    \n     Object.keys(obj).forEach( k => {\n    \n        topic = topic + \"`\"+k + \"`,\"\n        \n        let value;\n        \n        if (typeof obj[k] === \"string\" ) {\n            \n            let s = obj[k].replace(/'/g, \"'\"+\"'\")\n            value = '\"'+s+'\"'\n            \n        } \n        \n        else if ( typeof obj[k] === \"object\") {\n            \n            value = \"null\";\n        }\n        \n        else {\n            value = obj[k]\n        }\n        \n        values = values + value + \",\"\n        \n        console.log(k ,  typeof obj[k])\n    } ) \n    \n    // Aggiorniamo TOPIC:\n   \n     if(msg.additionalField!==undefined) {\n         \n         topic = topic +\"`\"+msg.additionalField.field + \"`,\"\n     }\n     topic = topic.slice(0,-1) //rimuoviamo la virgola finale\n    \n    topic = topic + \")\"\n    values = values.slice(0,-1) //rimuoviamo la virgola finale\n    \n    //Aggiungiamo da msg se presente\n    \n    if(msg.additionalField!==undefined) {\n        \n        let value;\n        \n        if (msg.additionalField.value === \"string\" ) {\n            \n            let s = msg.additionalField.value.replace(/'/g, \"'\"+\"'\")\n            value = '\"'+s+'\"'\n            \n        } \n        \n        else if ( msg.additionalField.value === \"object\") {\n            \n            value = \"null\";\n        }\n        \n        else {\n            value = msg.additionalField.value\n        }\n        \n        \n        values = values + \",\"+ value\n    } \n    \n    values = values + \")\"\n    \n    //msg.topic = msg.topic + topic + values + clause+obj['id']+\";\"\n        msg.topic = msg.topic + topic + values +\";\"\n\n    \n})\n\n\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1320,
        "y": 940,
        "wires": [
            [
                "3f9052072652f623"
            ]
        ]
    },
    {
        "id": "3f9052072652f623",
        "type": "mysql",
        "z": "da3f380d47320561",
        "mydb": "14f41b2b.4deca5",
        "name": "STAGE",
        "x": 1480,
        "y": 940,
        "wires": [
            []
        ]
    },
    {
        "id": "46808e673557452a",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "",
        "func": "\nmsg.payload = msg.payload[0];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 940,
        "wires": [
            [
                "f80ec9af66a37c10"
            ]
        ]
    },
    {
        "id": "edd0cd415d048e0a",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Salva Giocatori by Claude",
        "func": "let logmsg = flow.get(\"logmsg\");\n\nif(!logmsg) {\n    logmsg = {}\n    logmsg.type = \"db\"\n    logmsg.taskType = \"elaboration\"\n    logmsg.taskId = Math.floor(Math.random() * 1000001);\n    logmsg.message = \"staging player\"\n    logmsg.taskRunning = true\n}\n\nlogmsg.message = \"inizio ciclo scrittura query \";\nflow.set(\"logmsg\",logmsg)\nnode.log(logmsg)\n\ntry {\n    console.log(\"Building query for players\")\n\n    let q = \"INSERT INTO latestplayers_staging ( \";\n    q=q+\"`playerId`,\"\n    q=q+\"`firstName`,\"\n    q=q+\"`lastName`,\"\n    q=q+\"`shortFirstName`,\"\n    q=q+\"`shortLastName`,\"\n    q=q+\"`knownName`,\"\n    q=q+\"`fullName`,\"\n    q=q+\"`name`,\"\n    q=q+\"`birthDate`,\"\n    q=q+\"`age`,\"\n    q=q+\"`months`,\"\n    q=q+\"`currentPosition`,\"\n    q=q+\"`currentRole`,\"\n    q=q+\"`currentRole2`,\"\n    q=q+\"`currentClubId`,\"\n    q=q+\"`currentClubName`,\"\n    q=q+\"`currentClubShortName`,\"\n    q=q+\"`currentClubCluster`,\"\n    q=q+\"`currentLeagueId`,\"\n    q=q+\"`currentLeagueName`,\"\n    q=q+\"`currentLeagueCluster`,\"\n    q=q+\"`currentLeagueWeight`,\"\n    q=q+\"`currentLeagueTaxRate`,\"\n    q=q+\"`masterClubId`,\"\n    q=q+\"`masterClubName`,\"\n    q=q+\"`masterClubShortName`,\"\n    q=q+\"`masterClubStartContract`,\"\n    q=q+\"`masterClubEndContract`,\"\n    q=q+\"`remainingYearsOfMasterClubContract`,\"\n    q=q+\"`remainingMonthsOfMasterClubContract`,\"\n    q=q+\"`totalYearsOfMasterClubContract`,\"\n    q=q+\"`totalMonthsOfMasterClubContract`,\"\n    q=q+\"`latestRoleGroup`,\"\n    q=q+\"`latestRoleWeight`,\"\n    q=q+\"`nationalTeamPlayer`,\"\n    q=q+\"`superstar`,\"\n    q=q+\"`risingStar`,\"\n    q=q+\"`emerging`,\"\n    q=q+\"`alert`,\"\n    q=q+\"`macroAlert`,\"\n    q=q+\"`absind`,\"\n    q=q+\"`performance`,\"\n    q=q+\"`fatmol`,\"\n    q=q+\"`effectiveness`,\"\n    q=q+\"`maturity`,\"\n    q=q+\"`weightInClub`,\"\n    q=q+\"`latestUniqueness`,\"\n    q=q+\"`latestMicroVolatility`,\"\n    q=q+\"`latestMacroVolatility`,\"\n    q=q+\"`contractType`,\"\n    q=q+\"`startContract`,\"\n    q=q+\"`endContract`,\"\n    q=q+\"`totalYearsOfContract`,\"\n    q=q+\"`remainingYearsOfContract`,\"\n    q=q+\"`transferPrice`,\"\n    q=q+\"`transferPriceYear`,\"\n    q=q+\"`salaryNet`,\"\n    q=q+\"`salaryGross`,\"\n    q=q+\"`salaryOptimal`,\"\n    q=q+\"`salaryPotential`,\"\n    q=q+\"`salaryAbsoluteDeviation`,\"\n    q=q+\"`salaryPercDeviation`,\"\n    q=q+\"`latestDetectedLeagueCluster`,\"\n    q=q+\"`latestDetectedLeagueWeight`,\"\n    q=q+\"`latestDetectedRoleGroup`,\"\n    q=q+\"`latestDetectedRoleWeight`,\"\n    q=q+\"`benefits`,\"\n    q=q+\"`costs`,\"\n    q=q+\"`optval`,\"\n    q=q+\"`residualValue`,\"\n    q=q+\"`residualBookValue`,\"\n    q=q+\"`optimalCosts`,\"\n    q=q+\"`van`,\"\n    q=q+\"`valNoVan`,\"\n    q=q+\"`potentialPrice`,\"\n    q=q+\"`expectedPrice`,\"\n    q=q+\"`perceivedExpectedPrice`,\"\n    q=q+\"`currentPotentialPrice`,\"\n    q=q+\"`capitalGain`,\"\n    q=q+\"`profit`,\"\n    q=q+\"`deviation`,\"\n    q=q+\"`remainingMonthsOfContract`,\"\n    q=q+\"`totalMonthsOfContract`,\"\n    q=q+\"`potentialYearsOfContract`,\"\n    q=q+\"`expectedYearsOfContract`,\"\n    q=q+\"`benefitsPotential`,\"\n    q=q+\"`costsPotential`,\"\n    q=q+\"`optvalPotential`,\"\n    q=q+\"`avgTransferPrice`,\"\n    q=q+\"`roleClusterAvgPerformance`,\"\n    q=q+\"`minutes`,\"\n    q=q+\"`minutesShare`,\"\n    q=q+\"`avgMicroIndex`,\"\n    q=q+\"`avgMacroIndex`,\"\n    q=q+\"`avgPlayedMinuteShare`,\"\n    q=q+\"`expectedClubCluster`,\"\n    q=q+\"`weightInExpectedClubCluster`,\"\n    q=q+\"`latestLeagueCluster`,\"\n    q=q+\"`partialEmerging`,\"\n    q=q+\"`partialRisingStar`,\"\n    q=q+\"`tentativePartialEmerging`,\"\n    q=q+\"`tentativePartialRisingStar`,\"\n    q=q+\"`perfRatio`,\"\n    q=q+\"`ageWithDecimals`,\"\n    q=q+\"`PM`,\"\n    q=q+\"`RY`,\"\n    q=q+\"`RP`,\"\n    q=q+\"`wVANVNV_CL`,\"\n    q=q+\"`maxEMediePesate`,\"\n    q=q+\"`currentLeagueNameExtended`,\"\n    q=q+\"`currentLeagueCountry`,\"\n    q=q+\"`currentLeagueCountryCode`,\"\n    q=q+\"`withdrawalClause`,\"\n    q=q+\"`percTransfPrice`,\"\n    q=q+\"`nationality`,\"\n    q=q+\"`nationality2`,\"\n    q=q+\"`nationalityCode`,\"\n    q=q+\"`nationality2Code`,\"\n    q=q+\"`masterLeagueId`,\"\n    q=q+\"`masterLeagueName`,\"\n    q=q+\"`latestRoleRis`,\"\n    q=q+\"`rankByPerformance`,\"\n    q=q+\"`rankByEffectiveness`,\"\n    q=q+\"`rankByValue`,\"\n    q=q+\"`absClubAvgSalaryDeviation`,\"\n    q=q+\"`percClubAvgSalaryDeviation`,\"\n    q=q+\"`absLeagueAvgSalaryDeviation`,\"\n    q=q+\"`percLeagueAvgSalaryDeviation`,\"\n    q=q+\"`absClubCusterAvgSalaryDeviation`,\"\n    q=q+\"`percClubClusterAvgSalaryDeviation`,\"\n    q=q+\"`revenueContributionIndex`,\"\n    q=q+\"`costPerMinute`,\"\n    q=q+\"`scoringContributionIndex`,\"\n    q=q+\"`clubRelativePlayerPerformance`,\"\n    q=q+\"`leagueRelativePlayerPerformance`,\"\n    q=q+\"`annualCost`,\"\n    q=q+\"`contributionIndexPerc`,\" \n    q=q+\"`tmValue`,\"\n    q=q+\"`consumerValue`,\"\n    q=q+\"`consumerResidualValue`,\"\n    q=q+\"`consumerExpectedSalary`,\"\n    q=q+\"`consumerExpectedSalaryAbsoluteDeviation`,\"\n    q=q+\"`consumerExpectedSalaryPercDeviation`,\"\n    q=q+\"`rankByConsumerValue`,\"\n    q=q+\"`annualBookValue`,\"\n    q=q+\"`costImpactOnRevenues`,\"\n    q=q+\"`costImpactOnCosts`,\"\n    q=q+\"`salaryImpactOnSalaries`,\"\n    q=q+\"`height`,\"\n    q=q+\"`foot`,\"\n    q=q+\"`highestPrice`,\"\n    q=q+\"`agent`,\"\n    q=q+\"`instagram`,\"\n    q=q+\"`sponsor`,\"\n    q=q+\"`number`,\"\n    q=q+\"`minutesLastSeason`,\"\n    q=q+\"`goal`,\"\n    q=q+\"`assist`,\"\n    q=q+\"`preassist`,\"\n    q=q+\"`latestMicroIndexInjury`,\"\n    q=q+\"`latestMacroIndexInjury`,\"\n    q=q+\"`week`,\"\n    q=q+\"`year`,\"\n    q=q+\"`elaborationNum`,\"\n    q=q+\"`currentClubRank`,\"\n    q=q+\"`expectedClubRank`,\"\n    q=q+\"`bvResContractRatio`,\"\n    q=q+\"`experience`,\"\n    q=q+\"`currentAvgMicroIndex`,\"\nq=q+\"`currentAvgMacroIndex`,\"\nq=q+\"`slug`\"\n    q=q+\") values \";\n\n    let values = \"\";\n    let count = 0;\n\n    // Helper function to safely handle values that might be undefined or null\n    const safeValue = (value, defaultValue = null) => {\n        if (value === undefined || value === 'undefined' || value === null) {\n            return defaultValue;\n        }\n        return value;\n    };\n\n    // Helper function to safely handle numeric values\n    const safeNumeric = (value) => {\n        if (value === undefined || value === 'undefined' || value === null) {\n            return \"NULL\";\n        }\n        return value;\n    };\n\n    // Helper function to safely handle string values\n    const safeString = (value) => {\n        if (value === undefined || value === 'undefined' || value === null) {\n            return \"\";\n        }\n        return value.replace(/'/g, \"''\");\n    };\n\n    // Helper function to safely handle date values\n    const safeDate = (dateStr) => {\n        if (!dateStr || dateStr === 'undefined' || dateStr === undefined) {\n            return \"NULL\";\n        }\n        try {\n            // Extract the date portion (YYYY-MM-DD)\n            const datePart = dateStr.slice(0, 10);\n            return \"STR_TO_DATE('\" + datePart + \"','%Y-%m-%d')\";\n        } catch (e) {\n            console.log(\"Invalid date:\", dateStr, e);\n            return \"NULL\";\n        }\n    };\n\n    const slugify = function(player) {\n        let str = \"\";\n        \n        if (player.shortFirstName && player.shortLastName) {\n            str = safeString(player.shortFirstName) + \" \" + safeString(player.shortLastName) + \" \" + \n                  (player.birthDate ? player.birthDate.slice(0, 10) : \"\");\n        } else {\n            str = safeString(player.firstName) + \" \" + safeString(player.lastName) + \" \" + \n                  (player.birthDate ? player.birthDate.slice(0, 10) : \"\");\n        }\n        \n        return String(str)\n            .normalize('NFKD')\n            .replace(/[\\u0300-\\u036f]/g, '')\n            .trim()\n            .toLowerCase()\n            .replace(/[^a-z0-9 -]/g, '')\n            .replace(/\\s+/g, '-')\n            .replace(/-+/g, '-');\n    };\n\n    let elaborationNum = global.get(\"elaborationNum\") || 0;\n\n    flow.get(\"PlayersArrayChunks\").forEach(batch => {\n        let Players = batch;\n        Players.forEach(player => {\n            // Pre-process the player object to replace all undefined values with null\n            Object.keys(player).forEach(key => {\n                player[key] = player[key] === undefined ? null : player[key];\n            });\n\n            try {\n                let value = values === \"\" ? \"(\" : \",(\";\n                \n                // Build the value string with safe handling of null/undefined values\n                value = value \n                    + \"'\" + safeString(player.playerId) + \"',\" \n                    + \"'\" + safeString(player.firstName) + \"',\"\n                    + \"'\" + safeString(player.lastName) + \"',\"\n                    + \"'\" + safeString(player.shortFirstName) + \"',\"\n                    + \"'\" + safeString(player.shortLastName) + \"',\"\n                    + \"'\" + safeString(player.knownName) + \"',\"\n                    + \"'\" + safeString(player.fullName) + \"',\"\n                    + \"'\" + safeString(player.name) + \"',\"\n                    + safeDate(player.birthDate) + \",\"\n                    + safeNumeric(player.age) + \",\"\n                    + safeNumeric(player.months) + \",\"\n                    + \"'\" + safeString(player.currentPosition) + \"',\"\n                    + \"'\" + safeString(player.currentRole) + \"',\"\n                    + \"'\" + safeString(player.currentRole2) + \"',\"\n                    + \"'\" + safeString(player.currentClubId) + \"',\"\n                    + \"'\" + safeString(player.currentClubName) + \"',\"\n                    + \"'\" + safeString(player.currentClubShortName) + \"',\"\n                    + safeNumeric(player.currentClubCluster) + \",\"\n                    + \"'\" + safeString(player.currentLeagueId) + \"',\"\n                    + \"'\" + safeString(player.currentLeagueName) + \"',\"\n                    + safeNumeric(player.currentLeagueCluster) + \",\"\n                    + safeNumeric(player.currentLeagueWeight) + \",\"\n                    + safeNumeric(player.currentLeagueTaxRate) + \",\"\n                    + \"'\" + safeString(player.masterClubId) + \"',\"\n                    + \"'\" + safeString(player.masterClubName) + \"',\"\n                    + \"'\" + safeString(player.masterClubShortName) + \"',\"\n                    + safeDate(player.masterClubStartContract) + \",\"\n                    + safeDate(player.masterClubEndContract) + \",\"\n                    + safeNumeric(player.remainingYearsOfMasterClubContract) + \",\"\n                    + safeNumeric(player.remainingMonthsOfMasterClubContract) + \",\"\n                    + safeNumeric(player.totalYearsOfMasterClubContract) + \",\"\n                    + safeNumeric(player.totalMonthsOfMasterClubContract) + \",\"\n                    + safeNumeric(player.latestRoleGroup) + \",\"\n                    + safeNumeric(player.latestRoleWeight) + \",\"\n                    + safeNumeric(player.nationalTeamPlayer) + \",\"\n                    + safeNumeric(player.superstar || player.superStar) + \",\"  // Handle both field names\n                    + safeNumeric(player.risingStar) + \",\"\n                    + safeNumeric(player.emerging) + \",\"\n                    + safeNumeric(player.alert) + \",\"\n                    + safeNumeric(player.macroAlert) + \",\"\n                    + safeNumeric(player.absind) + \",\"\n                    + safeNumeric(player.performance) + \",\"\n                    + safeNumeric(player.fatmol) + \",\"\n                    + safeNumeric(player.effectiveness) + \",\"\n                    + safeNumeric(player.maturity) + \",\"\n                    + safeNumeric(player.weightInClub) + \",\"\n                    + safeNumeric(player.latestUniqueness) + \",\"\n                    + safeNumeric(player.latestMicroVolatility) + \",\"\n                    + safeNumeric(player.latestMacroVolatility) + \",\"\n                    + \"'\" + safeString(player.contractType) + \"',\"\n                    + safeDate(player.startContract) + \",\"\n                    + safeDate(player.endContract) + \",\"\n                    + safeNumeric(player.totalYearsOfContract) + \",\"\n                    + safeNumeric(player.remainingYearsOfContract) + \",\"\n                    + safeNumeric(player.transferPrice) + \",\"\n                    + safeNumeric(player.transferPriceYear) + \",\"\n                    + safeNumeric(player.salaryNet) + \",\"\n                    + safeNumeric(player.salaryGross) + \",\"\n                    + safeNumeric(player.salaryOptimal) + \",\"\n                    + safeNumeric(player.salaryPotential) + \",\"\n                    + safeNumeric(player.salaryAbsoluteDeviation) + \",\"\n                    + safeNumeric(player.salaryPercDeviation) + \",\"\n                    + safeNumeric(player.latestDetectedLeagueCluster) + \",\"\n                    + safeNumeric(player.latestDetectedLeagueWeight) + \",\"\n                    + safeNumeric(player.latestDetectedRoleGroup) + \",\"\n                    + safeNumeric(player.latestDetectedRoleWeight) + \",\"\n                    + safeNumeric(player.benefits) + \",\"\n                    + safeNumeric(player.costs) + \",\"\n                    + safeNumeric(player.optval) + \",\"\n                    + safeNumeric(player.residualValue) + \",\"\n                    + safeNumeric(player.residualBookValue) + \",\"\n                    + safeNumeric(player.optimalCosts) + \",\"\n                    + safeNumeric(player.van) + \",\"\n                    + safeNumeric(player.valNoVan) + \",\"\n                    + safeNumeric(player.potentialPrice) + \",\"\n                    + safeNumeric(player.expectedPrice) + \",\"\n                    + safeNumeric(player.perceivedExpectedPrice) + \",\"\n                    + safeNumeric(player.currentPotentialPrice) + \",\"\n                    + safeNumeric(player.capitalGain) + \",\"\n                    + safeNumeric(player.profit) + \",\"\n                    + safeNumeric(player.deviation) + \",\"\n                    + safeNumeric(player.remainingMonthsOfContract) + \",\"\n                    + safeNumeric(player.totalMonthsOfContract) + \",\"\n                    + safeNumeric(player.potentialYearsOfContract) + \",\"\n                    + safeNumeric(player.expectedYearsOfContract) + \",\"\n                    + safeNumeric(player.benefitsPotential) + \",\"\n                    + safeNumeric(player.costsPotential) + \",\"\n                    + safeNumeric(player.optvalPotential) + \",\"\n                    + safeNumeric(player.avgTransferPrice) + \",\"\n                     + safeNumeric(player.roleClusterAvgPerformance) + \",\"\n                    + safeNumeric(player.minutes) + \",\"\n                    + safeNumeric(player.minutesShare) + \",\"\n                    + safeNumeric(player.avgMicroIndex) + \",\"\n                    + safeNumeric(player.avgMacroIndex) + \",\"\n                    + safeNumeric(player.avgPlayedMinuteShare) + \",\"\n                    + safeNumeric(player.expectedClubCluster) + \",\"\n                    + safeNumeric(player.weightInExpectedClubCluster) + \",\"\n                    + safeNumeric(player.latestLeagueCluster) + \",\"\n                    + safeNumeric(player.partialEmerging) + \",\"\n                    + safeNumeric(player.partialRisingStar) + \",\"\n                    + safeNumeric(player.tentativePartialEmerging) + \",\"\n                    + safeNumeric(player.tentativePartialRisingStar) + \",\"\n                    + safeNumeric(player.perfRatio) + \",\"\n\n                    + safeNumeric(player.ageWithDecimals) + \",\"\n                    + safeNumeric(player.PM) + \",\"\n                    + safeNumeric(player.RY) + \",\"\n                    + safeNumeric(player.RP) + \",\"\n                    + safeNumeric(player.wVANVNV_CL) + \",\"\n                    + safeNumeric(player.maxEMediePesate) + \",\"\n                    + \"'\" + safeString(player.currentLeagueNameExtended) + \"',\"\n                    + \"'\" + safeString(player.currentLeagueCountry) + \"',\"\n                    + \"'\" + safeString(player.currentLeagueCountryCode) + \"',\"\n                    + safeNumeric(player.withdrawalClause) + \",\"\n                    + safeNumeric(player.percTransfPrice) + \",\"\n                    + \"'\" + safeString(player.nationality) + \"',\"\n                    + \"'\" + safeString(player.nationality2) + \"',\"\n                    + \"'\" + safeString(player.nationalityCode) + \"',\"\n                    + \"'\" + safeString(player.nationality2Code) + \"',\"\n                    + \"'\" + safeString(player.masterLeagueId) + \"',\"\n                    + \"'\" + safeString(player.masterLeagueName) + \"',\"\n                    + \"'\" + safeString(player.latestRoleRis) + \"',\"\n                    + safeNumeric(player.rankByPerformance) + \",\"\n                    + safeNumeric(player.rankByEffectiveness) + \",\"\n                    + safeNumeric(player.rankByValue) + \",\"\n                    + safeNumeric(player.absClubAvgSalaryDeviation) + \",\"\n                    + safeNumeric(player.percClubAvgSalaryDeviation) + \",\"\n                    + safeNumeric(player.absLeagueAvgSalaryDeviation) + \",\"\n                    + safeNumeric(player.percLeagueAvgSalaryDeviation) + \",\"\n                    + safeNumeric(player.absClubCusterAvgSalaryDeviation) + \",\"\n                    + safeNumeric(player.percClubClusterAvgSalaryDeviation) + \",\"\n                    + safeNumeric(player.revenueContributionIndex) + \",\"\n                    + safeNumeric(player.costPerMinute) + \",\"\n                    + safeNumeric(player.scoringContributionIndex) + \",\"\n                    + safeNumeric(player.clubRelativePlayerPerformance) + \",\"\n                    + safeNumeric(player.leagueRelativePlayerPerformance) + \",\"\n                    + safeNumeric(player.annualCost) + \",\"\n                    + safeNumeric(player.contributionIndexPerc) + \",\"\n                    + safeNumeric(player.tmValue) + \",\"\n                    + safeNumeric(player.consumerValue) + \",\"\n                    + safeNumeric(player.consumerResidualValue) + \",\"\n                    + safeNumeric(player.consumerExpectedSalary) + \",\"\n                    + safeNumeric(player.consumerExpectedSalaryAbsoluteDeviation) + \",\"\n                    + safeNumeric(player.consumerExpectedSalaryPercDeviation) + \",\"\n                    + safeNumeric(player.rankByConsumerValue) + \",\"\n                    + safeNumeric(player.annualBookValue) + \",\"\n                    + safeNumeric(player.costImpactOnRevenues) + \",\"\n                    + safeNumeric(player.costImpactOnCosts) + \",\"\n                    + safeNumeric(player.salaryImpactOnSalaries) + \",\"\n                    + safeNumeric(player.height) + \",\"\n                    + \"'\" + safeString(player.foot) + \"',\"\n                    + safeNumeric(player.highestPrice) + \",\"\n                    + \"'\" + safeString(player.agent) + \"',\"\n                    + \"'\" + safeString(player.instagram) + \"',\"\n                    + \"'\" + safeString(player.sponsor) + \"',\"\n                    + safeNumeric(player.number) + \",\"\n                    + safeNumeric(player.minutesLastSeason) + \",\"\n                    + safeNumeric(player.goal) + \",\"\n                    + safeNumeric(player.assist) + \",\"\n                    + safeNumeric(player.preassist) + \",\"\n                    + safeNumeric(player.latestMicroIndexInjury) + \",\"\n                    + safeNumeric(player.latestMacroIndexInjury) + \",\"\n                    + safeNumeric(player.week) + \",\"\n                    + safeNumeric(player.year) + \",\"\n                    + safeNumeric(elaborationNum) + \",\"\n                    + safeNumeric(player.currentClubRank) + \",\"\n                    + safeNumeric(player.expectedClubRank) + \",\"\n                    + safeNumeric(player.bvResContractRatio) + \",\"\n           \n                    + safeNumeric(player.experience) + \",\"\n                    + safeNumeric(player.currentAvgMicroIndex) + \",\"\n+ safeNumeric(player.currentAvgMacroIndex) + \",\"\n+ \"'\" + safeString(slugify(player)) + \"'\"\n\n                    + \")\";\n                \n                values = values + value;\n                count++;\n            } catch (e) {\n                console.log(\"Error processing player:\", e, player.playerId, player.name);\n            }\n        });\n        \n        msg.topic = q + values + \";\";\n    });\n\n    logmsg.message = \"fine ciclo scrittura query\";\n    flow.set(\"logmsg\", logmsg);\n    node.log(logmsg);\n    \n} catch(e) {\n    console.log(e);\n    logmsg.message = e;\n    flow.set(\"logmsg\", logmsg);\n    node.log(logmsg);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 660,
        "wires": [
            [
                "e6ab939ff65bfd65"
            ]
        ]
    },
    {
        "id": "c50ed5848b9a5a8e",
        "type": "debug",
        "z": "da3f380d47320561",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 80,
        "wires": []
    },
    {
        "id": "7be3e7cda0d4b424",
        "type": "catch",
        "z": "da3f380d47320561",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 1700,
        "y": 80,
        "wires": [
            [
                "c50ed5848b9a5a8e"
            ]
        ]
    },
    {
        "id": "4eed5f8b43c0164c",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Log",
        "func": "\nflow.get(\"logmsg\").message = mgs.error\nnode.log(flow.get(\"logmsg\"))\n//return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 220,
        "wires": [
            [
                "c50ed5848b9a5a8e"
            ]
        ]
    },
    {
        "id": "0f9d35d3a2b691b5",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Chunker",
        "func": "try {\n    \n    console.log(\"Chunking players\")\n    \n    flow.get(\"logmsg\").message = \"Chunking players\";\n    node.log(flow.get(\"logmsg\"))\n\n\n    const chunk = (arr, size) =>\n      Array.from({ length: Math.ceil(arr.length / size) }, (v, i) =>\n        arr.slice(i * size, i * size + size)\n      );\n    \n    flow.set(\"playersChunks\",chunk(flow.get(\"PlayersArray\"), 100))\n    \n   \n    \n    flow.get(\"logmsg\").message = flow.get(\"playersChunks\").length + \" number of chunks\";\n    node.log(flow.get(\"logmsg\"))\n\n\n} catch(e) {\n    console.log(e)\n}\n\n//console.log(msg.topic)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 720,
        "wires": [
            [
                "15230bc8a31f0983"
            ]
        ]
    },
    {
        "id": "15230bc8a31f0983",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Array popper",
        "func": "msg.continue = false;\n\nflow.get(\"logmsg\").message = \"Array popper\"\nnode.log(flow.get(\"logmsg\"))\n\nif(flow.get(\"playersChunks\").length > 0) {\n    \n    \n    msg.payload = flow.get(\"playersChunks\").pop();\n    \n    flow.get(\"logmsg\").message = flow.get(\"playersChunks\").length+\" chunks missing\";\n    node.log(flow.get(\"logmsg\"))\n    \n    msg.continue = true;\n    \n} else {\n    \n    \n    flow.get(\"logmsg\").message = \"no more chunks missing\";\n    node.log(flow.get(\"logmsg\"))\n    \n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 720,
        "wires": [
            [
                "27c60506ef44b8df"
            ]
        ]
    },
    {
        "id": "27c60506ef44b8df",
        "type": "switch",
        "z": "da3f380d47320561",
        "name": "",
        "property": "continue",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 910,
        "y": 720,
        "wires": [
            [
                "30f01ea57c090807"
            ],
            [
                "41f9c6c077e5c941"
            ]
        ]
    },
    {
        "id": "e44f0da731d8144e",
        "type": "switch",
        "z": "da3f380d47320561",
        "name": "",
        "property": "continue",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1630,
        "y": 760,
        "wires": [
            [
                "15230bc8a31f0983"
            ],
            []
        ]
    },
    {
        "id": "792fe7cbece024a6",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Count",
        "func": "/*let ind= msg.parts.index+1\nconsole.log(\"PLAYERS SAVING \"+ ind+ \"/\" + msg.parts.count)\nflow.get(\"logmsg\").message = \"#Players saving part : \"+ ind+ \"/\" + msg.parts.count\nnode.log(flow.get(\"logmsg\"))\n\nif (  msg.parts.count==msg.parts.index+1 ) {\n\n    console.log(\"PLAYERS INSERT COMPLETED\")\n    flow.get(\"logmsg\").message = \"#Players saving completed\";\n    node.log(flow.get(\"logmsg\"))\n    flow.get(\"logmsg\").taskRunning = false;\n    return msg;\n}\n \n \n */\n \n\n\nflow.get(\"logmsg\").message = \"Players Saved\";\nnode.log(flow.get(\"logmsg\"))\n\n    console.log(\"PLAYERS SAVING COMPLETED\" ) \nreturn msg\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 640,
        "wires": [
            [
                "8a5aec794915c33e"
            ]
        ]
    },
    {
        "id": "e2ec258ac3aa5fc5",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "",
        "func": "console.log(\"League array check\")\nmsg.payload = flow.get(\"LeaguesArray\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2240,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "6a43ce58c436f909",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Indici",
        "func": "function getIndices(array) {\n    return Array.from({ length: array.length }, (_, i) => i);\n}\n\nmsg.payload=getIndices(flow.get(\"PlayersArrayChunks\"))\n\n\nlet logmsg = flow.get(\"logmsg\");\n\nif(!logmsg) {\n    \n    logmsg = {}\n    logmsg.type = \"db\"\n    logmsg.taskType = \"elaboration\"\n    logmsg.taskId = Math.floor(Math.random() * 1000001);\n    logmsg.message = \"staging player\"\n    logmsg.taskRunning = true\n}\n\n\nlogmsg.message = \"secondo step dello staging \"+msg.payload;\nflow.set(\"logmsg\",logmsg)\nnode.log(logmsg)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 600,
        "wires": [
            [
                "edd0cd415d048e0a"
            ]
        ]
    },
    {
        "id": "77ff2493e763f2a1",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "",
        "func": "flow.set(\"LeaguesArray\",null)\nmsg.topic=null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 220,
        "wires": [
            [
                "09daa2b1ddc62ce0"
            ]
        ]
    },
    {
        "id": "e9db2288d7af0f41",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "",
        "func": "\n    flow.set(\"ClubsArray\",null)\n    msg.topic=null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 360,
        "wires": [
            [
                "6566827091fc6c3e"
            ]
        ]
    },
    {
        "id": "306a4b594f9fe592",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "",
        "func": "\n    flow.set(\"BorrowedPlayersArray\",null)\n    msg.topic=null;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 440,
        "wires": [
            [
                "91c4aa79194f536e"
            ]
        ]
    },
    {
        "id": "feff25913585c193",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "",
        "func": "\n    flow.set(\"LoanedPlayersArray\",null)\n    msg.topic=null;\n   \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 520,
        "wires": [
            [
                "90ead9b9efceb558"
            ]
        ]
    },
    {
        "id": "8a5aec794915c33e",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "",
        "func": "\n    flow.set(\"PlayersArray\",null)\n    msg.topic=null;\n    \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 560,
        "wires": [
            [
                "13d5923a3a779dde"
            ]
        ]
    },
    {
        "id": "22f3ccdfbb39be0f",
        "type": "function",
        "z": "da3f380d47320561",
        "name": "Salva Giocatori",
        "func": "let logmsg = flow.get(\"logmsg\");\n\nif(!logmsg) {\n    \n    logmsg = {}\n    logmsg.type = \"db\"\n    logmsg.taskType = \"elaboration\"\n    logmsg.taskId = Math.floor(Math.random() * 1000001);\n    logmsg.message = \"staging player\"\n    logmsg.taskRunning = true\n}\n\n\nlogmsg.message = \"inizio ciclo scrittura query \"+msg.payload;\nflow.set(\"logmsg\",logmsg)\nnode.log(logmsg)\n\n\n\ntry {\n        console.log(\"Building query for players\")\n\n\nlet q = \"INSERT INTO latestplayers_staging ( \";\n                            q=q+\"`playerId`,\"\n                            q=q+\"`firstName`,\"\n                            q=q+\"`lastName`,\"\n                            q=q+\"`shortFirstName`,\"\n                            q=q+\"`shortLastName`,\"\n                            q=q+\"`knownName`,\"\n                            q=q+\"`fullName`,\"\n                            q=q+\"`name`,\"\n                            q=q+\"`birthDate`,\"\n                            q=q+\"`age`,\"\n                            q=q+\"`months`,\"\n                            q=q+\"`currentPosition`,\"\n                            q=q+\"`currentRole`,\"\n                            q=q+\"`currentRole2`,\"\n                            q=q+\"`currentClubId`,\"\n                            q=q+\"`currentClubName`,\"\n                            q=q+\"`currentClubShortName`,\"\n                            q=q+\"`currentClubCluster`,\"\n                            q=q+\"`currentLeagueId`,\"\n                            q=q+\"`currentLeagueName`,\"\n                            q=q+\"`currentLeagueCluster`,\"\n                            q=q+\"`currentLeagueWeight`,\"\n                            q=q+\"`currentLeagueTaxRate`,\"\n                            q=q+\"`masterClubId`,\"\n                            q=q+\"`masterClubName`,\"\n                            q=q+\"`masterClubShortName`,\"\n                            q=q+\"`masterClubStartContract`,\"\n                            q=q+\"`masterClubEndContract`,\"\n                            q=q+\"`remainingYearsOfMasterClubContract`,\"\n                            q=q+\"`remainingMonthsOfMasterClubContract`,\"\n                            q=q+\"`totalYearsOfMasterClubContract`,\"\n                            q=q+\"`totalMonthsOfMasterClubContract`,\"\n                            q=q+\"`latestRoleGroup`,\"\n                            q=q+\"`latestRoleWeight`,\"\n                            q=q+\"`nationalTeamPlayer`,\"\n                            q=q+\"`superstar`,\"\n                            q=q+\"`risingStar`,\"\n                            q=q+\"`emerging`,\"\n                            q=q+\"`alert`,\"\n                            q=q+\"`absind`,\"\n                            q=q+\"`performance`,\"\n                            q=q+\"`fatmol`,\"\n                            q=q+\"`effectiveness`,\"\n                            q=q+\"`maturity`,\"\n                            q=q+\"`weightInClub`,\"\n                            q=q+\"`latestUniqueness`,\"\n                            q=q+\"`latestMicroVolatility`,\"\n                            q=q+\"`latestMacroVolatility`,\"\n                            q=q+\"`contractType`,\"\n                            q=q+\"`startContract`,\"\n                            q=q+\"`endContract`,\"\n                            q=q+\"`totalYearsOfContract`,\"\n                            q=q+\"`remainingYearsOfContract`,\"\n                            q=q+\"`transferPrice`,\"\n                            q=q+\"`transferPriceYear`,\"\n                            q=q+\"`salaryNet`,\"\n                            q=q+\"`salaryGross`,\"\n                            q=q+\"`salaryOptimal`,\"\n                            q=q+\"`salaryPotential`,\"\n                            q=q+\"`salaryAbsoluteDeviation`,\"\n                            q=q+\"`salaryPercDeviation`,\"\n                            q=q+\"`latestDetectedLeagueCluster`,\"\n                            q=q+\"`latestDetectedLeagueWeight`,\"\n                            q=q+\"`latestDetectedRoleGroup`,\"\n                            q=q+\"`latestDetectedRoleWeight`,\"\n                            q=q+\"`benefits`,\"\n                            q=q+\"`costs`,\"\n                            q=q+\"`optval`,\"\n                            q=q+\"`residualValue`,\"\n                            q=q+\"`residualBookValue`,\"\n                            q=q+\"`optimalCosts`,\"\n                            q=q+\"`van`,\"\n                            q=q+\"`valNoVan`,\"\n                            q=q+\"`potentialPrice`,\"\n                            q=q+\"`expectedPrice`,\"\n                            q=q+\"`perceivedExpectedPrice`,\"\n                            q=q+\"`currentPotentialPrice`,\"\n                            q=q+\"`capitalGain`,\"\n                            q=q+\"`profit`,\"\n                            q=q+\"`deviation`,\"\n                            q=q+\"`remainingMonthsOfContract`,\"\n                            q=q+\"`totalMonthsOfContract`,\"\n                            q=q+\"`potentialYearsOfContract`,\"\n                            q=q+\"`expectedYearsOfContract`,\"\n                            q=q+\"`benefitsPotential`,\"\n                            q=q+\"`costsPotential`,\"\n                            q=q+\"`optvalPotential`,\"\n                            q=q+\"`avgTransferPrice`,\"\n                            q=q+\"`minutes`,\"\n                            q=q+\"`minutesShare`,\"\n                            q=q+\"`avgMicroIndex`,\"\n                            q=q+\"`avgMacroIndex`,\"\n                            q=q+\"`avgPlayedMinuteShare`,\"\n                            q=q+\"`expectedClubCluster`,\"\n                            q=q+\"`weightInExpectedClubCluster`,\"\n                            q=q+\"`latestLeagueCluster`,\"\n                            q=q+\"`partialEmerging`,\"\n                            q=q+\"`partialRisingStar`,\"\n                            q=q+\"`ageWithDecimals`,\"\n                            q=q+\"`PM`,\"\n                            q=q+\"`RY`,\"\n                            q=q+\"`RP`,\"\n                            q=q+\"`wVANVNV_CL`,\"\n                            q=q+\"`maxEMediePesate`,\"\n                            q=q+\"`currentLeagueNameExtended`,\"\n                            q=q+\"`currentLeagueCountry`,\"\n                             q=q+\"`currentLeagueCountryCode`,\"\n                            q=q+\"`withdrawalClause`,\"\n                            q=q+\"`percTransfPrice`,\"\n                            q=q+\"`nationality`,\"\n                            q=q+\"`nationality2`,\"\n                            q=q+\"`nationalityCode`,\"\n                            q=q+\"`nationality2Code`,\"\n                            q=q+\"`masterLeagueId`,\"\n                            q=q+\"`masterLeagueName`,\"\n                            q=q+\"`latestRoleRis`,\"\n                             q=q+\"`rankByPerformance`,\"\n                             q=q+\"`rankByEffectiveness`,\"\n                             q=q+\"`rankByValue`,\"\n                             q=q+\"`absClubAvgSalaryDeviation`,\"\n                             q=q+\"`percClubAvgSalaryDeviation`,\"\n                             q=q+\"`absLeagueAvgSalaryDeviation`,\"\n                             q=q+\"`percLeagueAvgSalaryDeviation`,\"\n                             q=q+\"`absClubCusterAvgSalaryDeviation`,\"\n                             q=q+\"`percClubClusterAvgSalaryDeviation`,\"\n                             \n                             q=q+\"`revenueContributionIndex`,\"\n                            q=q+\"`costPerMinute`,\"\n                            q=q+\"`scoringContributionIndex`,\"\n                            q=q+\"`clubRelativePlayerPerformance`,\"\n                            q=q+\"`leagueRelativePlayerPerformance`,\"\n                            \n                            q=q+\"`annualCost`,\"\n                            q=q+\"`contributionIndexPerc`,\" \n                            \n                             q=q+\"`tmValue`,\"\n                            \n                            q=q+\"`consumerValue`,\"\n                            q=q+\"`consumerResidualValue`,\"\n                            q=q+\"`consumerExpectedSalary`,\"\n                            q=q+\"`consumerExpectedSalaryAbsoluteDeviation`,\"\n                            q=q+\"`consumerExpectedSalaryPercDeviation`,\"\n                            q=q+\"`rankByConsumerValue`,\"\n                            \n                             q=q+\"`annualBookValue`,\"\n                             \n                              q=q+\"`costImpactOnRevenues`,\"\n                               q=q+\"`costImpactOnCosts`,\"\n                                q=q+\"`salaryImpactOnSalaries`,\"\n                             \n                             \n                            q=q+\"`height`,\"\n                            q=q+\"`foot`,\"\n                            q=q+\"`highestPrice`,\"\n                            q=q+\"`agent`,\"\n                            q=q+\"`instagram`,\"\n                            q=q+\"`sponsor`,\"\n                            \n                            q=q+\"`number`,\"\n                            \n                            q=q+\"`minutesLastSeason`,\"\n                            q=q+\"`goal`,\"\n                            q=q+\"`assist`,\"\n                            q=q+\"`preassist`,\"\n                            \n                          q=q+\"`latestMicroIndexInjury`,\"\n                          q=q+\"`latestMacroIndexInjury`,\"\n                            \n                             \n                            q=q+\"`week`,\"\n                            q=q+\"`year`,\"\n                            q=q+\"`elaborationNum`,\"\n                            q=q+\"`currentClubRank`,\"\n                            q=q+\"`expectedClubRank`,\"\n                            q=q+\"`bvResContractRatio`,\"\n                            q=q+\"`experience`,\"\n                            q=q+\"`slug`\"\n                            q=q+\") values \";\n\n\n\n\n\n\nlet values = \"\";\n    \nlet count = 0;\n\n\n\nconst slugify = function (player) {\n    \n    let str = \"\";\n    \n    if (player.shortFirstName && player.shortLastName ) {\n        \n        str = player.shortFirstName.replace(/'/g, \"'\"+\"'\")+\" \"+player.shortLastName.replace(/'/g, \"'\"+\"'\")+\" \"+player.birthDate.slice(0, 10)    \n        \n    } else {\n        \n        str = player.firstName.replace(/'/g, \"'\"+\"'\")+\" \"+player.lastName.replace(/'/g, \"'\"+\"'\")+\" \"+player.birthDate.slice(0, 10)    \n        \n    }\n    \n    \n   \n    \n  return String(str)\n    .normalize('NFKD') // split accented characters into their base characters and diacritical marks\n    .replace(/[\\u0300-\\u036f]/g, '') // remove all the accents, which happen to be all in the \\u03xx UNICODE block.\n    .trim() // trim leading or trailing whitespace\n    .toLowerCase() // convert to lowercase\n    .replace(/[^a-z0-9 -]/g, '') // remove non-alphanumeric characters\n    .replace(/\\s+/g, '-') // replace spaces with hyphens\n    .replace(/-+/g, '-'); // remove consecutive hyphens\n}\n\n\nlet elaborationNum = global.get(\"elaborationNum\") || 0\n\nflow.get(\"PlayersArrayChunks\").forEach( batch => {\n    \n    let Players = batch//flow.get(\"PlayersArrayChunks\")[0]//\n    Players.forEach( player => { \n    \n    Object.keys(player).forEach( key => {\n        \n        player[key] = player[key] === undefined ?  null : player[key];\n    })\n    \n    /*if ( count > 1 ){\n        return;\n    } */\n    try {\n        \n        let value = values == \"\" ? \"('\" : \",('\";\n    \n        player.latestDetectedLeagueCluster = player.latestDetectedLeagueCluster === undefined ? null : player.latestDetectedLeagueCluster\n        player.latestDetectedLeagueWeight  = player.latestDetectedLeagueWeight === undefined ? null : player.latestDetectedLeagueWeight\n        player.latestDetectedRoleGroup = player.latestDetectedRoleGroup === undefined ? null : player.latestDetectedRoleGroup\n        player.latestDetectedRoleWeight = player.latestDetectedRoleWeight === undefined ? null : player.latestDetectedRoleWeight\n    \n        player.masterClubName = player.masterClubName !== undefined && player.masterClubName !== null ? player.masterClubName.replace(/'/g, \"'\"+\"'\") : \"\"\n        player.masterLeagueName = player.masterLeagueName !== undefined && player.masterLeagueName !== null ? player.masterLeagueName.replace(/'/g, \"'\"+\"'\") : \"\"\n        \n        player.currentLeagueCountry = player.currentLeagueCountry !== undefined && player.currentLeagueCountry!=null ? player.currentLeagueCountry.replace(/'/g, \"'\"+\"'\") : \"\"\n        player.currentLeagueCountryCode = player.currentLeagueCountryCode !== undefined && player.currentLeagueCountryCode !=null ? player.currentLeagueCountryCode.replace(/'/g, \"'\"+\"'\") : \"\"\n\n        \n        \n        player.nationality = player.nationality !== undefined && player.nationality !=null ? player.nationality.replace(/'/g, \"'\"+\"'\") : \"\"\n        player.nationalityCode = player.nationalityCode !== undefined && player.nationalityCode !=null ? player.nationalityCode.replace(/'/g, \"'\"+\"'\") : \"\"\n\n        player.nationality2 = player.nationality2 !== undefined && player.nationality2 !=null ? player.nationality2.replace(/'/g, \"'\"+\"'\") : \"\"\n        player.nationality2Code = player.nationality2Code !== undefined && player.nationality2Code !=null ? player.nationality2Code.replace(/'/g, \"'\"+\"'\") : \"\"\n        \n        player.shortFirstName = player.shortFirstName !== undefined && player.shortFirstName !== null ? player.shortFirstName.replace(/'/g, \"'\"+\"'\") : \"\"\n        player.shortLastName = player.shortLastName !== undefined && player.shortLastName !== null ? player.shortLastName.replace(/'/g, \"'\"+\"'\") : \"\"\n        player.knownName = player.knownName !== undefined && player.knownName !== null ? player.knownName.replace(/'/g, \"'\"+\"'\") : \"\"\n        \n        \n                player.foot = player.foot !== undefined && player.foot !== null ? player.foot.replace(/'/g, \"'\"+\"'\") : \"\"\n\n        player.agent = player.agent !== undefined && player.agent !== null ? player.agent.replace(/'/g, \"'\"+\"'\") : \"\"\n        player.instagram = player.instagram !== undefined && player.instagram !== null ? player.instagram.replace(/'/g, \"'\"+\"'\") : \"\"\n        player.sponsor = player.sponsor !== undefined && player.sponsor !== null ? player.sponsor.replace(/'/g, \"'\"+\"'\") : \"\"\n        \n        if(!player.startContract || !player.endContract ) {\n            \n            console.log(player.playerId, \" - \",player.name)\n        }\n    \n        value =     value \n                    +player.playerId+\"','\"\n                    +player.firstName.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.lastName.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.shortFirstName.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.shortLastName.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.knownName.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.fullName.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.name.replace(/'/g, \"'\"+\"'\")+\"',\"\n                    +\"STR_TO_DATE('\"+player.birthDate.slice(0, 10)+\"','%Y-%m-%d'),\"\n                    +player.age+\",\"\n                    +player.months+\",'\"\n                    +player.currentPosition+\"','\"\n                    +player.currentRole+\"','\"\n                    +player.currentRole2+\"','\"\n                    +player.currentClubId+\"','\"\n                    +player.currentClubName.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.currentClubShortName.replace(/'/g, \"'\"+\"'\")+\"',\"\n                    +player.currentClubCluster+\",'\"\n                    +player.currentLeagueId+\"','\"\n                    +player.currentLeagueName.replace(/'/g, \"'\"+\"'\")+\"',\"\n                    +player.currentLeagueCluster+\",\"\n                    +player.currentLeagueWeight+\",\"\n                    +player.currentLeagueTaxRate+\",'\"\n                    +player.masterClubId+\"','\"\n                    +player.masterClubName.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.masterClubShortName.replace(/'/g, \"'\"+\"'\")+\"',\"\n                    +\"STR_TO_DATE('\"+player.masterClubStartContract.slice(0, 10)+\"','%Y-%m-%d'),\"\n                    +\"STR_TO_DATE('\"+player.masterClubEndContract.slice(0, 10)+\"','%Y-%m-%d'),\"\n                    +player.remainingYearsOfMasterClubContract+\",\"\n                    +player.remainingMonthsOfMasterClubContract+\",\"\n                    +player.totalYearsOfMasterClubContract+\",\"\n                    +player.totalMonthsOfMasterClubContract+\",\"\n                    +player.latestRoleGroup+\",\"\n                    +player.latestRoleWeight+\",\"\n                    +player.nationalTeamPlayer+\",\"\n                    +player.superStar+\",\"\n                    +player.risingStar+\",\"\n                    +player.emerging+\",\"\n                    +player.alert+\",\"\n                    +player.absind+\",\"\n                    +player.performance+\",\"\n                    +player.fatmol+\",\"\n                    +player.effectiveness+\",\"\n                    +player.maturity+\",\"\n                    +player.weightInClub+\",\"\n                    +player.latestUniqueness+\",\"\n                    +player.latestMicroVolatility+\",\"\n                    +player.latestMacroVolatility+\",'\"\n                    +player.contractType+\"',\"\n                    +\"STR_TO_DATE('\"+player.startContract.slice(0, 10)+\"','%Y-%m-%d'),\"\n                    +\"STR_TO_DATE('\"+player.endContract.slice(0, 10)+\"','%Y-%m-%d'),\"\n                    +player.totalYearsOfContract+\",\"\n                    +player.remainingYearsOfContract+\",\"\n                    +player.transferPrice+\",\"\n                    +player.transferPriceYear+\",\"\n                    +player.salaryNet+\",\"\n                    +player.salaryGross+\",\"\n                    +player.salaryOptimal+\",\"\n                    +player.salaryPotential+\",\"\n                    +player.salaryAbsoluteDeviation+\",\"\n                    +player.salaryPercDeviation+\",\"\n                    +player.latestDetectedLeagueCluster+\",\"\n                    +player.latestDetectedLeagueWeight+\",\"\n                    +player.latestDetectedRoleGroup+\",\"\n                    +player.latestDetectedRoleWeight+\",\"\n                    +player.benefits+\",\"\n                    +player.costs+\",\"\n                    +player.optval+\",\"\n                    +player.residualValue+\",\"\n                    +player.residualBookValue+\",\"\n                    +player.optimalCosts+\",\"\n                    +player.van+\",\"\n                    +player.valNoVan+\",\"\n                    +player.potentialPrice+\",\"\n                    +player.expectedPrice+\",\"\n                    +player.perceivedExpectedPrice+\",\"\n                    +player.currentPotentialPrice+\",\"\n                    +player.capitalGain+\",\"\n                    +player.profit+\",\"\n                    +player.deviation+\",\"\n                    +player.remainingMonthsOfContract+\",\"\n                    +player.totalMonthsOfContract+\",\"\n                    +player.potentialYearsOfContract+\",\"\n                    +player.expectedYearsOfContract+\",\"\n                    +player.benefitsPotential+\",\"\n                    +player.costsPotential+\",\"\n                    +player.optvalPotential+\",\"\n                    +player.avgTransferPrice+\",\"\n                    +player.minutes+\",\" \n                    +player.minutesShare+\",\" \n                    +player.avgMicroIndex+\",\"\n                    +player.avgMacroIndex+\",\"\n                    +player.avgPlayedMinuteShare+\",\"\n                    +player.expectedClubCluster+\",\"\n                    +player.weightInExpectedClubCluster+\",\"\n                    +player.latestLeagueCluster+\",\"\n                    +player.partialEmerging+\",\"\n                    +player.partialRisingStar+\",\"\n                    +player.ageWithDecimals+\",\"\n                    +player.PM+\",\"\n                    +player.RY+\",\"\n                    +player.RP+\",\"\n                    +player.wVANVNV_CL+\",\"\n                    +player.maxEMediePesate+\",'\"\n                    +player.currentLeagueNameExtended.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.currentLeagueCountry.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.currentLeagueCountryCode.replace(/'/g, \"'\"+\"'\")+\"',\"\n                    +player.withdrawalClause+\",\"\n                    +player.percTransfPrice+\",'\"\n                    +player.nationality.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.nationality2.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.nationalityCode.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.nationality2Code.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.masterLeagueId+\"','\"\n                    +player.masterLeagueName.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.latestRoleRis+\"',\"\n                    +player.rankByPerformance+\",\"\n                    +player.rankByEffectiveness+\",\"\n                    +player.rankByValue+\",\"\n                    +player.absClubAvgSalaryDeviation+\",\"\n                    +player.percClubAvgSalaryDeviation+\",\"\n                    +player.absLeagueAvgSalaryDeviation+\",\"\n                    +player.percLeagueAvgSalaryDeviation+\",\"\n                    +player.absClubCusterAvgSalaryDeviation+\",\"\n                    +player.percClubClusterAvgSalaryDeviation+\",\"\n                    \n                    +player.revenueContributionIndex+\",\"\n                    +player.costPerMinute+\",\"\n                    +player.scoringContributionIndex+\",\"\n                    +player.clubRelativePlayerPerformance+\",\"\n                    +player.leagueRelativePlayerPerformance+\",\"\n                    \n                    +player.annualCost+\",\"\n                    +player.contributionIndexPerc+\",\"\n                    \n                     +player.tmValue+\",\"\n                    \n                    +player.consumerValue+\",\"\n                     +player.consumerResidualValue+\",\"\n                    +player.consumerExpectedSalary+\",\"\n                    +player.consumerExpectedSalaryAbsoluteDeviation+\",\"\n                    +player.consumerExpectedSalaryPercDeviation+\",\"\n                    +player.rankByConsumerValue+\",\"\n                    +player.annualBookValue+\",\"\n                    \n                    +player.costImpactOnRevenues+\",\"\n                    +player.costImpactOnCosts+\",\"\n                    +player.salaryImpactOnSalaries+\",\"\n                    \n                    +player.height+\",'\"\n                    +player.foot.replace(/'/g, \"'\"+\"'\")+\"',\"\n                    +player.highestPrice+\",'\"\n                    +player.agent.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.instagram.replace(/'/g, \"'\"+\"'\")+\"','\"\n                    +player.sponsor.replace(/'/g, \"'\"+\"'\")+\"',\"\n                    \n                    +player.number+\",\"\n                    \n                    +player.minutesLastSeason+\",\"\n                    +player.goal+\",\"\n                    +player.assist+\",\"\n                    +player.preassist+\",\"\n                    \n                   +player.latestMicroIndexInjury+\",\"\n                   +player.latestMacroIndexInjury+\",\"\n                    \n                    +player.week+\",\"\n                    +player.year+\",\"\n                    +elaborationNum+\",\"\n                    +player.currentClubRank+\",\"\n                    +player.expectedClubRank+\",\"\n                    +player.bvResContractRatio+\",\"\n                    +player.experience+\",'\"\n                    +slugify(player)+\"'\"\n                    \n                    \n                    \n        value = value + \")\"            \n        \n        values = values + value;\n        \n    } catch (e) {\n        console.log(e)\n    }\n    \n    count++;\n    \n    \n})\n\nmsg.topic = q+values+\";\";\n\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nlogmsg.message = \"inizio ciclo scrittura query \"\nflow.set(\"logmsg\",logmsg)\nnode.log(logmsg)\n\n} catch(e) {\n    console.log(e)\n    logmsg.message = e\n    flow.set(\"logmsg\",logmsg)\n    node.log(logmsg)\n}\n\n//console.log(msg.topic)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 600,
        "wires": [
            [
                "e6ab939ff65bfd65"
            ]
        ]
    },
    {
        "id": "013fedc46042c0b1",
        "type": "link call",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "links": [
            "9de79639c15e9711"
        ],
        "timeout": "360",
        "x": 340,
        "y": 180,
        "wires": [
            [
                "76b5303c94e3fd94"
            ]
        ]
    },
    {
        "id": "670b35666221aa80",
        "type": "inject",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 180,
        "wires": [
            [
                "013fedc46042c0b1"
            ]
        ]
    },
    {
        "id": "76b5303c94e3fd94",
        "type": "link call",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "links": [
            "e33c0ba1c34e99ce"
        ],
        "timeout": "120",
        "x": 390,
        "y": 300,
        "wires": [
            [
                "d8530b20bb2f9406"
            ]
        ]
    },
    {
        "id": "d8530b20bb2f9406",
        "type": "link call",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "links": [
            "dc8a5ed114a6a8bc"
        ],
        "timeout": "360",
        "x": 370,
        "y": 380,
        "wires": [
            [
                "8badf2a4c4338717"
            ]
        ]
    },
    {
        "id": "8badf2a4c4338717",
        "type": "link call",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "links": [
            "7caeb178bb1b42c6"
        ],
        "timeout": "360",
        "x": 360,
        "y": 460,
        "wires": [
            [
                "c99b98b8353e59ab"
            ]
        ]
    },
    {
        "id": "ac00e4d2bfdf0f7b",
        "type": "link call",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "links": [
            "d066a90f9e48eb05"
        ],
        "timeout": "360",
        "x": 370,
        "y": 720,
        "wires": [
            [
                "3209028dd2e631f1"
            ]
        ]
    },
    {
        "id": "5207f5ee384aa81f",
        "type": "inject",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 260,
        "wires": [
            [
                "76b5303c94e3fd94"
            ]
        ]
    },
    {
        "id": "7f535e513898624f",
        "type": "inject",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 380,
        "wires": [
            [
                "d8530b20bb2f9406"
            ]
        ]
    },
    {
        "id": "e5db175a25b6c7ee",
        "type": "inject",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 460,
        "wires": [
            [
                "8badf2a4c4338717"
            ]
        ]
    },
    {
        "id": "d719fafe75a9d899",
        "type": "inject",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 720,
        "wires": [
            [
                "ac00e4d2bfdf0f7b"
            ]
        ]
    },
    {
        "id": "3209028dd2e631f1",
        "type": "link call",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "links": [
            "3c6891ea224b7285"
        ],
        "timeout": "120",
        "x": 340,
        "y": 920,
        "wires": [
            [
                "8298d66c4fe2ccc5"
            ]
        ]
    },
    {
        "id": "31055d910ce577cd",
        "type": "inject",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 920,
        "wires": [
            [
                "3209028dd2e631f1"
            ]
        ]
    },
    {
        "id": "8298d66c4fe2ccc5",
        "type": "function",
        "z": "8fc0d41fdfa4de60",
        "name": "OUT",
        "func": "let logmsg = global.get(\"logmsg\")\n\nif(logmsg) {\n    \n    if (logmsg.taskRunning) {\n        logmsg.taskRunning = false\n        msg.payload = \"another task running\"\n        return msg;\n    } \n    \n}\n\n\n    \n\nmsg.payload = logmsg;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 240,
        "wires": [
            [
                "e452282c5b1cf2f5"
            ]
        ]
    },
    {
        "id": "1049c8cd24322555",
        "type": "http in",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "url": "/elaborate",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 80,
        "wires": [
            [
                "f614976828805195"
            ]
        ]
    },
    {
        "id": "cf0cc182b819d932",
        "type": "http response",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1090,
        "y": 80,
        "wires": []
    },
    {
        "id": "bc21bc991d429eaa",
        "type": "switch",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "property": "runModel",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 930,
        "y": 80,
        "wires": [
            [
                "cf0cc182b819d932"
            ],
            [
                "cf0cc182b819d932",
                "013fedc46042c0b1"
            ]
        ]
    },
    {
        "id": "f614976828805195",
        "type": "function",
        "z": "8fc0d41fdfa4de60",
        "name": "Elaboration Num",
        "func": "\nmsg.payload = [new Date(), \"started\"]\nmsg.topic = \"insert into elaborations (startedAt,status) values (? , ? ) \"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 80,
        "wires": [
            [
                "e1d1a4a93c409d48"
            ]
        ]
    },
    {
        "id": "e1d1a4a93c409d48",
        "type": "mysql",
        "z": "8fc0d41fdfa4de60",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 580,
        "y": 80,
        "wires": [
            [
                "7db803214fd33350"
            ]
        ]
    },
    {
        "id": "7db803214fd33350",
        "type": "function",
        "z": "8fc0d41fdfa4de60",
        "name": "INIT Task",
        "func": "let elaborationNum = msg.payload.insertId;\n\nconsole.log(\"elaborationNum\",elaborationNum)\nlet logmsg = global.get(\"logmsg\")\n\nglobal.set(\"elaborationNum\",elaborationNum)\n\nif(logmsg) {\n    \n    if (logmsg.taskRunning) {\n        \n        logmsg.type = \"db\"\n        logmsg.taskType = \"elaboration\"\n        logmsg.taskId = elaborationNum\n        logmsg.message = \"Another task is already running with elaborationNum \"+elaborationNum\n        logmsg.taskRunning = true\n        msg.runModel = false;\n        return msg;\n    } else {\n        \n        logmsg = {}    \n        logmsg.type = \"db\"\n        logmsg.taskType = \"elaboration\"\n        logmsg.taskId = elaborationNum\n        logmsg.message = \"runmodel started\"\n        logmsg.taskRunning = true\n    }\n    \n    \n    \n    \n} else {\n    \n    logmsg = {}    \n    logmsg.type = \"db\"\n    logmsg.taskType = \"elaboration\"\n    logmsg.taskId = elaborationNum\n    logmsg.message = \"runmodel started\"\n    logmsg.taskRunning = true\n    \n    \n}\n\n\nmsg.runModel = true;\n    \n\nglobal.set(\"logmsg\",logmsg)\nmsg.payload = logmsg;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 80,
        "wires": [
            [
                "bc21bc991d429eaa"
            ]
        ]
    },
    {
        "id": "f28ecbd3fe0b22ec",
        "type": "inject",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 40,
        "wires": [
            [
                "f614976828805195"
            ]
        ]
    },
    {
        "id": "1296ce824a9a005e",
        "type": "link call",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "links": [
            "89e1084d5d99d4cc"
        ],
        "timeout": "360",
        "x": 530,
        "y": 240,
        "wires": [
            [
                "8298d66c4fe2ccc5"
            ]
        ]
    },
    {
        "id": "e452282c5b1cf2f5",
        "type": "change",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "rules": [
            {
                "t": "delete",
                "p": "logmsg",
                "pt": "global"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1020,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "c99b98b8353e59ab",
        "type": "link call",
        "z": "8fc0d41fdfa4de60",
        "name": "STAGEBORROWEDPLAYERS",
        "links": [
            "382e21b5ae267ff5"
        ],
        "timeout": "360",
        "x": 410,
        "y": 540,
        "wires": [
            [
                "1aa7deb438a4814c"
            ]
        ]
    },
    {
        "id": "d6e58552029ee7e9",
        "type": "inject",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 540,
        "wires": [
            [
                "c99b98b8353e59ab"
            ]
        ]
    },
    {
        "id": "1aa7deb438a4814c",
        "type": "link call",
        "z": "8fc0d41fdfa4de60",
        "name": "STAGELOANEDPLAYERS",
        "links": [
            "bf36f7fc190cacac"
        ],
        "timeout": "360",
        "x": 400,
        "y": 620,
        "wires": [
            [
                "ac00e4d2bfdf0f7b"
            ]
        ]
    },
    {
        "id": "606920dc26f46159",
        "type": "inject",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 620,
        "wires": [
            [
                "1aa7deb438a4814c"
            ]
        ]
    },
    {
        "id": "193d37be941118d2",
        "type": "function",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "func": "\nlet logmsg = global.get(\"testlogmsg\");\n\nif(!logmsg) {\n    \n    logmsg = {}\n    logmsg.type = \"db\"\n    logmsg.taskType = \"elaboration\"\n    logmsg.taskId = Math.floor(Math.random() * 1000001);\n    logmsg.message = \"1\"\n    logmsg.taskRunning = true\n    \n    global.set(\"testlogmsg\", logmsg);\n} else {\n    \n    logmsg.message = String(Number(logmsg.message)+1)\n}\n\n\nnode.log(logmsg)\n\nmsg.payload = logmsg\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1620,
        "y": 580,
        "wires": [
            [
                "fac286e6e22510da"
            ]
        ]
    },
    {
        "id": "6e0bcda0cb3b7c97",
        "type": "http in",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "url": "/testmqtt",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 1030,
        "y": 580,
        "wires": [
            [
                "fc4311b8e09a3016"
            ]
        ]
    },
    {
        "id": "fac286e6e22510da",
        "type": "http response",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1770,
        "y": 580,
        "wires": []
    },
    {
        "id": "fc4311b8e09a3016",
        "type": "function",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "func": "let arr = [1,2,3,4,5];\n\nmsg.payload=arr;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1180,
        "y": 580,
        "wires": [
            [
                "b0edf19a6dd35d25"
            ]
        ]
    },
    {
        "id": "21143a9bb9ce6960",
        "type": "delay",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1450,
        "y": 580,
        "wires": [
            [
                "193d37be941118d2"
            ]
        ]
    },
    {
        "id": "b0edf19a6dd35d25",
        "type": "split",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1310,
        "y": 580,
        "wires": [
            [
                "21143a9bb9ce6960"
            ]
        ]
    },
    {
        "id": "302b44cb3605c5ae",
        "type": "inject",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1020,
        "y": 460,
        "wires": [
            [
                "fc4311b8e09a3016"
            ]
        ]
    },
    {
        "id": "a7ef416f975b988e",
        "type": "inject",
        "z": "8fc0d41fdfa4de60",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 660,
        "y": 180,
        "wires": [
            [
                "8298d66c4fe2ccc5"
            ]
        ]
    },
    {
        "id": "cf0fa3e56e1666c0",
        "type": "comment",
        "z": "b59ecb5ade20da39",
        "name": "FLUSSO PER PROMUOVERE DALLE TABELLE DI STAGING ALLE TABELLE DI PRODUZIONE",
        "info": "",
        "x": 710,
        "y": 120,
        "wires": []
    },
    {
        "id": "c47ec1410991b0f1",
        "type": "debug",
        "z": "b59ecb5ade20da39",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1750,
        "y": 100,
        "wires": []
    },
    {
        "id": "6f0496ba76327fb1",
        "type": "catch",
        "z": "b59ecb5ade20da39",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 1560,
        "y": 100,
        "wires": [
            [
                "c47ec1410991b0f1"
            ]
        ]
    },
    {
        "id": "4982484f2d507f87",
        "type": "http in",
        "z": "b59ecb5ade20da39",
        "name": "",
        "url": "/promote",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 200,
        "wires": [
            [
                "742f13264fd6aaf8"
            ]
        ]
    },
    {
        "id": "742f13264fd6aaf8",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "Datasets",
        "func": "\nlet logmsg = {}\n    logmsg.type = \"db\"\n    logmsg.taskType = \"promotion\"\n    logmsg.taskId = Math.floor(Math.random() * 1000001);\n    logmsg.message = \"Setting datasets\"\n    logmsg.taskRunning = true\n    \n    \n    msg.logmsg = logmsg;\n    node.log(msg.logmsg)\n\n\nlet datasets = [];\n\n    datasets.push(\"players\");\n    datasets.push(\"clubs\");\n    datasets.push(\"leagues\");\n    datasets.push(\"superstats\");\n\n\n    \n    flow.set(\"datasets\",datasets)\n    \n    \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 200,
        "wires": [
            [
                "c6d4822d9fe7d113"
            ]
        ]
    },
    {
        "id": "c6d4822d9fe7d113",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "Array Popper",
        "func": "\nif(flow.get(\"datasets\").length > 0 ) {\n    \n    msg.payload = flow.get(\"datasets\").pop();\n    \n    msg.logmsg.message=\"Promoting \"+msg.payload\n    node.log(msg.logmsg)\n\n    msg.stageTables = true;\n    \n    \n} else {\n    \n    msg.payload = \"staging\";\n    \n    msg.logmsg.message=\"updating production staging tables \";\n    node.log(msg.logmsg)\n    \n    msg.stageTables = false;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 530,
        "y": 200,
        "wires": [
            [
                "06c1eb93b2992513"
            ]
        ]
    },
    {
        "id": "699931099e544995",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "Set tables",
        "func": "let dataSet = msg.payload;\n\nlet stageTable = \"\";\nlet prodTable = \"\";\n\n\n\nif (!dataSet) {\n    \n    logmsg.message = \"dataset missing\"\n    msg.logmsg = logmsg;\n    node.log(msg.logmsg)\n    msg.payload = msg.logmsg;\n    msg.dataSetError = true; \n    return msg;    \n}\n\n\nif (dataSet == \"superstats\") {\n    \n    stageTable = \"superstats\";\n    prodTable = \"superstats_archive\";\n    \n} else if (dataSet == \"players\") {\n    \n    stageTable = \"latestplayers_staging\";\n    prodTable = \"latestplayers_archive\";\n    \n} else if (dataSet == \"clubs\") {\n    \n    stageTable = \"latestclubs_staging\";\n    prodTable = \"latestclubs_archive\";\n    \n} else if (dataSet == \"leagues\") {\n    \n    stageTable = \"latestleagues_staging\";\n    prodTable = \"latestleagues_archive\";\n    \n} else if (dataSet.indexOf(\"virtualteams\") > 1 ) {\n    \n    stageTable = dataSet;\n    prodTable = dataSet;\n\n    \n} else {\n    \n    logmsg.message = \"wrong dataset \"+dataSet\n    msg.logmsg = logmsg;\n    node.log(msg.logmsg)\n    msg.payload = msg.logmsg;\n    msg.dataSetError = true; \n    return msg;   \n}\n\n\nmsg.logmsg.message = \"promoting table\"+stageTable;\n\n    \nmsg.dataSetError = false; \n\n\nnode.log(msg.logmsg)\n\nmsg.stageTable = stageTable;\nmsg.prodTable = prodTable;\nmsg.dataSet = dataSet;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 180,
        "wires": [
            [
                "9ef6908ea055f05a"
            ]
        ]
    },
    {
        "id": "dc273278808a8306",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "Check PROD El.Num",
        "func": "msg.topic=\"select max(elaborationNum) as elaborationNum from \"+msg.prodTable;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 500,
        "wires": [
            [
                "264c3ab899dc293c"
            ]
        ]
    },
    {
        "id": "264c3ab899dc293c",
        "type": "mysql",
        "z": "b59ecb5ade20da39",
        "mydb": "ea1e5103bb9e91ad",
        "name": "PRODUZIONE",
        "x": 480,
        "y": 500,
        "wires": [
            [
                "064f16b5cf9c5dc8"
            ]
        ]
    },
    {
        "id": "064f16b5cf9c5dc8",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "Check STAGE  El. Num",
        "func": "msg.prodElaborationNum =  msg.payload[0].elaborationNum\n\nif(msg.prodElaborationNum === null ) {\n    msg.prodElaborationNum = 0;\n}\n\n\nmsg.logmsg.message = \"Prod elaborationNum : \"+msg.prodElaborationNum;\nnode.log(msg.logmsg)\n\nmsg.topic=\"select max(elaborationNum) as elaborationNum from \"+msg.stageTable;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 500,
        "wires": [
            [
                "8273e833e77327d8"
            ]
        ]
    },
    {
        "id": "8273e833e77327d8",
        "type": "mysql",
        "z": "b59ecb5ade20da39",
        "mydb": "14f41b2b.4deca5",
        "name": "STAGE",
        "x": 920,
        "y": 500,
        "wires": [
            [
                "2bf2e8c1be55f6da"
            ]
        ]
    },
    {
        "id": "2bf2e8c1be55f6da",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "El. Num Check",
        "func": "msg.stageElaborationNum =  msg.payload[0].elaborationNum\n\nmsg.logmsg.message = \"Stage elaborationNum : \"+msg.stageElaborationNum;\nnode.log(msg.logmsg)\n\nif (msg.prodElaborationNum < msg.stageElaborationNum) {\n    \n    msg.elborationNumError = false;\n    msg.topic=\"select * from \"+msg.stageTable; // I am assuming there is only 1 elaborationNum on stage. \n    \n} else {\n    \n    msg.elborationNumError = true;\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 500,
        "wires": [
            [
                "02de615e0dd2b292"
            ]
        ]
    },
    {
        "id": "02de615e0dd2b292",
        "type": "switch",
        "z": "b59ecb5ade20da39",
        "name": "",
        "property": "elborationNumError",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1270,
        "y": 500,
        "wires": [
            [
                "428c8f9df24e8ac1"
            ],
            [
                "8550637898852c55"
            ]
        ]
    },
    {
        "id": "428c8f9df24e8ac1",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "Error message",
        "func": "msg.logmsg.message = \"Elaboration num error for \"+msg.dataSet+\", Prod \"+msg.prodElaborationNum+\", Stage \"+msg.stageElaborationNum;\nnode.log(msg.logmsg)\n\nmsg.payload=msg.logmsg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 460,
        "wires": [
            [
                "f30f99951816fb1d"
            ]
        ]
    },
    {
        "id": "f30f99951816fb1d",
        "type": "link out",
        "z": "b59ecb5ade20da39",
        "name": "ELABORATION NUM ERR OUT",
        "mode": "link",
        "links": [
            "caf02b1eba69f0f9"
        ],
        "x": 1575,
        "y": 460,
        "wires": []
    },
    {
        "id": "caf02b1eba69f0f9",
        "type": "link in",
        "z": "b59ecb5ade20da39",
        "name": "PROMOTION PO",
        "links": [
            "f30f99951816fb1d",
            "6cf8b7f3e0ae07e8"
        ],
        "x": 405,
        "y": 160,
        "wires": [
            [
                "c6d4822d9fe7d113"
            ]
        ]
    },
    {
        "id": "9ef6908ea055f05a",
        "type": "link out",
        "z": "b59ecb5ade20da39",
        "name": "SET TABLES OUT",
        "mode": "link",
        "links": [
            "768ea0d96edd1973"
        ],
        "x": 1005,
        "y": 180,
        "wires": []
    },
    {
        "id": "768ea0d96edd1973",
        "type": "link in",
        "z": "b59ecb5ade20da39",
        "name": "EL NUM CHECK IN",
        "links": [
            "9ef6908ea055f05a"
        ],
        "x": 105,
        "y": 500,
        "wires": [
            [
                "dc273278808a8306"
            ]
        ]
    },
    {
        "id": "8550637898852c55",
        "type": "link out",
        "z": "b59ecb5ade20da39",
        "name": "",
        "mode": "link",
        "links": [
            "d71ff022f6f62971"
        ],
        "x": 1375,
        "y": 540,
        "wires": []
    },
    {
        "id": "42154ee05368fa86",
        "type": "mysql",
        "z": "b59ecb5ade20da39",
        "mydb": "14f41b2b.4deca5",
        "name": "STAGE",
        "x": 220,
        "y": 620,
        "wires": [
            [
                "0a1bfe9fdd910ed1"
            ]
        ]
    },
    {
        "id": "0a1bfe9fdd910ed1",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "Build Insert",
        "func": "if(msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0 ) {\n\n    \n    let topic = \"insert into \"+msg.prodTable+\" ( \";\n    let allvalues = \"values \"; \n    \n    Object.keys(msg.payload[0]).forEach( k => {\n        \n         topic = topic + k + \",\"\n        \n        \n    })\n\n    topic = topic.slice(0,-1) //rimuoviamo la virgola finale\n    topic = topic + \")\"\n    \n    \n    msg.payload.forEach( obj => {\n        \n        let values = \"\";\n        Object.keys(obj).forEach( k => {\n    \n            let value;\n            msg.logmsg.message = obj[k]+\" - \"+ typeof obj[k]\n            //node.log(msg.logmsg)\n            \n            if(obj[k]===null) {\n                value = null;\n            } else  if (typeof obj[k] === \"string\" ) {\n                \n               \n                    \n                    let s = obj[k].replace(/'/g, \"'\"+\"'\")\n                    value = '\"'+s+'\"'\n                \n                \n                \n            } else if (typeof obj[k] === \"object\" ) {\n                \n                let date = new Date(obj[k])\n                if(!obj[k]){ console.log(k, obj[k], date) }\n                value = \"STR_TO_DATE('\"+date.toISOString().slice(0, 10)+\"','%Y-%m-%d')\"\n\n            } \n            \n            else {\n                value = obj[k]\n            }\n    \n        values = values + value + \",\"\n    \n    \n        })\n        \n        values = values.slice(0,-1) //rimuoviamo la virgola finale\n        values = \"( \"+values + \"),\"\n        allvalues = allvalues + values;\n        \n    })\n    \n    allvalues = allvalues.slice(0,-1) //rimuoviamo la virgola finale\n\n    msg.topic = topic + allvalues;\n    \n}\n\nmsg.payload=msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 620,
        "wires": [
            [
                "f6a0b96cd17cefe5"
            ]
        ]
    },
    {
        "id": "f6a0b96cd17cefe5",
        "type": "mysql",
        "z": "b59ecb5ade20da39",
        "mydb": "ea1e5103bb9e91ad",
        "name": "PRODUZIONE",
        "x": 900,
        "y": 620,
        "wires": [
            [
                "3bfb1a5ca82b6418"
            ]
        ]
    },
    {
        "id": "3bfb1a5ca82b6418",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "Log message",
        "func": "msg.logmsg.message = \"Promotion Done: \"+msg.payload;\nnode.log(msg.logmsg)\n\nmsg.payload=msg.logmsg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 620,
        "wires": [
            [
                "6cf8b7f3e0ae07e8"
            ]
        ]
    },
    {
        "id": "d71ff022f6f62971",
        "type": "link in",
        "z": "b59ecb5ade20da39",
        "name": "INSERT PROMOTION IN",
        "links": [
            "8550637898852c55"
        ],
        "x": 105,
        "y": 620,
        "wires": [
            [
                "42154ee05368fa86"
            ]
        ]
    },
    {
        "id": "6cf8b7f3e0ae07e8",
        "type": "link out",
        "z": "b59ecb5ade20da39",
        "name": "",
        "mode": "link",
        "links": [
            "caf02b1eba69f0f9"
        ],
        "x": 1475,
        "y": 620,
        "wires": []
    },
    {
        "id": "06c1eb93b2992513",
        "type": "switch",
        "z": "b59ecb5ade20da39",
        "name": "",
        "property": "stageTables",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 200,
        "wires": [
            [
                "699931099e544995"
            ],
            [
                "3f7c13bd8ad3ca7c"
            ]
        ]
    },
    {
        "id": "3f7c13bd8ad3ca7c",
        "type": "link out",
        "z": "b59ecb5ade20da39",
        "name": "",
        "mode": "link",
        "links": [
            "e7279cd35276dedb"
        ],
        "x": 815,
        "y": 220,
        "wires": []
    },
    {
        "id": "761d85f925344ac7",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "Delete & Insert PROD Staging",
        "func": "let topic = \n \"delete from latestplayers_staging; \"\n+\"delete from latestclubs_staging; \"\n+\"delete from latestleagues_staging; \"\n+\"delete from superstats; \"\n+\"delete from virtualteams where virtualteams.elaborationNum < (select max(virtualteams.elaborationNum) from virtualteams ) ; \"\n\n+\"insert into latestplayers_staging select * from latestplayers_archive where latestplayers_archive.elaborationNum = (select max(latestplayers_archive.elaborationNum) from latestplayers_archive ); \"\n+\"insert into latestclubs_staging select * from latestclubs_archive where latestclubs_archive.elaborationNum = (select max(latestclubs_archive.elaborationNum) from latestclubs_archive ); \" \n+\"insert into latestleagues_staging select * from latestleagues_archive  where latestleagues_archive.elaborationNum = (select max(latestleagues_archive.elaborationNum) from latestleagues_archive ); \" \n+\"insert into superstats select * from superstats_archive where superstats_archive.elaborationNum = (select max(superstats_archive.elaborationNum) from superstats_archive ); \" \n\nmsg.topic=topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 720,
        "wires": [
            [
                "d5c2b92ad4d3ed07"
            ]
        ]
    },
    {
        "id": "d5c2b92ad4d3ed07",
        "type": "mysql",
        "z": "b59ecb5ade20da39",
        "mydb": "ea1e5103bb9e91ad",
        "name": "PRODUZIONE",
        "x": 540,
        "y": 720,
        "wires": [
            [
                "bae7556c92529b5d"
            ]
        ]
    },
    {
        "id": "bae7556c92529b5d",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "Log message",
        "func": "msg.logmsg.message = \"Stagin to archive completed\";\nnode.log(msg.logmsg)\n\nmsg.payload=msg.logmsg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 720,
        "wires": [
            [
                "ea1c82ad889c1af4"
            ]
        ]
    },
    {
        "id": "32d37bcfa06377f4",
        "type": "link in",
        "z": "b59ecb5ade20da39",
        "name": "INSERT STAGING IN",
        "links": [
            "84fc758bbdf2ab5c"
        ],
        "x": 105,
        "y": 720,
        "wires": [
            [
                "761d85f925344ac7"
            ]
        ]
    },
    {
        "id": "8e304f161eb28fa6",
        "type": "http request",
        "z": "b59ecb5ade20da39",
        "name": "Push To Redis",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://node-red-2.stdfootball.ovh/pushtoredis",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 640,
        "y": 860,
        "wires": [
            [
                "c028d8f7a9403c1e"
            ]
        ]
    },
    {
        "id": "281b1686c66bfd5f",
        "type": "http request",
        "z": "b59ecb5ade20da39",
        "name": "Load Production Tree",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://node-red-2.stdfootball.ovh/loadproductiontree",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 260,
        "y": 860,
        "wires": [
            [
                "88d18f7cfdea7177"
            ]
        ]
    },
    {
        "id": "e0a142c714f95fde",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "End Response",
        "func": "msg.logmsg.message = \"Full Promotion Completed\";\nnode.log(msg.logmsg)\n\nmsg.payload=msg.logmsg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 860,
        "wires": [
            [
                "fe7a19cb762461e9"
            ]
        ]
    },
    {
        "id": "fe7a19cb762461e9",
        "type": "http response",
        "z": "b59ecb5ade20da39",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1230,
        "y": 860,
        "wires": []
    },
    {
        "id": "88d18f7cfdea7177",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "Log message",
        "func": "node.log(JSON.parse(msg.payload))\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 860,
        "wires": [
            [
                "8e304f161eb28fa6"
            ]
        ]
    },
    {
        "id": "c028d8f7a9403c1e",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "Log message",
        "func": "node.log(JSON.parse(msg.payload))\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 860,
        "wires": [
            [
                "e0a142c714f95fde"
            ]
        ]
    },
    {
        "id": "ea1c82ad889c1af4",
        "type": "link out",
        "z": "b59ecb5ade20da39",
        "name": "",
        "mode": "link",
        "links": [
            "26b1510fe548297a"
        ],
        "x": 955,
        "y": 720,
        "wires": []
    },
    {
        "id": "6dbfb80749261c17",
        "type": "link in",
        "z": "b59ecb5ade20da39",
        "name": "PRODUCTION LOAD",
        "links": [
            "f15f94c9b0e50b9b"
        ],
        "x": 115,
        "y": 860,
        "wires": [
            [
                "281b1686c66bfd5f"
            ]
        ]
    },
    {
        "id": "09550328cd201b58",
        "type": "http in",
        "z": "b59ecb5ade20da39",
        "name": "",
        "url": "/elaborationNums",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1020,
        "wires": [
            [
                "3144a52eec772b4f"
            ]
        ]
    },
    {
        "id": "3144a52eec772b4f",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "Check PROD El.Num",
        "func": "msg.topic=\"select max(elaborationNum) as elaborationNum from latestplayers_archive;select max(elaborationNum) as elaborationNum from superstats_archive;select max(elaborationNum) as elaborationNum from virtualteams;\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1020,
        "wires": [
            [
                "9f01ad8b2de5be19"
            ]
        ]
    },
    {
        "id": "9f01ad8b2de5be19",
        "type": "mysql",
        "z": "b59ecb5ade20da39",
        "mydb": "ea1e5103bb9e91ad",
        "name": "PRODUZIONE",
        "x": 660,
        "y": 1020,
        "wires": [
            [
                "849e02a58b2fe114"
            ]
        ]
    },
    {
        "id": "849e02a58b2fe114",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "Check STAGE  El. Num",
        "func": "msg.elaborationNums = {};\n\nmsg.elaborationNums.production = msg.payload[0][0].elaborationNum;\nmsg.elaborationNums.productionSuperstats = msg.payload[1][0].elaborationNum;\nmsg.elaborationNums.productionVirtualteams = msg.payload[2][0].elaborationNum;\n\nmsg.topic=\"select max(elaborationNum) as elaborationNum from latestplayers_staging;select max(elaborationNum) as elaborationNum from superstats;select max(elaborationNum) as elaborationNum from virtualteams;\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 910,
        "y": 1020,
        "wires": [
            [
                "799f44b2701be810"
            ]
        ]
    },
    {
        "id": "799f44b2701be810",
        "type": "mysql",
        "z": "b59ecb5ade20da39",
        "mydb": "14f41b2b.4deca5",
        "name": "STAGE",
        "x": 1140,
        "y": 1020,
        "wires": [
            [
                "36622074e3f897ab"
            ]
        ]
    },
    {
        "id": "36622074e3f897ab",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "El. Num Dates",
        "func": "msg.elaborationNums.stage = msg.payload[0][0].elaborationNum;\nmsg.elaborationNums.stageSuperstats = msg.payload[1][0].elaborationNum;\nmsg.elaborationNums.stageVirtualteams = msg.payload[2][0].elaborationNum;\n\n\n//msg.payload=msg.elaborationNums;\n\nmsg.topic=\"select * from elaborations where elaborationNum in (\"+msg.elaborationNums.stage+\",\"+msg.elaborationNums.stageSuperstats+\",\"+msg.elaborationNums.stageVirtualteams+\",\"+msg.elaborationNums.production+\",\"+msg.elaborationNums.productionSuperstats+\",\"+msg.elaborationNums.productionVirtualteams+\")\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1360,
        "y": 1020,
        "wires": [
            [
                "eee75d0808d83ddb"
            ]
        ]
    },
    {
        "id": "b0f34f8c2c3187bc",
        "type": "debug",
        "z": "b59ecb5ade20da39",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2050,
        "y": 1000,
        "wires": []
    },
    {
        "id": "5003017fa4d66ca9",
        "type": "inject",
        "z": "b59ecb5ade20da39",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1080,
        "wires": [
            [
                "3144a52eec772b4f"
            ]
        ]
    },
    {
        "id": "f078a6f2de83f1f9",
        "type": "http response",
        "z": "b59ecb5ade20da39",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 2030,
        "y": 1100,
        "wires": []
    },
    {
        "id": "a0693f66a11fa944",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "DELETE RIS, INPUT, PLAYER_TEMP",
        "func": "let q = \"delete from ris;delete from player_temp;delete from input;\"\nmsg.topic = q;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 800,
        "wires": [
            [
                "87aa98d65438c71f"
            ]
        ]
    },
    {
        "id": "23215e93c63bae70",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "Checkpoint",
        "func": "\n    console.log(\"ALL RIS INPUT, PLAYER_TEMP RECORDS DELETED \")\n    return msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 830,
        "y": 800,
        "wires": [
            [
                "950ca484573c0b2f"
            ]
        ]
    },
    {
        "id": "950ca484573c0b2f",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "INSERT RIS, INPUT, PLAYER_TEMP",
        "func": "let q = \"insert into ris (select * from ris_view);insert into player_temp (select * from player_temp_view);insert into input (select * from input_view);\"\nmsg.topic = q;\nmsg.dataset = \"ris\"\nflow.set(\"rck\",false);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1110,
        "y": 800,
        "wires": [
            [
                "a98170a86170ca20"
            ]
        ]
    },
    {
        "id": "c29a79104547d6c9",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "Checkpoint",
        "func": "\n    console.log(\"ALL RECORDS UPDATED\")\n    msg.payload=\"ALL RECORDS UPDATED\";\n    return msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 800,
        "wires": [
            [
                "f15f94c9b0e50b9b"
            ]
        ]
    },
    {
        "id": "87aa98d65438c71f",
        "type": "mysql",
        "z": "b59ecb5ade20da39",
        "mydb": "ea1e5103bb9e91ad",
        "name": "PRODUZIONE",
        "x": 580,
        "y": 800,
        "wires": [
            [
                "23215e93c63bae70"
            ]
        ]
    },
    {
        "id": "a98170a86170ca20",
        "type": "mysql",
        "z": "b59ecb5ade20da39",
        "mydb": "ea1e5103bb9e91ad",
        "name": "PRODUZIONE",
        "x": 1380,
        "y": 800,
        "wires": [
            [
                "c29a79104547d6c9"
            ]
        ]
    },
    {
        "id": "26b1510fe548297a",
        "type": "link in",
        "z": "b59ecb5ade20da39",
        "name": "UPDATEOLDPROD",
        "links": [
            "ea1c82ad889c1af4"
        ],
        "x": 105,
        "y": 800,
        "wires": [
            [
                "a0693f66a11fa944"
            ]
        ]
    },
    {
        "id": "f15f94c9b0e50b9b",
        "type": "link out",
        "z": "b59ecb5ade20da39",
        "name": "",
        "mode": "link",
        "links": [
            "6dbfb80749261c17"
        ],
        "x": 1795,
        "y": 800,
        "wires": []
    },
    {
        "id": "e6231290ccb2ab4b",
        "type": "http in",
        "z": "b59ecb5ade20da39",
        "name": "",
        "url": "/dominanceNums",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1220,
        "wires": [
            [
                "4e60a63817511abc"
            ]
        ]
    },
    {
        "id": "4e60a63817511abc",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "get Domince nums",
        "func": "msg.topic=\"select 'info', count(*) as records ,run, week, lastUpdate from dominanceplayerinfo where run = (select max(run) from dominanceplayerinfo) GROUP BY run \"\n+\"union \"\n+\"select 'stats', count(*) as records ,run, week, lastUpdate from dominanceplayerstats where run = (select max(run) from dominanceplayerstats) GROUP BY run \"\n+\"union \"\n+\"select 'vol', count(*) as records ,run, week, lastUpdate from dominanceplayersparamsvol where run = (select max(run) from dominanceplayersparamsvol) GROUP BY run \"\n+\"union \"\n+\"select 'uniq', count(*) as records ,run, week, lastUpdate from dominanceplayersparamsuniq where run = (select max(run) from dominanceplayersparamsuniq) GROUP BY run\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 1220,
        "wires": [
            [
                "051dfaf31e49d872"
            ]
        ]
    },
    {
        "id": "051dfaf31e49d872",
        "type": "mysql",
        "z": "b59ecb5ade20da39",
        "mydb": "14f41b2b.4deca5",
        "name": "STAGE",
        "x": 600,
        "y": 1220,
        "wires": [
            [
                "50b38962a11c79c3"
            ]
        ]
    },
    {
        "id": "50b38962a11c79c3",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "El. Num Check",
        "func": "//msg.elaborationNums.stage = msg.payload[0][0].elaborationNum;\n//msg.elaborationNums.stageSuperstats = msg.payload[1][0].elaborationNum;\n\n//msg.payload=msg.elaborationNums;\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1220,
        "wires": [
            [
                "db210f3c2fee3c9e",
                "346eb1b24f938b39"
            ]
        ]
    },
    {
        "id": "db210f3c2fee3c9e",
        "type": "debug",
        "z": "b59ecb5ade20da39",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 1220,
        "wires": []
    },
    {
        "id": "3436421f1a0e1c05",
        "type": "inject",
        "z": "b59ecb5ade20da39",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1280,
        "wires": [
            [
                "4e60a63817511abc"
            ]
        ]
    },
    {
        "id": "346eb1b24f938b39",
        "type": "http response",
        "z": "b59ecb5ade20da39",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 973.333251953125,
        "y": 1315.333251953125,
        "wires": []
    },
    {
        "id": "eee75d0808d83ddb",
        "type": "mysql",
        "z": "b59ecb5ade20da39",
        "mydb": "14f41b2b.4deca5",
        "name": "STAGE",
        "x": 1580,
        "y": 1020,
        "wires": [
            [
                "7e430215ea7554d4"
            ]
        ]
    },
    {
        "id": "7e430215ea7554d4",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "El. Num Check",
        "func": "let dates = msg.payload;\n\nmsg.elaborationNums.stageDate = dates.filter( r => r.elaborationNum == msg.elaborationNums.stage).map( r => r.startedAt)[0];\nmsg.elaborationNums.stageSuperstatsDate = dates.filter( r => r.elaborationNum == msg.elaborationNums.stageSuperstats).map( r => r.startedAt)[0];\nmsg.elaborationNums.productionDate = dates.filter( r => r.elaborationNum == msg.elaborationNums.production).map( r => r.startedAt)[0];\nmsg.elaborationNums.productionSuperstatsDate = dates.filter( r => r.elaborationNum == msg.elaborationNums.productionSuperstats).map( r => r.startedAt)[0];\nmsg.elaborationNums.stageVirtualteamsDate = dates.filter( r => r.elaborationNum == msg.elaborationNums.stageVirtualteams).map( r => r.startedAt)[0];\nmsg.elaborationNums.productionVirtualteamsDate = dates.filter( r => r.elaborationNum == msg.elaborationNums.productionVirtualteams).map( r => r.startedAt)[0];\n\nmsg.payload=msg.elaborationNums;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 1020,
        "wires": [
            [
                "b0f34f8c2c3187bc",
                "f078a6f2de83f1f9"
            ]
        ]
    },
    {
        "id": "9a781b9182fe467a",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "Virtual ",
        "func": "\nlet logmsg = {}\n    logmsg.type = \"db\"\n    logmsg.taskType = \"promotion\"\n    logmsg.taskId = Math.floor(Math.random() * 1000001);\n    logmsg.message = \"Setting virtual teams\"\n    logmsg.taskRunning = true\n    \n    \n    msg.logmsg = logmsg;\n    node.log(msg.logmsg)\n\n\nlet vtdatasets = [];\nlet modules = [\"4-4-2\",\n\"4-3-3\",\n\"4-3-2-1\",\n\"4-2-4\",\n\"3-4-3\",\n\"4-3-1-2\",\n\"5-3-2\",\n\"3-5-2\",\n\"4-1-2-1-2\",\n\"4-5-1\",\n\"4-1-4-1\",\n\"3-4-2-1\"]\n\n   \n   modules.forEach(module => {\n       \n    vtdatasets.push(\"virtualteams where orderby='effectiveness' and module='\"+module+\"'\");\n    vtdatasets.push(\"virtualteams where orderby='salaryPotential' and module='\"+module+\"'\");\n    vtdatasets.push(\"virtualteams where orderby='salaryNet' and module='\"+module+\"'\");\n    vtdatasets.push(\"virtualteams where orderby='potentialPrice' and module='\"+module+\"'\");\n    vtdatasets.push(\"virtualteams where orderby='performance' and module='\"+module+\"'\");\n    vtdatasets.push(\"virtualteams where orderby='consumerValue' and module='\"+module+\"'\");\n       \n   })\n    \n    \n    flow.set(\"vtdatasets\",vtdatasets)\n    msg.vtdatasets=vtdatasets;\n    \n   msg.topic=\"delete from virtualteams;\"\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 300,
        "wires": [
            [
                "c296492a3c9fe33e"
            ]
        ]
    },
    {
        "id": "0ad9eddaea0a9f09",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "Array Popper",
        "func": "\nif(flow.get(\"vtdatasets\").length > 0 ) {\n    \n    msg.payload = flow.get(\"vtdatasets\").pop();\n    \n    msg.logmsg.message=\"Promoting \"+msg.payload\n    node.log(msg.logmsg)\n\n    msg.stageTables = true;\n    \n    msg.topic=\"select * from virtualteams \"+msg.payload;\n    \n    \n} else {\n    \n    msg.payload = \"staging\";\n    \n    msg.logmsg.message=\"updating production staging tables \";\n    node.log(msg.logmsg)\n    \n    msg.stageTables = false;\n\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 300,
        "wires": [
            [
                "057590e5c3f1b231"
            ]
        ]
    },
    {
        "id": "057590e5c3f1b231",
        "type": "switch",
        "z": "b59ecb5ade20da39",
        "name": "",
        "property": "stageTables",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 910,
        "y": 300,
        "wires": [
            [
                "8415173f74e4eb8e"
            ],
            [
                "84fc758bbdf2ab5c"
            ]
        ]
    },
    {
        "id": "8415173f74e4eb8e",
        "type": "mysql",
        "z": "b59ecb5ade20da39",
        "mydb": "14f41b2b.4deca5",
        "name": "STAGE",
        "x": 1060,
        "y": 280,
        "wires": [
            [
                "03bf80cd9ccbdbfb"
            ]
        ]
    },
    {
        "id": "03bf80cd9ccbdbfb",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "Build Insert",
        "func": "if(msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0 ) {\n\n    \n    let topic = \"insert into virtualteams ( \";\n    let allvalues = \"values \"; \n    \n    Object.keys(msg.payload[0]).forEach( k => {\n        \n         topic = topic + \"`\"+ k + \"`\" + \",\"\n        \n        \n    })\n\n    topic = topic.slice(0,-1) //rimuoviamo la virgola finale\n    topic = topic + \")\"\n    \n    \n    msg.payload.forEach( obj => {\n        \n        let values = \"\";\n        Object.keys(obj).forEach( k => {\n    \n            let value;\n            msg.logmsg.message = obj[k]+\" - \"+ typeof obj[k]\n            //node.log(msg.logmsg)\n            \n            if(obj[k]===null) {\n                value = null;\n            } else  if (typeof obj[k] === \"string\" ) {\n                \n               \n                    \n                    let s = obj[k].replace(/'/g, \"'\"+\"'\")\n                    value = '\"'+s+'\"'\n                \n                \n                \n            } else if (typeof obj[k] === \"object\" ) {\n                \n                let date = new Date(obj[k])\n                if(!obj[k]){ console.log(k, obj[k], date) }\n                value = \"STR_TO_DATE('\"+date.toISOString().slice(0, 10)+\"','%Y-%m-%d')\"\n\n            } \n            \n            else {\n                value = obj[k]\n            }\n    \n        values = values + value + \",\"\n    \n    \n        })\n        \n        values = values.slice(0,-1) //rimuoviamo la virgola finale\n        values = \"( \"+values + \"),\"\n        allvalues = allvalues + values;\n        \n    })\n    \n    allvalues = allvalues.slice(0,-1) //rimuoviamo la virgola finale\n\n    msg.topic = topic + allvalues;\n    \n}\n\nmsg.payload=msg.topic;\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 280,
        "wires": [
            [
                "365a90109dec5f53"
            ]
        ]
    },
    {
        "id": "365a90109dec5f53",
        "type": "mysql",
        "z": "b59ecb5ade20da39",
        "mydb": "ea1e5103bb9e91ad",
        "name": "PRODUZIONE",
        "x": 1540,
        "y": 280,
        "wires": [
            [
                "ec8816a77f4cf4cc"
            ]
        ]
    },
    {
        "id": "ec8816a77f4cf4cc",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "Log message",
        "func": "msg.logmsg.message = \"Promotion Done: \"+msg.payload;\nnode.log(msg.logmsg)\n\nmsg.payload=msg.logmsg\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1740,
        "y": 280,
        "wires": [
            [
                "292466e6fd0c5f57"
            ]
        ]
    },
    {
        "id": "84fc758bbdf2ab5c",
        "type": "link out",
        "z": "b59ecb5ade20da39",
        "name": "",
        "mode": "link",
        "links": [
            "32d37bcfa06377f4"
        ],
        "x": 1015,
        "y": 340,
        "wires": []
    },
    {
        "id": "e7279cd35276dedb",
        "type": "link in",
        "z": "b59ecb5ade20da39",
        "name": "VIRTUALIN",
        "links": [
            "3f7c13bd8ad3ca7c"
        ],
        "x": 185,
        "y": 300,
        "wires": [
            [
                "9a781b9182fe467a"
            ]
        ]
    },
    {
        "id": "b997da021fdf4c81",
        "type": "link in",
        "z": "b59ecb5ade20da39",
        "name": "VIRTUALPOPPERIN",
        "links": [
            "292466e6fd0c5f57"
        ],
        "x": 365,
        "y": 360,
        "wires": [
            [
                "0ad9eddaea0a9f09"
            ]
        ]
    },
    {
        "id": "292466e6fd0c5f57",
        "type": "link out",
        "z": "b59ecb5ade20da39",
        "name": "",
        "mode": "link",
        "links": [
            "b997da021fdf4c81"
        ],
        "x": 1875,
        "y": 280,
        "wires": []
    },
    {
        "id": "c296492a3c9fe33e",
        "type": "mysql",
        "z": "b59ecb5ade20da39",
        "mydb": "ea1e5103bb9e91ad",
        "name": "PRODUZIONE",
        "x": 480,
        "y": 300,
        "wires": [
            [
                "0ad9eddaea0a9f09"
            ]
        ]
    },
    {
        "id": "eb97a4fdd5bc3e38",
        "type": "inject",
        "z": "b59ecb5ade20da39",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 400,
        "wires": [
            [
                "9a781b9182fe467a"
            ]
        ]
    },
    {
        "id": "2a30eabb13b36ca9",
        "type": "debug",
        "z": "b59ecb5ade20da39",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1270,
        "y": 1920,
        "wires": []
    },
    {
        "id": "bb901243d0eaf001",
        "type": "http in",
        "z": "b59ecb5ade20da39",
        "name": "",
        "url": "/capologyNums",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 170,
        "y": 1400,
        "wires": [
            [
                "e4b8c8c798f99e27"
            ]
        ]
    },
    {
        "id": "e4b8c8c798f99e27",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "get Capology nums",
        "func": "msg.topic=\"select max(run) as run from capology_contracts\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 1400,
        "wires": [
            [
                "3f3a88fb342a9895"
            ]
        ]
    },
    {
        "id": "3f3a88fb342a9895",
        "type": "mysql",
        "z": "b59ecb5ade20da39",
        "mydb": "14f41b2b.4deca5",
        "name": "STAGE",
        "x": 620,
        "y": 1400,
        "wires": [
            [
                "4eb028d59e02dcb9"
            ]
        ]
    },
    {
        "id": "4eb028d59e02dcb9",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "El. Num Check",
        "func": "//msg.elaborationNums.stage = msg.payload[0][0].elaborationNum;\n//msg.elaborationNums.stageSuperstats = msg.payload[1][0].elaborationNum;\n\n//msg.payload=msg.elaborationNums;\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1400,
        "wires": [
            [
                "b7248c136e084347",
                "a4fa3f1d75de62f7"
            ]
        ]
    },
    {
        "id": "b7248c136e084347",
        "type": "debug",
        "z": "b59ecb5ade20da39",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1400,
        "wires": []
    },
    {
        "id": "278884ee769d4e2a",
        "type": "inject",
        "z": "b59ecb5ade20da39",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1460,
        "wires": [
            [
                "e4b8c8c798f99e27"
            ]
        ]
    },
    {
        "id": "a4fa3f1d75de62f7",
        "type": "http response",
        "z": "b59ecb5ade20da39",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 973.333251953125,
        "y": 1495.333251953125,
        "wires": []
    },
    {
        "id": "810c8761d9e70a0e",
        "type": "http in",
        "z": "b59ecb5ade20da39",
        "name": "",
        "url": "/optaSquadsNums",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 180,
        "y": 1580,
        "wires": [
            [
                "158c73a04b61b0d8"
            ]
        ]
    },
    {
        "id": "158c73a04b61b0d8",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "get OPTA squads nums",
        "func": "msg.topic=\"select max(run) as run from OPTA_squads\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1580,
        "wires": [
            [
                "884ef97177ddf97f"
            ]
        ]
    },
    {
        "id": "884ef97177ddf97f",
        "type": "mysql",
        "z": "b59ecb5ade20da39",
        "mydb": "14f41b2b.4deca5",
        "name": "STAGE",
        "x": 620,
        "y": 1580,
        "wires": [
            [
                "b354faa9067514ce"
            ]
        ]
    },
    {
        "id": "b354faa9067514ce",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "El. Num Check",
        "func": "//msg.elaborationNums.stage = msg.payload[0][0].elaborationNum;\n//msg.elaborationNums.stageSuperstats = msg.payload[1][0].elaborationNum;\n\n//msg.payload=msg.elaborationNums;\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1580,
        "wires": [
            [
                "832d2cf433b0399f",
                "543501c62724db71"
            ]
        ]
    },
    {
        "id": "832d2cf433b0399f",
        "type": "debug",
        "z": "b59ecb5ade20da39",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1580,
        "wires": []
    },
    {
        "id": "cbf5064e6f997e3c",
        "type": "inject",
        "z": "b59ecb5ade20da39",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1640,
        "wires": [
            [
                "158c73a04b61b0d8"
            ]
        ]
    },
    {
        "id": "543501c62724db71",
        "type": "http response",
        "z": "b59ecb5ade20da39",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 973.333251953125,
        "y": 1675.333251953125,
        "wires": []
    },
    {
        "id": "98713c881778a10d",
        "type": "http in",
        "z": "b59ecb5ade20da39",
        "name": "",
        "url": "/optaTransfersNums",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 1760,
        "wires": [
            [
                "4e8dff1caaba0f6e"
            ]
        ]
    },
    {
        "id": "4e8dff1caaba0f6e",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "get OPTA trans nums",
        "func": "msg.topic=\"select max(run) as run from OPTA_transfers\";\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 1760,
        "wires": [
            [
                "dd9873ad25e90b02"
            ]
        ]
    },
    {
        "id": "dd9873ad25e90b02",
        "type": "mysql",
        "z": "b59ecb5ade20da39",
        "mydb": "14f41b2b.4deca5",
        "name": "STAGE",
        "x": 620,
        "y": 1760,
        "wires": [
            [
                "377a03c8ecc4ccc3"
            ]
        ]
    },
    {
        "id": "377a03c8ecc4ccc3",
        "type": "function",
        "z": "b59ecb5ade20da39",
        "name": "El. Num Check",
        "func": "//msg.elaborationNums.stage = msg.payload[0][0].elaborationNum;\n//msg.elaborationNums.stageSuperstats = msg.payload[1][0].elaborationNum;\n\n//msg.payload=msg.elaborationNums;\n\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1760,
        "wires": [
            [
                "bd261f5221a8e2ce",
                "f441114042e9b5fb"
            ]
        ]
    },
    {
        "id": "bd261f5221a8e2ce",
        "type": "debug",
        "z": "b59ecb5ade20da39",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 1760,
        "wires": []
    },
    {
        "id": "b6422a396859b84f",
        "type": "inject",
        "z": "b59ecb5ade20da39",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1820,
        "wires": [
            [
                "4e8dff1caaba0f6e"
            ]
        ]
    },
    {
        "id": "f441114042e9b5fb",
        "type": "http response",
        "z": "b59ecb5ade20da39",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 973.333251953125,
        "y": 1855.333251953125,
        "wires": []
    },
    {
        "id": "75e62c500fa62285",
        "type": "http in",
        "z": "4483aeb6f4838169",
        "name": "/players",
        "url": "/players",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 120,
        "wires": [
            [
                "ffcd4b0cbad03196"
            ]
        ]
    },
    {
        "id": "59f413fb15cd5e78",
        "type": "comment",
        "z": "4483aeb6f4838169",
        "name": "Players",
        "info": "",
        "x": 270,
        "y": 60,
        "wires": []
    },
    {
        "id": "de8eb0bde7f12067",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Get all or some Players",
        "func": "/** Player\nreq.params.id\n */\n \n //const Utils = global.get(\"UTILS\");\n \n console.log(\"ALL OR SOME PLAYERS\")\n\nlet TheFootballTree;\n\n\ntry {\n    \n    TheFootballTree = JSON.parse(JSON.stringify(global.get(\"TheLatestFooballTree\"))); //SOLITO per evitare riferimenti\n    \n} catch (e) {\n    console.log(e);\n    msg.status = 500; //Internal server Error\n    msg.payload=\"Couldn't find or parse the Football Tree\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\n\nif (!TheFootballTree) {\n    \n    msg.status = 500; //Internal server Error\n    msg.payload=\"Couldn't find or build the Football Tree\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\n\n\nlet resp=[];\nlet properties = []\nlet doIt = true\n\ntry {\n    \n   \n   \n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => {\n                club.Players.forEach( p => {\n                    \n                    if (doIt) {\n                        Object.keys(p).forEach( k => {\n        \n                            let property = {\n                                \n                                propertyName : k,\n                                propertyType : typeof p[k]\n                            }\n                            \n                            properties.push(property)\n                        } )\n                        \n                        doIt = false;\n                    }\n                    \n                    let obj = {};\n                    \n                    let fn = true\n                    let cn = true \n                    let ln = true\n\n                    obj.playerId = p.playerId;\n                    obj.fullName = p.fullName;\n                    obj.clubName = p.currentClubName;\n                    obj.clubId = p.currentClubId;\n                    obj.leagueName = p.currentLeagueName\n                    obj.leagueId=p.currentLeagueId;\n                    obj.age = p.age\n                    obj.position = p.currentPosition;\n                    \n                    \n                    if ( msg.req.query.fullName !== undefined ) {\n                        \n                        fn = obj.fullName.toLowerCase().includes(msg.req.query.fullName.toLowerCase());\n                    }\n                    \n                    if ( msg.req.query.clubName !== undefined ) {\n                        \n                        cn = obj.clubName.toLowerCase().includes(msg.req.query.clubName.toLowerCase());\n                    }\n                    \n                    if ( msg.req.query.leagueName !== undefined ) {\n                        \n                        ln = obj.leagueName.toLowerCase().includes(msg.req.query.leagueName.toLowerCase());\n                    }\n                    \n                    \n                    \n                    \n                    fn && cn && ln ? resp.push(p) : false;\n                })\n                \n        })\n    })    \n\n} catch (e) {\n    \n    msg.status=500;\n    msg.payload=\"Internal Error\"\n}\n\nmsg.status=200\nmsg.payload = {\n    success : true,\n    data : {\n        properties : properties,\n        values : resp\n    },\n    message : \"success\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 120,
        "wires": [
            [
                "b6d2dd213c974b47"
            ]
        ]
    },
    {
        "id": "b6d2dd213c974b47",
        "type": "http response",
        "z": "4483aeb6f4838169",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 750,
        "y": 120,
        "wires": []
    },
    {
        "id": "af10c40784738326",
        "type": "http in",
        "z": "4483aeb6f4838169",
        "name": "/players/:id",
        "url": "/players/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 300,
        "wires": [
            [
                "bcd0aad6b0646e60"
            ]
        ]
    },
    {
        "id": "9c418bf8c285ecb9",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Get a Player",
        "func": "/** Player\nreq.params.id\n */\n \n const Utils = global.get(\"UTILS\");\n \n let playerId = msg.req.params.id;\n let TheFootballTree;\n console.log(\"A PLAYER \"+playerId)\n\ntry {\n    \n    TheFootballTree = JSON.parse(JSON.stringify(global.get(\"TheLatestFooballTree\"))); //SOLITO per evitare riferimenti\n    \n} catch (e) {\n    console.log(e);\n    msg.status = 500; //Internal server Error\n    msg.payload=\"Couldn't find or parse the Football Tree\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\n\nif (!TheFootballTree) {\n    \n    msg.status = 500; //Internal server Error\n    msg.payload=\"Couldn't find or build the Football Tree\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\nif (!playerId) {\n    \n    msg.status = 400; //Internal server Error\n    msg.payload=\"Missing playerId\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\nlet resp={};\nplayerId=playerId.replace(/\\s/g, '')\n\ntry {\n    \n   \n   \n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => {\n                club.Players.forEach( p => {\n                    \n                   if (p.playerId == playerId) {\n                       \n                        let obj = {}\n                        \n                        obj.playerId = p.playerId;\n                        obj.fullName = p.fullName;\n                        obj.age = p.age\n                        obj.position = p.currentPosition;\n                        \n                        resp=obj;\n                        console.log(resp)\n                   }\n                       \n                   \n                })\n                \n        })\n    })    \n\n} catch (e) {\n    \n    msg.status=500;\n    msg.payload=\"Internal Error\"\n}\n\nmsg.status=200\nmsg.payload = resp;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 300,
        "wires": [
            [
                "2a3a393c9a3879c3"
            ]
        ]
    },
    {
        "id": "2a3a393c9a3879c3",
        "type": "http response",
        "z": "4483aeb6f4838169",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 750,
        "y": 300,
        "wires": []
    },
    {
        "id": "ffcd4b0cbad03196",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Auth",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 120,
        "wires": [
            [
                "de8eb0bde7f12067"
            ]
        ]
    },
    {
        "id": "bcd0aad6b0646e60",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Auth",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 300,
        "wires": [
            [
                "9c418bf8c285ecb9"
            ]
        ]
    },
    {
        "id": "686bc64e3789229c",
        "type": "http in",
        "z": "4483aeb6f4838169",
        "name": "/top20",
        "url": "/top20",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 680,
        "wires": [
            [
                "9aab9f8d1b5a33f3"
            ]
        ]
    },
    {
        "id": "2178acb79fe1e88f",
        "type": "comment",
        "z": "4483aeb6f4838169",
        "name": "Top 20",
        "info": "",
        "x": 270,
        "y": 620,
        "wires": []
    },
    {
        "id": "e18943198d191984",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Check Cache",
        "func": "/** Player\nreq.params.id\n */\n \n //const Utils = global.get(\"UTILS\");\n \n console.log(\"TOP20 CACHE STARTS\")\n\nlet top20  = flow.get(\"top20\");\nconsole.log(top20)\nmsg.loadTop20 = false;\n\nif (!top20) {\n    \n    msg.loadTop20 = true;\n    console.log(\"top20 missingg from cache\")\n    return msg; \n    \n}\n\n\nif (top20.data.length === 0) {\n    \n    msg.loadTop20 = true;\n    console.log(\"top20 missing data\")\n    return msg; \n\n}\n\nif (top20 && !top20.expiresAt) {\n     msg.loadTop20 = true;\n     console.log(\"top20 missing expiration date\")\n    return msg; \n    \n}\n\nif (top20 && top20.expiresAt) {\n    \n    try {\n        \n        let eD = new Date(top20.expiresAt)\n        let cD = new Date();\n        \n        msg.loadTop20 = cD>eD ? true : false\n        console.log(\"is top20 expired?\",msg.loadTop20)\n        return msg; \n        \n        \n    }\n    catch (e) {\n        node.error(e)\n        console.log(e)\n        msg.loadTop20 = true;\n        console.log(\"generic error\")\n        return msg; \n       \n    }\n     \n}\n\nconsole.log(\"Going to query the db?\",msg.loadTop20)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 680,
        "wires": [
            [
                "ae47a69b4a5d2ba9"
            ]
        ]
    },
    {
        "id": "9e481953f8fb288c",
        "type": "http response",
        "z": "4483aeb6f4838169",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 990,
        "y": 720,
        "wires": []
    },
    {
        "id": "9aab9f8d1b5a33f3",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Auth",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 680,
        "wires": [
            [
                "e18943198d191984"
            ]
        ]
    },
    {
        "id": "ae47a69b4a5d2ba9",
        "type": "switch",
        "z": "4483aeb6f4838169",
        "name": "",
        "property": "loadTop20",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 680,
        "wires": [
            [
                "9f711a081fef161e"
            ],
            [
                "9a3e2aa06c47553d"
            ]
        ]
    },
    {
        "id": "9a3e2aa06c47553d",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Response",
        "func": "/** Player\nreq.params.id\n */\n \n //const Utils = global.get(\"UTILS\");\n \nconsole.log(\"LOAD TICKER AND RESPOND\")\n\nlet top20  = flow.get(\"top20\");\n\nmsg.status = 200\nmsg.payload = top20.data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 720,
        "wires": [
            [
                "9e481953f8fb288c"
            ]
        ]
    },
    {
        "id": "9f711a081fef161e",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Query",
        "func": "let q = \"\tselect t1.*, (select lpa.expectedPrice from latestplayersarchive lpa where lpa.playerId=t1.playerId and lpa.week=(t1.week-1) limit 1) as 'previousExpectedPrice'\"\n+\"\t\"\n+\"\tfrom (\"\n+\"\t\"\n\t+\"\tSELECT \"\n\t\t+\"\tlp.week as 'week',\"\n\t\t+\"\tlp.playerId as 'playerId',\"\n\t\t+\"\tlp.name as 'name',\"\n\t\t+\"\tlp.fullName as 'fullName',\"\n\t\t+\"\tap.nationality as 'nationality',\"\n\t\t+\"\tlp.age as 'age',\"\n\t\t+\"\tlp.currentPosition as 'role',\"\n\t\t+\"\tcase \"\n\t\t\t+\"\twhen lp.superstar = 1 then 'Super Star'\"\n\t\t\t+\"\twhen lp.risingStar = 1 then 'Rising Star'\"\n\t\t\t+\"\twhen lp.emerging = 1 then 'Emerging'\"\n\t\t\t+\"\telse '-'\t\"\n\t\t+\"\tend as 'category', \"\n\t\t+\"\tlp.latestUniqueness as 'uniqueness',\"\n+\"\t\t\t\"\n\t\t+\"\tlp.currentClubName as 'club',\"\n\t\t+\"\tlp.masterClubName as 'rightsOwner',\"\n\t\t+\"\tlp.contractType as 'contract',\"\n\t\t+\"\tlp.endContract as 'deadline',\"\n\t\t+\"\tlp.remainingYearsOfContract as 'residual',\"\n\t\t+\"\tlp.residualValue as 'residualValue',\"\n\t\t+\"\tlp.salaryNet as 'netSalary',\"\n+\"\t\t\t\"\n\t\t+\"\tlp.potentialPrice as 'potentialPrice',\"\n\t\t+\"\tlp.expectedPrice as 'expectedPrice',\"\n+\"\t\t\t\"\n\t\t+\"\tlp.transferPrice as 'paidPrice',\"\n\t\t+\"\tlp.latestMacroVolatility as 'volatility',\"\n\t\t+\"\tlp.currentClubCluster as 'cluster',\"\n\t\t+\"\tlp.salaryOptimal as 'fairSalary'\"\n+\"\t\t\t\"\n+\"\t\"\n\t+\"\tFROM `latestplayers` lp, allplayers ap \"\n\t+\"\twhere lp.playerId=ap.playerId \"\n\t+\"\tORDER BY lp.expectedPrice desc limit 20 ) as t1\"\n+\"\t\t\"\n\t+\"\t;\"\n\n\nconsole.log(\"Top20 Query IN\")\nmsg.topic = q;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "2ce222345d7981ae",
        "type": "http response",
        "z": "4483aeb6f4838169",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1410,
        "y": 640,
        "wires": []
    },
    {
        "id": "58ce25aef93615db",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Respo",
        "func": "console.log(\"TOP20 FROM DB\");\n\nmsg.status = 200;\n\nlet playerArray = []\n\nif (msg.payload && msg.payload.length > 0 ) {\n    \n    msg.payload.forEach(p => {\n        \n        let player = {};\n        \n            player.name = p.name;\n            player.expectedPrice = p.expectedPrice.toFixed(2)+ \" M/€\"\n            player.variation = ( ( p.expectedPrice - p.previousExpectedPrice ) / p.previousExpectedPrice ) * 100;\n            player.variation=player.variation.toFixed(2)+\"%\"\n            player.profile = {};\n            player.sportRights = {};\n            player.economicRational = {};\n            \n            player.profile.fullName = p.fullName;\n            player.profile.citizenship = p.nationality;\n            player.profile.age = p.age;\n            player.profile.mainPosition = p.role;\n            player.profile.category = p.category\n            player.profile.uniqueness = p.uniqueness;\n            \n            player.sportRights.club = p.club\n            player.sportRights.rightsOwner = p.rightsOwner\n            player.sportRights.contract = p.contract\n            player.sportRights.deadline = p.deadline\n            player.sportRights.residual = p.residual\n            player.sportRights.residualValue = p.residualValue.toFixed(2)+ \" M/€\"\n            player.sportRights.netSalary = p.netSalary.toFixed(2)+ \" M/€\"\n            \n            player.economicRational.potentialPrice = p.potentialPrice.toFixed(2)+ \" M/€\"\n            player.economicRational.expectedPrice = p.expectedPrice.toFixed(2)+ \" M/€\"\n            player.economicRational.paidPrice = p.paidPrice.toFixed(2)+ \" M/€\"\n            player.economicRational.volatility = p.volatility\n            player.economicRational.cluster = p.cluster\n            player.economicRational.fairSalary = p.fairSalary.toFixed(2)+ \" M/€\"\n            \n            playerArray.push(player);\n        \n        \n    })\n    \n}\n\nmsg.payload=playerArray;\n\nlet   today = new Date();\nlet   tomorrow = new Date();\n      tomorrow.setDate(today.getDate() + 1);\n        \nlet month = tomorrow.getUTCMonth() + 1; //months from 1-12\nlet day = tomorrow.getUTCDate();\nlet year = tomorrow.getUTCFullYear();\n\n\n        \nlet     top20 = {};\n        top20.data = playerArray;\n        top20.expiresAt = year + \"-\" + month + \"-\" + day;\n    \nflow.set(\"top20\",top20);    \nconsole.log(\"tomorrow\",top20.expiresAt)\n//msg.payload=top20;\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 640,
        "wires": [
            [
                "2ce222345d7981ae"
            ]
        ]
    },
    {
        "id": "02f5d8315044b5d3",
        "type": "debug",
        "z": "4483aeb6f4838169",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 740,
        "wires": []
    },
    {
        "id": "0d8890c84abdc129",
        "type": "inject",
        "z": "4483aeb6f4838169",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 760,
        "wires": [
            [
                "9aab9f8d1b5a33f3"
            ]
        ]
    },
    {
        "id": "4788dd9b43a39ee6",
        "type": "http in",
        "z": "4483aeb6f4838169",
        "name": "/ticker",
        "url": "/ticker",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 480,
        "wires": [
            [
                "f83332272872eeb3"
            ]
        ]
    },
    {
        "id": "6e88541be3189586",
        "type": "comment",
        "z": "4483aeb6f4838169",
        "name": "The Ticker",
        "info": "",
        "x": 280,
        "y": 420,
        "wires": []
    },
    {
        "id": "500d95a963a2c39c",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Check Cache Ticker",
        "func": "/** Player\nreq.params.id\n */\n\n msg.loadTicker = false;\n return msg;\n //const Utils = global.get(\"UTILS\");\n \n console.log(\"TICKER CACHE STARTS\")\n\nlet ticker  = flow.get(\"ticker\");\nconsole.log(ticker)\nmsg.loadTicker = false;\n\nif (!ticker) {\n    \n    msg.loadTicker = true;\n    console.log(\"ticker missingg from cache\")\n    return msg; \n    \n}\n\n\nif (ticker.data.length === 0) {\n    \n    msg.loadTicker = true;\n    console.log(\"ticker missing data\")\n    return msg; \n\n}\n\nif (ticker && !ticker.expiresAt) {\n     msg.loadTicker = true;\n     console.log(\"ticker missing expiration date\")\n    return msg; \n    \n}\n\nif (ticker && ticker.expiresAt) {\n    \n    try {\n        \n        let eD = new Date(ticker.expiresAt)\n        let cD = new Date();\n        \n        msg.loadTicker = cD>eD ? true : false\n        console.log(\"is ticker expired?\",msg.loadTicker)\n        return msg; \n        \n        \n    }\n    catch (e) {\n        node.error(e)\n        console.log(e)\n        msg.loadTicker = true;\n        console.log(\"generic error\")\n        return msg; \n       \n    }\n     \n}\n\nconsole.log(\"Going to query the db?\",msg.loadTicker)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 480,
        "wires": [
            [
                "1fea69f382c00d18"
            ]
        ]
    },
    {
        "id": "8f5ab0218c20772d",
        "type": "http response",
        "z": "4483aeb6f4838169",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 990,
        "y": 520,
        "wires": []
    },
    {
        "id": "f83332272872eeb3",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Auth",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 480,
        "wires": [
            [
                "500d95a963a2c39c"
            ]
        ]
    },
    {
        "id": "1fea69f382c00d18",
        "type": "switch",
        "z": "4483aeb6f4838169",
        "name": "",
        "property": "loadTicker",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 650,
        "y": 480,
        "wires": [
            [
                "c2ea5e8c3869b222"
            ],
            [
                "8376460e0555cb02"
            ]
        ]
    },
    {
        "id": "8376460e0555cb02",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Response",
        "func": "/** Player\nreq.params.id\n */\n \n //const Utils = global.get(\"UTILS\");\n \nconsole.log(\"LOAD TICKER AND RESPOND\")\n\nlet ticker  = flow.get(\"ticker\");\n\nmsg.status = 200\nmsg.payload = ticker.data;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 520,
        "wires": [
            [
                "8f5ab0218c20772d"
            ]
        ]
    },
    {
        "id": "c2ea5e8c3869b222",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Query",
        "func": "let q = \"\tSELECT\"\n\t+\"\tticker.player as 'player',\"\n\t+\"\tconcat(ticker.price,' M/€') as 'price',\"\n\t+\"\tconcat(ticker.variation,'%') as 'variation'\"\n+\"\tFROM (\"\n\t+\"\tSELECT\"\n\t\t+\"\tarch.name as 'player',\"\n\t\t+\"\tround(lp.potentialPrice,2) as 'price',\"\n\t\t+\"\tround( (( lp.potentialPrice - arch.potentialPrice)/lp.potentialPrice),2) as 'variation'\"\n\t\t+\"\tfrom  (\"\n\t\t\t+\"\tselect\"\n\t\t\t\t+\"\tdistinct lpa.playerId,\"\n\t\t\t\t+\"\tlpa.name,\"\n\t\t\t\t+\"\tlpa.potentialPrice ,\"\n\t\t\t\t+\"\tlpa.week\"\n\t\t\t+\"\tfrom latestplayersarchive lpa\"\n\t\t\t+\"\twhere 1=1\"\n\t\t\t+\"\tand lpa.week =( SELECT max(week) from latestplayersarchive where year = ( SELECT max(inn.year) from latestplayersarchive inn) )\"\n\t\t\t+\"\tand lpa.currentLeagueCluster = 1 ) \tarch,\"\n\t\t\t+\"\tlatestplayers lp\"\n\t\t\t+\"\twhere lp.playerId = arch.playerId ) ticker\"\n\t\t\t+\"\twhere ticker.price > 10 order by ABS(ticker.variation) desc limit 100;\";\n\nconsole.log(\"Ticker Query IN\")\nmsg.topic = q;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "00ee141283dc3217",
        "type": "http response",
        "z": "4483aeb6f4838169",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1410,
        "y": 440,
        "wires": []
    },
    {
        "id": "7bb5ce96f44b4163",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Respo",
        "func": "let ticker = {};\n console.log(\"TICKER FROM DB\")\n\nticker.data = msg.payload;\n\nlet today = new Date();\nlet tomorrow = new Date();\n    tomorrow.setDate(today.getDate() + 1);\n        \nlet month = tomorrow.getUTCMonth() + 1; //months from 1-12\nlet day = tomorrow.getUTCDate();\nlet year = tomorrow.getUTCFullYear();\n\n\n        \nticker.expiresAt = year + \"-\" + month + \"-\" + day;\n\nmsg.status = 200\nmsg.payload = ticker.data;\nflow.set(\"ticker\",ticker)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 440,
        "wires": [
            [
                "00ee141283dc3217"
            ]
        ]
    },
    {
        "id": "a066bd24d5178ba7",
        "type": "debug",
        "z": "4483aeb6f4838169",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 540,
        "wires": []
    },
    {
        "id": "3fdcbb9b48270a8b",
        "type": "inject",
        "z": "4483aeb6f4838169",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 560,
        "wires": [
            [
                "f83332272872eeb3"
            ]
        ]
    },
    {
        "id": "3fb3776a3496c66c",
        "type": "http in",
        "z": "4483aeb6f4838169",
        "name": "/playerscsv/leaguecluster/:cluster",
        "url": "/playerscsv/leaguecluster/:cluster",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 920,
        "wires": [
            [
                "0a3e9dd1a66f39c7"
            ]
        ]
    },
    {
        "id": "49232afb90a9550f",
        "type": "comment",
        "z": "4483aeb6f4838169",
        "name": "Players",
        "info": "",
        "x": 330,
        "y": 860,
        "wires": []
    },
    {
        "id": "e4fbe99901a96725",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Latest Players Query",
        "func": "\nlet leagueCluster = msg.req.params.cluster;\nmsg.topic = \"select * from latestplayers where currentLeagueCluster = \"+leagueCluster;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 920,
        "wires": [
            []
        ]
    },
    {
        "id": "1add28902822f764",
        "type": "http response",
        "z": "4483aeb6f4838169",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "text/csv"
        },
        "x": 1470,
        "y": 1000,
        "wires": []
    },
    {
        "id": "0a3e9dd1a66f39c7",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Auth",
        "func": "\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 920,
        "wires": [
            [
                "e4fbe99901a96725"
            ]
        ]
    },
    {
        "id": "be3dbfd34a747857",
        "type": "http in",
        "z": "4483aeb6f4838169",
        "name": "/clubscsv",
        "url": "/clubscsv",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 980,
        "wires": [
            [
                "b1914785ffdc10b0"
            ]
        ]
    },
    {
        "id": "140041efed7f2628",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Latest Clubs Query",
        "func": "msg.topic = \"select * from latestclubs\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 980,
        "wires": [
            []
        ]
    },
    {
        "id": "b1914785ffdc10b0",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Auth",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 980,
        "wires": [
            [
                "140041efed7f2628"
            ]
        ]
    },
    {
        "id": "a03690c438064cb2",
        "type": "http in",
        "z": "4483aeb6f4838169",
        "name": "/leaguescsv",
        "url": "/leaguescsv",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1040,
        "wires": [
            [
                "b82f8b712aae3ff8"
            ]
        ]
    },
    {
        "id": "c5f616e4323ba8b6",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Latest Leagues Query",
        "func": "msg.topic = \"select * from latestleagues\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 520,
        "y": 1040,
        "wires": [
            []
        ]
    },
    {
        "id": "b82f8b712aae3ff8",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Auth",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1040,
        "wires": [
            [
                "c5f616e4323ba8b6"
            ]
        ]
    },
    {
        "id": "6e44f0b6340868a6",
        "type": "http in",
        "z": "4483aeb6f4838169",
        "name": "/errorscsv",
        "url": "/errorscsv",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 120,
        "y": 1100,
        "wires": [
            [
                "a4ac8e8692418f1a"
            ]
        ]
    },
    {
        "id": "9aa480f3485460c5",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Latest Errors Query",
        "func": "msg.topic = \"select * from errors\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1100,
        "wires": [
            []
        ]
    },
    {
        "id": "a4ac8e8692418f1a",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Auth",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1100,
        "wires": [
            [
                "9aa480f3485460c5"
            ]
        ]
    },
    {
        "id": "4ca649a9da4b9386",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Payload To CSV",
        "func": "\nvar keys = Object.keys(msg.payload[0]);\n\n//DECIMAL FROM DOT TO COMMA\n\nmsg.payload.map( pl => {\n    \n    keys.forEach(k => {\n        \n        if (!isNaN(pl[k]) && pl[k]!== null ) {\n            \n            pl[k]=pl[k].toString().replace('.', ',');\n            //console.log(pl[k]);\n        } \n        \n    })\n    \n})\n\n\n\n\nvar columns = \"\"\n\nfor (i=0;i<keys.length;i++) {\n    \n    columns = columns + keys[i];\n    if (i < ( keys.length -1)) {\n        \n        columns = columns + \",\"\n        \n    }\n}\n console.log(columns);\n\n\nmsg.columns = columns;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 1000,
        "wires": [
            [
                "d5ef87fbd391e539"
            ]
        ]
    },
    {
        "id": "d5ef87fbd391e539",
        "type": "csv",
        "z": "4483aeb6f4838169",
        "name": "",
        "sep": ";",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": false,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1230,
        "y": 1000,
        "wires": [
            [
                "1add28902822f764"
            ]
        ]
    },
    {
        "id": "e803dd4d87ec9ca8",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Statistics to CSV",
        "func": "let sts = global.get(\"Statistics\")\n\nlet stsArr = [];\n\nlet simpleSt = function() {\n    \n    this.description;\n    \n    this.maxFatmol;\n    this.minFatmol;\n    this.avgFatmol;\n    this.fatmolOutliers\n    \n    this.maxSalary;\n    this.minSalary;\n    this.avgSalary;\n    this.salaryOuliers;\n    \n    this.maxAge;\n    this.minAge;\n    this.avgAge;\n    this.ageOutliers\n}\n\ntry {\n    \n    sts.forEach( st => {\n    \n    let s = new simpleSt();\n    \n        s.description = st.description;\n        s.maxFatmol = st.fatmol.maxFatmol.toString().replace(\".\",\",\");\n        s.minFatmol = st.fatmol.minFatmol.toString().replace(\".\",\",\");\n        s.avgFatmol = st.fatmol.avgFatmol.toString().replace(\".\",\",\");\n        s.fatmolOutliers = JSON.stringify(st.fatmol.outliers.map( o => o.name ));\n    \n        s.maxSalary = st.salaryNet.maxSalary.toString().replace(\".\",\",\");\n        s.minSalary = st.salaryNet.minSalary.toString().replace(\".\",\",\");\n        s.avgSalary = st.salaryNet.avgSalary.toString().replace(\".\",\",\");\n        s.salaryOuliers = JSON.stringify(st.salaryNet.outliers.map( o => o.name));\n    \n        s.maxAge =st.age.maxAge.toString().replace(\".\",\",\");\n        s.minAge =st.age.minAge.toString().replace(\".\",\",\");\n        s.avgAge =st.age.avgAge.toString().replace(\".\",\",\");\n        s.ageOutliers = JSON.stringify(st.age.outliers.map( o=> o.name ));\n        \n        stsArr.push(s);\n})\n    \n} catch(e) {\n    console.log(e)\n}\n\n\nvar keys = Object.keys(stsArr[0]);\nvar columns = \"\"\n\nfor (i=0;i<keys.length;i++) {\n    \n    columns = columns + keys[i];\n    if (i < ( keys.length -1)) {\n        \n        columns = columns + \",\"\n        \n    }\n}\n console.log(columns);\n\n\nmsg.columns = columns;\n\nmsg.payload = stsArr;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 1160,
        "wires": [
            [
                "af569c64eaa54594"
            ]
        ]
    },
    {
        "id": "af569c64eaa54594",
        "type": "csv",
        "z": "4483aeb6f4838169",
        "name": "",
        "sep": ";",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 690,
        "y": 1160,
        "wires": [
            [
                "9ecd0632dded0de4"
            ]
        ]
    },
    {
        "id": "4872d6d257c02cde",
        "type": "http in",
        "z": "4483aeb6f4838169",
        "name": "/statisticscsv",
        "url": "/statisticscsv",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 1160,
        "wires": [
            [
                "c3a2f206bc0dd5f9"
            ]
        ]
    },
    {
        "id": "c3a2f206bc0dd5f9",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Auth",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 1160,
        "wires": [
            [
                "e803dd4d87ec9ca8"
            ]
        ]
    },
    {
        "id": "9ecd0632dded0de4",
        "type": "http response",
        "z": "4483aeb6f4838169",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "text/csv"
        },
        "x": 830,
        "y": 1160,
        "wires": []
    },
    {
        "id": "ae40d1c6b83458cf",
        "type": "http in",
        "z": "4483aeb6f4838169",
        "name": "/footballtree",
        "url": "/footballtree",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 360,
        "wires": [
            [
                "9827714f8e13efc3"
            ]
        ]
    },
    {
        "id": "ffffc1dc1da6f02f",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Get The Football Tree",
        "func": "/** Player\nreq.params.id\n */\n \n //const Utils = global.get(\"UTILS\");\n \n console.log(\"ALL OR SOME PLAYERS\")\n\nlet TheFootballTree;\n\n\ntry {\n    \n    TheFootballTree = JSON.parse(JSON.stringify(global.get(\"TheLatestFooballTree\"))); //SOLITO per evitare riferimenti\n    \n} catch (e) {\n    console.log(e);\n    msg.status = 500; //Internal server Error\n    msg.payload=\"Couldn't find or parse the Football Tree\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\n\nif (!TheFootballTree) {\n    \n    msg.status = 500; //Internal server Error\n    msg.payload=\"Couldn't find or build the Football Tree\";\n    console.log(msg.payload)\n    return msg;\n}\n\nlet TheNewFT = {}\n\n\nObject.keys(TheFootballTree).forEach( leagueId => {\n        if ( TheFootballTree[leagueId].leagueId == '1r097lpxe0xn03ihb7wi98kao') {\n            \n            TheNewFT[TheFootballTree[leagueId].leagueId] = TheFootballTree[leagueId]\n            \n        } \n        \n        if (TheFootballTree[leagueId].leagueId == '5c96g1zm7vo5ons9c42uy2w3r') {\n            TheNewFT[TheFootballTree[leagueId].leagueId] = TheFootballTree[leagueId]\n        }\n    })    \n\n\nmsg.status=200\nmsg.payload = TheNewFT;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 360,
        "wires": [
            [
                "da5d48c0958c8aa0"
            ]
        ]
    },
    {
        "id": "da5d48c0958c8aa0",
        "type": "http response",
        "z": "4483aeb6f4838169",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 750,
        "y": 360,
        "wires": []
    },
    {
        "id": "9827714f8e13efc3",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Auth",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 360,
        "wires": [
            [
                "ffffc1dc1da6f02f"
            ]
        ]
    },
    {
        "id": "ba2de4d7b81d8324",
        "type": "http in",
        "z": "4483aeb6f4838169",
        "name": "/fairvalue",
        "url": "/fairvalue/:playerId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 1440,
        "wires": [
            [
                "c228181f170bc27b"
            ]
        ]
    },
    {
        "id": "fb12cf42e619438f",
        "type": "comment",
        "z": "4483aeb6f4838169",
        "name": "Players Fair Value Evolution",
        "info": "",
        "x": 360,
        "y": 1380,
        "wires": []
    },
    {
        "id": "901f97798bd20331",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Get all or some Players",
        "func": "let playerId = msg.req.params.playerId;\n\nif(!playerId) {\n    \n    msg.status=400;\n    msg.payload=\"missing playerId\"\n    return msg;\n    \n}\n\n\n\nmsg.topic=\"SELECT playerId, fullName, currentPotentialPrice, potentialPrice, performance, effectiveness, fatmol, risingStar, emerging, minutes, avgMicroIndex, year, week FROM `latestplayers_archive` where playerId='\"+playerId+\"' and elaborationNum in (select max(elaborationNum) from latestplayers_archive GROUP BY year,week) ORDER BY playerId, fullName, year, week;\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 1440,
        "wires": [
            [
                "44418914d8a8e091"
            ]
        ]
    },
    {
        "id": "971412edd09a1a3e",
        "type": "http response",
        "z": "4483aeb6f4838169",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 890,
        "y": 1380,
        "wires": []
    },
    {
        "id": "c228181f170bc27b",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Auth",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 290,
        "y": 1440,
        "wires": [
            [
                "901f97798bd20331"
            ]
        ]
    },
    {
        "id": "3597efefbf887317",
        "type": "http response",
        "z": "4483aeb6f4838169",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1250,
        "y": 1500,
        "wires": []
    },
    {
        "id": "44418914d8a8e091",
        "type": "switch",
        "z": "4483aeb6f4838169",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "400",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 690,
        "y": 1440,
        "wires": [
            [
                "971412edd09a1a3e"
            ],
            [
                "9456ab180ceedff3"
            ]
        ]
    },
    {
        "id": "5d4da2de1eadab68",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Response",
        "func": "\n\nmsg.status = 200\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1080,
        "y": 1500,
        "wires": [
            [
                "3597efefbf887317"
            ]
        ]
    },
    {
        "id": "f0dd6e2c877dfdf7",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Query",
        "func": "let q = \"\tSELECT\"\n\t+\"\tticker.player as 'player',\"\n\t+\"\tconcat(ticker.price,' M/€') as 'price',\"\n\t+\"\tconcat(ticker.variation,'%') as 'variation'\"\n+\"\tFROM (\"\n\t+\"\tSELECT\"\n\t\t+\"\tarch.name as 'player',\"\n\t\t+\"\tround(lp.potentialPrice,2) as 'price',\"\n\t\t+\"\tround( (( lp.potentialPrice - arch.potentialPrice)/lp.potentialPrice),2) as 'variation'\"\n\t\t+\"\tfrom  (\"\n\t\t\t+\"\tselect\"\n\t\t\t\t+\"\tdistinct lpa.playerId,\"\n\t\t\t\t+\"\tlpa.name,\"\n\t\t\t\t+\"\tlpa.potentialPrice ,\"\n\t\t\t\t+\"\tlpa.week\"\n\t\t\t+\"\tfrom latestplayersarchive lpa\"\n\t\t\t+\"\twhere 1=1\"\n\t\t\t+\"\tand lpa.week =( SELECT max(week) from latestplayersarchive where year = ( SELECT max(inn.year) from latestplayersarchive inn) )\"\n\t\t\t+\"\tand lpa.currentLeagueCluster = 1 ) \tarch,\"\n\t\t\t+\"\tlatestplayers lp\"\n\t\t\t+\"\twhere lp.playerId = arch.playerId ) ticker\"\n\t\t\t+\"\twhere ticker.price > 10 order by ABS(ticker.variation) desc limit 100;\";\n\nconsole.log(\"Ticker Query IN\")\nmsg.topic = q;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "9456ab180ceedff3",
        "type": "mysql",
        "z": "4483aeb6f4838169",
        "mydb": "ea1e5103bb9e91ad",
        "name": "SF Produzione",
        "x": 900,
        "y": 1500,
        "wires": [
            [
                "5d4da2de1eadab68"
            ]
        ]
    },
    {
        "id": "dc603076cea4824b",
        "type": "http in",
        "z": "4483aeb6f4838169",
        "name": "/simpleplayers",
        "url": "/simpleplayers",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 180,
        "wires": [
            [
                "b68fe14abd4a46d9"
            ]
        ]
    },
    {
        "id": "f39a86a3a2764a07",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Get Players Simple Object by name",
        "func": "/** Player\nreq.params.id\n */\n \n //const Utils = global.get(\"UTILS\");\n \n console.log(\"ALL OR SOME PLAYERS\")\n\nlet TheFootballTree = global.get(\"TheLatestFooballTree\");\n\n\n/*try {\n    \n    TheFootballTree = JSON.parse(JSON.stringify(global.get(\"TheLatestFooballTree\"))); //SOLITO per evitare riferimenti\n    \n} catch (e) {\n    console.log(e);\n    msg.status = 500; //Internal server Error\n    msg.payload=\"Couldn't find or parse the Football Tree\";\n    console.log(msg.payload)\n    return msg;\n}*/\n\n\n\nif (!TheFootballTree) {\n    \n    msg.status = 500; //Internal server Error\n    msg.payload=\"Couldn't find or build the Football Tree\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\n\n\nlet resp=[];\nlet properties = []\nlet doIt = false\n\ntry {\n    \n   \n   \n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => {\n                club.Players.forEach( p => {\n                    \n                    if (doIt) {\n                        Object.keys(p).forEach( k => {\n        \n                            let property = {\n                                \n                                propertyName : k,\n                                propertyType : typeof p[k]\n                            }\n                            \n                            properties.push(property)\n                        } )\n                        \n                        doIt = false;\n                    }\n                    \n                    let obj = {};\n                    \n                    let fn = true\n                    let cn = true \n                    let ln = true\n\n                    obj.playerId = p.playerId;\n                    obj.fullName = p.fullName;\n                    obj.clubName = p.currentClubName;\n                    obj.clubId = p.currentClubId;\n                    obj.leagueName = p.currentLeagueName\n                    obj.leagueId=p.currentLeagueId;\n                    obj.age = p.age\n                    obj.position = p.currentPosition;\n                    \n                    \n                    if ( msg.req.query.fullName !== undefined ) {\n                        \n                        fn = obj.fullName.toLowerCase().includes(msg.req.query.fullName.toLowerCase());\n                    }\n                    \n                    if ( msg.req.query.clubName !== undefined ) {\n                        \n                        cn = obj.clubName.toLowerCase().includes(msg.req.query.clubName.toLowerCase());\n                    }\n                    \n                    if ( msg.req.query.leagueName !== undefined ) {\n                        \n                        ln = obj.leagueName.toLowerCase().includes(msg.req.query.leagueName.toLowerCase());\n                    }\n                    \n                    \n                    \n                    \n                    fn && cn && ln ? resp.push(obj) : false;\n                })\n                \n        })\n    })    \n\n} catch (e) {\n    \n    msg.status=500;\n    msg.payload=\"Internal Error\"\n}\n\nmsg.status=200\nmsg.payload = {\n    success : true,\n    data : {\n        properties : properties,\n        values : resp\n    },\n    message : \"success\"\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 180,
        "wires": [
            [
                "7966b1aea1ce3465"
            ]
        ]
    },
    {
        "id": "7966b1aea1ce3465",
        "type": "http response",
        "z": "4483aeb6f4838169",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 750,
        "y": 180,
        "wires": []
    },
    {
        "id": "b68fe14abd4a46d9",
        "type": "function",
        "z": "4483aeb6f4838169",
        "name": "Auth",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 180,
        "wires": [
            [
                "f39a86a3a2764a07"
            ]
        ]
    },
    {
        "id": "d393767fdb29d04a",
        "type": "inject",
        "z": "44dad47cc131c3d9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "3",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 200,
        "wires": [
            [
                "43bb3c7576718bdd"
            ]
        ]
    },
    {
        "id": "a874bd013b69b1a9",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "Checkpoint and Set",
        "func": "msg.dataset == \"players\" ? flow.set(\"latestplayers\", msg.payload) : true;\nmsg.dataset == \"clubs\" ? flow.set(\"latestclubs\", msg.payload) : true;\nmsg.dataset == \"leagues\" ? flow.set(\"latestleagues\", msg.payload) : true;\n\n\nif (  flow.get(\"latestplayers\") &&  flow.get(\"latestclubs\") &&  flow.get(\"latestleagues\") ) {\n    \n    console.log(\"players #\"+flow.get(\"latestplayers\").length);\n    console.log(\"clubs #\"+flow.get(\"latestclubs\").length);\n    console.log(\"leagues #\"+flow.get(\"latestleagues\").length);\n    console.log(\"LATEST LOADED\")\n    \n    return msg;\n    \n}\n\n \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 200,
        "wires": [
            [
                "3d209336996e8a5a"
            ]
        ]
    },
    {
        "id": "2aea86a0efa826c1",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "Latest Players Staging",
        "func": "msg.dataset = \"players\";\nmsg.topic = \"select * from latestplayers_staging\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 160,
        "wires": [
            [
                "9d7598a8104694be"
            ]
        ]
    },
    {
        "id": "32b87f803897d008",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "Latest Leagues Staging",
        "func": "msg.dataset = \"leagues\";\nmsg.topic = \"select * from latestleagues_staging\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 240,
        "wires": [
            [
                "9d7598a8104694be"
            ]
        ]
    },
    {
        "id": "249f5743b1323f20",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "Latest Clubs Staging",
        "func": "msg.dataset = \"clubs\";\nmsg.topic = \"select * from latestclubs_staging\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 200,
        "wires": [
            [
                "9d7598a8104694be"
            ]
        ]
    },
    {
        "id": "3d209336996e8a5a",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "Football Tree Builder",
        "func": "let latestplayers = flow.get(\"latestplayers\");\nlet latestclubs = flow.get(\"latestclubs\");\nlet latestleagues =flow.get(\"latestleagues\");\n\nlet PlayerObj = global.get(\"ThePlayerObject\");\nlet ClubObj = global.get(\"TheClubObject\");\nlet LeagueObj = global.get(\"TheLeagueObject\");\n\nlet TheFootballTree = {};\n\nlet Players = {}\nlet Clubs = {}\nlet Leagues = {}\n\ntry {\n    \n    \nlatestleagues.forEach( l => {\n    \n    let League = new LeagueObj();\n    \n    Object.keys(l).forEach( key => {\n        \n        League[key] = l[key]\n    })\n  \n    Leagues[League.id] = League;\n    \n    TheFootballTree[League.leagueId] === undefined ?  TheFootballTree[League.leagueId] = League : true;\n    \n    \n})\n\nlatestclubs.forEach( c => {\n    \n    let Club = new ClubObj();\n    \n    Object.keys(c).forEach( key => {\n        \n        Club[key] = c[key]\n    })\n  \n    Clubs[Club.clubId] = Club;\n    \n    TheFootballTree[Club.leagueId].Clubs === undefined ?  TheFootballTree[Club.leagueId].Clubs = {} : true;\n        \n    TheFootballTree[Club.leagueId].Clubs[Club.clubId] === undefined ?  TheFootballTree[Club.leagueId].Clubs[Club.clubId] = Club : true; \n\n})\n\n\nlatestplayers.forEach( p => {\n    \n    let Player = new PlayerObj();\n    \n    Object.keys(p).forEach( key => {\n        \n        Player[key] = p[key]\n    })\n    \n    //DATE\n    Player.birthDate = new Date(Player.birthDate);\n    Player.startContract = new Date(Player.startContract);\n    Player.endContract = new Date(Player.endContract);\n    \n    \n    //BOOLEANS\n    Player.nationalTeamPlayer = Player.nationalTeamPlayer ? true : false;\n    Player.emerging = Player.emerging ? true : false;\n    Player.risingStar = Player.risingStar ? true : false;\n    Player.superStar = Player.nationasuperStar ? true : false;\n  \n    Players[Player.playerId] = Player;\n    \n    \n    \n    TheFootballTree[Player.currentLeagueId].Clubs[Player.currentClubId].Players === undefined ? TheFootballTree[Player.currentLeagueId].Clubs[Player.currentClubId].Players = {} : true;\n    TheFootballTree[Player.currentLeagueId].Clubs[Player.currentClubId].Players[Player.playerId] = Player;\n})\n    \n    \n    console.log(\"Footaball Tree has been built\")\n    \n} catch (e) {\n    console.log(e)\n}\n\n\n\n\n// DA OGGETTO A ITERABILE\n\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        \n        Object.keys(TheFootballTree[leagueId].Clubs).forEach( clubId => { \n           \n            TheFootballTree[leagueId].Clubs[clubId].Players = Object.values(TheFootballTree[leagueId].Clubs[clubId].Players);\n            \n        \n        })   \n        \n        TheFootballTree[leagueId].Clubs = Object.values(TheFootballTree[leagueId].Clubs);\n        \n    })\n    \n\n\nmsg.payload=TheFootballTree;\n\n\n\nlet tDiff = ( new Date() - flow.get(\"start\")) /1000;\n\nconsole.log(tDiff)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 260,
        "wires": [
            [
                "9dc0fd97f0a6fcd1"
            ]
        ]
    },
    {
        "id": "43bb3c7576718bdd",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "Unset",
        "func": "flow.set(\"latestplayers\", null);\nflow.set(\"latestclubs\", null);\nflow.set(\"latestleagues\", null);\n\nflow.set(\"start\", new Date());\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 200,
        "wires": [
            [
                "2aea86a0efa826c1",
                "249f5743b1323f20",
                "32b87f803897d008"
            ]
        ]
    },
    {
        "id": "75c45d8ecd5bbd5d",
        "type": "inject",
        "z": "44dad47cc131c3d9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 260,
        "wires": [
            [
                "3d209336996e8a5a"
            ]
        ]
    },
    {
        "id": "f5370efaca10d253",
        "type": "comment",
        "z": "44dad47cc131c3d9",
        "name": "LOADS TheLatestFootballTree",
        "info": "",
        "x": 460,
        "y": 120,
        "wires": []
    },
    {
        "id": "9dc0fd97f0a6fcd1",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "Clubs and Leagues Analisys",
        "func": "let TheFootballTree = msg.payload;\nconst Utils = global.get(\"UTILS\");\n\nvar Players = [];\nvar Clubs = [];\nvar Leagues = [];\n\n\n\n\ntry {\n    \n\n\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        \n        \n        let totalAgeLeague = 0;\n        let totalContractDurationLeague = 0;\n        let totalContractResiduaDurationLeauge = 0;\n        \n        TheFootballTree[leagueId].numOfPlayers = 0; \n        TheFootballTree[leagueId].avgAge = 0\n        TheFootballTree[leagueId].avgContractDuration = 0\n        TheFootballTree[leagueId].avgContractResidualDuration = 0\n        \n        TheFootballTree[leagueId].portfolioCost = 0\n        TheFootballTree[leagueId].residualBookValue = 0\n        TheFootballTree[leagueId].residualValue = 0\n        TheFootballTree[leagueId].potentialPrice = 0\n        TheFootballTree[leagueId].expectedPrice = 0\n        TheFootballTree[leagueId].capitalGain = 0\n        TheFootballTree[leagueId].netProfit = 0\n        \n        TheFootballTree[leagueId].salaryGross = 0\n        TheFootballTree[leagueId].salaryCurrent = 0\n        TheFootballTree[leagueId].salaryOptimal = 0\n        TheFootballTree[leagueId].salaryPotential = 0\n        TheFootballTree[leagueId].salaryAbsoluteDeviation = 0\n        TheFootballTree[leagueId].salaryPercDeviation = 0\n        \n        TheFootballTree[leagueId].Clubs.forEach( club => { \n           \n            let totalAge = 0;\n            let totalContractDuration = 0;\n            let totalContractResiduaDuration = 0;\n           \n            club.numOfPlayers = club.Players.length;\n            \n            club.avgAge = 0\n            club.avgContractDuration = 0\n            club.avgContractResidualDuration = 0\n            \n            club.portfolioCost = 0\n            club.residualBookValue = 0\n            club.residualValue = 0\n            club.potentialPrice = 0\n            club.expectedPrice = 0\n            club.capitalGain = 0\n            club.netProfit = 0\n            \n            club.salaryGross = 0\n            club.salaryCurrent = 0\n            club.salaryOptimal = 0\n            club.salaryPotential = 0\n            club.salaryAbsoluteDeviation = 0\n            club.salaryPercDeviation = 0\n            \n            \n            club.Players.forEach( player => {\n                \n                totalAge = totalAge + player.age;\n                totalContractDuration = totalContractDuration +  Utils.diffInMonths(player.endContract,player.startContract)\n                totalContractResiduaDuration = totalContractResiduaDuration + Utils.diffInMonths(player.endContract,new Date());\n                \n                \n                club.portfolioCost = club.portfolioCost + player.transferPrice;\n                club.residualBookValue = club.residualBookValue + player.residualBookValue;\n                club.residualValue = club.residualValue + player.residualValue;\n                club.potentialPrice = club.potentialPrice + player.potentialPrice;\n                club.expectedPrice = club.expectedPrice + player.expectedPrice;\n                \n                club.salaryGross = club.salaryGross + player.salaryGross;\n                club.salaryCurrent = club.salaryCurrent + player.salaryCurrent;\n                club.salaryOptimal = club.salaryOptimal + player.salaryOptimal;\n                club.salaryPotential = club.salaryPotential + player.salaryPotential;\n                \n                \n                Players.push(player);\n                \n            })\n            \n            \n            club.avgAge = totalAge / club.numOfPlayers;\n            club.avgContractDuration =  totalContractDuration / club.numOfPlayers;\n            club.avgContractResidualDuration  =  totalContractResiduaDuration / club.numOfPlayers;\n        \n            club.capitalGain = club.expectedPrice - club.residualBookValue;\n            club.netProfit =  club.expectedPrice - club.residualValue;\n            \n            club.salaryAbsoluteDeviation = club.salaryOptimal - club.salaryCurrent;\n            club.salaryPercDeviation =  (club.salaryAbsoluteDeviation * 100 ) / club.salaryOptimal\n            \n            totalAgeLeague = totalAgeLeague + totalAge;\n            totalContractDurationLeague = totalContractDurationLeague + totalContractDuration;\n            totalContractResiduaDurationLeauge = totalContractResiduaDurationLeauge + totalContractResiduaDuration;\n            \n            TheFootballTree[leagueId].numOfPlayers = TheFootballTree[leagueId].numOfPlayers + club.numOfPlayers;\n            \n            TheFootballTree[leagueId].portfolioCost = TheFootballTree[leagueId].portfolioCost + club.portfolioCost;\n            TheFootballTree[leagueId].residualBookValue = TheFootballTree[leagueId].residualBookValue + club.residualBookValue;\n            TheFootballTree[leagueId].residualValue = TheFootballTree[leagueId].residualValue + club.residualValue;\n            TheFootballTree[leagueId].potentialPrice = TheFootballTree[leagueId].potentialPrice + club.potentialPrice;\n            TheFootballTree[leagueId].expectedPrice = TheFootballTree[leagueId].expectedPrice + club.expectedPrice;\n                \n            TheFootballTree[leagueId].salaryGross = TheFootballTree[leagueId].salaryGross + club.salaryGross;\n            TheFootballTree[leagueId].salaryCurrent = TheFootballTree[leagueId].salaryCurrent + club.salaryCurrent;\n            TheFootballTree[leagueId].salaryOptimal = TheFootballTree[leagueId].salaryOptimal + club.salaryOptimal;\n            TheFootballTree[leagueId].salaryPotential = TheFootballTree[leagueId].salaryPotential + club.salaryPotential;\n            \n            Clubs.push(club);\n            \n        \n        })   \n        \n        \n        TheFootballTree[leagueId].avgAge = totalAgeLeague / TheFootballTree[leagueId].numOfPlayers;\n        TheFootballTree[leagueId].avgContractDuration =  totalContractDurationLeague / TheFootballTree[leagueId].numOfPlayers;\n        TheFootballTree[leagueId].avgContractResidualDuration  =  totalContractResiduaDurationLeauge / TheFootballTree[leagueId].numOfPlayers;\n        \n        TheFootballTree[leagueId].capitalGain = TheFootballTree[leagueId].expectedPrice - TheFootballTree[leagueId].residualBookValue;\n        TheFootballTree[leagueId].netProfit =  TheFootballTree[leagueId].expectedPrice - TheFootballTree[leagueId].residualValue;\n            \n        TheFootballTree[leagueId].salaryAbsoluteDeviation = TheFootballTree[leagueId].salaryOptimal - TheFootballTree[leagueId].salaryCurrent;\n        TheFootballTree[leagueId].salaryPercDeviation =  (TheFootballTree[leagueId].salaryAbsoluteDeviation * 100 ) / TheFootballTree[leagueId].salaryOptimal\n      \n        Leagues.push(TheFootballTree[leagueId])\n       \n    })\n\n\n} catch(e) {\n    \n    console.log(e)\n}\n\nmsg.payload=TheFootballTree;\n\nflow.set(\"Players\",Players)\nflow.set(\"Clubs\",Clubs)\nflow.set(\"Leagues\",Leagues)\n\nglobal.set(\"TheLatestFooballTree\",TheFootballTree)\n\nconsole.log(\"ELABORATION COMPLETED\")\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1500,
        "y": 260,
        "wires": [
            [
                "7bef0cc633db61cd"
            ]
        ]
    },
    {
        "id": "d0d17a6f8396afae",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "Retrieve Req and Tree and Modify Tree",
        "func": "/** SIMULATORE\n * \n * INPUT:\n *  durata del contratto (player.remainingYearsOfContract)\n *  stipendio netto annuale (player.salaryCurrent)\n *  prezzo di cessione ( player.transferPrice)\n *  \n * commissioni buyer\n * commissioni seller\n * \n *  attesa performance \n * intensità di impiego ( insostituibile=1,25, titolare =1; riserva =0,5 terza scelta =0,25 )\n * ( player.absind * %perfromance attesa * intensità di impiego)\n *  return msg; \n * \n * \n * \n * [{\n\n\t\"playerId\" : \"9sbx7dlressy910i8uuztf93p\",\n\t\"destinationClubId\" : \"gi0l1habji5hpgar77dl5jqe\",\n\t\"contractDuration\" : 3,\n\t\"salaryCurrent\" : 5,\n\t\"transferPrice\" : 10,\n\t\"commissionSeller\" : 4,\n\t\"commissionBuyer\" : 4,\n\t\"performance\" : 1.25 ,\n\t\"intensity\" : 1\n }]\n\t\n * \n * \n * \n * \n * \n * \n */\n const Utils = global.get(\"UTILS\");\n \n let simulationParamsArr = msg.req.body;\n \n console.log(\"simulationParamsArr\",simulationParamsArr) \n let TheFootballTree;\n \n msg.buyers=[];\n msg.sellers=[];\n\ntry {\n    \n    TheFootballTree = JSON.parse(JSON.stringify(global.get(\"TheLatestFooballTree\"))); //SOLITO per evitare riferimenti\n    \n} catch (e) {\n    console.log(e);\n    msg.status = 500; //Internal server Error\n    msg.payload=\"Couldn't find or parse the Football Tree\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\n\nif (!TheFootballTree) {\n    \n    msg.status = 500; //Internal server Error\n    msg.payload=\"Couldn't find or build the Football Tree\";\n    console.log(msg.payload)\n    return msg;\n}\n\nif (!simulationParamsArr || simulationParamsArr.length==0) {\n    \n    msg.status = 400; //Bad Request\n    msg.payload=\"Request body missing\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\n\ntry {\n    \n    let playersIndex = {};\n    let destinationClubs = [];\n    \n    simulationParamsArr.forEach( pset => {\n    \n    if (!pset[\"playerId\"]) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing playerId\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n     if (playersIndex[pset[\"playerId\"]] === undefined) {\n         \n         playersIndex[pset[\"playerId\"]] = pset[\"playerId\"]\n    \n        \n    } else {\n        \n        msg.status = 400; //Bad Request\n        msg.payload=\"playerId already present in another transaction\";\n        console.log(msg.payload)\n        return msg;\n        \n    }\n    \n    if (!pset[\"destinationClubId\"]) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing destinationClubId\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n    if (!pset[\"contractDuration\"]) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing contractDuration\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n    if (!pset[\"salaryCurrent\"]) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing salaryCurrent\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n    if (!pset[\"transferPrice\"] &&  pset[\"transferPrice\"] !== 0 ) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing transferPrice\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n    if (!pset[\"commissionSeller\"] &&  pset[\"commissionSeller\"] !== 0 ) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing commissionSeller\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n    if (!pset[\"commissionBuyer\"] &&  pset[\"commissionBuyer\"] !== 0 ) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing commissionBuyer\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n    if (!pset[\"performance\"] &&  pset[\"performance\"] !== 0 ) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing performance\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n    if (!pset[\"intensity\"] &&  pset[\"intensity\"] !== 0 ) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing intensity\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n    \n    \n    \n    //Find Destination Club\n    let destinationClub;\n    let destinationLeague;\n    \n    let sourceClub;\n    \n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => {\n                \n            if(club.clubId == pset[\"destinationClubId\"]) {\n                destinationClub = club;\n                destinationLeague = TheFootballTree[leagueId];\n                \n                \n                let index = msg.buyers.findIndex(c => c.clubId==club.clubId); \n\n\n                index === -1 ?  msg.buyers.push(club) : console.log(\"object already exists\")\n                \n            }\n                \n         })\n    })\n    \n    \n    if(!destinationLeague) {\n        \n        msg.status = 400; //Bad Request\n        msg.payload=\"Wrong destinationClubId\";\n        console.log(msg.payload)\n        return msg;\n        \n    }\n    \n    \n    if(!destinationClub) {\n        \n        msg.status = 400; //Bad Request\n        msg.payload=\"Wrong destinationClubId\";\n        console.log(msg.payload)\n        return msg;\n        \n    }\n    \n    let maxMinutes = 0;\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            club.Players.forEach( player => {\n                \n                maxMinutes = player.minutes > maxMinutes ? player.minutes : maxMinutes\n    \n     \n            })\n        })\n        \n    })\n    \n    \n    //Set new Economica params and remove player from current team\n    \n    let player = null;\n    \n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => {\n                club.Players.forEach( p => {\n                    \n                    \n                       \n                if ( pset[\"playerId\"] == p.playerId ) {\n                    \n                        let sourceClub = JSON.parse(JSON.stringify(club));\n                         \n                        msg.sellers.push[sourceClub]\n                        player = JSON.parse(JSON.stringify(p));\n                    \n                    \n                        player.simulating = true;\n                    \n                         //DATE\n                        player.birthDate = new Date(p.birthDate);\n                        player.startContract = new Date(p.startContract);\n                        player.endContract = new Date(p.endContract);\n                        \n                        //Booleans\n                        player.nationalTeamPlayer = p.nationalTeamPlayer ? true : false;\n                        player.emerging = p.emerging ? true : false;\n                        player.risingStar = p.risingStar ? true : false;\n                        player.superStar = ( p.superstar || p.superStar ) ? true : false;\n                        \n                    \n                    \n                        player.birthDate = new Date(player.birthDate);\n                        player.startContract = new Date(player.startContract);\n                        player.endContract = new Date(player.endContract);\n                    \n                        player.currentClubId=destinationClub.clubId;\n                        player.currentClubName=destinationClub.name;\n                        player.currentClubCluster=destinationClub.cluster;\n\n                        player.currentLeagueId=destinationLeague.leagueId;\n                        player.currentLeagueName=destinationLeague.name;\n                        player.currentLeagueCluster=destinationLeague.cluster;\n                        player.currentLeagueWeight=destinationLeague.weight;\n                        player.currentLeagueTaxRate=destinationLeague.taxRate;\n                        \n                        \n                        player.OldRemainingYearsOfContract = Utils.ryc(player.endContract) // NECESSARIO AL SIMULATORE\n                        player.OldRemainingMonthsOfContract = p.remainingMonthsOfContract // NECESSARIO AL SIMULATORE\n                        player.OldGrossSalary = p.salaryGross;\n                        player.OldResidualValue = p.residualValue;\n                        player.OldCosts = p.costs;\n                        player.OldClubId = sourceClub.clubId;\n                        player.OldClubName = sourceClub.name;\n                        player.OldExpectedPrice = p.expectedPrice;\n                        player.currentLeagueCountry = destinationLeague.country;\n                        player.OldLeagueCountry = TheFootballTree[leagueId].country\n                        \n                        player.contractType = \"Proprietà\"\n                        player.salaryNet = parseFloat(pset[\"salaryCurrent\"])\n                        player.salaryGross = player.salaryNet * ( destinationLeague.taxRate ?  destinationLeague.taxRate : 1.825 );\n                        player.startContract = new Date();\n                        player.endContract = new Date(parseInt(player.startContract.getFullYear()) + parseInt(pset[\"contractDuration\"]), parseInt(player.startContract.getMonth()), parseInt(player.startContract.getDate()));\n                        player.totalYearsOfContract =  Utils.tyc(player.startContract,player.endContract)\n                        player.remainingYearsOfContract = Utils.ryc(player.endContract)\n                        player.remainingMonthsOfContract = (player.endContract) ?  Utils.diffInMonths(new Date(player.endContract),new Date()) : null;\n                        player.transferPrice = pset[\"transferPrice\"]\n                        player.masterClubId =  player.currentClubId;\n                        player.masterClubName = player.currentClubName\n                        \n                        let intensity = parseFloat(pset[\"intensity\"]);\n                        \n                       /* if (intensity >= 60 ) {\n                            \n                        } else if (intensity < 60 && intensity > 30 ) {\n                            intensity = 19\n                        } else {\n                            intensity = 10\n                        } */\n                        \n                        /* player.minutes = 38*90 *  intensity\n                        player.avgPlayedMinuteShare = (player.minutes)/(38*90) */\n                        \n                        let microIndexMultiplier = 1;\n                        \n                        if ( player.avgPlayedMinuteShare > 0.40 && intensity >= 0.75 ) {\n                            \n                                microIndexMultiplier = 1\n                                \n                        } else if ( player.avgPlayedMinuteShare <= 0.40 && intensity == 0.75) {\n                            \n                                microIndexMultiplier = 1.2\n                                \n                        } else if ( intensity==0.40 ) {\n                            microIndexMultiplier = 0.4\n                        } else {\n                            microIndexMultiplier = 0.25\n                        }\n                        \n                        player.avgMicroIndex = player.avgMicroIndex * parseFloat(pset[\"performance\"]) * microIndexMultiplier;\n                        \n                        \n                        // player.absind = player.absind * pset[\"perfromance\"] *  pset[\"intensity\"] => performance e absind calcolato dopo\n                    \n                        let index = club.Players.findIndex( pi => pi.playerId == p.playerId)\n                        \n                        console.log(\"index to remove \"+index);\n                        \n                        club.Players.splice(index,1);\n                        \n                    \n                }\n               \n            })\n        })\n        \n    })\n    \n    \n    if (player) {\n        destinationClub.Players.push(player); \n        console.log(player)\n    }\n    \n})\n    \n    \n    //RIMODULAZIONE DELL ABSIND\n    /**\n     * \n     * prendo i giocatori della stessa squadra e dello stesso gruppo e sottraggo \n     *  \n     * playerdello stesso ruolo . minutes = player.minutes / (# num giocatori dello stesso ruolo nella stessa squadra)\n     * \n     * controllare che minutes Non può essere negativo!\n     * \n     * **/\n    \n    \n} catch(e) {\n    \n    console.log(e);\n    msg.status = 500; //Internal server Error\n    msg.payload=\"Couldn't find or build the Football Tree\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\n\n\nmsg.status=200\nmsg.payload = TheFootballTree;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 520,
        "wires": [
            [
                "a631edfc3d35c98e"
            ]
        ]
    },
    {
        "id": "151caca8c297b686",
        "type": "http in",
        "z": "44dad47cc131c3d9",
        "name": "/simulate",
        "url": "/simulate",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 520,
        "wires": [
            [
                "7ccb4103cf4744bd"
            ]
        ]
    },
    {
        "id": "9023e88875e28a95",
        "type": "http response",
        "z": "44dad47cc131c3d9",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2410,
        "y": 260,
        "wires": []
    },
    {
        "id": "fa662d53f167a2a1",
        "type": "http response",
        "z": "44dad47cc131c3d9",
        "name": "Return with errors",
        "statusCode": "",
        "headers": {},
        "x": 1830,
        "y": 620,
        "wires": []
    },
    {
        "id": "a631edfc3d35c98e",
        "type": "switch",
        "z": "44dad47cc131c3d9",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1630,
        "y": 520,
        "wires": [
            [
                "a56a5e9d82985d1c"
            ],
            [
                "fa662d53f167a2a1"
            ]
        ]
    },
    {
        "id": "2becf54ff33e58f7",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "Response",
        "func": "/** SELLER\n * \n * incasso netto = prezzo cessione - commissione\n * \n * costi risparmiato =  actual value sum del salario lordo al tasso di sconto del 4% per gli anni rimanenti di contratto in origine\n * saldo finanziario = incasso netto + costi risparmiati\n * mark to market = prezzo di cessione - prezzo atteso\n * valore residuo\n * profitto netto = incazzo netto - valore residuo\n*/\n\n/** BUYER\n * Prezzo di cessione\n * costo del salario: actual value sum del salario lordo al tasso di sconto del 4% per gli anni di contratto\n * altri costi =  commissioni buyer  + contributo di solidarietà del 5% del presso di cessione se il giocagtore cambia nazione\n * costo totale = Prezzo di cessione + costo salario + altri costi\n * benefici attesi = valore residuo + costo salario\n * valore attuale netto = benefici attesi   costo totale;\n * \n * \n *  player.OldRemainingYearsOfContract = Utils.ryc(p.endContract) // NECESSARIO AL SIMULATORE\n                        player.OldGrossSalary = p.salaryGross;\n                        player.OldResidualValue = p.residualValue;\n                        player.OldCosts = p.costs;\n                        player.OldClub = sourceClub;\n                        plaer.OldExpectedPrice = p.expectedPrice;\n * */\n \n let TheFootballTree = msg.payload;\n \n\n let Players = [];\n let index = -1;\n \n let resp = [];\n\n try {\n     \n     Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            club.Players.forEach( player => {\n               index++;\n               Players[index]=player;\n               \n                \n                \n            })\n        })\n })\n \n\nlet simulationParamArr = msg.req.body;\n\nsimulationParamArr.forEach( transfer => {\n    \n    let transaction = {}\n    \n    let objSell = {};\n    console.log(transfer[\"playerId\"].replace(/\\s/g, ''));\n   \n    let playerId= transfer[\"playerId\"].replace(/\\s/g, '');\n    \n    let pi = Players.findIndex( p=> p.playerId == playerId);\n     \n    \n    let player = Players[pi];\n    //Players[playersIndex[playerId]];\n    \n    console.log(transfer)\n    \n    objSell.sellerId = player.OldClubId;\n    objSell.sellerName = player.OldClubName;\n    \n    objSell.netCollection =  transfer[\"transferPrice\"] - transfer[\"commissionSeller\"] // transfer[\"transferPrice\"] - ( transfer[\"transferPrice\"]  *  transfer[\"commissionSeller\"] /100 ) * (1/player.currentLeagueTaxRate)\n    objSell.savedCosts = player.OldCosts;\n    objSell.netCash = objSell.netCollection + objSell.savedCosts;\n    objSell.markToMarket = transfer[\"transferPrice\"] - player.OldExpectedPrice;\n    objSell.residualValue = player.OldResidualValue;\n    objSell.netProfit = objSell.netCollection - objSell.residualValue;\n    \n    \n    transaction[\"sell\"] = objSell;\n    \n    let objBuy = {}\n    \n    objBuy.buyerId = player.currentClubId;\n    objBuy.buyerName = player.currentClubName;\n    \n    objBuy.transferPrice = transfer[\"transferPrice\"] ;\n    objBuy.costs = player.costs;\n    objBuy.otherCosts = transfer[\"commissionBuyer\"]+ ( player.currentLeagueCountry == player.OldLeagueCountry ? 0 : ( transfer[\"transferPrice\"]  *  5 /100 ) )\n    objBuy.totalCosts = objBuy.costs + objBuy.otherCosts + objBuy.transferPrice;\n    objBuy.expectedBenefits =  ( player.benefitsPotential + player.optval ) //player.potentialPrice - objBuy.transferPrice  - objBuy.otherCosts + objBuy.totalCosts //player.residualValue + objBuy.costs;\n    objBuy.netPresentValue = objBuy.expectedBenefits - objBuy.totalCosts //player.potentialPrice - objBuy.transferPrice  - objBuy.otherCosts;\n    \n     \n    transaction[\"buy\"] = objBuy;\n    \n    resp.push(transaction)\n})\n     \n     \n     \n } catch(e) {\n    console.log(e);\n    msg.status=500;\n    msg.payload=\"Error during simulation\";\n    return msg\n }\n \nmsg.status=200;\nmsg.payload=resp;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 480,
        "wires": [
            [
                "479582eccd97643c"
            ]
        ]
    },
    {
        "id": "1197eab4b92623d2",
        "type": "comment",
        "z": "44dad47cc131c3d9",
        "name": "SIMULATOR",
        "info": "",
        "x": 390,
        "y": 440,
        "wires": []
    },
    {
        "id": "a56a5e9d82985d1c",
        "type": "subflow:1b980fd89607dc71",
        "z": "44dad47cc131c3d9",
        "name": "",
        "x": 1830,
        "y": 480,
        "wires": [
            [
                "2becf54ff33e58f7"
            ]
        ]
    },
    {
        "id": "9d7598a8104694be",
        "type": "mysql",
        "z": "44dad47cc131c3d9",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 880,
        "y": 140,
        "wires": [
            [
                "a874bd013b69b1a9"
            ]
        ]
    },
    {
        "id": "7ccb4103cf4744bd",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "Check Simulation Params",
        "func": "let simulationParamsArr = msg.req.body;\n\nconsole.log(\"simulationParamsArr\",simulationParamsArr) \n\n \nmsg.status = 200;\n\nif (!simulationParamsArr || simulationParamsArr.length==0) {\n    \n    msg.status = 400; //Bad Request\n    msg.payload=\"Request body missing\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 520,
        "wires": [
            [
                "3b5218fc17823601",
                "c344ca43cbd88cac"
            ]
        ]
    },
    {
        "id": "3b5218fc17823601",
        "type": "switch",
        "z": "44dad47cc131c3d9",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 520,
        "wires": [
            [
                "a7ba8724679d4e6f"
            ],
            [
                "fa662d53f167a2a1"
            ]
        ]
    },
    {
        "id": "a7ba8724679d4e6f",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "Check Football Tree",
        "func": "let TheFootballTree;\n \n msg.buyers=[];\n msg.sellers=[];\n\ntry {\n    \n    TheFootballTree = JSON.parse(JSON.stringify(global.get(\"TheLatestFooballTree\"))); //SOLITO per evitare riferimenti\n    \n} catch (e) {\n    console.log(e);\n    msg.status = 500; //Internal server Error\n    msg.payload=\"Couldn't find or parse the Football Tree\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\n\nif (!TheFootballTree) {\n    \n    msg.status = 500; //Internal server Error\n    msg.payload=\"Couldn't find or build the Football Tree\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 500,
        "wires": [
            [
                "ba17cffc497a90f0"
            ]
        ]
    },
    {
        "id": "ba17cffc497a90f0",
        "type": "switch",
        "z": "44dad47cc131c3d9",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 990,
        "y": 520,
        "wires": [
            [
                "d0d17a6f8396afae"
            ],
            [
                "cbc61ff7b5eaa98c"
            ]
        ]
    },
    {
        "id": "cbc61ff7b5eaa98c",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "msg.source : simulator",
        "func": "msg.source=\"simulator\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 380,
        "wires": [
            [
                "43bb3c7576718bdd"
            ]
        ]
    },
    {
        "id": "7bef0cc633db61cd",
        "type": "switch",
        "z": "44dad47cc131c3d9",
        "name": "",
        "property": "source",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "simulator",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "simulator",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1710,
        "y": 260,
        "wires": [
            [
                "a11107cad9be724e"
            ],
            [
                "d0d17a6f8396afae"
            ]
        ]
    },
    {
        "id": "a11107cad9be724e",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "",
        "func": "\nmsg.payload = \"tree loaded\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1880,
        "y": 240,
        "wires": [
            []
        ]
    },
    {
        "id": "35c743854dd5044c",
        "type": "http in",
        "z": "44dad47cc131c3d9",
        "name": "/oldsimulatestage",
        "url": "/oldsimulatestage",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 380,
        "wires": [
            [
                "8b59b4c0d32effdc"
            ]
        ]
    },
    {
        "id": "2dc81fc933d0aee0",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "change request body",
        "func": "msg.req.body = [];\nmsg.req.body[0] =  {};\nmsg.req.body[0].playerId = msg.payload.idPlayer\nmsg.req.body[0].destinationClubId = msg.payload.idTeam\nmsg.req.body[0].contractDuration = msg.payload.simulazione.duratacontratto,\nmsg.req.body[0].salaryCurrent= parseFloat(msg.payload.simulazione.salarionetto),\nmsg.req.body[0].transferPrice= parseFloat(msg.payload.simulazione.prezzocessione), \nmsg.req.body[0].commissionSeller= msg.payload.simulazione.commissioniv && msg.payload.simulazione.commissioniv !== \"\" ? parseFloat(msg.payload.simulazione.commissioniv) : 0,\nmsg.req.body[0].commissionBuyer= msg.payload.simulazione.commissionia && msg.payload.simulazione.commissionia !== \"\" ? parseFloat(msg.payload.simulazione.commissionia) : 0,\nmsg.req.body[0].performance = 1 + msg.payload.simulazione.performance/100 ,\nmsg.req.body[0].intensity = msg.payload.simulazione.intensity/100 \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 380,
        "wires": [
            [
                "7ccb4103cf4744bd"
            ]
        ]
    },
    {
        "id": "b7b62f89cf896988",
        "type": "http response",
        "z": "44dad47cc131c3d9",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2650,
        "y": 540,
        "wires": []
    },
    {
        "id": "8b59b4c0d32effdc",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "msg.source : oldsimulator",
        "func": "msg.source=\"oldsimulator\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 380,
        "wires": [
            [
                "2dc81fc933d0aee0"
            ]
        ]
    },
    {
        "id": "479582eccd97643c",
        "type": "switch",
        "z": "44dad47cc131c3d9",
        "name": "New/Old Simulation",
        "property": "source",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "oldsimulator",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "oldsimulator",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2210,
        "y": 480,
        "wires": [
            [
                "9023e88875e28a95"
            ],
            [
                "8aca77da029cd2d2"
            ]
        ]
    },
    {
        "id": "8aca77da029cd2d2",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "convert response to old",
        "func": "/*\n\nNEW ONE\n\n[\n    {\n        \"sell\": {\n            \"sellerId\": \"9dntj5dioj5ex52yrgwzxrq9l\",\n            \"sellerName\": \"AC Milan\",\n            \"netCollection\": 9.7720000000114,\n            \"savedCosts\": 0,\n            \"netCash\": 9.7720000000114,\n            \"markToMarket\": 10,\n            \"residualValue\": 0,\n            \"netProfit\": 9.7720000000114\n        },\n        \"buy\": {\n            \"buyerId\": \"gi0l1habji5hpgar77dl5jqe\",\n            \"buyerName\": \"SSC Napoli\",\n            \"transferPrice\": 10,\n            \"costs\": 23.888140609707374,\n            \"otherCosts\": 0.4,\n            \"totalCosts\": 24.288140609707373,\n            \"expectedBenefits\": 22.50635345002115,\n            \"netPresentValue\": -1.7817871596862211\n        }\n    }\n]\n\nOLD ONE\n\n{\n    \"result\":\n        {\n            \"incassonetto\":\"0.00\",\n            \"costirisparmiati\":\"0.00\",\n            \"saldonetto\":\"0.00\",\n            \"valoreresiduo\":\"0.00\",\n            \"profittonetto\":\"0.00\",\n            \"prezzocessione\":\"0.00\",\n            \"costosalario\":\"193.11\",\n            \"altricosti\":\"0.00\",\n            \"costototale\":\"193.11\",\n            \"beneficiattesi\":\"302.48\",\n            \"valoreattualenetto\":\"109.37\",\n            \"marktomarket\":\"0.00\"\n            \n        }\n    \n}\n\n*/\n\n\nlet res  = { result : {} }\nlet result = res.result\n\nresult.incassonetto = String(msg.payload[0].sell.netCollection.toFixed(2));\nresult.costirisparmiati = String(msg.payload[0].sell.savedCosts.toFixed(2));\nresult.saldonetto = String(msg.payload[0].sell.netCash.toFixed(2));\nresult.valoreresiduo = String(msg.payload[0].sell.residualValue.toFixed(2));\nresult.profittonetto = String(msg.payload[0].sell.netProfit.toFixed(2));\nresult.prezzocessione  = String(msg.payload[0].buy.transferPrice.toFixed(2));\nresult.costosalario = String(msg.payload[0].buy.costs.toFixed(2));\nresult.altricosti = String(msg.payload[0].buy.otherCosts.toFixed(2));\nresult.costototale = String(msg.payload[0].buy.totalCosts.toFixed(2));\nresult.beneficiattesi = String(msg.payload[0].buy.expectedBenefits.toFixed(2));\nresult.valoreattualenetto = String(msg.payload[0].buy.netPresentValue.toFixed(2));\nresult.marktomarket =  String(msg.payload[0].sell.markToMarket.toFixed(2));\n\nmsg.payload=res;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 540,
        "wires": [
            [
                "b7b62f89cf896988"
            ]
        ]
    },
    {
        "id": "8f5102e38c511a3a",
        "type": "debug",
        "z": "44dad47cc131c3d9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2630,
        "y": 380,
        "wires": []
    },
    {
        "id": "cccd5df86cb38e29",
        "type": "inject",
        "z": "44dad47cc131c3d9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 800,
        "wires": [
            [
                "9fcd9916a20ddd9e"
            ]
        ]
    },
    {
        "id": "67211b4cf103253c",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "Checkpoint and Set",
        "func": "msg.dataset == \"players\" ? flow.set(\"latestplayers\", msg.payload) : true;\nmsg.dataset == \"clubs\" ? flow.set(\"latestclubs\", msg.payload) : true;\nmsg.dataset == \"leagues\" ? flow.set(\"latestleagues\", msg.payload) : true;\n\n\nif (  flow.get(\"latestplayers\") &&  flow.get(\"latestclubs\") &&  flow.get(\"latestleagues\") ) {\n    \n    console.log(\"players #\"+flow.get(\"latestplayers\").length);\n    console.log(\"clubs #\"+flow.get(\"latestclubs\").length);\n    console.log(\"leagues #\"+flow.get(\"latestleagues\").length);\n    console.log(\"LATEST LOADED\")\n    \n    return msg;\n    \n}\n\n \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 800,
        "wires": [
            [
                "e4ac6d39c3555cac"
            ]
        ]
    },
    {
        "id": "7d29f8afaf582449",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "Latest Players Staging",
        "func": "msg.dataset = \"players\";\nmsg.topic = \"select * from latestplayers_staging\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 760,
        "wires": [
            [
                "d71ac5a247948738"
            ]
        ]
    },
    {
        "id": "fbc0b1abee55ce0e",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "Latest Leagues Staging",
        "func": "msg.dataset = \"leagues\";\nmsg.topic = \"select * from latestleagues_staging\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 840,
        "wires": [
            [
                "d71ac5a247948738"
            ]
        ]
    },
    {
        "id": "b16ef831393c6e99",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "Latest Clubs Staging",
        "func": "msg.dataset = \"clubs\";\nmsg.topic = \"select * from latestclubs_staging\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 800,
        "wires": [
            [
                "d71ac5a247948738"
            ]
        ]
    },
    {
        "id": "e4ac6d39c3555cac",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "Football Tree Builder",
        "func": "let latestplayers = flow.get(\"latestplayers\");\nlet latestclubs = flow.get(\"latestclubs\");\nlet latestleagues =flow.get(\"latestleagues\");\n\nlet PlayerObj = global.get(\"ThePlayerObject\");\nlet ClubObj = global.get(\"TheClubObject\");\nlet LeagueObj = global.get(\"TheLeagueObject\");\n\nlet TheFootballTree = {};\n\nlet Players = {}\nlet Clubs = {}\nlet Leagues = {}\n\ntry {\n    \n    \nlatestleagues.forEach( l => {\n    \n    let League = new LeagueObj();\n    \n    Object.keys(l).forEach( key => {\n        \n        League[key] = l[key]\n    })\n  \n    Leagues[League.id] = League;\n    \n    TheFootballTree[League.leagueId] === undefined ?  TheFootballTree[League.leagueId] = League : true;\n    \n    \n})\n\nlatestclubs.forEach( c => {\n    \n    let Club = new ClubObj();\n    \n    Object.keys(c).forEach( key => {\n        \n        Club[key] = c[key]\n    })\n  \n    Clubs[Club.clubId] = Club;\n    \n    TheFootballTree[Club.leagueId].Clubs === undefined ?  TheFootballTree[Club.leagueId].Clubs = {} : true;\n        \n    TheFootballTree[Club.leagueId].Clubs[Club.clubId] === undefined ?  TheFootballTree[Club.leagueId].Clubs[Club.clubId] = Club : true; \n\n})\n\n\nlatestplayers.forEach( p => {\n    \n    let Player = new PlayerObj();\n    \n    Object.keys(p).forEach( key => {\n        \n        Player[key] = p[key]\n    })\n    \n    //DATE\n    Player.birthDate = new Date(Player.birthDate);\n    Player.startContract = new Date(Player.startContract);\n    Player.endContract = new Date(Player.endContract);\n    \n    \n    //BOOLEANS\n    Player.nationalTeamPlayer = Player.nationalTeamPlayer ? true : false;\n    Player.emerging = Player.emerging ? true : false;\n    Player.risingStar = Player.risingStar ? true : false;\n    Player.superStar = Player.nationasuperStar ? true : false;\n  \n    Players[Player.playerId] = Player;\n    \n    \n    \n    TheFootballTree[Player.currentLeagueId].Clubs[Player.currentClubId].Players === undefined ? TheFootballTree[Player.currentLeagueId].Clubs[Player.currentClubId].Players = {} : true;\n    TheFootballTree[Player.currentLeagueId].Clubs[Player.currentClubId].Players[Player.playerId] = Player;\n})\n    \n    \n    console.log(\"Footaball Tree has been built\")\n    \n} catch (e) {\n    console.log(e)\n}\n\n\n\n\n// DA OGGETTO A ITERABILE\n\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        \n        Object.keys(TheFootballTree[leagueId].Clubs).forEach( clubId => { \n           \n            TheFootballTree[leagueId].Clubs[clubId].Players = Object.values(TheFootballTree[leagueId].Clubs[clubId].Players);\n            \n        \n        })   \n        \n        TheFootballTree[leagueId].Clubs = Object.values(TheFootballTree[leagueId].Clubs);\n        \n    })\n    \n\n\nmsg.payload=TheFootballTree;\n\n\n\nlet tDiff = ( new Date() - flow.get(\"start\")) /1000;\n\nconsole.log(tDiff)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 860,
        "wires": [
            [
                "2c3d3e7674798ec5"
            ]
        ]
    },
    {
        "id": "9fcd9916a20ddd9e",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "Unset",
        "func": "flow.set(\"latestplayers\", null);\nflow.set(\"latestclubs\", null);\nflow.set(\"latestleagues\", null);\n\nflow.set(\"start\", new Date());\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 800,
        "wires": [
            [
                "7d29f8afaf582449",
                "b16ef831393c6e99",
                "fbc0b1abee55ce0e"
            ]
        ]
    },
    {
        "id": "108f36c69272c206",
        "type": "inject",
        "z": "44dad47cc131c3d9",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 860,
        "wires": [
            [
                "e4ac6d39c3555cac"
            ]
        ]
    },
    {
        "id": "e385107489f0962f",
        "type": "comment",
        "z": "44dad47cc131c3d9",
        "name": "LOADS TheLatestFootballTree",
        "info": "",
        "x": 560,
        "y": 720,
        "wires": []
    },
    {
        "id": "2c3d3e7674798ec5",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "Clubs and Leagues Analisys",
        "func": "let TheProductionFootballTree = msg.payload;\nconst Utils = global.get(\"UTILS\");\n\nvar Players = [];\nvar Clubs = [];\nvar Leagues = [];\n\n\n\n\ntry {\n    \n\n\n    Object.keys(TheProductionFootballTree).forEach( leagueId => {\n        \n        \n        let totalAgeLeague = 0;\n        let totalContractDurationLeague = 0;\n        let totalContractResiduaDurationLeauge = 0;\n        \n        TheFootballTree[leagueId].numOfPlayers = 0; \n        TheFootballTree[leagueId].avgAge = 0\n        TheFootballTree[leagueId].avgContractDuration = 0\n        TheFootballTree[leagueId].avgContractResidualDuration = 0\n        \n        TheFootballTree[leagueId].portfolioCost = 0\n        TheFootballTree[leagueId].residualBookValue = 0\n        TheFootballTree[leagueId].residualValue = 0\n        TheFootballTree[leagueId].potentialPrice = 0\n        TheFootballTree[leagueId].expectedPrice = 0\n        TheFootballTree[leagueId].capitalGain = 0\n        TheFootballTree[leagueId].netProfit = 0\n        \n        TheFootballTree[leagueId].salaryGross = 0\n        TheFootballTree[leagueId].salaryCurrent = 0\n        TheFootballTree[leagueId].salaryOptimal = 0\n        TheFootballTree[leagueId].salaryPotential = 0\n        TheFootballTree[leagueId].salaryAbsoluteDeviation = 0\n        TheFootballTree[leagueId].salaryPercDeviation = 0\n        \n        TheFootballTree[leagueId].Clubs.forEach( club => { \n           \n            let totalAge = 0;\n            let totalContractDuration = 0;\n            let totalContractResiduaDuration = 0;\n           \n            club.numOfPlayers = club.Players.length;\n            \n            club.avgAge = 0\n            club.avgContractDuration = 0\n            club.avgContractResidualDuration = 0\n            \n            club.portfolioCost = 0\n            club.residualBookValue = 0\n            club.residualValue = 0\n            club.potentialPrice = 0\n            club.expectedPrice = 0\n            club.capitalGain = 0\n            club.netProfit = 0\n            \n            club.salaryGross = 0\n            club.salaryCurrent = 0\n            club.salaryOptimal = 0\n            club.salaryPotential = 0\n            club.salaryAbsoluteDeviation = 0\n            club.salaryPercDeviation = 0\n            \n            \n            club.Players.forEach( player => {\n                \n                totalAge = totalAge + player.age;\n                totalContractDuration = totalContractDuration +  Utils.diffInMonths(player.endContract,player.startContract)\n                totalContractResiduaDuration = totalContractResiduaDuration + Utils.diffInMonths(player.endContract,new Date());\n                \n                \n                club.portfolioCost = club.portfolioCost + player.transferPrice;\n                club.residualBookValue = club.residualBookValue + player.residualBookValue;\n                club.residualValue = club.residualValue + player.residualValue;\n                club.potentialPrice = club.potentialPrice + player.potentialPrice;\n                club.expectedPrice = club.expectedPrice + player.expectedPrice;\n                \n                club.salaryGross = club.salaryGross + player.salaryGross;\n                club.salaryCurrent = club.salaryCurrent + player.salaryCurrent;\n                club.salaryOptimal = club.salaryOptimal + player.salaryOptimal;\n                club.salaryPotential = club.salaryPotential + player.salaryPotential;\n                \n                \n                Players.push(player);\n                \n            })\n            \n            \n            club.avgAge = totalAge / club.numOfPlayers;\n            club.avgContractDuration =  totalContractDuration / club.numOfPlayers;\n            club.avgContractResidualDuration  =  totalContractResiduaDuration / club.numOfPlayers;\n        \n            club.capitalGain = club.expectedPrice - club.residualBookValue;\n            club.netProfit =  club.expectedPrice - club.residualValue;\n            \n            club.salaryAbsoluteDeviation = club.salaryOptimal - club.salaryCurrent;\n            club.salaryPercDeviation =  (club.salaryAbsoluteDeviation * 100 ) / club.salaryOptimal\n            \n            totalAgeLeague = totalAgeLeague + totalAge;\n            totalContractDurationLeague = totalContractDurationLeague + totalContractDuration;\n            totalContractResiduaDurationLeauge = totalContractResiduaDurationLeauge + totalContractResiduaDuration;\n            \n            TheFootballTree[leagueId].numOfPlayers = TheFootballTree[leagueId].numOfPlayers + club.numOfPlayers;\n            \n            TheFootballTree[leagueId].portfolioCost = TheFootballTree[leagueId].portfolioCost + club.portfolioCost;\n            TheFootballTree[leagueId].residualBookValue = TheFootballTree[leagueId].residualBookValue + club.residualBookValue;\n            TheFootballTree[leagueId].residualValue = TheFootballTree[leagueId].residualValue + club.residualValue;\n            TheFootballTree[leagueId].potentialPrice = TheFootballTree[leagueId].potentialPrice + club.potentialPrice;\n            TheFootballTree[leagueId].expectedPrice = TheFootballTree[leagueId].expectedPrice + club.expectedPrice;\n                \n            TheFootballTree[leagueId].salaryGross = TheFootballTree[leagueId].salaryGross + club.salaryGross;\n            TheFootballTree[leagueId].salaryCurrent = TheFootballTree[leagueId].salaryCurrent + club.salaryCurrent;\n            TheFootballTree[leagueId].salaryOptimal = TheFootballTree[leagueId].salaryOptimal + club.salaryOptimal;\n            TheFootballTree[leagueId].salaryPotential = TheFootballTree[leagueId].salaryPotential + club.salaryPotential;\n            \n            Clubs.push(club);\n            \n        \n        })   \n        \n        \n        TheFootballTree[leagueId].avgAge = totalAgeLeague / TheFootballTree[leagueId].numOfPlayers;\n        TheFootballTree[leagueId].avgContractDuration =  totalContractDurationLeague / TheFootballTree[leagueId].numOfPlayers;\n        TheFootballTree[leagueId].avgContractResidualDuration  =  totalContractResiduaDurationLeauge / TheFootballTree[leagueId].numOfPlayers;\n        \n        TheFootballTree[leagueId].capitalGain = TheFootballTree[leagueId].expectedPrice - TheFootballTree[leagueId].residualBookValue;\n        TheFootballTree[leagueId].netProfit =  TheFootballTree[leagueId].expectedPrice - TheFootballTree[leagueId].residualValue;\n            \n        TheFootballTree[leagueId].salaryAbsoluteDeviation = TheFootballTree[leagueId].salaryOptimal - TheFootballTree[leagueId].salaryCurrent;\n        TheFootballTree[leagueId].salaryPercDeviation =  (TheFootballTree[leagueId].salaryAbsoluteDeviation * 100 ) / TheFootballTree[leagueId].salaryOptimal\n      \n        Leagues.push(TheFootballTree[leagueId])\n       \n    })\n\n\n} catch(e) {\n    \n    console.log(e)\n}\n\nmsg.payload=TheProductionFootballTree;\n\nflow.set(\"Players\",Players)\nflow.set(\"Clubs\",Clubs)\nflow.set(\"Leagues\",Leagues)\n\nglobal.set(\"TheLatestProductionFooballTree\",TheProductionFootballTree)\n\nconsole.log(\"ELABORATION COMPLETED\")\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 860,
        "wires": [
            [
                "4c70b0da1d18269c"
            ]
        ]
    },
    {
        "id": "d71ac5a247948738",
        "type": "mysql",
        "z": "44dad47cc131c3d9",
        "mydb": "ea1e5103bb9e91ad",
        "name": "SF Produzione",
        "x": 960,
        "y": 740,
        "wires": [
            [
                "67211b4cf103253c"
            ]
        ]
    },
    {
        "id": "4c70b0da1d18269c",
        "type": "switch",
        "z": "44dad47cc131c3d9",
        "name": "",
        "property": "source",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "simulator",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "simulator",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1810,
        "y": 860,
        "wires": [
            [
                "acc000053779e92f"
            ],
            []
        ]
    },
    {
        "id": "acc000053779e92f",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "",
        "func": "\nmsg.payload = \"tree loaded\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1980,
        "y": 840,
        "wires": [
            []
        ]
    },
    {
        "id": "58fb5d5a4b694c01",
        "type": "http in",
        "z": "44dad47cc131c3d9",
        "name": "/variablesimulation",
        "url": "/variablesimulation",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 210,
        "y": 1600,
        "wires": [
            [
                "4de0b4269503a5cf"
            ]
        ]
    },
    {
        "id": "4de0b4269503a5cf",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "Check Simulation Params",
        "func": "let simulationParamsArr = msg.req.body;\n\nconsole.log(\"simulationParamsArr\",simulationParamsArr) \n\n \nmsg.status = 200;\n\nif (!simulationParamsArr || simulationParamsArr.length==0) {\n    \n    msg.status = 400; //Bad Request\n    msg.payload=\"Request body missing\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1600,
        "wires": [
            [
                "c4f218c4a806a326"
            ]
        ]
    },
    {
        "id": "f38fe0f0785c1c67",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "Checkpoint",
        "func": "let simulationParamsArr = msg.req.body;\n\nsimulationParamsArr[0][\"performance\"]=msg.payload;\n\nflow.set(\"resp\",[]);\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 1600,
        "wires": [
            [
                "383475c0fc60e882"
            ]
        ]
    },
    {
        "id": "b6e8bf77d09f9628",
        "type": "split",
        "z": "44dad47cc131c3d9",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 830,
        "y": 1600,
        "wires": [
            [
                "70e8ce70cb9e05a8"
            ]
        ]
    },
    {
        "id": "c4f218c4a806a326",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "Checkpoint",
        "func": "let performanceArr = [0,10,20,30,40,50,60,70,80,90,100]\n\nmsg.payload=performanceArr;\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 670,
        "y": 1600,
        "wires": [
            [
                "b6e8bf77d09f9628"
            ]
        ]
    },
    {
        "id": "0bdd19546ff51f93",
        "type": "http response",
        "z": "44dad47cc131c3d9",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2210,
        "y": 1600,
        "wires": []
    },
    {
        "id": "70e8ce70cb9e05a8",
        "type": "delay",
        "z": "44dad47cc131c3d9",
        "name": "",
        "pauseType": "rate",
        "timeout": "10",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1000,
        "y": 1600,
        "wires": [
            [
                "f38fe0f0785c1c67"
            ]
        ]
    },
    {
        "id": "23ae63416d387af2",
        "type": "join",
        "z": "44dad47cc131c3d9",
        "name": "",
        "mode": "auto",
        "build": "object",
        "property": "payload",
        "propertyType": "msg",
        "key": "topic",
        "joiner": "\\n",
        "joinerType": "str",
        "accumulate": true,
        "timeout": "",
        "count": "",
        "reduceRight": false,
        "reduceExp": "",
        "reduceInit": "",
        "reduceInitType": "",
        "reduceFixup": "",
        "x": 2070,
        "y": 1600,
        "wires": [
            [
                "0bdd19546ff51f93"
            ]
        ]
    },
    {
        "id": "383475c0fc60e882",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "Retrieve Req and Tree and Modify Tree",
        "func": "/** SIMULATORE\n * \n * INPUT:\n *  durata del contratto (player.remainingYearsOfContract)\n *  stipendio netto annuale (player.salaryCurrent)\n *  prezzo di cessione ( player.transferPrice)\n *  \n * commissioni buyer\n * commissioni seller\n * \n *  attesa performance \n * intensità di impiego ( insostituibile=1,25, titolare =1; riserva =0,5 terza scelta =0,25 )\n * ( player.absind * %perfromance attesa * intensità di impiego)\n *  return msg; \n * \n * \n * \n * [{\n\n\t\"playerId\" : \"9sbx7dlressy910i8uuztf93p\",\n\t\"destinationClubId\" : \"gi0l1habji5hpgar77dl5jqe\",\n\t\"contractDuration\" : 3,\n\t\"salaryCurrent\" : 5,\n\t\"transferPrice\" : 10,\n\t\"commissionSeller\" : 4,\n\t\"commissionBuyer\" : 4,\n\t\"performance\" : 1.25 ,\n\t\"intensity\" : 1\n }]\n\t\n * \n * \n * \n * \n * \n * \n */\n const Utils = global.get(\"UTILS\");\n \n let simulationParamsArr = msg.req.body;\n \n console.log(\"simulationParamsArr\",simulationParamsArr) \n let TheFootballTree;\n \n msg.buyers=[];\n msg.sellers=[];\n\ntry {\n    \n    TheFootballTree = JSON.parse(JSON.stringify(global.get(\"TheLatestFooballTree\"))); //SOLITO per evitare riferimenti\n    \n} catch (e) {\n    console.log(e);\n    msg.status = 500; //Internal server Error\n    msg.payload=\"Couldn't find or parse the Football Tree\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\n\nif (!TheFootballTree) {\n    \n    msg.status = 500; //Internal server Error\n    msg.payload=\"Couldn't find or build the Football Tree\";\n    console.log(msg.payload)\n    return msg;\n}\n\nif (!simulationParamsArr || simulationParamsArr.length==0) {\n    \n    msg.status = 400; //Bad Request\n    msg.payload=\"Request body missing\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\n\ntry {\n    \n    let playersIndex = {};\n    let destinationClubs = [];\n    \n    simulationParamsArr.forEach( pset => {\n    \n    if (!pset[\"playerId\"]) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing playerId\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n     if (playersIndex[pset[\"playerId\"]] === undefined) {\n         \n         playersIndex[pset[\"playerId\"]] = pset[\"playerId\"]\n    \n        \n    } else {\n        \n        msg.status = 400; //Bad Request\n        msg.payload=\"playerId already present in another transaction\";\n        console.log(msg.payload)\n        return msg;\n        \n    }\n    \n    if (!pset[\"destinationClubId\"]) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing destinationClubId\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n    if (!pset[\"contractDuration\"]) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing contractDuration\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n    if (!pset[\"salaryCurrent\"]) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing salaryCurrent\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n    if (!pset[\"transferPrice\"] &&  pset[\"transferPrice\"] !== 0 ) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing transferPrice\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n    if (!pset[\"commissionSeller\"] &&  pset[\"commissionSeller\"] !== 0 ) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing commissionSeller\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n    if (!pset[\"commissionBuyer\"] &&  pset[\"commissionBuyer\"] !== 0 ) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing commissionBuyer\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n    if (!pset[\"performance\"] &&  pset[\"performance\"] !== 0 ) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing performance\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n    if (!pset[\"intensity\"] &&  pset[\"intensity\"] !== 0 ) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing intensity\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n    \n    \n    \n    //Find Destination Club\n    let destinationClub;\n    let destinationLeague;\n    \n    let sourceClub;\n    \n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => {\n                \n            if(club.clubId == pset[\"destinationClubId\"]) {\n                destinationClub = club;\n                destinationLeague = TheFootballTree[leagueId];\n                \n                \n                let index = msg.buyers.findIndex(c => c.clubId==club.clubId); \n\n\n                index === -1 ?  msg.buyers.push(club) : console.log(\"object already exists\")\n                \n            }\n                \n         })\n    })\n    \n    \n    if(!destinationLeague) {\n        \n        msg.status = 400; //Bad Request\n        msg.payload=\"Wrong destinationClubId\";\n        console.log(msg.payload)\n        return msg;\n        \n    }\n    \n    \n    if(!destinationClub) {\n        \n        msg.status = 400; //Bad Request\n        msg.payload=\"Wrong destinationClubId\";\n        console.log(msg.payload)\n        return msg;\n        \n    }\n    \n    let maxMinutes = 0;\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            club.Players.forEach( player => {\n                \n                maxMinutes = player.minutes > maxMinutes ? player.minutes : maxMinutes\n    \n     \n            })\n        })\n        \n    })\n    \n    \n    //Set new Economica params and remove player from current team\n    \n    let player = null;\n    \n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => {\n                club.Players.forEach( p => {\n                    \n                    \n                       \n                if ( pset[\"playerId\"] == p.playerId ) {\n                    \n                        let sourceClub = JSON.parse(JSON.stringify(club));\n                         \n                        msg.sellers.push[sourceClub]\n                        player = JSON.parse(JSON.stringify(p));\n                    \n                    \n                        player.simulating = true;\n                    \n                         //DATE\n                        player.birthDate = new Date(p.birthDate);\n                        player.startContract = new Date(p.startContract);\n                        player.endContract = new Date(p.endContract);\n                        \n                        //Booleans\n                        player.nationalTeamPlayer = p.nationalTeamPlayer ? true : false;\n                        player.emerging = p.emerging ? true : false;\n                        player.risingStar = p.risingStar ? true : false;\n                        player.superStar = ( p.superstar || p.superStar ) ? true : false;\n                        \n                    \n                    \n                        player.birthDate = new Date(player.birthDate);\n                        player.startContract = new Date(player.startContract);\n                        player.endContract = new Date(player.endContract);\n                    \n                        player.currentClubId=destinationClub.clubId;\n                        player.currentClubName=destinationClub.name;\n                        player.currentClubCluster=destinationClub.cluster;\n\n                        player.currentLeagueId=destinationLeague.leagueId;\n                        player.currentLeagueName=destinationLeague.name;\n                        player.currentLeagueCluster=destinationLeague.cluster;\n                        player.currentLeagueWeight=destinationLeague.weight;\n                        player.currentLeagueTaxRate=destinationLeague.taxRate;\n                        \n                        \n                        player.OldRemainingYearsOfContract = Utils.ryc(player.endContract) // NECESSARIO AL SIMULATORE\n                        player.OldRemainingMonthsOfContract = p.remainingMonthsOfContract // NECESSARIO AL SIMULATORE\n                        player.OldGrossSalary = p.salaryGross;\n                        player.OldResidualValue = p.residualValue;\n                        player.OldCosts = p.costs;\n                        player.OldClubId = sourceClub.clubId;\n                        player.OldClubName = sourceClub.name;\n                        player.OldExpectedPrice = p.expectedPrice;\n                        player.currentLeagueCountry = destinationLeague.country;\n                        player.OldLeagueCountry = TheFootballTree[leagueId].country\n                        \n                        player.contractType = \"Proprietà\"\n                        player.salaryNet = parseFloat(pset[\"salaryCurrent\"])\n                        player.salaryGross = player.salaryNet * ( destinationLeague.taxRate ?  destinationLeague.taxRate : 1.825 );\n                        player.startContract = new Date();\n                        player.endContract = new Date(parseInt(player.startContract.getFullYear()) + parseInt(pset[\"contractDuration\"]), parseInt(player.startContract.getMonth()), parseInt(player.startContract.getDate()));\n                        player.totalYearsOfContract =  Utils.tyc(player.startContract,player.endContract)\n                        player.remainingYearsOfContract = Utils.ryc(player.endContract)\n                        player.remainingMonthsOfContract = (player.endContract) ?  Utils.diffInMonths(new Date(player.endContract),new Date()) : null;\n                        player.transferPrice = pset[\"transferPrice\"]\n                        player.masterClubId =  player.currentClubId;\n                        player.masterClubName = player.currentClubName\n                        \n                        player.minutes = 38*90 *  parseFloat(pset[\"intensity\"])\n                        player.avgPlayedMinuteShare = (player.minutes)/(38*90)\n                        \n                        player.avgMicroIndex = parseFloat(pset[\"performance\"])\n                        \n                        \n                        // player.absind = player.absind * pset[\"perfromance\"] *  pset[\"intensity\"] => performance e absind calcolato dopo\n                    \n                        let index = club.Players.findIndex( pi => pi.playerId == p.playerId)\n                        \n                        console.log(\"index to remove \"+index);\n                        \n                        club.Players.splice(index,1);\n                        \n                    \n                }\n               \n            })\n        })\n        \n    })\n    \n    \n    if (player) {\n        destinationClub.Players.push(player); \n        console.log(player)\n    }\n    \n})\n    \n    \n    //RIMODULAZIONE DELL ABSIND\n    /**\n     * \n     * prendo i giocatori della stessa squadra e dello stesso gruppo e sottraggo \n     *  \n     * playerdello stesso ruolo . minutes = player.minutes / (# num giocatori dello stesso ruolo nella stessa squadra)\n     * \n     * controllare che minutes Non può essere negativo!\n     * \n     * **/\n    \n    \n} catch(e) {\n    \n    console.log(e);\n    msg.status = 500; //Internal server Error\n    msg.payload=\"Couldn't find or build the Football Tree\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\n\n\nmsg.status=200\nmsg.payload = TheFootballTree;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 1600,
        "wires": [
            [
                "7ae68221753507d2"
            ]
        ]
    },
    {
        "id": "7ae68221753507d2",
        "type": "subflow:1b980fd89607dc71",
        "z": "44dad47cc131c3d9",
        "name": "",
        "x": 1750,
        "y": 1600,
        "wires": [
            [
                "8a7655cb72f2c8c3"
            ]
        ]
    },
    {
        "id": "8a7655cb72f2c8c3",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "Response",
        "func": "/** SELLER\n * \n * incasso netto = prezzo cessione - commissione\n * \n * costi risparmiato =  actual value sum del salario lordo al tasso di sconto del 4% per gli anni rimanenti di contratto in origine\n * saldo finanziario = incasso netto + costi risparmiati\n * mark to market = prezzo di cessione - prezzo atteso\n * valore residuo\n * profitto netto = incazzo netto - valore residuo\n*/\n\n/** BUYER\n * Prezzo di cessione\n * costo del salario: actual value sum del salario lordo al tasso di sconto del 4% per gli anni di contratto\n * altri costi =  commissioni buyer  + contributo di solidarietà del 5% del presso di cessione se il giocagtore cambia nazione\n * costo totale = Prezzo di cessione + costo salario + altri costi\n * benefici attesi = valore residuo + costo salario\n * valore attuale netto = benefici attesi   costo totale;\n * \n * \n *  player.OldRemainingYearsOfContract = Utils.ryc(p.endContract) // NECESSARIO AL SIMULATORE\n                        player.OldGrossSalary = p.salaryGross;\n                        player.OldResidualValue = p.residualValue;\n                        player.OldCosts = p.costs;\n                        player.OldClub = sourceClub;\n                        plaer.OldExpectedPrice = p.expectedPrice;\n * */\n \n let TheFootballTree = msg.payload;\n \n\n let Players = [];\n let index = -1;\n \n let resp = [];\n\n try {\n     \n     Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            club.Players.forEach( player => {\n               index++;\n               Players[index]=player;\n               \n                \n                \n            })\n        })\n })\n \n\nlet simulationParamArr = msg.req.body;\n\nsimulationParamArr.forEach( transfer => {\n    \n    let transaction = {}\n    \n    let objSell = {};\n    console.log(transfer[\"playerId\"].replace(/\\s/g, ''));\n   \n    let playerId= transfer[\"playerId\"].replace(/\\s/g, '');\n    \n    let pi = Players.findIndex( p=> p.playerId == playerId);\n     \n    \n    let player = Players[pi];\n    //Players[playersIndex[playerId]];\n    \n    console.log(transfer)\n    \n    objSell.sellerId = player.OldClubId;\n    objSell.sellerName = player.OldClubName;\n    \n    objSell.netCollection =  transfer[\"transferPrice\"] - ( transfer[\"transferPrice\"]  *  transfer[\"commissionSeller\"] /100 ) * (1/player.currentLeagueTaxRate)\n    objSell.savedCosts = player.OldCosts;\n    objSell.netCash = objSell.netCollection + objSell.savedCosts;\n    objSell.markToMarket = transfer[\"transferPrice\"] - player.OldExpectedPrice;\n    objSell.residualValue = player.OldResidualValue;\n    objSell.netProfit = objSell.netCollection - objSell.residualValue;\n    \n    \n    transaction[\"sell\"] = objSell;\n    \n    let objBuy = {}\n    \n    objBuy.buyerId = player.currentClubId;\n    objBuy.buyerName = player.currentClubName;\n    \n    objBuy.transferPrice = transfer[\"transferPrice\"] ;\n    objBuy.costs = player.costs;\n    objBuy.otherCosts = ( transfer[\"transferPrice\"]  *  transfer[\"commissionBuyer\"] /100 ) + ( player.currentLeagueCountry == player.OldLeagueCountry ? 0 : ( transfer[\"transferPrice\"]  *  5 /100 ) )\n    objBuy.totalCosts = objBuy.costs + objBuy.otherCosts + objBuy.transferPrice;\n    objBuy.expectedBenefits =  ( player.benefitsPotential + player.optval ) * 0.8 //player.potentialPrice - objBuy.transferPrice  - objBuy.otherCosts + objBuy.totalCosts //player.residualValue + objBuy.costs;\n    objBuy.netPresentValue = objBuy.expectedBenefits - objBuy.totalCosts //player.potentialPrice - objBuy.transferPrice  - objBuy.otherCosts;\n    \n     \n    transaction[\"buy\"] = objBuy;\n    \n    resp.push(transaction)\n})\n     \n     \n     \n } catch(e) {\n    console.log(e);\n    msg.status=500;\n    msg.payload=\"Error during simulation\";\n    return msg\n }\n \nmsg.status=200;\nmsg.payload=resp[0];\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1920,
        "y": 1600,
        "wires": [
            [
                "23ae63416d387af2"
            ]
        ]
    },
    {
        "id": "bb04cdbcec5594af",
        "type": "http in",
        "z": "44dad47cc131c3d9",
        "name": "/comparableplayers/:id",
        "url": "/comparableplayers/:id",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 1740,
        "wires": [
            [
                "268d20ab1c56fef1"
            ]
        ]
    },
    {
        "id": "268d20ab1c56fef1",
        "type": "function",
        "z": "44dad47cc131c3d9",
        "name": "Get a player",
        "func": "/** Player\nreq.params.id\n */\n \n const Utils = global.get(\"UTILS\");\n \n let playerId = msg.req.params.id;\n let TheFootballTree;\n console.log(\"A PLAYER \"+playerId)\n\ntry {\n    \n    TheFootballTree = JSON.parse(JSON.stringify(global.get(\"TheLatestProductionFooballTree\"))); //SOLITO per evitare riferimenti\n    \n} catch (e) {\n    console.log(e);\n    msg.status = 500; //Internal server Error\n    msg.payload=\"Couldn't find or parse the Football Tree\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\n\nif (!TheFootballTree) {\n    \n    msg.status = 500; //Internal server Error\n    msg.payload=\"Couldn't find or build the Football Tree\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\nif (!playerId) {\n    \n    msg.status = 400; //Internal server Error\n    msg.payload=\"Missing playerId\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\nlet myPlayer={};\nlet myPlayerObj={};\nplayerId=playerId.replace(/\\s/g, '')\nlet resp = {};\n\ntry {\n    \n   \n   \n        Object.keys(TheFootballTree).forEach( leagueId => {\n            TheFootballTree[leagueId].Clubs.forEach( club => {\n                    club.Players.forEach( p => {\n                        \n                       if (p.playerId == playerId) {\n                           \n                           \n                        let obj = {}\n                        \n                        obj.playerId = p.playerId;\n                        obj.object = \"Player\"\n                        obj.firstName = p.firstName;\n                        obj.lastName = p.lastName\n                        obj.name = p.name;\n                        obj.fullName = p.fullName;\n                        obj.roleGroup = p.latestRoleGroup\n                        obj.clubId = p.currentClubId;\n                        obj.clubName = p.currentClubName;\n                        obj.clubCluster = p.currentClubCluster;\n                        obj.leagueId = p.currentLeagueId;\n                        obj.leagueName = p.currentLeagueName;\n                        obj.age = p.age\n                        obj.position = p.currentPosition;\n                        obj.effectiveness = parseFloat(p.effectiveness.toFixed(2))\n                        obj.fairValue = parseFloat(p.potentialPrice.toFixed(2))\n                        obj.faiSalary = parseFloat(p.salaryPotential.toFixed(2))\n                        \n                        myPlayer=obj;\n                        myPlayerObj = p;\n                        \n                       }\n                           \n                       \n                    })\n                    \n            })\n        })    \n    \n    \n        let mostEffectivePayerSameRole = myPlayerObj;\n        let mostValuablePayerSameRole = myPlayerObj;\n        let closestPlayerToLeagueAvgEffectiveness = myPlayerObj;\n        let closestPlayerToLeagueAvgFairValue = myPlayerObj;\n    \n        let totEffectivenessSameLeague = 0;\n        let totFairValueSameLeague = 0;\n        let count = 0;\n        \n        let avgEffectiveness = 0 ;\n        let avgFairValue = 0;\n    \n        Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => {\n                club.Players.forEach( p => {\n                    \n                   if (p.latestRoleGroup == myPlayerObj.latestRoleGroup) {\n                       \n                       mostEffectivePayerSameRole = p.effectiveness > mostEffectivePayerSameRole.effectiveness ? p : mostEffectivePayerSameRole\n                       mostValuablePayerSameRole = p.potentialPrice > mostValuablePayerSameRole.potentialPrice ? p : mostValuablePayerSameRole\n                       \n                   }\n                   \n                    if (p.currentLeagueId == myPlayerObj.currentLeagueId) {\n                       \n                       totEffectivenessSameLeague = totEffectivenessSameLeague + p.effectiveness\n                       totFairValueSameLeague = totFairValueSameLeague + p.potentialPrice\n                       count= count + 1;\n                       \n                       \n                       avgEffectiveness = totEffectivenessSameLeague / count;\n                       avgFairValue = totFairValueSameLeague / count;\n                   }\n                       \n                   \n                })\n                \n        })\n        })\n        \n        \n        \n        Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => {\n                club.Players.forEach( p => {\n                    \n                  \n                   \n                    if (p.currentLeagueId == myPlayerObj.currentLeagueId) {\n                       \n                       \n                        closestPlayerToLeagueAvgEffectiveness = Math.abs(p.effectiveness - avgEffectiveness )  < Math.abs(closestPlayerToLeagueAvgEffectiveness.effectiveness - avgEffectiveness ) ? p : closestPlayerToLeagueAvgEffectiveness;\n                        closestPlayerToLeagueAvgFairValue = Math.abs(p.potentialPrice - avgFairValue )  < Math.abs(closestPlayerToLeagueAvgFairValue.potentialPrice - avgFairValue ) ? p : closestPlayerToLeagueAvgFairValue;\n                   }\n                       \n                   \n                })\n                \n        })\n        \n        \n    }) \n    \n    \n    \n    \n    \n    resp.mostEffectivePayerSameRole = {}\n    resp.mostEffectivePayerSameRole.name = mostEffectivePayerSameRole.name\n    resp.mostEffectivePayerSameRole.effectiveness = mostEffectivePayerSameRole.effectiveness\n    \n    resp.mostValuablePayerSameRole = {}\n    resp.mostValuablePayerSameRole.name = mostValuablePayerSameRole.name\n    resp.mostValuablePayerSameRole.fairValue = mostValuablePayerSameRole.potentialPrice\n    \n    resp.closestPlayerToLeagueAvgEffectiveness = {}\n    resp.closestPlayerToLeagueAvgEffectiveness.name = closestPlayerToLeagueAvgEffectiveness.name\n    resp.closestPlayerToLeagueAvgEffectiveness.effectiveness = closestPlayerToLeagueAvgEffectiveness.effectiveness\n    resp.closestPlayerToLeagueAvgEffectiveness.avgEffectiveness = avgEffectiveness\n\n    resp.closestPlayerToLeagueAvgFairValue = {}\n    resp.closestPlayerToLeagueAvgFairValue.name = closestPlayerToLeagueAvgFairValue.name\n    resp.closestPlayerToLeagueAvgFairValue.fairValue = closestPlayerToLeagueAvgFairValue.potentialPrice\n    resp.closestPlayerToLeagueAvgFairValue.avgFairValue = avgFairValue\n\n} catch (e) {\n    \n    msg.status=500;\n    msg.payload=\"Internal Error\"\n}\n\nmsg.status=200\nmsg.payload = resp;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 1740,
        "wires": [
            [
                "ac704b5f25f2e1b8"
            ]
        ]
    },
    {
        "id": "ac704b5f25f2e1b8",
        "type": "http response",
        "z": "44dad47cc131c3d9",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 610,
        "y": 1740,
        "wires": []
    },
    {
        "id": "c344ca43cbd88cac",
        "type": "debug",
        "z": "44dad47cc131c3d9",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 530,
        "y": 600,
        "wires": []
    },
    {
        "id": "e917328761fd6a41",
        "type": "debug",
        "z": "0baf25388be781c5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 870,
        "y": 380,
        "wires": []
    },
    {
        "id": "eaf7682b1e993ae2",
        "type": "function",
        "z": "0baf25388be781c5",
        "name": "Push Stage Tree",
        "func": "let TheLatestFooballTree = global.get(\"TheLatestFooballTree\")\n\nmsg.payload = TheLatestFooballTree;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 770,
        "y": 300,
        "wires": [
            [
                "8b176944a1bdbcfe"
            ]
        ]
    },
    {
        "id": "63d99a0807065981",
        "type": "inject",
        "z": "0baf25388be781c5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 580,
        "y": 300,
        "wires": [
            [
                "eaf7682b1e993ae2"
            ]
        ]
    },
    {
        "id": "98d0801ca2320f52",
        "type": "function",
        "z": "0baf25388be781c5",
        "name": "Push PorductionTree",
        "func": "let TheLatestFooballTree = global.get(\"TheLatestProductionFooballTree\")\n\nmsg.payload = TheLatestFooballTree;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 200,
        "wires": [
            [
                "362ca5bf500ec636",
                "d201d356b040cc71"
            ]
        ]
    },
    {
        "id": "817f8779ec143d87",
        "type": "inject",
        "z": "0baf25388be781c5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 580,
        "y": 200,
        "wires": [
            [
                "98d0801ca2320f52"
            ]
        ]
    },
    {
        "id": "36bab2a61aaf01d2",
        "type": "debug",
        "z": "0baf25388be781c5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1150,
        "y": 60,
        "wires": []
    },
    {
        "id": "362ca5bf500ec636",
        "type": "json",
        "z": "0baf25388be781c5",
        "name": "",
        "property": "payload",
        "action": "str",
        "pretty": false,
        "x": 990,
        "y": 140,
        "wires": [
            [
                "0e963a989afc7620"
            ]
        ]
    },
    {
        "id": "d201d356b040cc71",
        "type": "debug",
        "z": "0baf25388be781c5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1250,
        "y": 200,
        "wires": []
    },
    {
        "id": "c6fa3cdbd8aa90b2",
        "type": "redis-in",
        "z": "0baf25388be781c5",
        "server": "9ccf549a2f05cdc5",
        "command": "blpop",
        "name": "",
        "topic": "soccer_tree",
        "obj": true,
        "timeout": 0,
        "x": 570,
        "y": 380,
        "wires": [
            [
                "e917328761fd6a41"
            ]
        ]
    },
    {
        "id": "8b176944a1bdbcfe",
        "type": "redis-out",
        "z": "0baf25388be781c5",
        "server": "9ccf549a2f05cdc5",
        "command": "rpush",
        "name": "redis.lan",
        "topic": "soccer_tree",
        "obj": true,
        "x": 1040,
        "y": 300,
        "wires": []
    },
    {
        "id": "0e963a989afc7620",
        "type": "redis-command",
        "z": "0baf25388be781c5",
        "server": "9ccf549a2f05cdc5",
        "command": "SET",
        "name": "redis.lan",
        "topic": "soccer_tree",
        "params": "[]",
        "paramsType": "json",
        "payloadType": "json",
        "block": false,
        "x": 940,
        "y": 60,
        "wires": [
            [
                "36bab2a61aaf01d2"
            ]
        ]
    },
    {
        "id": "90cfced15decb68c",
        "type": "function",
        "z": "ce0610525350f227",
        "name": "Retrieve Req and Tree and Modify Tree",
        "func": "/** SIMULATORE\n * \n * INPUT:\n *  durata del contratto (player.remainingYearsOfContract)\n *  stipendio netto annuale (player.salaryCurrent)\n *  prezzo di cessione ( player.transferPrice)\n *  \n * commissioni buyer\n * commissioni seller\n * \n *  attesa performance \n * intensità di impiego ( insostituibile=1,25, titolare =1; riserva =0,5 terza scelta =0,25 )\n * ( player.absind * %perfromance attesa * intensità di impiego)\n *  return msg; \n * \n * \n * \n * [{\n\n\t\"playerId\" : \"9sbx7dlressy910i8uuztf93p\",\n\t\"destinationClubId\" : \"gi0l1habji5hpgar77dl5jqe\",\n\t\"contractDuration\" : 3,\n\t\"salaryCurrent\" : 5,\n\t\"transferPrice\" : 10,\n\t\"commissionSeller\" : 4,\n\t\"commissionBuyer\" : 4,\n\t\"performance\" : 1.25 ,\n\t\"intensity\" : 1\n }]\n\t\n * \n * \n * \n * \n * \n * \n */\n const Utils = global.get(\"UTILS\");\n \n let simulationParamsArr = msg.req.body;\n \n console.log(\"simulationParamsArr\",simulationParamsArr) \n let TheFootballTree;\n \n msg.buyers=[];\n msg.sellers=[];\n\ntry {\n    \n    TheFootballTree = JSON.parse(JSON.stringify(global.get(\"TheLatestProductionFooballTree\"))); //SOLITO per evitare riferimenti\n    \n} catch (e) {\n    console.log(e);\n    msg.status = 500; //Internal server Error\n    msg.payload=\"Couldn't find or parse the Football Tree\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\n\nif (!TheFootballTree) {\n    \n    msg.status = 500; //Internal server Error\n    msg.payload=\"Couldn't find or build the Football Tree\";\n    console.log(msg.payload)\n    return msg;\n}\n\nif (!simulationParamsArr || simulationParamsArr.length==0) {\n    \n    msg.status = 400; //Bad Request\n    msg.payload=\"Request body missing\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\n\ntry {\n    \n    let playersIndex = {};\n    let destinationClubs = [];\n    \n    simulationParamsArr.forEach( pset => {\n    \n    if (!pset[\"playerId\"]) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing playerId\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n     if (playersIndex[pset[\"playerId\"]] === undefined) {\n         \n         playersIndex[pset[\"playerId\"]] = pset[\"playerId\"]\n    \n        \n    } else {\n        \n        msg.status = 400; //Bad Request\n        msg.payload=\"playerId already present in another transaction\";\n        console.log(msg.payload)\n        return msg;\n        \n    }\n    \n    if (!pset[\"destinationClubId\"]) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing destinationClubId\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n    if (!pset[\"contractDuration\"]) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing contractDuration\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n    if (!pset[\"salaryCurrent\"]) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing salaryCurrent\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n    if (!pset[\"transferPrice\"] &&  pset[\"transferPrice\"] !== 0 ) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing transferPrice\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n    if (!pset[\"commissionSeller\"] &&  pset[\"commissionSeller\"] !== 0 ) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing commissionSeller\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n    if (!pset[\"commissionBuyer\"] &&  pset[\"commissionBuyer\"] !== 0 ) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing commissionBuyer\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n    if (!pset[\"performance\"] &&  pset[\"performance\"] !== 0 ) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing performance\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n    if (!pset[\"intensity\"] &&  pset[\"intensity\"] !== 0 ) {\n    \n        msg.status = 400; //Bad Request\n        msg.payload=\"Missing intensity\";\n        console.log(msg.payload)\n        return msg;\n    }\n    \n    \n    \n    \n    //Find Destination Club\n    let destinationClub;\n    let destinationLeague;\n    \n    let sourceClub;\n    \n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => {\n                \n            if(club.clubId == pset[\"destinationClubId\"]) {\n                destinationClub = club;\n                destinationLeague = TheFootballTree[leagueId];\n                \n                \n                let index = msg.buyers.findIndex(c => c.clubId==club.clubId); \n\n\n                index === -1 ?  msg.buyers.push(club) : console.log(\"object already exists\")\n                \n            }\n                \n         })\n    })\n    \n    \n    if(!destinationLeague) {\n        \n        msg.status = 400; //Bad Request\n        msg.payload=\"Wrong destinationClubId\";\n        console.log(msg.payload)\n        return msg;\n        \n    }\n    \n    \n    if(!destinationClub) {\n        \n        msg.status = 400; //Bad Request\n        msg.payload=\"Wrong destinationClubId\";\n        console.log(msg.payload)\n        return msg;\n        \n    }\n    \n    let maxMinutes = 0;\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            club.Players.forEach( player => {\n                \n                maxMinutes = player.minutes > maxMinutes ? player.minutes : maxMinutes\n    \n     \n            })\n        })\n        \n    })\n    \n    \n    //Set new Economica params and remove player from current team\n    \n    let player = null;\n    \n    Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => {\n                club.Players.forEach( p => {\n                    \n                    \n                       \n                if ( pset[\"playerId\"] == p.playerId ) {\n                    \n                        let sourceClub = JSON.parse(JSON.stringify(club));\n                         \n                        msg.sellers.push[sourceClub]\n                        player = JSON.parse(JSON.stringify(p));\n                    \n                    \n                        player.simulating = true;\n                    \n                         //DATE\n                        player.birthDate = new Date(p.birthDate);\n                        player.startContract = new Date(p.startContract);\n                        player.endContract = new Date(p.endContract);\n                        \n                        //Booleans\n                        player.nationalTeamPlayer = p.nationalTeamPlayer ? true : false;\n                        player.emerging = p.emerging ? true : false;\n                        player.risingStar = p.risingStar ? true : false;\n                        player.superStar = ( p.superstar || p.superStar ) ? true : false;\n                        \n                    \n                    \n                        player.birthDate = new Date(player.birthDate);\n                        player.startContract = new Date(player.startContract);\n                        player.endContract = new Date(player.endContract);\n                    \n                        player.currentClubId=destinationClub.clubId;\n                        player.currentClubName=destinationClub.name;\n                        player.currentClubCluster=destinationClub.cluster;\n\n                        player.currentLeagueId=destinationLeague.leagueId;\n                        player.currentLeagueName=destinationLeague.name;\n                        player.currentLeagueCluster=destinationLeague.cluster;\n                        player.currentLeagueWeight=destinationLeague.weight;\n                        player.currentLeagueTaxRate=destinationLeague.taxRate;\n                        \n                        \n                        player.OldRemainingYearsOfContract = Utils.ryc(player.endContract) // NECESSARIO AL SIMULATORE\n                        player.OldRemainingMonthsOfContract = p.remainingMonthsOfContract // NECESSARIO AL SIMULATORE\n                        player.OldGrossSalary = p.salaryGross;\n                        player.OldResidualValue = p.residualValue;\n                        player.OldCosts = p.costs;\n                        player.OldClubId = sourceClub.clubId;\n                        player.OldClubName = sourceClub.name;\n                        player.OldExpectedPrice = p.expectedPrice;\n                        player.currentLeagueCountry = destinationLeague.country;\n                        player.OldLeagueCountry = TheFootballTree[leagueId].country\n                        \n                        player.contractType = \"Proprietà\"\n                        player.salaryNet = parseFloat(pset[\"salaryCurrent\"])\n                        player.salaryGross = player.salaryNet * ( destinationLeague.taxRate ?  destinationLeague.taxRate : 1.825 );\n                        player.startContract = new Date();\n                        player.endContract = new Date(parseInt(player.startContract.getFullYear()) + parseInt(pset[\"contractDuration\"]), parseInt(player.startContract.getMonth()), parseInt(player.startContract.getDate()));\n                        player.totalYearsOfContract =  Utils.tyc(player.startContract,player.endContract)\n                        player.remainingYearsOfContract = Utils.ryc(player.endContract)\n                        player.remainingMonthsOfContract = (player.endContract) ?  Utils.diffInMonths(new Date(player.endContract),new Date()) : null;\n                        player.transferPrice = pset[\"transferPrice\"]\n                        player.masterClubId =  player.currentClubId;\n                        player.masterClubName = player.currentClubName\n                        \n                        let intensity = parseFloat(pset[\"intensity\"]);\n                        \n                       /* if (intensity >= 60 ) {\n                            \n                        } else if (intensity < 60 && intensity > 30 ) {\n                            intensity = 19\n                        } else {\n                            intensity = 10\n                        } */\n                        \n                        /* player.minutes = 38*90 *  intensity\n                        player.avgPlayedMinuteShare = (player.minutes)/(38*90) */\n                        \n                        let microIndexMultiplier = 1;\n                        \n                        if ( player.avgPlayedMinuteShare > 0.40 && intensity >= 0.75 ) {\n                            \n                                microIndexMultiplier = 1\n                                \n                        } else if ( player.avgPlayedMinuteShare <= 0.40 && intensity == 0.75) {\n                            \n                                microIndexMultiplier = 1.2\n                                \n                        } else if ( intensity==0.40 ) {\n                            microIndexMultiplier = 0.4\n                        } else {\n                            microIndexMultiplier = 0.25\n                        }\n                        \n                        player.avgMicroIndex = player.avgMicroIndex * parseFloat(pset[\"performance\"]) * microIndexMultiplier;\n                        \n                        \n                        // player.absind = player.absind * pset[\"perfromance\"] *  pset[\"intensity\"] => performance e absind calcolato dopo\n                    \n                        let index = club.Players.findIndex( pi => pi.playerId == p.playerId)\n                        \n                        console.log(\"index to remove \"+index);\n                        \n                        club.Players.splice(index,1);\n                        \n                    \n                }\n               \n            })\n        })\n        \n    })\n    \n    \n    if (player) {\n        destinationClub.Players.push(player); \n        console.log(player)\n    }\n    \n})\n    \n    \n    //RIMODULAZIONE DELL ABSIND\n    /**\n     * \n     * prendo i giocatori della stessa squadra e dello stesso gruppo e sottraggo \n     *  \n     * playerdello stesso ruolo . minutes = player.minutes / (# num giocatori dello stesso ruolo nella stessa squadra)\n     * \n     * controllare che minutes Non può essere negativo!\n     * \n     * **/\n    \n    \n} catch(e) {\n    \n    console.log(e);\n    msg.status = 500; //Internal server Error\n    msg.payload=\"Couldn't find or build the Football Tree\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\n\n\nmsg.status=200\nmsg.payload = TheFootballTree;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 540,
        "wires": [
            [
                "3ef833c34fa43010"
            ]
        ]
    },
    {
        "id": "f54081d80f6b4228",
        "type": "http in",
        "z": "ce0610525350f227",
        "name": "/simulate",
        "url": "/simulate",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 540,
        "wires": [
            [
                "5c21c65416daa4c1"
            ]
        ]
    },
    {
        "id": "fbcb7a1605bf41e8",
        "type": "http response",
        "z": "ce0610525350f227",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2410,
        "y": 280,
        "wires": []
    },
    {
        "id": "c745993f4529aa78",
        "type": "http response",
        "z": "ce0610525350f227",
        "name": "Return with errors",
        "statusCode": "",
        "headers": {},
        "x": 1830,
        "y": 640,
        "wires": []
    },
    {
        "id": "3ef833c34fa43010",
        "type": "switch",
        "z": "ce0610525350f227",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1630,
        "y": 540,
        "wires": [
            [
                "94ea31e67c8f9829"
            ],
            [
                "c745993f4529aa78"
            ]
        ]
    },
    {
        "id": "b8c7bc2fa03d0e69",
        "type": "function",
        "z": "ce0610525350f227",
        "name": "Response",
        "func": "/** SELLER\n * \n * incasso netto = prezzo cessione - commissione\n * \n * costi risparmiato =  actual value sum del salario lordo al tasso di sconto del 4% per gli anni rimanenti di contratto in origine\n * saldo finanziario = incasso netto + costi risparmiati\n * mark to market = prezzo di cessione - prezzo atteso\n * valore residuo\n * profitto netto = incazzo netto - valore residuo\n*/\n\n/** BUYER\n * Prezzo di cessione\n * costo del salario: actual value sum del salario lordo al tasso di sconto del 4% per gli anni di contratto\n * altri costi =  commissioni buyer  + contributo di solidarietà del 5% del presso di cessione se il giocagtore cambia nazione\n * costo totale = Prezzo di cessione + costo salario + altri costi\n * benefici attesi = valore residuo + costo salario\n * valore attuale netto = benefici attesi   costo totale;\n * \n * \n *  player.OldRemainingYearsOfContract = Utils.ryc(p.endContract) // NECESSARIO AL SIMULATORE\n                        player.OldGrossSalary = p.salaryGross;\n                        player.OldResidualValue = p.residualValue;\n                        player.OldCosts = p.costs;\n                        player.OldClub = sourceClub;\n                        plaer.OldExpectedPrice = p.expectedPrice;\n * */\n \n let TheFootballTree = msg.payload;\n \n\n let Players = [];\n let index = -1;\n \n let resp = [];\n\n try {\n     \n     Object.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            club.Players.forEach( player => {\n               index++;\n               Players[index]=player;\n               \n                \n                \n            })\n        })\n })\n \n\nlet simulationParamArr = msg.req.body;\n\nsimulationParamArr.forEach( transfer => {\n    \n    let transaction = {}\n    \n    let objSell = {};\n    console.log(transfer[\"playerId\"].replace(/\\s/g, ''));\n   \n    let playerId= transfer[\"playerId\"].replace(/\\s/g, '');\n    \n    let pi = Players.findIndex( p=> p.playerId == playerId);\n     \n    \n    let player = Players[pi];\n    //Players[playersIndex[playerId]];\n    \n    console.log(transfer)\n    \n    objSell.sellerId = player.OldClubId;\n    objSell.sellerName = player.OldClubName;\n    \n    objSell.netCollection =  transfer[\"transferPrice\"] - transfer[\"commissionSeller\"] // transfer[\"transferPrice\"] - ( transfer[\"transferPrice\"]  *  transfer[\"commissionSeller\"] /100 ) * (1/player.currentLeagueTaxRate)\n    objSell.savedCosts = player.OldCosts;\n    objSell.netCash = objSell.netCollection + objSell.savedCosts;\n    objSell.markToMarket = transfer[\"transferPrice\"] - player.OldExpectedPrice;\n    objSell.residualValue = player.OldResidualValue;\n    objSell.netProfit = objSell.netCollection - objSell.residualValue;\n    \n    \n    transaction[\"sell\"] = objSell;\n    \n    let objBuy = {}\n    \n    objBuy.buyerId = player.currentClubId;\n    objBuy.buyerName = player.currentClubName;\n    \n    objBuy.transferPrice = transfer[\"transferPrice\"] ;\n    objBuy.costs = player.costs;\n    objBuy.otherCosts = transfer[\"commissionBuyer\"]+ ( player.currentLeagueCountry == player.OldLeagueCountry ? 0 : ( transfer[\"transferPrice\"]  *  5 /100 ) )\n    objBuy.totalCosts = objBuy.costs + objBuy.otherCosts; //04/10/2023 eliminato il transferPrice dalla somma\n    objBuy.expectedBenefits =  ( player.benefitsPotential + player.optval ) //player.potentialPrice - objBuy.transferPrice  - objBuy.otherCosts + objBuy.totalCosts //player.residualValue + objBuy.costs;\n    objBuy.netPresentValue = objBuy.expectedBenefits - objBuy.totalCosts //player.potentialPrice - objBuy.transferPrice  - objBuy.otherCosts;\n    \n     \n    transaction[\"buy\"] = objBuy;\n    \n    resp.push(transaction)\n})\n     \n     \n     \n } catch(e) {\n    console.log(e);\n    msg.status=500;\n    msg.payload=\"Error during simulation\";\n    return msg\n }\n \nmsg.status=200;\nmsg.payload=resp;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2020,
        "y": 500,
        "wires": [
            [
                "7bbb985e6ff09ee8"
            ]
        ]
    },
    {
        "id": "a4a871c558f884e2",
        "type": "comment",
        "z": "ce0610525350f227",
        "name": "SIMULATOR",
        "info": "",
        "x": 390,
        "y": 460,
        "wires": []
    },
    {
        "id": "94ea31e67c8f9829",
        "type": "subflow:1b980fd89607dc71",
        "z": "ce0610525350f227",
        "name": "",
        "x": 1830,
        "y": 500,
        "wires": [
            [
                "b8c7bc2fa03d0e69",
                "e843206e4663a9ef"
            ]
        ]
    },
    {
        "id": "5c21c65416daa4c1",
        "type": "function",
        "z": "ce0610525350f227",
        "name": "Check Simulation Params",
        "func": "let simulationParamsArr = msg.req.body;\n\nconsole.log(\"simulationParamsArr\",simulationParamsArr) \n\n \nmsg.status = 200;\n\nif (!simulationParamsArr || simulationParamsArr.length==0) {\n    \n    msg.status = 400; //Bad Request\n    msg.payload=\"Request body missing\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 540,
        "wires": [
            [
                "b38a60af5d0b0714"
            ]
        ]
    },
    {
        "id": "b38a60af5d0b0714",
        "type": "switch",
        "z": "ce0610525350f227",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 550,
        "y": 540,
        "wires": [
            [
                "e09a7d99bcfd6232"
            ],
            [
                "c745993f4529aa78"
            ]
        ]
    },
    {
        "id": "e09a7d99bcfd6232",
        "type": "function",
        "z": "ce0610525350f227",
        "name": "Check Football Tree",
        "func": "let TheFootballTree;\n \n msg.buyers=[];\n msg.sellers=[];\n\ntry {\n    \n    TheFootballTree = JSON.parse(JSON.stringify(global.get(\"TheLatestProductionFooballTree\"))); //SOLITO per evitare riferimenti\n    \n} catch (e) {\n    console.log(e);\n    msg.status = 500; //Internal server Error\n    msg.payload=\"Couldn't find or parse the Football Tree\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\n\nif (!TheFootballTree) {\n    \n    msg.status = 500; //Internal server Error\n    msg.payload=\"Couldn't find or build the Football Tree\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 520,
        "wires": [
            [
                "99d503e0290f83e6"
            ]
        ]
    },
    {
        "id": "99d503e0290f83e6",
        "type": "switch",
        "z": "ce0610525350f227",
        "name": "",
        "property": "status",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 990,
        "y": 540,
        "wires": [
            [
                "90cfced15decb68c"
            ],
            [
                "3a306cab69f6a6b6"
            ]
        ]
    },
    {
        "id": "7415aa1f4d21c439",
        "type": "http in",
        "z": "ce0610525350f227",
        "name": "/oldsimulate",
        "url": "/oldsimulate",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 400,
        "wires": [
            [
                "2e91cffbe002acf3"
            ]
        ]
    },
    {
        "id": "80c252d0990e1bf2",
        "type": "function",
        "z": "ce0610525350f227",
        "name": "change request body",
        "func": "msg.req.body = [];\nmsg.req.body[0] =  {};\nmsg.req.body[0].playerId = msg.payload.idPlayer\nmsg.req.body[0].destinationClubId = msg.payload.idTeam\nmsg.req.body[0].contractDuration = msg.payload.simulazione.duratacontratto,\nmsg.req.body[0].salaryCurrent= parseFloat(msg.payload.simulazione.salarionetto),\nmsg.req.body[0].transferPrice= parseFloat(msg.payload.simulazione.prezzocessione), \nmsg.req.body[0].commissionSeller= msg.payload.simulazione.commissioniv && msg.payload.simulazione.commissioniv !== \"\" ? parseFloat(msg.payload.simulazione.commissioniv) : 0,\nmsg.req.body[0].commissionBuyer= msg.payload.simulazione.commissionia && msg.payload.simulazione.commissionia !== \"\" ? parseFloat(msg.payload.simulazione.commissionia) : 0,\nmsg.req.body[0].performance = 1 + msg.payload.simulazione.performance/100 ,\nmsg.req.body[0].intensity = msg.payload.simulazione.intensity/100 \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 400,
        "wires": [
            [
                "5c21c65416daa4c1"
            ]
        ]
    },
    {
        "id": "e54879ed7ab9a742",
        "type": "http response",
        "z": "ce0610525350f227",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 2650,
        "y": 560,
        "wires": []
    },
    {
        "id": "2e91cffbe002acf3",
        "type": "function",
        "z": "ce0610525350f227",
        "name": "msg.source : oldsimulator",
        "func": "msg.source=\"oldsimulator\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 400,
        "wires": [
            [
                "80c252d0990e1bf2"
            ]
        ]
    },
    {
        "id": "7bbb985e6ff09ee8",
        "type": "switch",
        "z": "ce0610525350f227",
        "name": "New/Old Simulation",
        "property": "source",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "oldsimulator",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "oldsimulator",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2210,
        "y": 500,
        "wires": [
            [
                "fbcb7a1605bf41e8"
            ],
            [
                "a7cb6653b31a81dc"
            ]
        ]
    },
    {
        "id": "a7cb6653b31a81dc",
        "type": "function",
        "z": "ce0610525350f227",
        "name": "convert response to old",
        "func": "/*\n\nNEW ONE\n\n[\n    {\n        \"sell\": {\n            \"sellerId\": \"9dntj5dioj5ex52yrgwzxrq9l\",\n            \"sellerName\": \"AC Milan\",\n            \"netCollection\": 9.7720000000114,\n            \"savedCosts\": 0,\n            \"netCash\": 9.7720000000114,\n            \"markToMarket\": 10,\n            \"residualValue\": 0,\n            \"netProfit\": 9.7720000000114\n        },\n        \"buy\": {\n            \"buyerId\": \"gi0l1habji5hpgar77dl5jqe\",\n            \"buyerName\": \"SSC Napoli\",\n            \"transferPrice\": 10,\n            \"costs\": 23.888140609707374,\n            \"otherCosts\": 0.4,\n            \"totalCosts\": 24.288140609707373,\n            \"expectedBenefits\": 22.50635345002115,\n            \"netPresentValue\": -1.7817871596862211\n        }\n    }\n]\n\nOLD ONE\n\n{\n    \"result\":\n        {\n            \"incassonetto\":\"0.00\",\n            \"costirisparmiati\":\"0.00\",\n            \"saldonetto\":\"0.00\",\n            \"valoreresiduo\":\"0.00\",\n            \"profittonetto\":\"0.00\",\n            \"prezzocessione\":\"0.00\",\n            \"costosalario\":\"193.11\",\n            \"altricosti\":\"0.00\",\n            \"costototale\":\"193.11\",\n            \"beneficiattesi\":\"302.48\",\n            \"valoreattualenetto\":\"109.37\",\n            \"marktomarket\":\"0.00\"\n            \n        }\n    \n}\n\n*/\n\n\nlet res  = { result : {} }\nlet result = res.result\n\nresult.incassonetto = String(msg.payload[0].sell.netCollection.toFixed(2));\nresult.costirisparmiati = String(msg.payload[0].sell.savedCosts.toFixed(2));\nresult.saldonetto = String(msg.payload[0].sell.netCash.toFixed(2));\nresult.valoreresiduo = String(msg.payload[0].sell.residualValue.toFixed(2));\nresult.profittonetto = String(msg.payload[0].sell.netProfit.toFixed(2));\nresult.prezzocessione  = String(msg.payload[0].buy.transferPrice.toFixed(2));\nresult.costosalario = String(msg.payload[0].buy.costs.toFixed(2));\nresult.altricosti = String(msg.payload[0].buy.otherCosts.toFixed(2));\nresult.costototale = String(msg.payload[0].buy.totalCosts.toFixed(2));\nresult.beneficiattesi = String(msg.payload[0].buy.expectedBenefits.toFixed(2));\nresult.valoreattualenetto = String(msg.payload[0].buy.netPresentValue.toFixed(2));\nresult.marktomarket =  String(msg.payload[0].sell.markToMarket.toFixed(2));\n\nmsg.payload=res;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2430,
        "y": 560,
        "wires": [
            [
                "e54879ed7ab9a742"
            ]
        ]
    },
    {
        "id": "ef5f9e874b8f8b3e",
        "type": "debug",
        "z": "ce0610525350f227",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2630,
        "y": 400,
        "wires": []
    },
    {
        "id": "9cb49080dac035ca",
        "type": "inject",
        "z": "ce0610525350f227",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": "2",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 820,
        "wires": [
            [
                "c50a807b499f0928"
            ]
        ]
    },
    {
        "id": "bf4cc34be82156a2",
        "type": "function",
        "z": "ce0610525350f227",
        "name": "Checkpoint and Set",
        "func": "msg.dataset == \"players\" ? flow.set(\"latestplayers\", msg.payload) : true;\nmsg.dataset == \"clubs\" ? flow.set(\"latestclubs\", msg.payload) : true;\nmsg.dataset == \"leagues\" ? flow.set(\"latestleagues\", msg.payload) : true;\n\n\nif (  flow.get(\"latestplayers\") &&  flow.get(\"latestclubs\") &&  flow.get(\"latestleagues\") ) {\n    \n    console.log(\"players #\"+flow.get(\"latestplayers\").length);\n    console.log(\"clubs #\"+flow.get(\"latestclubs\").length);\n    console.log(\"leagues #\"+flow.get(\"latestleagues\").length);\n    console.log(\"LATEST LOADED\")\n    \n    return msg;\n    \n}\n\n \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1130,
        "y": 820,
        "wires": [
            [
                "0f43a9bd9067f3c7"
            ]
        ]
    },
    {
        "id": "85c2bc9a04c5111c",
        "type": "function",
        "z": "ce0610525350f227",
        "name": "Latest Players Staging",
        "func": "msg.dataset = \"players\";\nmsg.topic = \"select * from latestplayers_staging\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 780,
        "wires": [
            [
                "a15a46581e635c76"
            ]
        ]
    },
    {
        "id": "575266027f94c4a9",
        "type": "function",
        "z": "ce0610525350f227",
        "name": "Latest Leagues Staging",
        "func": "msg.dataset = \"leagues\";\nmsg.topic = \"select * from latestleagues_staging\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 710,
        "y": 860,
        "wires": [
            [
                "a15a46581e635c76"
            ]
        ]
    },
    {
        "id": "293b8ebfd9ed5176",
        "type": "function",
        "z": "ce0610525350f227",
        "name": "Latest Clubs Staging",
        "func": "msg.dataset = \"clubs\";\nmsg.topic = \"select * from latestclubs_staging\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 820,
        "wires": [
            [
                "a15a46581e635c76"
            ]
        ]
    },
    {
        "id": "0f43a9bd9067f3c7",
        "type": "function",
        "z": "ce0610525350f227",
        "name": "Football Tree Builder",
        "func": "let latestplayers = flow.get(\"latestplayers\");\nlet latestclubs = flow.get(\"latestclubs\");\nlet latestleagues =flow.get(\"latestleagues\");\n\nlet PlayerObj = global.get(\"ThePlayerObject\");\nlet ClubObj = global.get(\"TheClubObject\");\nlet LeagueObj = global.get(\"TheLeagueObject\");\n\nlet TheFootballTree = {};\n\nlet Players = {}\nlet Clubs = {}\nlet Leagues = {}\n\ntry {\n    \n    \nlatestleagues.forEach( l => {\n    \n    let League = new LeagueObj();\n    \n    Object.keys(l).forEach( key => {\n        \n        League[key] = l[key]\n    })\n  \n    Leagues[League.id] = League;\n    \n    TheFootballTree[League.leagueId] === undefined ?  TheFootballTree[League.leagueId] = League : true;\n    \n    \n})\n\nlatestclubs.forEach( c => {\n    \n    let Club = new ClubObj();\n    \n    Object.keys(c).forEach( key => {\n        \n        Club[key] = c[key]\n    })\n  \n    Clubs[Club.clubId] = Club;\n    \n    TheFootballTree[Club.leagueId].Clubs === undefined ?  TheFootballTree[Club.leagueId].Clubs = {} : true;\n        \n    TheFootballTree[Club.leagueId].Clubs[Club.clubId] === undefined ?  TheFootballTree[Club.leagueId].Clubs[Club.clubId] = Club : true; \n\n})\n\n\nlatestplayers.forEach( p => {\n    \n    let Player = new PlayerObj();\n    \n    Object.keys(p).forEach( key => {\n        \n        Player[key] = p[key]\n    })\n    \n    //DATE\n    Player.birthDate = new Date(Player.birthDate);\n    Player.startContract = new Date(Player.startContract);\n    Player.endContract = new Date(Player.endContract);\n    \n    \n    //BOOLEANS\n    Player.nationalTeamPlayer = Player.nationalTeamPlayer ? true : false;\n    Player.emerging = Player.emerging ? true : false;\n    Player.risingStar = Player.risingStar ? true : false;\n    Player.superStar = Player.nationasuperStar ? true : false;\n  \n    Players[Player.playerId] = Player;\n    \n    \n    \n    TheFootballTree[Player.currentLeagueId].Clubs[Player.currentClubId].Players === undefined ? TheFootballTree[Player.currentLeagueId].Clubs[Player.currentClubId].Players = {} : true;\n    TheFootballTree[Player.currentLeagueId].Clubs[Player.currentClubId].Players[Player.playerId] = Player;\n})\n    \n    \n    console.log(\"Footaball Tree has been built\")\n    \n} catch (e) {\n    console.log(e)\n}\n\n\n\n\n// DA OGGETTO A ITERABILE\n\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        \n        Object.keys(TheFootballTree[leagueId].Clubs).forEach( clubId => { \n           \n            TheFootballTree[leagueId].Clubs[clubId].Players = Object.values(TheFootballTree[leagueId].Clubs[clubId].Players);\n            \n        \n        })   \n        \n        TheFootballTree[leagueId].Clubs = Object.values(TheFootballTree[leagueId].Clubs);\n        \n    })\n    \n\n\nmsg.payload=TheFootballTree;\n\n\n\nlet tDiff = ( new Date() - flow.get(\"start\")) /1000;\n\nconsole.log(tDiff)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 880,
        "wires": [
            [
                "adb949a11912eab3"
            ]
        ]
    },
    {
        "id": "c50a807b499f0928",
        "type": "function",
        "z": "ce0610525350f227",
        "name": "Unset",
        "func": "flow.set(\"latestplayers\", null);\nflow.set(\"latestclubs\", null);\nflow.set(\"latestleagues\", null);\n\nflow.set(\"start\", new Date());\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 820,
        "wires": [
            [
                "85c2bc9a04c5111c",
                "293b8ebfd9ed5176",
                "575266027f94c4a9"
            ]
        ]
    },
    {
        "id": "6de63b0ac7041bd4",
        "type": "inject",
        "z": "ce0610525350f227",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 300,
        "y": 880,
        "wires": [
            [
                "0f43a9bd9067f3c7"
            ]
        ]
    },
    {
        "id": "2e942adb0efea9f8",
        "type": "comment",
        "z": "ce0610525350f227",
        "name": "LOADS TheLatestFootballTree",
        "info": "",
        "x": 560,
        "y": 740,
        "wires": []
    },
    {
        "id": "adb949a11912eab3",
        "type": "function",
        "z": "ce0610525350f227",
        "name": "Clubs and Leagues Analisys",
        "func": "let TheFootballTree = msg.payload;\nconst Utils = global.get(\"UTILS\");\n\nvar Players = [];\nvar Clubs = [];\nvar Leagues = [];\n\n\n\n\ntry {\n    \n\n\n    Object.keys(TheFootballTree).forEach( leagueId => {\n        \n        \n        let totalAgeLeague = 0;\n        let totalContractDurationLeague = 0;\n        let totalContractResiduaDurationLeauge = 0;\n        \n        TheFootballTree[leagueId].numOfPlayers = 0; \n        TheFootballTree[leagueId].avgAge = 0\n        TheFootballTree[leagueId].avgContractDuration = 0\n        TheFootballTree[leagueId].avgContractResidualDuration = 0\n        \n        TheFootballTree[leagueId].portfolioCost = 0\n        TheFootballTree[leagueId].residualBookValue = 0\n        TheFootballTree[leagueId].residualValue = 0\n        TheFootballTree[leagueId].potentialPrice = 0\n        TheFootballTree[leagueId].expectedPrice = 0\n        TheFootballTree[leagueId].capitalGain = 0\n        TheFootballTree[leagueId].netProfit = 0\n        \n        TheFootballTree[leagueId].salaryGross = 0\n        TheFootballTree[leagueId].salaryCurrent = 0\n        TheFootballTree[leagueId].salaryOptimal = 0\n        TheFootballTree[leagueId].salaryPotential = 0\n        TheFootballTree[leagueId].salaryAbsoluteDeviation = 0\n        TheFootballTree[leagueId].salaryPercDeviation = 0\n        \n        TheFootballTree[leagueId].Clubs.forEach( club => { \n           \n            let totalAge = 0;\n            let totalContractDuration = 0;\n            let totalContractResiduaDuration = 0;\n           \n            club.numOfPlayers = club.Players.length;\n            \n            club.avgAge = 0\n            club.avgContractDuration = 0\n            club.avgContractResidualDuration = 0\n            \n            club.portfolioCost = 0\n            club.residualBookValue = 0\n            club.residualValue = 0\n            club.potentialPrice = 0\n            club.expectedPrice = 0\n            club.capitalGain = 0\n            club.netProfit = 0\n            \n            club.salaryGross = 0\n            club.salaryCurrent = 0\n            club.salaryOptimal = 0\n            club.salaryPotential = 0\n            club.salaryAbsoluteDeviation = 0\n            club.salaryPercDeviation = 0\n            \n            \n            club.Players.forEach( player => {\n                \n                totalAge = totalAge + player.age;\n                totalContractDuration = totalContractDuration +  Utils.diffInMonths(player.endContract,player.startContract)\n                totalContractResiduaDuration = totalContractResiduaDuration + Utils.diffInMonths(player.endContract,new Date());\n                \n                \n                club.portfolioCost = club.portfolioCost + player.transferPrice;\n                club.residualBookValue = club.residualBookValue + player.residualBookValue;\n                club.residualValue = club.residualValue + player.residualValue;\n                club.potentialPrice = club.potentialPrice + player.potentialPrice;\n                club.expectedPrice = club.expectedPrice + player.expectedPrice;\n                \n                club.salaryGross = club.salaryGross + player.salaryGross;\n                club.salaryCurrent = club.salaryCurrent + player.salaryCurrent;\n                club.salaryOptimal = club.salaryOptimal + player.salaryOptimal;\n                club.salaryPotential = club.salaryPotential + player.salaryPotential;\n                \n                \n                Players.push(player);\n                \n            })\n            \n            \n            club.avgAge = totalAge / club.numOfPlayers;\n            club.avgContractDuration =  totalContractDuration / club.numOfPlayers;\n            club.avgContractResidualDuration  =  totalContractResiduaDuration / club.numOfPlayers;\n        \n            club.capitalGain = club.expectedPrice - club.residualBookValue;\n            club.netProfit =  club.expectedPrice - club.residualValue;\n            \n            club.salaryAbsoluteDeviation = club.salaryOptimal - club.salaryCurrent;\n            club.salaryPercDeviation =  (club.salaryAbsoluteDeviation * 100 ) / club.salaryOptimal\n            \n            totalAgeLeague = totalAgeLeague + totalAge;\n            totalContractDurationLeague = totalContractDurationLeague + totalContractDuration;\n            totalContractResiduaDurationLeauge = totalContractResiduaDurationLeauge + totalContractResiduaDuration;\n            \n            TheFootballTree[leagueId].numOfPlayers = TheFootballTree[leagueId].numOfPlayers + club.numOfPlayers;\n            \n            TheFootballTree[leagueId].portfolioCost = TheFootballTree[leagueId].portfolioCost + club.portfolioCost;\n            TheFootballTree[leagueId].residualBookValue = TheFootballTree[leagueId].residualBookValue + club.residualBookValue;\n            TheFootballTree[leagueId].residualValue = TheFootballTree[leagueId].residualValue + club.residualValue;\n            TheFootballTree[leagueId].potentialPrice = TheFootballTree[leagueId].potentialPrice + club.potentialPrice;\n            TheFootballTree[leagueId].expectedPrice = TheFootballTree[leagueId].expectedPrice + club.expectedPrice;\n                \n            TheFootballTree[leagueId].salaryGross = TheFootballTree[leagueId].salaryGross + club.salaryGross;\n            TheFootballTree[leagueId].salaryCurrent = TheFootballTree[leagueId].salaryCurrent + club.salaryCurrent;\n            TheFootballTree[leagueId].salaryOptimal = TheFootballTree[leagueId].salaryOptimal + club.salaryOptimal;\n            TheFootballTree[leagueId].salaryPotential = TheFootballTree[leagueId].salaryPotential + club.salaryPotential;\n            \n            Clubs.push(club);\n            \n        \n        })   \n        \n        \n        TheFootballTree[leagueId].avgAge = totalAgeLeague / TheFootballTree[leagueId].numOfPlayers;\n        TheFootballTree[leagueId].avgContractDuration =  totalContractDurationLeague / TheFootballTree[leagueId].numOfPlayers;\n        TheFootballTree[leagueId].avgContractResidualDuration  =  totalContractResiduaDurationLeauge / TheFootballTree[leagueId].numOfPlayers;\n        \n        TheFootballTree[leagueId].capitalGain = TheFootballTree[leagueId].expectedPrice - TheFootballTree[leagueId].residualBookValue;\n        TheFootballTree[leagueId].netProfit =  TheFootballTree[leagueId].expectedPrice - TheFootballTree[leagueId].residualValue;\n            \n        TheFootballTree[leagueId].salaryAbsoluteDeviation = TheFootballTree[leagueId].salaryOptimal - TheFootballTree[leagueId].salaryCurrent;\n        TheFootballTree[leagueId].salaryPercDeviation =  (TheFootballTree[leagueId].salaryAbsoluteDeviation * 100 ) / TheFootballTree[leagueId].salaryOptimal\n      \n        Leagues.push(TheFootballTree[leagueId])\n       \n    })\n\n\n} catch(e) {\n    \n    console.log(e)\n}\n\nmsg.payload=TheFootballTree;\n\nflow.set(\"Players\",Players)\nflow.set(\"Clubs\",Clubs)\nflow.set(\"Leagues\",Leagues)\n\nglobal.set(\"TheLatestProductionFooballTree\",TheFootballTree)\n\nconsole.log(\"ELABORATION COMPLETED\")\n\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1600,
        "y": 880,
        "wires": [
            [
                "ebd1f90d3d7f2f5d",
                "fcaf1f7ffba162b3"
            ]
        ]
    },
    {
        "id": "a15a46581e635c76",
        "type": "mysql",
        "z": "ce0610525350f227",
        "mydb": "ea1e5103bb9e91ad",
        "name": "SF Produzione",
        "x": 960,
        "y": 760,
        "wires": [
            [
                "bf4cc34be82156a2"
            ]
        ]
    },
    {
        "id": "ebd1f90d3d7f2f5d",
        "type": "switch",
        "z": "ce0610525350f227",
        "name": "",
        "property": "source",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "simulator",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "simulator",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1810,
        "y": 880,
        "wires": [
            [],
            [
                "90cfced15decb68c"
            ]
        ]
    },
    {
        "id": "e9132c8ad0e4814a",
        "type": "function",
        "z": "ce0610525350f227",
        "name": "",
        "func": "\nmsg.payload = \"tree loaded\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1940,
        "y": 1000,
        "wires": [
            [
                "fcaf1f7ffba162b3"
            ]
        ]
    },
    {
        "id": "3a306cab69f6a6b6",
        "type": "function",
        "z": "ce0610525350f227",
        "name": "msg.source : simulator",
        "func": "msg.source=\"simulator\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1140,
        "y": 640,
        "wires": [
            [
                "c50a807b499f0928"
            ]
        ]
    },
    {
        "id": "fcaf1f7ffba162b3",
        "type": "debug",
        "z": "ce0610525350f227",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1850,
        "y": 1120,
        "wires": []
    },
    {
        "id": "e843206e4663a9ef",
        "type": "function",
        "z": "ce0610525350f227",
        "name": "",
        "func": "let TheFootballTree = msg.payload;\n let mbappe = {}\n let salah = {}\n let courtois = {}\n let romagna = {}\n\nObject.keys(TheFootballTree).forEach( leagueId => {\n        TheFootballTree[leagueId].Clubs.forEach( club => { \n            club.Players.forEach( player => {\n                \n           \n                if (player.playerId == '5e9ilgrz3tzg9kd1gk3yvrahh' ) {\n                    \n                     mbappe = player;\n                    //console.log(\"mbappe\",player)\n                }\n    \n                if (player.playerId == '5ilkkfbsss0bxd6ttdlqg0uz9' ) {\n                    \n                     salah = player;\n                    //console.log(\"salah\",player)\n                }\n               \n                //6crmq7vzqts58wg196q48sc7p\n                \n                if (player.playerId == '6crmq7vzqts58wg196q48sc7p' ) {\n                    \n                     courtois = player;\n                    //console.log(\"courtois\",player)\n                }\n                \n                if (player.playerId == '61c395xuimpxo2439p8mt3y6t' ) {\n                    \n                     romagna = player;\n                    console.log(\"romagna\",player)\n                }\n            })\n            \n           \n        })\n    })\n\nmsg.payload=mbappe\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2160,
        "y": 260,
        "wires": [
            [
                "ef5f9e874b8f8b3e"
            ]
        ]
    },
    {
        "id": "d59a039285b03114",
        "type": "function",
        "z": "c7a1f882aac10d26",
        "name": "Query Builder Statistiche",
        "func": "let filtri = {};\n\nif (msg.entityType && msg.entityId) {\n\n    filtri[msg[\"entityType\"]] = msg[\"entityId\"]\n} else {\n    filtri = msg.req.query;\n\n}\n\n\nmsg.filtri = filtri;\n\n\nmsg.status = 200;\n\nif (!filtri || filtri.length == 0) {\n\n    msg.status = 400; //Bad Request\n    msg.payload = \"Request body missing\";\n    console.log(msg.payload)\n    return msg;\n}\n\n/*\n\n{\n\n    \"leagueClusters\" : [],\n    \"leagues\" : [],\n    \"clubClusters\" : [],\n    \"clubs\" : [],\n    \"roles\" : [],\n    \"rolesRis\" : [],\n    \"nationalities\" : [],\n    \"players\" : [],\n }\n\n*/\n\nlet leagueClusterClause = \" \"\n\nif (filtri.leagueClusters) {\n    leagueClusterClause = \" and currentLeagueCluster in ( \" + filtri.leagueClusters + \")\"\n}\n\nlet leagueClause = \" \"\n\nif (filtri.leagues) {\n\n    let q = []\n    if (Array.isArray(filtri.leagues)) {\n        q = filtri.leagues\n    } else {\n        q.push(filtri.leagues)\n    }\n\n    leagueClause = \" and currentLeagueId in ( \" + q.map(l => '\"' + l + '\"') + \")\"\n}\n\nlet clubClusterClause = \" \"\nlet clusterClauseForClub = ''\n\nif (filtri.clubClusters) {\n    clubClusterClause = \" and currentClubCluster in ( \" + filtri.clubClusters + \")\"\n    clusterClauseForClub = \" and cluster in ( \" + filtri.clubClusters + \")\"\n}\n\nlet clubsClause = \" \"\n\nif (filtri.clubs) {\n\n    let q = []\n    if (Array.isArray(filtri.clubs)) {\n        q = filtri.clubs\n    } else {\n        q.push(filtri.clubs)\n    }\n\n    clubsClause = \" and currentClubId in ( \" + q.map(l => '\"' + l + '\"') + \")\"\n}\n\nlet rolesClause = \" \"\n\nif (filtri.roles) {\n    rolesClause = \" and latestRoleGroup in ( \" + filtri.roles + \")\"\n}\n\nlet rolesRisClause = \" \"\n\nif (filtri.rolesRis) {\n\n    let q = []\n    if (Array.isArray(filtri.rolesRis)) {\n        q = filtri.rolesRis\n    } else {\n        q.push(filtri.rolesRis)\n    }\n    rolesRisClause = \" and latestRoleRis in ( \" + q.map(l => '\"' + l + '\"') + \")\"\n}\n\nlet nationaltiesClause = \" \"\n\nif (filtri.nationalities) {\n\n    let q = []\n    if (Array.isArray(filtri.nationalities)) {\n        q = filtri.nationalities\n    } else {\n        q.push(filtri.nationalities)\n    }\n    nationaltiesClause = \" and nationality in ( \" + q.map(l => '\"' + l + '\"') + \")\"\n}\n\nlet playersClause = \" \"\n\nif (filtri.players) {\n\n    let q = []\n    if (Array.isArray(filtri.players)) {\n        q = filtri.players\n    } else {\n        q.push(filtri.players)\n    }\n\n    playersClause = \" and playerId in ( \" + q.map(l => '\"' + l + '\"') + \")\"\n}\n\nlet minAgeClause = \" \"\n\nif (filtri.minAge) {\n\n    minAgeClause = \" and age >= ( \" + filtri.minAge + \")\"\n}\n\nlet maxAgeClause = \" \"\n\nif (filtri.maxAge) {\n\n    maxAgeClause = \" and age <= ( \" + filtri.maxAge + \")\"\n}\n\n\nlet minFairSalaryClause = \" \"\n\nif (filtri.minFairSalary) {\n\n    minFairSalaryClause = \" and salaryPotential >= ( \" + filtri.minFairSalary + \")\"\n}\n\nlet maxFairSalaryClause = \" \"\n\nif (filtri.maxFairSalary) {\n\n    maxFairSalaryClause = \" and salaryPotential <= ( \" + filtri.maxFairSalary + \")\"\n}\n\nlet minFairPriceClause = \" \"\n\nif (filtri.minFairPrice) {\n\n    minFairSalaryClause = \" and potentialPrice >= ( \" + filtri.minFairPrice + \")\"\n}\n\nlet maxFairPricelause = \" \"\n\nif (filtri.maxFairPrice) {\n\n    maxFairPricelause = \" and potentialPrice <= ( \" + filtri.maxFairPrice + \")\"\n}\n\nlet minExpectedPriceClause = \" \"\n\nif (filtri.minExpectedPrice) {\n\n    minExpectedPriceClause = \" and expectedPrice >= ( \" + filtri.minExpectedPrice + \")\"\n}\n\nlet maxExpectedPriceClause = \" \"\n\nif (filtri.maxExpectedPrice) {\n\n    maxExpectedPriceClause = \" and expectedPrice <= ( \" + filtri.maxExpectedPrice + \")\"\n}\n\nlet minSalaryNetClause = \" \"\n\nif (filtri.minSalaryNet) {\n\n    minSalaryNetClause = \" and salaryNet >= ( \" + filtri.minSalaryNet + \")\"\n}\n\nlet maxSalaryNetClause = \" \"\n\nif (filtri.maxSalaryNet) {\n\n    maxExpectedPriceClause = \" and salaryNet <= ( \" + filtri.maxSalaryNet + \")\"\n}\n\nlet minEffectivenessClause = \" \"\n\nif (filtri.minEffectiveness) {\n\n    minEffectivenessClause = \" and effectiveness >= ( \" + filtri.minEffectiveness + \")\"\n}\n\nlet maxEffectivenessClause = \" \"\n\nif (filtri.maxEffectiveness) {\n\n    maxEffectivenessClause = \" and effectivness <= ( \" + filtri.maxEffectiveness + \")\"\n}\n\nlet minVolatilityClause = \" \"\n\nif (filtri.minVolatility) {\n\n    minVolatilityClause = \" and latestMicroVolatility >= ( \" + filtri.minVolatility + \")\"\n}\n\nlet maxVolatilityClause = \" \"\n\nif (filtri.maxVolatility) {\n\n    maxVolatilityClause = \" and latestMicroVolatility <= ( \" + filtri.maxVolatility + \")\"\n}\n\nlet dataSetQuery = \"select * from latestplayers_staging where 1=1\"\n    + leagueClusterClause\n    + leagueClause\n    + clubClusterClause\n    + clubsClause\n    + rolesClause\n    + rolesRisClause\n    + nationaltiesClause\n    + playersClause\n    + minAgeClause\n    + maxAgeClause\n    + minFairSalaryClause\n    + maxFairSalaryClause\n    + minFairPriceClause\n    + maxFairPricelause\n    + minExpectedPriceClause\n    + maxExpectedPriceClause\n    + minSalaryNetClause\n    + maxSalaryNetClause\n    + minEffectivenessClause\n    + maxEffectivenessClause\n    + minVolatilityClause\n    + maxVolatilityClause\n\nlet clubSetQuery = \"select * from latestclubs_staging where 1=1\"\n    + clusterClauseForClub\n\nlet clubWithQuery = \"clubFilter as ( \" + clubSetQuery + \" ) \"\n\nlet whithQuery = \"with filtered as ( \" + dataSetQuery + \" ), \"\n    + clubWithQuery\n\nlet statQuery =\n\n    \" select \"\n    // NUMERI ed ENTITA'\n    + \"\t(SELECT count(distinct currentLeagueId) FROM `filtered`) as numOfLeagues,\"\n    + \"\t(SELECT  GROUP_CONCAT(distinct currentLeagueId,';', currentLeagueName SEPARATOR ',') FROM `filtered`) as leagues,\"\n    + \"\t(SELECT count(distinct currentClubId) FROM `filtered`) as numOfClubs,\"\n    + \"\t(SELECT   CONCAT('id,name','\\r\\n',GROUP_CONCAT(distinct currentClubId,',', currentClubName SEPARATOR '\\r\\n'))  FROM `filtered`) as clubs,\"\n    + \"\t(SELECT @pnum:=count(distinct playerId) FROM `filtered`) as numOfPlayers,\"\n\n    //Foreign Players\n    + \"\t(SELECT @fpnam:=count(distinct playerId) FROM `filtered` where currentLeagueCountryCode <> nationalityCode) as numOfForeignPlayers,\"\n    + \"\t(SELECT @fpnam:=count(distinct playerId) FROM `filtered` where currentLeagueCountryCode <> nationalityCode and age <= 23) as numOfForeignPlayersU23,\"\n    + \"\t(@fpnam/@pnum)  as numOfForeignPlayersRatio,\"\n    + \"  (select nationalityCode from filtered where currentLeagueCountryCode <> nationalityCode GROUP BY nationalityCode order by count(nationalityCode) desc limit 1) as topExporter,\"\n    + \"  (select count(nationalityCode) from filtered where currentLeagueCountryCode <> nationalityCode GROUP BY nationalityCode order by count(nationalityCode) desc limit 1) as topExporterNum,\"\n    + \"  (select currentLeagueCountryCode from filtered where currentLeagueCountryCode <> nationalityCode GROUP BY currentLeagueCountryCode order by count(currentLeagueCountryCode) desc limit 1) as topImporter,\"\n    + \"  (select count(currentLeagueCountryCode) from filtered where currentLeagueCountryCode <> nationalityCode GROUP BY currentLeagueCountryCode order by count(currentLeagueCountryCode) desc limit 1) as topImporterNum,\"\n\n\n    // ETA'\n    + \"\t(select round(avg(age),2) from filtered) as avgAge, \"\n    + \"\t(select @maxage:=max(age) from filtered) as maxAge,\"\n    + \"\t(select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where age=@maxage group by age) as playerMaxAge,\"\n    + \"\t(select @minage:=min(age) from filtered ) as minAge, \"\n    + \"\t(select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where age=@minage) as playerMinAge,\"\n    + \"  (select count(*) from filtered where age <= 20 ) as under20NumOfPlayers,\"\n    + \"  (select count(*) from filtered where age <= 23 ) as under23NumOfPlayers,\"\n    + \"  (select count(*) from filtered where age > 20 and age <= 30 ) as 20to30NumOfPlayers,\"\n    + \"  (select count(*) from filtered where age > 30) as over30NumOfPlayers,\"\n\n    //  CONTRATTI \n    + \"\t(select @maxtmoc:=max(totalMonthsOfContract) from filtered) as maxTotalMonthsOfContract,\"\n    + \"\t(select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where totalMonthsOfContract=@maxtmoc ) as playerMaxTotalMonthsOfContract,\"\n    + \"  (select round(avg(totalMonthsOfContract),2) from filtered) as avgTotalMonthsOfContract,\"\n    + \"  (select round(avg(remainingMonthsOfContract),2) from filtered) as avgRemainingMonthsOfContract,\"\n    + \"  (select count(*) from filtered where remainingMonthsOfContract <  13 ) as playersWithExpiringContracts,\"\n    + \"  (select count(*) from filtered where contractType NOT LIKE '%estito' ) as borrowedOrLoanedPlayers,\"\n    + \"  (select count(*) from filtered where nationalTeamPlayer = 1 ) as nationalTeamPlayers,\"\n\n    //TRANSFER FEE\n    + \"\t(select @maxtf:=max(transferPrice) from filtered) as maxTransferPrice,\"\n    + \"\t(select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where transferPrice=@maxtf ) as playerMaxTransferPrice,\"\n    + \"\t(select round(avg(transferPrice),2) from filtered) as avgTransferPrice,\"\n    + \"\t(select round(sum(transferPrice),2) from filtered) as totalTransferPrice,\"\n\n    //POTENTIAL PRICE=FAIR PRICE\n    + \"  (select round(@maxpp:=max(potentialPrice),2) from filtered) as maxPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxpp ) as playerMaxPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered) as avgPotentialPrice,\"\n    + \"  (select round(sum(potentialPrice),2) from filtered) as totalPotentialPrice,\"\n\n    //CLUB POTENTIAL PRICE\n    + \"  (select round(@maxpp:=max(potentialPrice),2) from clubFilter) as maxClubPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from clubFilter where potentialPrice=@maxpp ) as clubMaxPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from clubFilter) as avgClubPotentialPrice,\"\n    + \"  (select round(sum(potentialPrice),2) from clubFilter) as totalClubPotentialPrice,\"\n\n    //EXPECTED PRICE\n    + \"  (select round(@maxep:=max(expectedPrice),2) from filtered) as maxExpectedPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where expectedPrice=@maxep ) as playerMaxExpectedPrice,\"\n    + \"  (select round(avg(expectedPrice),2) from filtered) as avgExpectedPrice,\"\n    + \"  (select round(sum(expectedPrice),2) from filtered) as totalExpectedPrice,\"\n\n    //CLUB EXPECTED PRICE\n    + \"  (select round(@maxep:=max(expectedPrice),2) from clubFilter) as maxClubExpectedPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from clubFilter where expectedPrice=@maxep ) as clubMaxExpectedPrice,\"\n    + \"  (select round(avg(expectedPrice),2) from clubFilter) as avgClubExpectedPrice,\"\n    + \"  (select round(sum(expectedPrice),2) from clubFilter) as totalClubExpectedPrice,\"\n\n    //FAIR SALARY=SALARY POTENTIAL\n    + \"  (select round(@maxsp:=max(salaryPotential),2) from filtered) as maxSalaryPotential,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where salaryPotential=@maxsp ) as playerMaxSalaryPotential,\"\n    + \"  (select round(avg(salaryPotential),2) from filtered ) as avgSalaryPotential,\"\n    + \"  (select round(sum(salaryPotential),2) from filtered ) as totalSalaryPotential,\"\n\n\n    //SALARY NET = PRESUMED SALARY\n    + \"  (select round(@maxsn:=max(salaryNet),2) from filtered) as maxSalaryNet,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where salaryNet=@maxsn ) as playerMaxSalaryNet,\"\n    + \"  (select round(avg(salaryNet),2) from filtered ) as avgSalaryNet,\"\n    + \"  (select round(sum(salaryNet),2) from filtered ) as totalSalaryNet,\"\n\n\n    // SALARY OPTIMAL\n    + \"  (select round(@maxso:=max(salaryOptimal),2) from filtered) as maxSalaryOptimal,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where salaryOptimal=@maxso ) as playerMaxSalaryOptimal,\"\n    + \"  (select round(avg(salaryOptimal),2) from filtered ) as avgSalaryOptimal,\"\n    + \"  (select round(sum(salaryOptimal),2) from filtered ) as totalSalaryOptimal,\"\n    \n    // SALARY GROSS\n    + \"  (select round(avg(salaryGross),2) from filtered ) as avgSalaryGross,\"\n    + \"  (select round(sum(salaryGross),2) from filtered ) as totalSalaryGross,\"\n\n    // RESIDUAL VALUE\n    + \"  (select round(@maxrv:=max(residualValue),2) from filtered) as maxResidualValue,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where residualValue=@maxrv ) as playerMaxResidualValue,\"\n    + \"  (select round(avg(residualValue),2) from filtered ) as avgResidualValue,\"\n    + \"  (select round(sum(residualValue),2) from filtered ) as totalResidualValue,\"\n\n    // CLUB RESIDUAL VALUE\n    + \"  (select round(@maxrv:=max(residualValue),2) from clubFilter) as maxClubResidualValue,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from clubFilter where residualValue=@maxrv ) as clubMaxResidualValue,\"\n    + \"  (select round(avg(residualValue),2) from clubFilter ) as avgClubResidualValue,\"\n    + \"  (select round(sum(residualValue),2) from clubFilter ) as totalClubResidualValue,\"\n\n    // RESIDUAL BOOK VALUE\n    + \"  (select round(@maxrbv:=max(residualBookValue),2) from filtered) as maxResidualBookValue,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where residualBookValue=@maxrbv ) as playerMaxResidualBookValue,\"\n    + \"  (select round(avg(residualBookValue),2) from filtered ) as avgResidualBookValue,\"\n    + \"  (select round(sum(residualBookValue),2) from filtered ) as totalResidualBookValue,\"\n\n\n    // EFFECTIVENESS\n    + \"  (select round(@maxef:=max(effectiveness),2) from filtered) as maxEffectiveness,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where effectiveness=@maxef ) as playerMaxEffectiveness,\"\n    + \"  (select round(avg(effectiveness),2) from filtered ) as avgEffectiveness,\"\n\n    // Performance\n    + \"  (select round(@maxperf:=max(performance),2) from filtered) as maxPerformance,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where performance=@maxperf ) as playerMaxPerformance,\"\n    + \"  (select round(avg(performance),2) from filtered ) as avgPerformance,\"\n\n    // UNIQUENESS\n    + \"  (select round(@maxuniq:=max(latestUniqueness),2) from filtered) as maxUniqueness,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where latestUniqueness=@maxuniq ) as playerMaxUniqueness,\"\n    + \"  (select round(avg(latestUniqueness),2) from filtered ) as avgUniqueness,\"\n\n    // VOLATILITY\n    + \"  (select round(@maxvolatil:=max(latestMicroVolatility),2) from filtered) as maxVolatility,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where latestMicroVolatility=@maxvolatil ) as playerMaxVolatility,\"\n    + \"  (select round(avg(latestMicroVolatility),2) from filtered ) as avgVolatility,\"\n\n    // CLUB VOLATILITY\n    + \"  (select round(@maxvolatil:=max(avgLatestMicroVolatility),2) from clubFilter) as maxClubVolatility,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from clubFilter where avgLatestMicroVolatility=@maxvolatil ) as clubMaxVolatility,\"\n    + \"  (select round(avg(avgLatestMicroVolatility),2) from clubFilter ) as avgClubVolatility,\"\n\n    // SUPERSTAR + POTENTIAL PRICE=FAIR PRICE\n    + \"  (select count(*) from filtered where superstar = 1 ) as numOfSuperstars,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where superstar = 1 ) as superStars,\"\n    + \"  (select round(@maxsspp:=max(potentialPrice),2) from filtered where superstar = 1 ) as maxSuperStarPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxsspp and superstar = 1 ) as playerSuperStarMaxPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where superstar = 1 ) as avgSuperStarPotentialPrice,\"\n\n    // RISINGSTAR + POTENTIAL PRICE=FAIR PRICE\n    + \"  (select count(*) from filtered where risingStar = 1 ) as numOfRisingStars,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where risingStar = 1 ) as risingStars,\"\n    + \"  (select round(@maxrspp:=max(potentialPrice),2) from filtered where risingStar = 1 ) as maxRisingStarPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxrspp and risingStar = 1 ) as playerRisingStarMaxPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where risingStar = 1 ) as avgRisingStarPotentialPrice,\"\n\n    // OVERPERFORMES + POTENTIAL PRICE=FAIR PRICE\n    + \"  (select count(*) from filtered where emerging = 1 ) as numOfOverperformers,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where emerging = 1 ) as overperformers,\"\n    + \"  (select round(@maxepp:=max(potentialPrice),2) from filtered where emerging = 1 ) as maxOverperformerPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxepp and emerging = 1 ) as playerOverperformerMaxPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where emerging = 1 ) as avgOverperformerPotentialPrice,\"\n\n    // REGULARS + POTENTIAL PRICE=FAIR PRICE\n    + \"  (select count(*) from filtered where superstar = 0 and risingStar = 0  and emerging = 0 ) as numOfRegulars,\"\n    + \"  (select round(@maxregpp:=max(potentialPrice),2) from filtered where superstar = 0 and risingStar = 0  and emerging = 0  ) as maxRegularPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxregpp and superstar = 0 and risingStar = 0  and emerging = 0  ) as playerRegularMaxPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where superstar = 0 and risingStar = 0  and emerging = 0  ) as avgRegularPotentialPrice,\"\n\n    // GOALKEEPERS + POTENTIAL PRICE=FAIR PRICE\n    + \"  (select count(*) from filtered where latestRoleRis = 'Goalkeeper' ) as numOfGoalkeepers,\"\n    + \"  (select round(@maxgkpp:=max(potentialPrice),2) from filtered where  latestRoleRis = 'Goalkeeper' ) as maxGoalkeeperPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxgkpp and  latestRoleRis = 'Goalkeeper' ) as playerGoalkeeperMaxPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where  latestRoleRis = 'Goalkeeper' ) as avgGoalkeeperPotentialPrice,\"\n\n    // Defender + POTENTIAL PRICE=FAIR PRICE\n    + \"  (select count(*) from filtered where latestRoleRis = 'Defender' ) as numOfDefenders,\"\n    + \"  (select round(@maxdefpp:=max(potentialPrice),2) from filtered where  latestRoleRis = 'Defender' ) as maxDefenderPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxdefpp and  latestRoleRis = 'Defender' ) as playerDefenderMaxPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where  latestRoleRis = 'Defender' ) as avgDefenderPotentialPrice,\"\n\n    // Midfielder + POTENTIAL PRICE=FAIR PRICE\n    + \"  (select count(*) from filtered where latestRoleRis = 'Midfielder' ) as numOfMidfielders,\"\n    + \"  (select round(@maxmidfpp:=max(potentialPrice),2) from filtered where  latestRoleRis = 'Midfielder' ) as maxMidfielderPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxmidfpp and  latestRoleRis = 'Midfielder' ) as playerMidfielderMaxPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where  latestRoleRis = 'Midfielder' ) as avgMidfielderPotentialPrice,\"\n\n    // Attacker + POTENTIAL PRICE=FAIR PRICE\n    + \"  (select count(*) from filtered where latestRoleRis = 'Attacker' ) as numOfAttackers,\"\n    + \"  (select round(@maxattpp:=max(potentialPrice),2) from filtered where  latestRoleRis = 'Attacker' ) as maxAttackerPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxattpp and  latestRoleRis = 'Attacker' ) as playerAttackerMaxPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where  latestRoleRis = 'Attacker' ) as avgAttackerPotentialPrice,\"\n\n\n    // REVENUES\n    + \"  (select round(@maxrev:=max(revenues),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered) ) as maxRevenues,\"\n    + \"  (select round(sum(revenues),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered) ) as totalRevenues,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from latestclubs_staging where revenues=@maxrev and clubId in (select distinct @clubSet:=currentClubId from filtered) ) as clubMaxRevenues,\"\n    + \"  (select round(@minrev:=min(revenues),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered) ) as minRevenues,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from latestclubs_staging where revenues=@minrev and clubId in (select distinct @clubSet:=currentClubId from filtered) ) as clubMinRevenues,\"\n    + \"  (select round(avg(revenues),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered) ) as avgRevenues,\"\n\n    // PORTFOLIO\n    + \"  (select round(@maxportcost:=max(portfolioCost),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered) ) as maxPortfolioCost,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from latestclubs_staging where portfolioCost=@maxportcost and clubId in (select distinct @clubSet:=currentClubId from filtered) ) as clubMaxPortfolioCost,\"\n    + \"  (select round(@minportcost:=min(portfolioCost),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered) ) as minPortfolioCost,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from latestclubs_staging where portfolioCost=@minportcost and clubId in (select distinct @clubSet:=currentClubId from filtered) ) as clubMinPortfolioCost,\"\n    + \"  (select round(avg(portfolioCost),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered) ) as avgPortfolioCost,\"\n    + \"  (select round(sum(portfolioCost),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered) ) as totalPortfolioCost\"\n\n    + \" from dual;\"\n\n\nmsg.topic = whithQuery + statQuery\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 340,
        "wires": [
            [
                "4b0db17857ac3fae",
                "0bfe0ac9000b24f6"
            ]
        ]
    },
    {
        "id": "301a1b6469cdf4d7",
        "type": "http in",
        "z": "c7a1f882aac10d26",
        "name": "/statistiche",
        "url": "/statistiche",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 420,
        "y": 340,
        "wires": [
            [
                "d59a039285b03114"
            ]
        ]
    },
    {
        "id": "e092a48691ed01dc",
        "type": "http response",
        "z": "c7a1f882aac10d26",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1450,
        "y": 340,
        "wires": []
    },
    {
        "id": "4b0db17857ac3fae",
        "type": "mysql",
        "z": "c7a1f882aac10d26",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 980,
        "y": 340,
        "wires": [
            [
                "d78fdd3acb0f364b"
            ]
        ]
    },
    {
        "id": "d78fdd3acb0f364b",
        "type": "function",
        "z": "c7a1f882aac10d26",
        "name": "From array to object",
        "func": "msg.payload=msg.payload[0]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 340,
        "wires": [
            [
                "e092a48691ed01dc"
            ]
        ]
    },
    {
        "id": "0de8dda46058eda6",
        "type": "function",
        "z": "c7a1f882aac10d26",
        "name": "Query Builder Filtro",
        "func": "let filtri = msg.req.query;\nfiltri\nconsole.log(\"filtri\",filtri) \n\n \nmsg.status = 200;\n\nif (!filtri || filtri.length==0) {\n    \n    msg.status = 400; //Bad Request\n    msg.payload=\"Request body missing\";\n    console.log(msg.payload)\n    return msg;\n}\n\n/*\n\n{\n\n\t\"leagueClusters\" : [],\n\t\"leagues\" : [],\n\t\"clubClusters\" : [],\n\t\"clubs\" : [],\n\t\"roles\" : [],\n\t\"rolesRis\" : [],\n\t\"nationalities\" : [],\n\t\"players\" : [],\n }\n\n*/\n\nlet leagueClusterClause = \" \"\n\nif (filtri.leagueClusters) {\n    leagueClusterClause = \" and currentLeagueCluster in ( \" + filtri.leagueClusters + \")\"\n}\n\nlet leagueClause = \" \"\n\nif (filtri.leagues) {\n    \n    let q = []\n    if ( Array.isArray(filtri.leagues)) {\n       q=filtri.leagues\n    } else  {\n       q.push(filtri.leagues)\n    }\n    \n    leagueClause = \" and currentLeagueId in ( \" + q.map( l => '\"'+l+'\"') + \")\"\n}\n\nlet clubClusterClause = \" \"\n\nif (filtri.clubClusters) {\n    clubClusterClause = \" and currentClubCluster in ( \" + filtri.clubClusters + \")\"\n}\n\nlet clubsClause = \" \"\n\nif (filtri.clubs) {\n    \n    let q = []\n    if ( Array.isArray(filtri.clubs)) {\n       q=filtri.clubs\n    } else  {\n       q.push(filtri.clubs)\n    }\n    \n    clubsClause = \" and currentClubId in ( \" + q.map( l => '\"'+l+'\"') + \")\"\n}\n\nlet rolesClause = \" \"\n\nif (filtri.roles) {\n    rolesClause = \" and latestRoleGroup in ( \" + filtri.roles + \")\"\n}\n\nlet rolesRisClause = \" \"\n\nif (filtri.rolesRis) {\n    \n    let q = []\n    if ( Array.isArray(filtri.rolesRis)) {\n       q=filtri.rolesRis\n    } else  {\n       q.push(filtri.rolesRis)\n    }\n    rolesRisClause = \" and latestRoleRis in ( \" + q.map( l => '\"'+l+'\"') + \")\"\n}\n\nlet nationaltiesClause = \" \"\n\nif (filtri.nationalities) {\n    \n    let q = []\n    if ( Array.isArray(filtri.nationalities)) {\n       q=filtri.nationalities\n    } else  {\n       q.push(filtri.nationalities)\n    }\n    nationaltiesClause = \" and nationality in ( \" + q.map( l => '\"'+l+'\"') + \")\"\n}\n\nlet playersClause = \" \"\n\nif (filtri.players) {\n    \n    let q = []\n    if ( Array.isArray(filtri.players)) {\n       q=filtri.players\n    } else  {\n       q.push(filtri.players)\n    }\n    \n    playersClause = \" and playerId in ( \" + q.map( l => '\"'+l+'\"') + \")\"\n}\n\nlet minAgeClause = \" \"\n\nif (filtri.minAge) {\n    \n    minAgeClause = \" and age >= ( \" + filtri.minAge + \")\"\n}\n\nlet maxAgeClause = \" \"\n\nif (filtri.maxAge) {\n    \n    maxAgeClause = \" and age <= ( \" + filtri.maxAge + \")\"\n}\n\n\nlet minFairSalaryClause = \" \"\n\nif (filtri.minFairSalary) {\n    \n    minFairSalaryClause = \" and salaryPotential >= ( \" + filtri.minFairSalary + \")\"\n}\n\nlet maxFairSalaryClause = \" \"\n\nif (filtri.maxFairSalary) {\n    \n    maxFairSalaryClause = \" and salaryPotential <= ( \" + filtri.maxFairSalary + \")\"\n}\n\nlet minFairPriceClause = \" \"\n\nif (filtri.minFairPrice) {\n    \n    minFairSalaryClause = \" and potentialPrice >= ( \" + filtri.minFairPrice + \")\"\n}\n\nlet maxFairPricelause = \" \"\n\nif (filtri.maxFairPrice) {\n    \n    maxFairPriceClause = \" and potentialPrice <= ( \" + filtri.maxFairPrice + \")\"\n}\n\nlet minExpectedPriceClause = \" \"\n\nif (filtri.minExpectedPrice) {\n    \n    minExpectedPriceClause = \" and expectedPrice >= ( \" + filtri.minExpectedPrice + \")\"\n}\n\nlet maxExpectedPriceClause = \" \"\n\nif (filtri.maxExpectedPrice) {\n    \n    maxExpectedPriceClause = \" and expectedPrice <= ( \" + filtri.maxExpectedPrice + \")\"\n}\n\nlet minSalaryNetClause = \" \"\n\nif (filtri.minSalaryNet) {\n    \n    minSalaryNetlause = \" and salaryNet >= ( \" + filtri.minSalaryNet + \")\"\n}\n\nlet maxSalaryNetClause = \" \"\n\nif (filtri.maxSalaryNet) {\n    \n    maxExpectedPriceClause = \" and salaryNet <= ( \" + filtri.maxSalaryNet + \")\"\n}\n\nlet minEffectivenessClause = \" \"\n\nif (filtri.minEffectiveness) {\n    \n    minEffectivenessClause = \" and effectiveness >= ( \" + filtri.minEffectiveness + \")\"\n}\n\nlet maxEffectivenessClause = \" \"\n\nif (filtri.maxEffectiveness) {\n    \n    maxEffectivenessClause = \" and effectivness <= ( \" + filtri.maxEffectiveness + \")\"\n}\n\nlet minVolatilityClause = \" \"\n\nif (filtri.minVolatility) {\n    \n    minVolatilityClause = \" and latestMicroVolatility >= ( \" + filtri.minVolatility + \")\"\n}\n\nlet maxVolatilityClause = \" \"\n\nif (filtri.maxVolatility) {\n    \n    maxVolatilityClause = \" and latestMicroVolatility <= ( \" + filtri.maxVolatility + \")\"\n}\n\nlet dataSetQuery = \"select * from latestplayers_staging where 1=1\" \n\t\t+ leagueClusterClause \n\t\t+ leagueClause\n\t\t+ clubClusterClause\n\t\t+ clubsClause\n\t\t+ rolesClause\n\t\t+ rolesRisClause\n\t\t+ nationaltiesClause\n\t\t+ playersClause\n\t\t+ minAgeClause\n\t\t+ maxAgeClause\n        + minFairSalaryClause\n        + maxFairSalaryClause\n        + minFairPriceClause\n        + maxFairPricelause\n        + minExpectedPriceClause\n        + maxExpectedPriceClause\n        + minSalaryNetClause\n        + maxSalaryNetClause\n        + minEffectivenessClause\n        + maxEffectivenessClause\n        + minVolatilityClause\n        + maxVolatilityClause\n        \t\t\n\nlet whithQuery = \"with filtered as ( \" + dataSetQuery + \" ) \"\n\nlet statQuery = \n\n\" select \" \n\n+\"  (SELECT  GROUP_CONCAT(distinct currentLeagueCluster SEPARATOR ', ') FROM `filtered`) as leagueCluster,\"\n+\"\t(SELECT  GROUP_CONCAT(distinct currentLeagueId,';', currentLeagueName SEPARATOR ', ') FROM `filtered`) as leagues,\"\n+\"\t(SELECT  GROUP_CONCAT(distinct currentClubCluster SEPARATOR ', ') FROM `filtered`) as clubCluster,\"\n+\"\t(SELECT  GROUP_CONCAT(distinct currentClubId,';', currentClubName SEPARATOR ', ') FROM `filtered`) as clubs,\"\n+\"\t(SELECT  GROUP_CONCAT(distinct latestRoleGroup SEPARATOR ', ') FROM `filtered`) as roles,\"\n+\"\t(SELECT  GROUP_CONCAT(distinct latestRoleRis SEPARATOR ', ') FROM `filtered`) as roleRis,\" \n+\"\t(SELECT  GROUP_CONCAT(distinct nationality SEPARATOR ', ') FROM `filtered`) as nationalities,\"\n\n\n// ETA'\n+\"\t(select @minage:=min(age) from filtered ) as minAge, \"\n+\"\t(select @maxage:=max(age) from filtered) as maxAge\"\n\n+\" from dual;\"\n\n\nmsg.topic = whithQuery + statQuery\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 690,
        "y": 500,
        "wires": [
            [
                "cefd5d1a1f76936f"
            ]
        ]
    },
    {
        "id": "8c5ce7e135effb42",
        "type": "http in",
        "z": "c7a1f882aac10d26",
        "name": "/filtro",
        "url": "/filtro",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 410,
        "y": 500,
        "wires": [
            [
                "0de8dda46058eda6",
                "4adef2f30e7e0eee"
            ]
        ]
    },
    {
        "id": "40ca0f9eba5ff339",
        "type": "http response",
        "z": "c7a1f882aac10d26",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1470,
        "y": 500,
        "wires": []
    },
    {
        "id": "cefd5d1a1f76936f",
        "type": "mysql",
        "z": "c7a1f882aac10d26",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 980,
        "y": 500,
        "wires": [
            [
                "1ea74b5149e4178e"
            ]
        ]
    },
    {
        "id": "1ea74b5149e4178e",
        "type": "function",
        "z": "c7a1f882aac10d26",
        "name": "From array to object",
        "func": "msg.payload=msg.payload[0]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 500,
        "wires": [
            [
                "40ca0f9eba5ff339"
            ]
        ]
    },
    {
        "id": "236b033cbff93b56",
        "type": "function",
        "z": "c7a1f882aac10d26",
        "name": "Query Builder EntityNames",
        "func": "msg.topic = \n \"SELECT    \"\n+\"\t'leagues' as entityType,    \"\n+\"\tl.leagueId as entityId,    \"\n+\"\tl.name as entityName    \"\n+\"from latestleagues_staging l    \"\n+\"union    \"\n+\"SELECT    \"\n+\"\t'clubs' as entityType,    \"\n+\"\tc.clubId  as entityId,    \"\n+\"\tc.name    \"\n+\"from latestclubs_staging c     \"\n+\"union    \"\n+\"SELECT    \"\n+\"\t'players' as entityType,    \"\n+\"\tp.playerId  as entityId,    \"\n+\"\tp.fullName as entityName   \"\n+\"from latestplayers_staging p;    \"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 880,
        "wires": [
            [
                "5f72b14945446cda"
            ]
        ]
    },
    {
        "id": "d9ba390cbca6975e",
        "type": "http in",
        "z": "c7a1f882aac10d26",
        "name": "/cerca/:name",
        "url": "/cerca/:name",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 430,
        "y": 820,
        "wires": [
            [
                "1306b99d8e431d5b"
            ]
        ]
    },
    {
        "id": "f593cb067ef0a544",
        "type": "http response",
        "z": "c7a1f882aac10d26",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1590,
        "y": 820,
        "wires": []
    },
    {
        "id": "5f72b14945446cda",
        "type": "mysql",
        "z": "c7a1f882aac10d26",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 1060,
        "y": 880,
        "wires": [
            [
                "9325b704f83c11f1"
            ]
        ]
    },
    {
        "id": "1306b99d8e431d5b",
        "type": "switch",
        "z": "c7a1f882aac10d26",
        "name": "",
        "property": "entityNames",
        "propertyType": "global",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "null"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 590,
        "y": 820,
        "wires": [
            [
                "d33b8f243c72b028"
            ],
            [
                "236b033cbff93b56"
            ]
        ]
    },
    {
        "id": "9325b704f83c11f1",
        "type": "function",
        "z": "c7a1f882aac10d26",
        "name": "GlobalSet",
        "func": "global.set(\"entityNames\",msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1260,
        "y": 880,
        "wires": [
            [
                "d33b8f243c72b028"
            ]
        ]
    },
    {
        "id": "d33b8f243c72b028",
        "type": "function",
        "z": "c7a1f882aac10d26",
        "name": "Search",
        "func": "let entityNames = global.get(\"entityNames\");\n\n\nlet searchParam = msg.req.params.name;\n\nsearchParam = searchParam ? searchParam.toLowerCase() : \"\" ;\n\nlet serchResult = entityNames.filter( entity => entity.entityName.toLowerCase().includes(searchParam))\n\nmsg.payload = serchResult\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 820,
        "wires": [
            [
                "f593cb067ef0a544"
            ]
        ]
    },
    {
        "id": "707a4129aa34866f",
        "type": "function",
        "z": "c7a1f882aac10d26",
        "name": "Stats insert builder",
        "func": "let obj = msg.payload;\n\nlet keysArr = [];\n\nlet topic = \"INSERT INTO superstats ( entityType, entityId, entityName, elaborationNum, \"\nlet values = \"VALUES ( '\" + msg.entityType + \"','\" + msg.entityId + \"','\" + msg.entityName.replace(/'/g, \"'\"+\"'\") + \"',\" + msg.elaborationNum + \",\"\nObject.keys(obj).forEach( k => {\n    \n    topic = topic + k + \",\"\n    \n    let value;\n    \n    if (typeof obj[k] === \"string\" ) {\n        \n        let s = obj[k].replace(/'/g, \"'\"+\"'\")\n        value = '\"'+s+'\"'\n        \n    } else {\n        value = obj[k]\n    }\n    \n    values = values + value + \",\"\n    \n    //console.log(k ,  typeof obj[k])\n} )\n\ntopic = topic.slice(0,-1) //rimuoviamo la virgola finale\ntopic = topic + \")\"\nvalues = values.slice(0,-1) //rimuoviamo la virgola finale\nvalues = values + \")\"\n\nmsg.topic = topic + values;\n\nif (msg.entityId === \"75qj99fhg5c0ztj2tva5u4uii\") {\n    console.log(\"topic\", msg.topic)\n\n} \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 160,
        "wires": [
            [
                "fd41d01d10f60870"
            ]
        ]
    },
    {
        "id": "fd41d01d10f60870",
        "type": "mysql",
        "z": "c7a1f882aac10d26",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 1220,
        "y": 160,
        "wires": [
            [
                "08cd14c2dc965d8c"
            ]
        ]
    },
    {
        "id": "8e508e6a23743904",
        "type": "http request",
        "z": "c7a1f882aac10d26",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 790,
        "y": 160,
        "wires": [
            [
                "707a4129aa34866f"
            ]
        ]
    },
    {
        "id": "df066f087d3132eb",
        "type": "function",
        "z": "c7a1f882aac10d26",
        "name": "Query Statistics",
        "func": "msg.topic = \"select distinct 'ALL' as entityType,'ALL' as entityId, 'ALL' as entityName, max(elaborationNum) as elaborationNum from latestplayers_staging\"\n\nmsg.topic = msg.topic + \" union \"+ \"select distinct 'LEAGUE' as entityType,currentLeagueId as entityId, currentLeagueName as entityName, max(elaborationNum) as elaborationNum from latestplayers_staging\"\nmsg.topic = msg.topic + \" union \"+ \"select distinct 'CLUSTER' as entityType,currentClubCluster as entityId, currentClubCluster as entityName, max(elaborationNum) as elaborationNum from latestplayers_staging\"\nmsg.topic = msg.topic + \" union \"+ \"select distinct 'CLUB' as entityType,currentClubId as entityId, currentClubName as entityName, max(elaborationNum) as elaborationNum from latestplayers_staging\"\nmsg.topic = msg.topic + \" union \"+ \"select distinct 'LEAGUECLUSTER' as entityType,currentLeagueCluster as entityId, currentLeagueCluster as entityName, max(elaborationNum) as elaborationNum from latestplayers_staging\"\n\n\nmsg.topic = \"SELECT DISTINCT\\n\" +\n\"\t'ALL' AS entityType,\\n\" +\n\"\t'ALL' AS entityId,\\n\" +\n\"\t'ALL' AS entityName\\n\" +\n\"FROM\\n\" +\n\"\tlatestplayers_staging UNION\\n\" +\n\"SELECT DISTINCT\\n\" +\n\"\t'LEAGUE' AS entityType,\\n\" +\n\"\tcurrentLeagueId AS entityId,\\n\" +\n\"\tcurrentLeagueName AS entityName\\n\" +\n\"FROM\\n\" +\n\"\tlatestplayers_staging UNION\\n\" +\n\"SELECT DISTINCT\\n\" +\n\"\t'CLUSTER' AS entityType,\\n\" +\n\"\tcurrentClubCluster AS entityId,\\n\" +\n\"\tcurrentClubCluster AS entityName\\n\" +\n\"FROM\\n\" +\n\"\tlatestplayers_staging UNION\\n\" +\n\"SELECT DISTINCT\\n\" +\n\"\t'LEAGUECLUSTER' AS entityType,\\n\" +\n\"\tcurrentLeagueCluster AS entityId,\\n\" +\n\"\tcurrentLeagueCluster AS entityName\\n\" +\n\"FROM\\n\" +\n\"\tlatestplayers_staging UNION\\n\"  +\n\"SELECT DISTINCT\\n\" +\n\"\t'CLUB' AS entityType,\\n\" +\n\"\tcurrentClubId AS entityId,\\n\" +\n\"\tcurrentClubName AS entityName\\n\" +\n\"FROM\\n\" +\n\"\tlatestplayers_staging\";\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 100,
        "wires": [
            [
                "68b164111b8a6bc3",
                "72588fa55349ceb1",
                "e0d850e2546d9c45",
                "0bfe0ac9000b24f6"
            ]
        ]
    },
    {
        "id": "68b164111b8a6bc3",
        "type": "mysql",
        "z": "c7a1f882aac10d26",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 660,
        "y": 100,
        "wires": [
            [
                "a3885dad3159bf7b"
            ]
        ]
    },
    {
        "id": "960795f83484dc2f",
        "type": "inject",
        "z": "c7a1f882aac10d26",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 40,
        "wires": [
            [
                "bbc7a9e1a8d7d852"
            ]
        ]
    },
    {
        "id": "bdcd44d5994f96c2",
        "type": "function",
        "z": "c7a1f882aac10d26",
        "name": "Set msg.url",
        "func": "let obj = msg.payload\n\nif ( obj[\"entityType\"] == \"ALL\") {\n    \n    msg.url=\"http://node-red.stdfootball.ovh/statistiche\"\n} \n\nif ( obj[\"entityType\"] == \"LEAGUE\") {\n    \n    msg.url=\"http://node-red.stdfootball.ovh/statistiche?leagues=\"+obj[\"entityId\"]\n} \n\nif ( obj[\"entityType\"] == \"CLUB\") {\n    \n    msg.url=\"http://node-red.stdfootball.ovh/statistiche?clubs=\"+obj[\"entityId\"]\n} \n\nif ( obj[\"entityType\"] == \"CLUSTER\") {\n    \n    msg.url=\"http://node-red.stdfootball.ovh/statistiche?clubClusters=\"+obj[\"entityId\"]\n} \n\nif ( obj[\"entityType\"] == \"LEAGUECLUSTER\") {\n    \n    msg.url=\"http://node-red.stdfootball.ovh/statistiche?leagueClusters=\"+obj[\"entityId\"]\n} \n\nmsg.entityType = obj[\"entityType\"]\nmsg.entityId = obj[\"entityId\"]\nmsg.entityName = obj[\"entityName\"]\n\n//flow.get(\"logmsg\").message = \"Stats  \"+msg.parts.index + \" /  \" + msg.parts.count\n//node.log(flow.get(\"logmsg\"))\nmsg.now = new Date();\nflow.get(\"logmsg\").message = \"Requestin Statistics for \"+msg.entityType + \" | \" + msg.entityName + \" | \" + msg.entityId\nnode.log(flow.get(\"logmsg\"))\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 160,
        "wires": [
            [
                "8e508e6a23743904"
            ]
        ]
    },
    {
        "id": "d8e81f2911f9d2ac",
        "type": "link in",
        "z": "c7a1f882aac10d26",
        "name": "BUILDSTATISTICSTABLE",
        "links": [],
        "x": 145,
        "y": 160,
        "wires": [
            [
                "df066f087d3132eb"
            ]
        ]
    },
    {
        "id": "72588fa55349ceb1",
        "type": "link out",
        "z": "c7a1f882aac10d26",
        "name": "BUILDSTATISTICSTABLEOUT",
        "mode": "link",
        "links": [],
        "x": 1265,
        "y": 100,
        "wires": []
    },
    {
        "id": "bbc7a9e1a8d7d852",
        "type": "function",
        "z": "c7a1f882aac10d26",
        "name": "INIT",
        "func": "let logmsg = global.get(\"logmsg\");\n\nif(!logmsg) {\n    \n    logmsg = {}\n    logmsg.type = \"db\"\n    logmsg.taskType = \"statistics\"\n    logmsg.taskId = Math.floor(Math.random() * 1000001);\n    logmsg.message = \"statiscs building started\"\n    logmsg.taskRunning = true\n}\n\n\n\nflow.set(\"logmsg\",logmsg)\n\nmsg.payload = logmsg;\n    \n\n\nnode.log(logmsg)\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 40,
        "wires": [
            [
                "15890e2edfbb537d",
                "571c68ce96673776"
            ]
        ]
    },
    {
        "id": "08cd14c2dc965d8c",
        "type": "function",
        "z": "c7a1f882aac10d26",
        "name": "log result",
        "func": "let diff = ( new Date() - msg.now  ) / 1000\n\nflow.get(\"logmsg\").message = \"Done: \"+msg.entityType + \" | \" + msg.entityName + \" in  \" +diff+ \" sec. - ends in:  \" + Math.round( ( diff * flow.get(\"arr\").length )/60 , 2)  + \" min. \" + flow.get(\"arr\").length +\" missing\" \nnode.log(flow.get(\"logmsg\"))\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 160,
        "wires": [
            [
                "26b9d809dd39f988"
            ]
        ]
    },
    {
        "id": "a3885dad3159bf7b",
        "type": "function",
        "z": "c7a1f882aac10d26",
        "name": "Set Payload in Flow",
        "func": "flow.set(\"arr\",msg.payload);\n\nreturn msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 100,
        "wires": [
            [
                "26b9d809dd39f988"
            ]
        ]
    },
    {
        "id": "26b9d809dd39f988",
        "type": "function",
        "z": "c7a1f882aac10d26",
        "name": "Array Popper",
        "func": "\nif(flow.get(\"arr\").length > 0 ) {\n    \n    msg.payload = flow.get(\"arr\").pop();\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 160,
        "wires": [
            [
                "bdcd44d5994f96c2"
            ]
        ]
    },
    {
        "id": "15890e2edfbb537d",
        "type": "function",
        "z": "c7a1f882aac10d26",
        "name": "Delete Statistics",
        "func": "msg.topic = \"delete from superstats; select max(elaborationNum) as elaborationNum from latestplayers_staging;\"\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 440,
        "y": 40,
        "wires": [
            [
                "e4692a4b3e2bf665"
            ]
        ]
    },
    {
        "id": "e4692a4b3e2bf665",
        "type": "mysql",
        "z": "c7a1f882aac10d26",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 660,
        "y": 40,
        "wires": [
            [
                "fd5354c0cf467bbc"
            ]
        ]
    },
    {
        "id": "fd5354c0cf467bbc",
        "type": "function",
        "z": "c7a1f882aac10d26",
        "name": "Elaboration Num",
        "func": "let elaborationNum = msg.payload[1][0].elaborationNum;\nmsg.elaborationNum=elaborationNum;\n\n\n\nflow.get(\"logmsg\").message = \"All stats deleted\"\nnode.log(flow.get(\"logmsg\"))\n\nflow.get(\"logmsg\").message = \"Stats elaboration started for elaborationNum \"+elaborationNum\nnode.log(flow.get(\"logmsg\"))\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 40,
        "wires": [
            [
                "df066f087d3132eb"
            ]
        ]
    },
    {
        "id": "b81e802aac2ea428",
        "type": "debug",
        "z": "c7a1f882aac10d26",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 970,
        "y": 420,
        "wires": []
    },
    {
        "id": "4adef2f30e7e0eee",
        "type": "debug",
        "z": "c7a1f882aac10d26",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 550,
        "y": 580,
        "wires": []
    },
    {
        "id": "29104f26fdfe509b",
        "type": "comment",
        "z": "c7a1f882aac10d26",
        "name": "AUTOCOMPLETE",
        "info": "",
        "x": 450,
        "y": 780,
        "wires": []
    },
    {
        "id": "a8d91b723dd44088",
        "type": "http in",
        "z": "c7a1f882aac10d26",
        "name": "",
        "url": "/elaborate/superstats",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 150,
        "y": 100,
        "wires": [
            [
                "bbc7a9e1a8d7d852"
            ]
        ]
    },
    {
        "id": "571c68ce96673776",
        "type": "http response",
        "z": "c7a1f882aac10d26",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 410,
        "y": 240,
        "wires": []
    },
    {
        "id": "e0d850e2546d9c45",
        "type": "debug",
        "z": "c7a1f882aac10d26",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 850,
        "y": 240,
        "wires": []
    },
    {
        "id": "0bfe0ac9000b24f6",
        "type": "debug",
        "z": "c7a1f882aac10d26",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 80,
        "wires": []
    },
    {
        "id": "6bcc00629a85f8a1",
        "type": "http in",
        "z": "c7a1f882aac10d26",
        "name": "Test Statistiche",
        "url": "/teststatistiche",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 440,
        "y": 1020,
        "wires": [
            [
                "a7940a391063fd38"
            ]
        ]
    },
    {
        "id": "a7940a391063fd38",
        "type": "function",
        "z": "c7a1f882aac10d26",
        "name": "Query Builder Statistiche",
        "func": "let filtri = {};\n\nif (msg.entityType && msg.entityId) {\n\n    filtri[msg[\"entityType\"]] = msg[\"entityId\"]\n} else {\n    filtri = msg.req.query;\n\n}\n\n\nmsg.filtri = filtri;\n\n\nmsg.status = 200;\n\nif (!filtri || filtri.length == 0) {\n\n    msg.status = 400; //Bad Request\n    msg.payload = \"Request body missing\";\n    console.log(msg.payload)\n    return msg;\n}\n\n/*\n\n{\n\n    \"leagueClusters\" : [],\n    \"leagues\" : [],\n    \"clubClusters\" : [],\n    \"clubs\" : [],\n    \"roles\" : [],\n    \"rolesRis\" : [],\n    \"nationalities\" : [],\n    \"players\" : [],\n }\n\n*/\n\nlet leagueClusterClause = \" \"\n\nif (filtri.leagueClusters) {\n    leagueClusterClause = \" and currentLeagueCluster in ( \" + filtri.leagueClusters + \")\"\n}\n\nlet leagueClause = \" \"\n\nif (filtri.leagues) {\n\n    let q = []\n    if (Array.isArray(filtri.leagues)) {\n        q = filtri.leagues\n    } else {\n        q.push(filtri.leagues)\n    }\n\n    leagueClause = \" and currentLeagueId in ( \" + q.map(l => '\"' + l + '\"') + \")\"\n}\n\nlet clubClusterClause = \" \"\nlet clusterClauseForClub = ''\n\nif (filtri.clubClusters) {\n    clubClusterClause = \" and currentClubCluster in ( \" + filtri.clubClusters + \")\"\n    clusterClauseForClub = \" and cluster in ( \" + filtri.clubClusters + \")\"\n}\n\nlet clubsClause = \" \"\n\nif (filtri.clubs) {\n\n    let q = []\n    if (Array.isArray(filtri.clubs)) {\n        q = filtri.clubs\n    } else {\n        q.push(filtri.clubs)\n    }\n\n    clubsClause = \" and currentClubId in ( \" + q.map(l => '\"' + l + '\"') + \")\"\n}\n\nlet rolesClause = \" \"\n\nif (filtri.roles) {\n    rolesClause = \" and latestRoleGroup in ( \" + filtri.roles + \")\"\n}\n\nlet rolesRisClause = \" \"\n\nif (filtri.rolesRis) {\n\n    let q = []\n    if (Array.isArray(filtri.rolesRis)) {\n        q = filtri.rolesRis\n    } else {\n        q.push(filtri.rolesRis)\n    }\n    rolesRisClause = \" and latestRoleRis in ( \" + q.map(l => '\"' + l + '\"') + \")\"\n}\n\nlet nationaltiesClause = \" \"\n\nif (filtri.nationalities) {\n\n    let q = []\n    if (Array.isArray(filtri.nationalities)) {\n        q = filtri.nationalities\n    } else {\n        q.push(filtri.nationalities)\n    }\n    nationaltiesClause = \" and nationality in ( \" + q.map(l => '\"' + l + '\"') + \")\"\n}\n\nlet playersClause = \" \"\n\nif (filtri.players) {\n\n    let q = []\n    if (Array.isArray(filtri.players)) {\n        q = filtri.players\n    } else {\n        q.push(filtri.players)\n    }\n\n    playersClause = \" and playerId in ( \" + q.map(l => '\"' + l + '\"') + \")\"\n}\n\nlet minAgeClause = \" \"\n\nif (filtri.minAge) {\n\n    minAgeClause = \" and age >= ( \" + filtri.minAge + \")\"\n}\n\nlet maxAgeClause = \" \"\n\nif (filtri.maxAge) {\n\n    maxAgeClause = \" and age <= ( \" + filtri.maxAge + \")\"\n}\n\n\nlet minFairSalaryClause = \" \"\n\nif (filtri.minFairSalary) {\n\n    minFairSalaryClause = \" and salaryPotential >= ( \" + filtri.minFairSalary + \")\"\n}\n\nlet maxFairSalaryClause = \" \"\n\nif (filtri.maxFairSalary) {\n\n    maxFairSalaryClause = \" and salaryPotential <= ( \" + filtri.maxFairSalary + \")\"\n}\n\nlet minFairPriceClause = \" \"\n\nif (filtri.minFairPrice) {\n\n    minFairSalaryClause = \" and potentialPrice >= ( \" + filtri.minFairPrice + \")\"\n}\n\nlet maxFairPricelause = \" \"\n\nif (filtri.maxFairPrice) {\n\n    maxFairPricelause = \" and potentialPrice <= ( \" + filtri.maxFairPrice + \")\"\n}\n\nlet minExpectedPriceClause = \" \"\n\nif (filtri.minExpectedPrice) {\n\n    minExpectedPriceClause = \" and expectedPrice >= ( \" + filtri.minExpectedPrice + \")\"\n}\n\nlet maxExpectedPriceClause = \" \"\n\nif (filtri.maxExpectedPrice) {\n\n    maxExpectedPriceClause = \" and expectedPrice <= ( \" + filtri.maxExpectedPrice + \")\"\n}\n\nlet minSalaryNetClause = \" \"\n\nif (filtri.minSalaryNet) {\n\n    minSalaryNetClause = \" and salaryNet >= ( \" + filtri.minSalaryNet + \")\"\n}\n\nlet maxSalaryNetClause = \" \"\n\nif (filtri.maxSalaryNet) {\n\n    maxExpectedPriceClause = \" and salaryNet <= ( \" + filtri.maxSalaryNet + \")\"\n}\n\nlet minEffectivenessClause = \" \"\n\nif (filtri.minEffectiveness) {\n\n    minEffectivenessClause = \" and effectiveness >= ( \" + filtri.minEffectiveness + \")\"\n}\n\nlet maxEffectivenessClause = \" \"\n\nif (filtri.maxEffectiveness) {\n\n    maxEffectivenessClause = \" and effectivness <= ( \" + filtri.maxEffectiveness + \")\"\n}\n\nlet minVolatilityClause = \" \"\n\nif (filtri.minVolatility) {\n\n    minVolatilityClause = \" and latestMicroVolatility >= ( \" + filtri.minVolatility + \")\"\n}\n\nlet maxVolatilityClause = \" \"\n\nif (filtri.maxVolatility) {\n\n    maxVolatilityClause = \" and latestMicroVolatility <= ( \" + filtri.maxVolatility + \")\"\n}\n\nlet dataSetQuery = \"select * from latestplayers_staging where 1=1\"\n    + leagueClusterClause\n    + leagueClause\n    + clubClusterClause\n    + clubsClause\n    + rolesClause\n    + rolesRisClause\n    + nationaltiesClause\n    + playersClause\n    + minAgeClause\n    + maxAgeClause\n    + minFairSalaryClause\n    + maxFairSalaryClause\n    + minFairPriceClause\n    + maxFairPricelause\n    + minExpectedPriceClause\n    + maxExpectedPriceClause\n    + minSalaryNetClause\n    + maxSalaryNetClause\n    + minEffectivenessClause\n    + maxEffectivenessClause\n    + minVolatilityClause\n    + maxVolatilityClause\n\nlet clubSetQuery = \"select * from latestclubs_staging where 1=1\"\n    + clusterClauseForClub\n\nlet clubWithQuery = \"clubFilter as ( \" + clubSetQuery + \" ) \"\n\nlet whithQuery = \"with filtered as ( \" + dataSetQuery + \" ), \"\n    + clubWithQuery\n\nlet statQuery =\n\n    \" select \"\n    // NUMERI ed ENTITA'\n    + \"\t(SELECT count(distinct currentLeagueId) FROM `filtered`) as numOfLeagues,\"\n    + \"\t(SELECT  GROUP_CONCAT(distinct currentLeagueId,';', currentLeagueName SEPARATOR ',') FROM `filtered`) as leagues,\"\n    + \"\t(SELECT count(distinct currentClubId) FROM `filtered`) as numOfClubs,\"\n    + \"\t(SELECT   CONCAT('id,name','\\r\\n',GROUP_CONCAT(distinct currentClubId,',', currentClubName SEPARATOR '\\r\\n'))  FROM `filtered`) as clubs,\"\n    + \"\t(SELECT @pnum:=count(distinct playerId) FROM `filtered`) as numOfPlayers,\"\n    + \"\t(SELECT @pnumex100:=count(distinct playerId) FROM `filtered` where minutes >= 100) as numOfPlayersExceed100Min,\"\n\n    //Foreign Players\n    + \"\t(SELECT @fpnam:=count(distinct playerId) FROM `filtered` where currentLeagueCountryCode <> nationalityCode) as numOfForeignPlayers,\"\n    + \"\t(SELECT @fpnamex100:=count(distinct playerId) FROM `filtered` where currentLeagueCountryCode <> nationalityCode and minutes >= 100) as numOfForeignPlayersExceed100Min,\"\n    + \"\t(@fpnam/@pnum)  as numOfForeignPlayersRatio,\"\n    + \"\t(@fpnamex100/@pnumex100)  as numOfForeignPlayersRatioExceed100Min,\"\n    + \"  (select nationalityCode from filtered where currentLeagueCountryCode <> nationalityCode GROUP BY nationalityCode order by count(nationalityCode) desc limit 1) as topExporter,\"\n    + \"  (select nationalityCode from filtered where currentLeagueCountryCode <> nationalityCode and minutes >= 100 GROUP BY nationalityCode order by count(nationalityCode) desc limit 1) as topExporterExceed100Min,\"\n    + \"  (select count(nationalityCode) from filtered where currentLeagueCountryCode <> nationalityCode GROUP BY nationalityCode order by count(nationalityCode) desc limit 1) as topExporterNum,\"\n    + \"  (select count(nationalityCode) from filtered where currentLeagueCountryCode <> nationalityCode and minutes >= 100 GROUP BY nationalityCode order by count(nationalityCode) desc limit 1) as topExporterNumExceed100Min,\"\n    + \"  (select currentLeagueCountryCode from filtered where currentLeagueCountryCode <> nationalityCode GROUP BY currentLeagueCountryCode order by count(currentLeagueCountryCode) desc limit 1) as topImporter,\"\n    + \"  (select currentLeagueCountryCode from filtered where currentLeagueCountryCode <> nationalityCode and minutes >= 100 GROUP BY currentLeagueCountryCode order by count(currentLeagueCountryCode) desc limit 1) as topImporterExceed100Min,\"\n    + \"  (select count(currentLeagueCountryCode) from filtered where currentLeagueCountryCode <> nationalityCode GROUP BY currentLeagueCountryCode order by count(currentLeagueCountryCode) desc limit 1) as topImporterNum,\"\n    + \"  (select count(currentLeagueCountryCode) from filtered where currentLeagueCountryCode <> nationalityCode and minutes >= 100 GROUP BY currentLeagueCountryCode order by count(currentLeagueCountryCode) desc limit 1) as topImporterNumExceed100Min,\"\n\n\n    // ETA'\n    + \"\t(select round(avg(age),2) from filtered) as avgAge, \"\n    + \"\t(select round(avg(age),2) from filtered where minutes >= 100) as avgAgeExceed100Min, \"\n    + \"\t(select @maxage:=max(age) from filtered) as maxAge,\"\n    + \"\t(select @maxageex100:=max(age) from filtered where minutes >= 100) as maxAgeExceed100Min,\"\n    + \"\t(select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where age=@maxage group by age) as playerMaxAge,\"\n    + \"\t(select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where age=@maxage and minutes >= 100 group by age) as playerMaxAgeExceed100Min,\"\n    + \"\t(select @minage:=min(age) from filtered ) as minAge, \"\n    + \"\t(select @minageex100:=min(age) from filtered where minutes >= 100) as minAgeExceed100Min, \"\n    + \"\t(select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where age=@minage) as playerMinAge,\"\n    + \"\t(select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where age=@minageex100) as playerMinAgeExceed100Min,\"\n    + \"  (select count(*) from filtered where age <= 20 ) as under20NumOfPlayers,\"\n    + \"  (select count(*) from filtered where age <= 20 and minutes >= 100) as under20NumOfPlayersExceed100Min,\"\n    + \"  (select count(*) from filtered where age <= 23 ) as under23NumOfPlayers,\"\n    + \"  (select count(*) from filtered where age <= 23 and minutes >= 100) as under23NumOfPlayersExceed100Min,\"\n    + \"  (select count(*) from filtered where age > 20 and age <= 30 ) as 20to30NumOfPlayers,\"\n    + \"  (select count(*) from filtered where age > 20 and age <= 30 and minutes >= 100) as 20to30NumOfPlayersExceed100Min,\"\n    + \"  (select count(*) from filtered where age > 30) as over30NumOfPlayers,\"\n    + \"  (select count(*) from filtered where age > 30 and minutes >= 100) as over30NumOfPlayersExceed100Min,\"\n\n    //  CONTRATTI \n    + \"\t(select @maxtmoc:=max(totalMonthsOfContract) from filtered) as maxTotalMonthsOfContract,\"\n    + \"\t(select @maxtmocex100:=max(totalMonthsOfContract) from filtered where minutes >= 100) as maxTotalMonthsOfContractExceed100Min,\"\n    + \"\t(select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where totalMonthsOfContract=@maxtmoc ) as playerMaxTotalMonthsOfContract,\"\n    + \"\t(select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where totalMonthsOfContract=@maxtmocex100 and minutes >= 100) as playerMaxTotalMonthsOfContractExceed100Min,\"\n    + \"  (select round(avg(totalMonthsOfContract),2) from filtered) as avgTotalMonthsOfContract,\"\n    + \"  (select round(avg(totalMonthsOfContract),2) from filtered where minutes >= 100) as avgTotalMonthsOfContractExceed100Min,\"\n    + \"  (select round(avg(remainingMonthsOfContract),2) from filtered) as avgRemainingMonthsOfContract,\"\n    + \"  (select round(avg(remainingMonthsOfContract),2) from filtered where minutes >= 100) as avgRemainingMonthsOfContractExceed100Min,\"\n    + \"  (select count(*) from filtered where remainingMonthsOfContract <  13 ) as playersWithExpiringContracts,\"\n    + \"  (select count(*) from filtered where remainingMonthsOfContract <  13 and minutes >= 100) as playersWithExpiringContractsExceed100Min,\"\n    + \"  (select count(*) from filtered where contractType NOT LIKE '%estito' ) as borrowedOrLoanedPlayers,\"\n    + \"  (select count(*) from filtered where contractType NOT LIKE '%estito' and minutes >= 100) as borrowedOrLoanedPlayersExceed100Min,\"\n    + \"  (select count(*) from filtered where nationalTeamPlayer = 1 ) as nationalTeamPlayers,\"\n    + \"  (select count(*) from filtered where nationalTeamPlayer = 1 and minutes >= 100) as nationalTeamPlayersExceed100Min,\"\n\n    //TRANSFER FEE\n    + \"\t(select @maxtf:=max(transferPrice) from filtered) as maxTransferPrice,\"\n    + \"\t(select @maxtfex100:=max(transferPrice) from filtered where minutes >= 100) as maxTransferPriceExceed100Min,\"\n    + \"\t(select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where transferPrice=@maxtf ) as playerMaxTransferPrice,\"\n    + \"\t(select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where transferPrice=@maxtfex100 and minutes >= 100) as playerMaxTransferPriceExceed100Min,\"\n    + \"\t(select round(avg(transferPrice),2) from filtered) as avgTransferPrice,\"\n    + \"\t(select round(avg(transferPrice),2) from filtered where minutes >= 100) as avgTransferPriceExceed100Min,\"\n    + \"\t(select round(sum(transferPrice),2) from filtered) as totalTransferPrice,\"\n    + \"\t(select round(sum(transferPrice),2) from filtered where minutes >= 100) as totalTransferPriceExceed100Min,\"\n\n    //POTENTIAL PRICE=FAIR PRICE\n    + \"  (select round(@maxpp:=max(potentialPrice),2) from filtered) as maxPotentialPrice,\"\n    + \"  (select round(@maxppex100:=max(potentialPrice),2) from filtered where minutes >= 100) as maxPotentialPriceExceed100Min,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxpp ) as playerMaxPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxppex100 and minutes >= 100 ) as playerMaxPotentialPriceExceed100Min,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered) as avgPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where minutes >= 100) as avgPotentialPriceExceed100Min,\"\n    + \"  (select round(sum(potentialPrice),2) from filtered) as totalPotentialPrice,\"\n    + \"  (select round(sum(potentialPrice),2) from filtered where minutes >= 100) as totalPotentialPriceExceed100Min,\"\n\n    //CLUB POTENTIAL PRICE\n    + \"  (select round(@maxpp:=max(potentialPrice),2) from clubFilter) as maxClubPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from clubFilter where potentialPrice=@maxpp ) as clubMaxPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from clubFilter) as avgClubPotentialPrice,\"\n    + \"  (select round(sum(potentialPrice),2) from clubFilter) as totalClubPotentialPrice,\"\n\n    //EXPECTED PRICE\n    + \"  (select round(@maxep:=max(expectedPrice),2) from filtered) as maxExpectedPrice,\"\n    + \"  (select round(@maxepex100:=max(expectedPrice),2) from filtered where minutes >= 100) as maxExpectedPriceExceed100Min,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where expectedPrice=@maxep ) as playerMaxExpectedPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where expectedPrice=@maxepex100 and minutes >= 100 ) as playerMaxExpectedPriceExceed100Min,\"\n    + \"  (select round(avg(expectedPrice),2) from filtered where minutes >= 100) as avgExpectedPriceExceed100Min,\"\n    + \"  (select round(sum(expectedPrice),2) from filtered) as totalExpectedPrice,\"\n    + \"  (select round(sum(expectedPrice),2) from filtered where minutes >= 100) as totalExpectedPriceExceed100Min,\"\n\n    //CLUB EXPECTED PRICE\n    + \"  (select round(@maxep:=max(expectedPrice),2) from clubFilter) as maxClubExpectedPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from clubFilter where expectedPrice=@maxep ) as clubMaxExpectedPrice,\"\n    + \"  (select round(avg(expectedPrice),2) from clubFilter) as avgClubExpectedPrice,\"\n    + \"  (select round(sum(expectedPrice),2) from clubFilter) as totalClubExpectedPrice,\"\n\n    //FAIR SALARY=SALARY POTENTIAL\n    + \"  (select round(@maxsp:=max(salaryPotential),2) from filtered) as maxSalaryPotential,\"\n    + \"  (select round(@maxspex100:=max(salaryPotential),2) from filtered where minutes >= 100) as maxSalaryPotentialExceed100Min,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where salaryPotential=@maxsp ) as playerMaxSalaryPotential,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where salaryPotential=@maxspex100 ) as playerMaxSalaryPotentialExceed100Min,\"\n    + \"  (select round(avg(salaryPotential),2) from filtered ) as avgSalaryPotential,\"\n    + \"  (select round(avg(salaryPotential),2) from filtered where minutes >= 100) as avgSalaryPotentialExceed100Min,\"\n    + \"  (select round(sum(salaryPotential),2) from filtered ) as totalSalaryPotential,\"\n    + \"  (select round(sum(salaryPotential),2) from filtered where minutes >= 100) as totalSalaryPotentialExceed100Min,\"\n\n\n    //SALARY NET = PRESUMED SALARY\n    + \"  (select round(@maxsn:=max(salaryNet),2) from filtered) as maxSalaryNet,\"\n    + \"  (select round(@maxsnex100:=max(salaryNet),2) from filtered where minutes >= 100) as maxSalaryNetExceed100Min,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where salaryNet=@maxsn ) as playerMaxSalaryNet,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where salaryNet=@maxsnex100 and minutes >= 100) as playerMaxSalaryNetExceed100Min,\"\n    + \"  (select round(avg(salaryNet),2) from filtered ) as avgSalaryNet,\"\n    + \"  (select round(avg(salaryNet),2) from filtered where minutes >= 100) as avgSalaryNetExceed100Min,\"\n    + \"  (select round(sum(salaryNet),2) from filtered ) as totalSalaryNet,\"\n    + \"  (select round(sum(salaryNet),2) from filtered where minutes >= 100) as totalSalaryNetExceed100Min,\"\n\n\n    // SALARY OPTIMAL\n    + \"  (select round(@maxso:=max(salaryOptimal),2) from filtered) as maxSalaryOptimal,\"\n    + \"  (select round(@maxsoex100:=max(salaryOptimal),2) from filtered where minutes >= 100) as maxSalaryOptimalExceed100Min,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where salaryOptimal=@maxso ) as playerMaxSalaryOptimal,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where salaryOptimal=@maxsoex100 and minutes >= 100) as playerMaxSalaryOptimalExceed100Min,\"\n    + \"  (select round(avg(salaryOptimal),2) from filtered ) as avgSalaryOptimal,\"\n    + \"  (select round(avg(salaryOptimal),2) from filtered where minutes >= 100) as avgSalaryOptimalExceed100Min,\"\n    + \"  (select round(sum(salaryOptimal),2) from filtered ) as totalSalaryOptimal,\"\n    + \"  (select round(sum(salaryOptimal),2) from filtered where minutes >= 100) as totalSalaryOptimalExceed100Min,\"\n\n    // RESIDUAL VALUE\n    + \"  (select round(@maxrv:=max(residualValue),2) from filtered) as maxResidualValue,\"\n    + \"  (select round(@maxrvex100:=max(residualValue),2) from filtered where minutes >= 100) as maxResidualValueExceed100Min,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where residualValue=@maxrv ) as playerMaxResidualValue,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where residualValue=@maxrvex100 and minutes >= 100) as playerMaxResidualValueExceed100Min,\"\n    + \"  (select round(avg(residualValue),2) from filtered ) as avgResidualValue,\"\n    + \"  (select round(avg(residualValue),2) from filtered where minutes >= 100) as avgResidualValueExceed100Min,\"\n    + \"  (select round(sum(residualValue),2) from filtered ) as totalResidualValue,\"\n    + \"  (select round(sum(residualValue),2) from filtered where minutes >= 100) as totalResidualValueExceed100Min,\"\n\n    // CLUB RESIDUAL VALUE\n    + \"  (select round(@maxrv:=max(residualValue),2) from clubFilter) as maxClubResidualValue,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from clubFilter where residualValue=@maxrv ) as clubMaxResidualValue,\"\n    + \"  (select round(avg(residualValue),2) from clubFilter ) as avgClubResidualValue,\"\n    + \"  (select round(sum(residualValue),2) from clubFilter ) as totalClubResidualValue,\"\n\n    // RESIDUAL BOOK VALUE\n    + \"  (select round(@maxrbv:=max(residualBookValue),2) from filtered) as maxResidualBookValue,\"\n    + \"  (select round(@maxrbvex100:=max(residualBookValue),2) from filtered where minutes >= 100) as maxResidualBookValueExceed100Min,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where residualBookValue=@maxrbv ) as playerMaxResidualBookValue,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where residualBookValue=@maxrbvex100 and minutes >= 100) as playerMaxResidualBookValueExceed100Min,\"\n    + \"  (select round(avg(residualBookValue),2) from filtered ) as avgResidualBookValue,\"\n    + \"  (select round(avg(residualBookValue),2) from filtered where minutes >= 100) as avgResidualBookValueExceed100Min,\"\n    + \"  (select round(sum(residualBookValue),2) from filtered ) as totalResidualBookValue,\"\n    + \"  (select round(sum(residualBookValue),2) from filtered where minutes >= 100) as totalResidualBookValueExceed100Min,\"\n\n\n    // EFFECTIVENESS\n    + \"  (select round(@maxef:=max(effectiveness),2) from filtered) as maxEffectiveness,\"\n    + \"  (select round(@maxefex100:=max(effectiveness),2) from filtered where minutes >= 100) as maxEffectivenessExceed100Min,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where effectiveness=@maxef ) as playerMaxEffectiveness,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where effectiveness=@maxefex100 and minutes >= 100) as playerMaxEffectivenessExceed100Min,\"\n    + \"  (select round(avg(effectiveness),2) from filtered ) as avgEffectiveness,\"\n    + \"  (select round(avg(effectiveness),2) from filtered where minutes >= 100) as avgEffectivenessExceed100Min,\"\n\n    // Performance\n    + \"  (select round(@maxperf:=max(performance),2) from filtered) as maxPerformance,\"\n    + \"  (select round(@maxperfex100:=max(performance),2) from filtered where minutes >= 100) as maxPerformanceExceed100Min,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where performance=@maxperf ) as playerMaxPerformance,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where performance=@maxperfex100 and minutes >= 100) as playerMaxPerformanceExceed100Min,\"\n    + \"  (select round(avg(performance),2) from filtered ) as avgPerformance,\"\n    + \"  (select round(avg(performance),2) from filtered where minutes >= 100) as avgPerformanceExceed100Min,\"\n\n    // UNIQUENESS\n    + \"  (select round(@maxuniq:=max(latestUniqueness),2) from filtered) as maxUniqueness,\"\n    + \"  (select round(@maxuniqex100:=max(latestUniqueness),2) from filtered where minutes >= 100) as maxUniquenessExceed100Min,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where latestUniqueness=@maxuniq ) as playerMaxUniqueness,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where latestUniqueness=@maxuniqex100  and minutes >= 100) as playerMaxUniquenessExceed100Min,\"\n    + \"  (select round(avg(latestUniqueness),2) from filtered ) as avgUniqueness,\"\n    + \"  (select round(avg(latestUniqueness),2) from filtered where minutes >= 100) as avgUniquenessExceed100Min,\"\n\n    // VOLATILITY\n    + \"  (select round(@maxvolatil:=max(latestMicroVolatility),2) from filtered) as maxVolatility,\"\n    + \"  (select round(@maxvolatilex100:=max(latestMicroVolatility),2) from filtered where minutes >= 100) as maxVolatilityExceed100Min,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where latestMicroVolatility=@maxvolatil ) as playerMaxVolatility,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where latestMicroVolatility=@maxvolatilex100 and minutes >= 100) as playerMaxVolatilityExceed100Min,\"\n    + \"  (select round(avg(latestMicroVolatility),2) from filtered ) as avgVolatility,\"\n    + \"  (select round(avg(latestMicroVolatility),2) from filtered where minutes >= 100) as avgVolatilityExceed100Min,\"\n\n    // CLUB VOLATILITY\n    + \"  (select round(@maxvolatil:=max(avgLatestMicroVolatility),2) from clubFilter) as maxClubVolatility,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from clubFilter where avgLatestMicroVolatility=@maxvolatil ) as clubMaxVolatility,\"\n    + \"  (select round(avg(avgLatestMicroVolatility),2) from clubFilter ) as avgClubVolatility,\"\n\n    // SUPERSTAR + POTENTIAL PRICE=FAIR PRICE\n    + \"  (select count(*) from filtered where superstar = 1 ) as numOfSuperstars,\"\n    + \"  (select count(*) from filtered where superstar = 1 and minutes >= 100 ) as numOfSuperstarsExceed100Min,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where superstar = 1 ) as superStars,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where superstar = 1 and minutes >= 100) as superStarsExceed100Min,\"\n    + \"  (select round(@maxsspp:=max(potentialPrice),2) from filtered where superstar = 1 ) as maxSuperStarPotentialPrice,\"\n    + \"  (select round(@maxssppex100:=max(potentialPrice),2) from filtered where superstar = 1 and minutes >= 100 ) as maxSuperStarPotentialPriceExceed100Min,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxsspp and superstar = 1 ) as playerSuperStarMaxPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxssppex100 and superstar = 1 and minutes >= 100) as playerSuperStarMaxPotentialPriceExceed100Min,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where superstar = 1 ) as avgSuperStarPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where superstar = 1 and minutes >= 100) as avgSuperStarPotentialPriceExceed100Min,\"\n\n    // RISINGSTAR + POTENTIAL PRICE=FAIR PRICE\n    + \"  (select count(*) from filtered where risingStar = 1 ) as numOfRisingStars,\"\n    + \"  (select count(*) from filtered where risingStar = 1 and minutes >= 100 ) as numOfRisingStarsExceed100Min,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where risingStar = 1 ) as risingStars,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where risingStar = 1 and minutes >= 100 ) as risingStarsExceed100Min,\"\n    + \"  (select round(@maxrspp:=max(potentialPrice),2) from filtered where risingStar = 1 ) as maxRisingStarPotentialPrice,\"\n    + \"  (select round(@maxrsppex100:=max(potentialPrice),2) from filtered where risingStar = 1 and minutes >= 100 ) as maxRisingStarPotentialPriceExceed100Min,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxrspp and risingStar = 1 ) as playerRisingStarMaxPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxrsppex100 and risingStar = 1 and minutes >= 100 ) as playerRisingStarMaxPotentialPriceExceed100Min,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where risingStar = 1 ) as avgRisingStarPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where risingStar = 1 and minutes >= 100 ) as avgRisingStarPotentialPriceExceed100Min,\"\n\n    // OVERPERFORMES + POTENTIAL PRICE=FAIR PRICE\n    + \"  (select count(*) from filtered where emerging = 1 ) as numOfOverperformers,\"\n    + \"  (select count(*) from filtered where emerging = 1 and minutes >= 100) as numOfOverperformersExceed100Min,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where emerging = 1 ) as overperformers,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where emerging = 1 and minutes >= 100 ) as overperformersExceed100Min,\"\n    + \"  (select round(@maxepp:=max(potentialPrice),2) from filtered where emerging = 1 ) as maxOverperformerPotentialPrice,\"\n    + \"  (select round(@maxeppEX100:=max(potentialPrice),2) from filtered where emerging = 1 and minutes >= 100 ) as maxOverperformerPotentialPriceExceed100Min,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxepp and emerging = 1 ) as playerOverperformerMaxPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxeppEX100 and emerging = 1 and minutes >= 100) as playerOverperformerMaxPotentialPriceExceed100Min,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where emerging = 1 ) as avgOverperformerPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where emerging = 1 and minutes >= 100 ) as avgOverperformerPotentialPriceExceed100Min,\"\n\n    // REGULARS + POTENTIAL PRICE=FAIR PRICE\n    + \"  (select count(*) from filtered where superstar = 0 and risingStar = 0  and emerging = 0 ) as numOfRegulars,\"\n    + \"  (select count(*) from filtered where superstar = 0 and risingStar = 0  and emerging = 0 and minutes >= 100 ) as numOfRegularsExceed100Min,\"\n    + \"  (select round(@maxregpp:=max(potentialPrice),2) from filtered where superstar = 0 and risingStar = 0  and emerging = 0  ) as maxRegularPotentialPrice,\"\n    + \"  (select round(@maxregppex100:=max(potentialPrice),2) from filtered where superstar = 0 and risingStar = 0  and emerging = 0 and minutes >= 100 ) as maxRegularPotentialPriceExceed100Min,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxregpp and superstar = 0 and risingStar = 0  and emerging = 0  ) as playerRegularMaxPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxregppex100 and superstar = 0 and risingStar = 0  and emerging = 0 and minutes >= 100 ) as playerRegularMaxPotentialPriceExceed100Min,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where superstar = 0 and risingStar = 0  and emerging = 0  ) as avgRegularPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where superstar = 0 and risingStar = 0  and emerging = 0 and minutes >= 100 ) as avgRegularPotentialPriceExceed100Min,\"\n\n    // GOALKEEPERS + POTENTIAL PRICE=FAIR PRICE\n    + \"  (select count(*) from filtered where latestRoleRis = 'Goalkeeper' ) as numOfGoalkeepers,\"\n    + \"  (select count(*) from filtered where latestRoleRis = 'Goalkeeper' and minutes >= 100 ) as numOfGoalkeepersExceed100Min,\"\n    + \"  (select round(@maxgkpp:=max(potentialPrice),2) from filtered where  latestRoleRis = 'Goalkeeper' ) as maxGoalkeeperPotentialPrice,\"\n    + \"  (select round(@maxgkppex100:=max(potentialPrice),2) from filtered where  latestRoleRis = 'Goalkeeper' and minutes >= 100 ) as maxGoalkeeperPotentialPriceExceed100Min,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxgkpp and  latestRoleRis = 'Goalkeeper' ) as playerGoalkeeperMaxPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxgkppex100 and  latestRoleRis = 'Goalkeeper' and minutes >= 100 ) as playerGoalkeeperMaxPotentialPriceExceed100Min,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where  latestRoleRis = 'Goalkeeper' ) as avgGoalkeeperPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where  latestRoleRis = 'Goalkeeper' and minutes >= 100 ) as avgGoalkeeperPotentialPriceExceed100Min,\"\n\n    // Defender + POTENTIAL PRICE=FAIR PRICE\n    + \"  (select count(*) from filtered where latestRoleRis = 'Defender' ) as numOfDefenders,\"\n    + \"  (select count(*) from filtered where latestRoleRis = 'Defender' and minutes >= 100 ) as numOfDefendersExceed100Min,\"\n    + \"  (select round(@maxdefpp:=max(potentialPrice),2) from filtered where  latestRoleRis = 'Defender' ) as maxDefenderPotentialPrice,\"\n    + \"  (select round(@maxdefppex100:=max(potentialPrice),2) from filtered where  latestRoleRis = 'Defender' and minutes >= 100 ) as maxDefenderPotentialPriceExceed100Min,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxdefpp and  latestRoleRis = 'Defender' ) as playerDefenderMaxPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxdefppex100 and  latestRoleRis = 'Defender' and minutes >= 100 ) as playerDefenderMaxPotentialPriceExceed100Min,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where  latestRoleRis = 'Defender' ) as avgDefenderPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where  latestRoleRis = 'Defender' and minutes >= 100 ) as avgDefenderPotentialPriceExceed100Min,\"\n\n    // Midfielder + POTENTIAL PRICE=FAIR PRICE\n    + \"  (select count(*) from filtered where latestRoleRis = 'Midfielder' ) as numOfMidfielders,\"\n    + \"  (select count(*) from filtered where latestRoleRis = 'Midfielder'  and minutes >= 100 ) as numOfMidfieldersExceed100Min,\"\n    + \"  (select round(@maxmidfpp:=max(potentialPrice),2) from filtered where  latestRoleRis = 'Midfielder' ) as maxMidfielderPotentialPrice,\"\n    + \"  (select round(@maxmidfppex100:=max(potentialPrice),2) from filtered where  latestRoleRis = 'Midfielder' and minutes >= 100 ) as maxMidfielderPotentialPriceExceed100Min,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxmidfpp and  latestRoleRis = 'Midfielder' ) as playerMidfielderMaxPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxmidfppex100 and  latestRoleRis = 'Midfielder'  and minutes >= 100 ) as playerMidfielderMaxPotentialPriceExceed100Min,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where  latestRoleRis = 'Midfielder' ) as avgMidfielderPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where  latestRoleRis = 'Midfielder' and minutes >= 100 ) as avgMidfielderPotentialPriceExceed100Min,\"\n\n    // Attacker + POTENTIAL PRICE=FAIR PRICE\n    + \"  (select count(*) from filtered where latestRoleRis = 'Attacker' ) as numOfAttackers,\"\n    + \"  (select count(*) from filtered where latestRoleRis = 'Attacker' and minutes >= 100 ) as numOfAttackersExceed100Min,\"\n    + \"  (select round(@maxattpp:=max(potentialPrice),2) from filtered where  latestRoleRis = 'Attacker' ) as maxAttackerPotentialPrice,\"\n    + \"  (select round(@maxattpp:=max(potentialPrice),2) from filtered where  latestRoleRis = 'Attacker'  and minutes >= 100 ) as maxAttackerPotentialPriceExceed100Min,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxattpp and  latestRoleRis = 'Attacker' ) as playerAttackerMaxPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxattppex100 and  latestRoleRis = 'Attacker' and minutes >= 100 ) as playerAttackerMaxPotentialPriceExceed100Min,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where  latestRoleRis = 'Attacker' ) as avgAttackerPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where  latestRoleRis = 'Attacker' and minutes >= 100 ) as avgAttackerPotentialPriceExceed100Min,\"\n\n\n    // REVENUES\n    + \"  (select round(@maxrev:=max(revenues),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered) ) as maxRevenues,\"\n    + \"  (select round(@maxrevex100:=max(revenues),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered where minutes >= 100) ) as maxRevenuesExceed100Min,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from latestclubs_staging where revenues=@maxrev and clubId in (select distinct @clubSet:=currentClubId from filtered) ) as clubMaxRevenues,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from latestclubs_staging where revenues=@maxrevex100 and clubId in (select distinct @clubSet:=currentClubId from filtered where minutes >= 100) ) as clubMaxRevenuesExceed100Min,\"\n    + \"  (select round(@minrev:=min(revenues),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered) ) as minRevenues,\"\n    + \"  (select round(@minrevex100:=min(revenues),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered where minutes >= 100) ) as minRevenuesExceed100Min,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from latestclubs_staging where revenues=@minrev and clubId in (select distinct @clubSet:=currentClubId from filtered) ) as clubMinRevenues,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from latestclubs_staging where revenues=@minrevex100 and clubId in (select distinct @clubSet:=currentClubId from filtered where minutes >= 100) ) as clubMinRevenuesExceed100Min,\"\n    + \"  (select round(avg(revenues),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered) ) as avgRevenues,\"\n    + \"  (select round(avg(revenues),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered where minutes >= 100 ) ) as avgRevenuesExceed100Min,\"\n\n    // PORTFOLIO\n    + \"  (select round(@maxportcost:=max(portfolioCost),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered) ) as maxPortfolioCost,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from latestclubs_staging where portfolioCost=@maxportcost and clubId in (select distinct @clubSet:=currentClubId from filtered) ) as clubMaxPortfolioCost,\"\n    + \"  (select round(@minportcost:=min(portfolioCost),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered) ) as minPortfolioCost,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from latestclubs_staging where portfolioCost=@minportcost and clubId in (select distinct @clubSet:=currentClubId from filtered) ) as clubMinPortfolioCost,\"\n    + \"  (select round(avg(portfolioCost),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered) ) as avgPortfolioCost,\"\n    + \"  (select round(sum(portfolioCost),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered) ) as totalPortfolioCost\"\n\n    + \" from dual;\"\n\n\nmsg.topic = whithQuery + statQuery\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 1020,
        "wires": [
            [
                "d17d85930a9b2c84"
            ]
        ]
    },
    {
        "id": "d17d85930a9b2c84",
        "type": "mysql",
        "z": "c7a1f882aac10d26",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 1040,
        "y": 1020,
        "wires": [
            [
                "bbb1f763e53b38f5"
            ]
        ]
    },
    {
        "id": "be88c10ff4f69899",
        "type": "http response",
        "z": "c7a1f882aac10d26",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1550,
        "y": 1020,
        "wires": []
    },
    {
        "id": "bbb1f763e53b38f5",
        "type": "function",
        "z": "c7a1f882aac10d26",
        "name": "From array to object",
        "func": "msg.payload=msg.payload[0]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1340,
        "y": 1020,
        "wires": [
            [
                "be88c10ff4f69899"
            ]
        ]
    },
    {
        "id": "1321747f6baaecd9",
        "type": "inject",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 180,
        "wires": [
            [
                "ef1fa29c82226b79"
            ]
        ]
    },
    {
        "id": "b3db670ae7e9246a",
        "type": "function",
        "z": "fe8bd8efceb20d5b",
        "name": "Insert builder",
        "func": "let obj = msg.payload;\n\nlet keysArr = [];\n\nlet topic = \"INSERT INTO capology_leagues ( country_id, name, id, transfermarkt_id, code, fbref_id, currency_id)\"\n\n\nlet values = \" VALUES \"\n\n\nobj.forEach( entry => {\n    let entryValues = \"( \"\n    \n        entryValues = entryValues +\"'\"+entry[\"country_id\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"name\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"id\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"transfermarkt_id\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"code\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"fbref_id\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"currency_id\"]+\"' ),\"\n\n        values = values + entryValues\n    \n    \n})\n\nvalues = values.slice(0,-1)\n\n\n\nmsg.topic = topic + values;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 180,
        "wires": [
            [
                "ef3111abe15e1e89"
            ]
        ]
    },
    {
        "id": "ef3111abe15e1e89",
        "type": "mysql",
        "z": "fe8bd8efceb20d5b",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 1220,
        "y": 180,
        "wires": [
            [
                "28be83dea8a78896"
            ]
        ]
    },
    {
        "id": "28be83dea8a78896",
        "type": "debug",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 180,
        "wires": []
    },
    {
        "id": "ef1fa29c82226b79",
        "type": "function",
        "z": "fe8bd8efceb20d5b",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['x-api-key'] = '0e72210681854a94b0b36897ddd15365';\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 180,
        "wires": [
            [
                "613bc874b584d674"
            ]
        ]
    },
    {
        "id": "613bc874b584d674",
        "type": "http request",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://www.capology.com/api/v2/leagues/",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 550,
        "y": 180,
        "wires": [
            [
                "590621182efc9ce0"
            ]
        ]
    },
    {
        "id": "590621182efc9ce0",
        "type": "json",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 730,
        "y": 180,
        "wires": [
            [
                "b3db670ae7e9246a"
            ]
        ]
    },
    {
        "id": "8466f948d948ec59",
        "type": "comment",
        "z": "fe8bd8efceb20d5b",
        "name": "CAPOLOGY LEAGUES",
        "info": "",
        "x": 220,
        "y": 120,
        "wires": []
    },
    {
        "id": "ae6310ca6436c86e",
        "type": "inject",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 340,
        "wires": [
            [
                "36613edf19e1aa8f"
            ]
        ]
    },
    {
        "id": "7006a23b220b0c72",
        "type": "function",
        "z": "fe8bd8efceb20d5b",
        "name": "Insert builder",
        "func": "let obj = msg.payload;\n\nlet keysArr = [];\n\nlet topic = \"INSERT INTO capology_clubs ( season_id, country_id, league_id, id, code, fbref_id, name,transfermarkt_id )\"\n\n\nlet values = \" VALUES \"\n\n const regex = /'/g;\n \nobj.forEach( entry => {\n    \n    \n    let seasonId = entry[\"season_id\"] && entry[\"season_id\"] !== undefined ? entry[\"season_id\"] : null\n    let leagueId = entry[\"league_id\"] && entry[\"league_id\"] !== undefined ? entry[\"league_id\"] : null\n    \n    \n    \n\n       entry[\"name\"] = (entry[\"name\"] && entry[\"name\"] !== undefined) ? entry[\"name\"].replace(regex, \"'\"+\"'\") : entry[\"name\"]\n\n    let entryValues = \"( \"\n    \n        entryValues = entryValues +\"'\"+entry[\"season_id\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"country_id\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"league_id\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"id\"]+\"' ,\"\n        \n        entryValues = entryValues +\"'\"+entry[\"code\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"fbref_id\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"name\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"transfermarkt_id\"]+\"') ,\"\n\n        values = values + entryValues\n    \n    \n})\n\nvalues = values.slice(0,-1)\n\n\n\nmsg.topic = topic + values;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 340,
        "wires": [
            [
                "d1a630fe6359f4b8"
            ]
        ]
    },
    {
        "id": "d1a630fe6359f4b8",
        "type": "mysql",
        "z": "fe8bd8efceb20d5b",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 1220,
        "y": 340,
        "wires": [
            [
                "9c053cac409b650e"
            ]
        ]
    },
    {
        "id": "9c053cac409b650e",
        "type": "debug",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 340,
        "wires": []
    },
    {
        "id": "36613edf19e1aa8f",
        "type": "function",
        "z": "fe8bd8efceb20d5b",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['x-api-key'] = '0e72210681854a94b0b36897ddd15365';\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 340,
        "wires": [
            [
                "50b9e15af21eec94"
            ]
        ]
    },
    {
        "id": "50b9e15af21eec94",
        "type": "http request",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://www.capology.com/api/v2/clubs/",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 550,
        "y": 340,
        "wires": [
            [
                "ba0927e391055733"
            ]
        ]
    },
    {
        "id": "ba0927e391055733",
        "type": "json",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 730,
        "y": 340,
        "wires": [
            [
                "7006a23b220b0c72"
            ]
        ]
    },
    {
        "id": "2b963642a9781e39",
        "type": "comment",
        "z": "fe8bd8efceb20d5b",
        "name": "CAPOLOGY CLUBS",
        "info": "",
        "x": 210,
        "y": 280,
        "wires": []
    },
    {
        "id": "7113adce4014d274",
        "type": "inject",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 520,
        "wires": [
            [
                "512f57db793b45b1"
            ]
        ]
    },
    {
        "id": "de4ec222e9e916c7",
        "type": "function",
        "z": "fe8bd8efceb20d5b",
        "name": "Insert builder",
        "func": "let obj = msg.payload;\n\nlet keysArr = [];\n\nlet sample =\n\n{\n        \"name\": \"Nicolò Napoli\",\n        \"position_code\": \"D\",\n        \"id\": \"nicolo-napoli-22684\",\n        \"first_name\": \"Nicolò\",\n        \"second_name\": null,\n        \"third_name\": null,\n        \"last_name\": \"Napoli\",\n        \"dob\": \"1962-02-07\",\n        \"nationality\": \"Italy\",\n        \"nationality_id\": \"italy\",\n        \"transfermarkt_id\": 223352,\n        \"opta_id\": null,\n        \"fbref_id\": null,\n        \"statsbomb_id\": null\n    }\n    \nlet topic = \"INSERT INTO capology_players ( name, position_code, id, first_name, second_name, third_name, last_name,dob, nationality, nationality_id, transfermarkt_id, opta_id, fbref_id, statsbomb_id )\"\n\n\nlet values = \" VALUES \"\n\n const regex = /'/g;\n \nobj.forEach( entry => {\n    \n    \n    let seasonId = entry[\"season_id\"] && entry[\"season_id\"] !== undefined ? entry[\"season_id\"] : null\n    let leagueId = entry[\"league_id\"] && entry[\"league_id\"] !== undefined ? entry[\"league_id\"] : null\n    \n    \n    \n\n    entry[\"name\"] = (entry[\"name\"] && entry[\"name\"] !== undefined) ? entry[\"name\"].replace(regex, \"'\"+\"'\") : entry[\"name\"]\n    entry[\"first_name\"] = (entry[\"first_name\"] && entry[\"first_name\"] !== undefined) ? entry[\"first_name\"].replace(regex, \"'\"+\"'\") : entry[\"first_name\"]\n    entry[\"second_name\"] = (entry[\"second_name\"] && entry[\"second_name\"] !== undefined) ? entry[\"second_name\"].replace(regex, \"'\"+\"'\") : entry[\"second_name\"]\n    entry[\"third_name\"] = (entry[\"third_name\"] && entry[\"third_name\"] !== undefined) ? entry[\"third_name\"].replace(regex, \"'\"+\"'\") : entry[\"third_name\"]\n        entry[\"last_name\"] = (entry[\"last_name\"] && entry[\"last_name\"] !== undefined) ? entry[\"last_name\"].replace(regex, \"'\"+\"'\") : entry[\"last_name\"]\n\n    \n    entry[\"nationality\"] = (entry[\"nationality\"] && entry[\"nationality\"] !== undefined) ? entry[\"nationality\"].replace(regex, \"'\"+\"'\") : entry[\"nationality\"]\n\n\n\n    let entryValues = \"( \"\n    \n        entryValues = entryValues +\"'\"+entry[\"name\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"position_code\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"id\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"first_name\"]+\"' ,\"\n        \n        entryValues = entryValues +\"'\"+entry[\"second_name\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"third_name\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"last_name\"]+\"' ,\"\n        entryValues = entry[\"dob\"] ? entryValues +\"STR_TO_DATE('\"+entry[\"dob\"].slice(0, 10)+\"','%Y-%m-%d'),\" : entryValues + \"null ,\"\n        \n        entryValues = entryValues +\"'\"+entry[\"nationality\"]+\"',\"\n        entryValues = entryValues +\"'\"+entry[\"nationality_id\"]+\"',\"\n        entryValues = entryValues +\"'\"+entry[\"transfermarkt_id\"]+\"',\"\n        entryValues = entryValues +\"'\"+entry[\"opta_id\"]+\"',\"\n        entryValues = entryValues +\"'\"+entry[\"fbref_id\"]+\"',\"\n        entryValues = entryValues +\"'\"+entry[\"statsbomb_id\"]+\"') ,\"\n\n        values = values + entryValues\n    \n    \n})\n\nvalues = values.slice(0,-1)\n\n\n\nmsg.topic = topic + values;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 520,
        "wires": [
            [
                "1a0a800887165de0"
            ]
        ]
    },
    {
        "id": "1a0a800887165de0",
        "type": "mysql",
        "z": "fe8bd8efceb20d5b",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 1220,
        "y": 520,
        "wires": [
            [
                "2bf8456d53e43257"
            ]
        ]
    },
    {
        "id": "2bf8456d53e43257",
        "type": "debug",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1470,
        "y": 520,
        "wires": []
    },
    {
        "id": "512f57db793b45b1",
        "type": "function",
        "z": "fe8bd8efceb20d5b",
        "name": "set headers",
        "func": "msg.headers = {};\nmsg.headers['x-api-key'] = '0e72210681854a94b0b36897ddd15365';\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 520,
        "wires": [
            [
                "d608c0462e372d57"
            ]
        ]
    },
    {
        "id": "d608c0462e372d57",
        "type": "http request",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://www.capology.com/api/v2/players/soccer/",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 550,
        "y": 520,
        "wires": [
            [
                "e3746de3ee6717b8"
            ]
        ]
    },
    {
        "id": "e3746de3ee6717b8",
        "type": "json",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 730,
        "y": 520,
        "wires": [
            [
                "de4ec222e9e916c7"
            ]
        ]
    },
    {
        "id": "793673bb5a4bae80",
        "type": "comment",
        "z": "fe8bd8efceb20d5b",
        "name": "CAPOLOGY PLAYERS",
        "info": "",
        "x": 220,
        "y": 460,
        "wires": []
    },
    {
        "id": "8bad9f8251c007c2",
        "type": "debug",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 2040,
        "wires": []
    },
    {
        "id": "0b2b60bc343c96c4",
        "type": "function",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "func": "let conctract = {\n        \"season_id\": \"2022-2023\",\n        \"season_term\": \"summer\",\n        \"league_name\": \"Ligue 1\",\n        \"league_id\": \"ligue-1\",\n        \"country_id\": \"fr\",\n        \"club_name\": \"Nice\",\n        \"club_id\": \"nice\",\n        \"player_name\": \"Aaron Ramsey\",\n        \"player_id\": \"aaron-ramsey-33233\",\n        \"player_age\": 31,\n        \"player_dob\": \"1990-12-26\",\n        \"player_number\": 16,\n        \"player_country\": \"Wales\",\n        \"player_country_id\": \"wales\",\n        \"player_position\": \"Central Midfield\",\n        \"player_position_code\": \"CM\",\n        \"player_group\": \"Midfield\",\n        \"player_group_code\": \"M\",\n        \"player_status\": \"Reserve\",\n        \"player_active\": true,\n        \"player_verified\": false,\n        \"contract_release\": 0,\n        \"contract_total_gross\": 5450000,\n        \"contract_total_net\": 3000000,\n        \"contract_expiration\": \"2023-06-30\",\n        \"contract_years\": 1,\n        \"salary_gross_y1\": 5450000,\n        \"salary_gross_y2\": 0,\n        \"salary_gross_y3\": 0,\n        \"salary_gross_y4\": 0,\n        \"salary_gross_y5\": 0,\n        \"salary_gross_y6\": 0,\n        \"salary_gross_y7\": 0,\n        \"salary_net_y1\": 3000000,\n        \"salary_net_y2\": 0,\n        \"salary_net_y3\": 0,\n        \"salary_net_y4\": 0,\n        \"salary_net_y5\": 0,\n        \"salary_net_y6\": 0,\n        \"salary_net_y7\": 0,\n        \"salary_currency\": \"EUR\",\n        \"salary_symbol\": \"€\",\n        \"contract_release_eur\": 0,\n        \"contract_total_gross_eur\": 5450000,\n        \"contract_total_net_eur\": 3000000,\n        \"salary_gross_y1_eur\": 5450000,\n        \"salary_gross_y2_eur\": 0,\n        \"salary_gross_y3_eur\": 0,\n        \"salary_gross_y4_eur\": 0,\n        \"salary_gross_y5_eur\": 0,\n        \"salary_gross_y6_eur\": 0,\n        \"salary_gross_y7_eur\": 0,\n        \"salary_net_y1_eur\": 3000000,\n        \"salary_net_y2_eur\": 0,\n        \"salary_net_y3_eur\": 0,\n        \"salary_net_y4_eur\": 0,\n        \"salary_net_y5_eur\": 0,\n        \"salary_net_y6_eur\": 0,\n        \"salary_net_y7_eur\": 0,\n        \"contract_release_gbp\": 0,\n        \"contract_total_gross_gbp\": 4728987,\n        \"contract_total_net_gbp\": 2603112,\n        \"salary_gross_y1_gbp\": 4728987,\n        \"salary_gross_y2_gbp\": 0,\n        \"salary_gross_y3_gbp\": 0,\n        \"salary_gross_y4_gbp\": 0,\n        \"salary_gross_y5_gbp\": 0,\n        \"salary_gross_y6_gbp\": 0,\n        \"salary_gross_y7_gbp\": 0,\n        \"salary_net_y1_gbp\": 2603112,\n        \"salary_net_y2_gbp\": 0,\n        \"salary_net_y3_gbp\": 0,\n        \"salary_net_y4_gbp\": 0,\n        \"salary_net_y5_gbp\": 0,\n        \"salary_net_y6_gbp\": 0,\n        \"salary_net_y7_gbp\": 0,\n        \"contract_release_usd\": 0,\n        \"contract_total_gross_usd\": 5354971,\n        \"contract_total_net_usd\": 2947690,\n        \"salary_gross_y1_usd\": 5354971,\n        \"salary_gross_y2_usd\": 0,\n        \"salary_gross_y3_usd\": 0,\n        \"salary_gross_y4_usd\": 0,\n        \"salary_gross_y5_usd\": 0,\n        \"salary_gross_y6_usd\": 0,\n        \"salary_gross_y7_usd\": 0,\n        \"salary_net_y1_usd\": 2947690,\n        \"salary_net_y2_usd\": 0,\n        \"salary_net_y3_usd\": 0,\n        \"salary_net_y4_usd\": 0,\n        \"salary_net_y5_usd\": 0,\n        \"salary_net_y6_usd\": 0,\n        \"salary_net_y7_usd\": 0,\n        \"id\": 1021,\n        \"salary_gross\": 5450000,\n        \"salary_net\": 3000000,\n        \"bonus_gross\": 0,\n        \"bonus_net\": 0,\n        \"adjusted_gross_eur\": 5450000,\n        \"adjusted_net_eur\": 3000000,\n        \"adjusted_gross_gbp\": 4728987,\n        \"adjusted_net_gbp\": 2603112,\n        \"adjusted_gross_usd\": 5354971,\n        \"adjusted_net_usd\": 2947690,\n        \"salary_gross_eur\": 5450000,\n        \"salary_net_eur\": 3000000,\n        \"bonus_gross_eur\": 0,\n        \"bonus_net_eur\": 0,\n        \"salary_gross_gbp\": 4728987,\n        \"salary_net_gbp\": 2603112,\n        \"bonus_gross_gbp\": 0,\n        \"bonus_net_gbp\": 0,\n        \"salary_gross_usd\": 5354971,\n        \"salary_net_usd\": 2947690,\n        \"bonus_gross_usd\": 0,\n        \"bonus_net_usd\": 0\n    }\n    \nlet create = \"CREATE TABLE `capology_contracts` (\"    \n\n\nObject.keys(conctract).forEach( k => {\n  \n    let column =\"\";\n    let colName = \"'\"+k+\"'\" \n    let colType = \"\";\n    \n    if (typeof conctract[k] === \"string\" ) {\n        \n        colType = \" varchar(255) DEFAULT NULL,\"\n        \n    } else if (typeof conctract[k] === \"number\")  {\n         colType = \" int(18) DEFAULT NULL,\"\n    } else if (typeof conctract[k] === \"boolean\")  {\n         colType = \" tinyint(1) DEFAULT NULL,\"\n    }\n    \n    column = colName + colType\n    \n    create = create + column\n    \n    \n} )\n\ncreate.slice(0,-1) //rimuovo l'ultima viroga\n\ncreate = create + \")\"\n    msg.payload = create;\n    msg.topic = create; \nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 2040,
        "wires": [
            [
                "8bad9f8251c007c2",
                "160f2f59912a9b64"
            ]
        ]
    },
    {
        "id": "d564ab1793dff415",
        "type": "inject",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 920,
        "y": 2040,
        "wires": [
            [
                "0b2b60bc343c96c4"
            ]
        ]
    },
    {
        "id": "160f2f59912a9b64",
        "type": "mysql",
        "z": "fe8bd8efceb20d5b",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 1300,
        "y": 2160,
        "wires": [
            [
                "8bad9f8251c007c2"
            ]
        ]
    },
    {
        "id": "e46467b9cb016383",
        "type": "inject",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select cl.id, cl.country_id, (select max(run) from capology_contracts) as run from capology_leagues cl",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 720,
        "wires": [
            [
                "c86c44c1df76a0e4"
            ]
        ]
    },
    {
        "id": "89f1f0ac8071a64d",
        "type": "function",
        "z": "fe8bd8efceb20d5b",
        "name": "Insert builder",
        "func": "let contracts = msg.payload;\n\n\n\nfunction padTo2Digits(num) {\n  return num.toString().padStart(2, '0');\n}\n\nfunction formatDate(date) {\n  return [\n    padTo2Digits(date.getDate()),\n    padTo2Digits(date.getMonth() + 1),\n    date.getFullYear(),\n  ].join('/');\n}\n\nlet today = formatDate(new Date())\nlet topic = \"INSERT INTO capology_contracts ( run, update_date, \"\nlet kArr = []\nObject.keys(contracts[0]).forEach( k => {\n    \n        topic = topic + ' '+k+\",\"\n    \n        kArr.push(k)\n})\n\ntopic = topic.slice(0,-1)\ntopic = topic + \")\"\n\n\n\nlet values = \" VALUES \"\n\nconst regex = /'/g;\n\n\ncontracts.forEach( c => {\n    \n    \n    let cValues = \" ( \"+msg.run+\", STR_TO_DATE('\"+today.toString()+\"','%d/%m/%Y'), \" ;\n    \n    \n    kArr.forEach( k => {\n        \n        let value;\n    \n    if (typeof c[k] === \"string\" ) {\n        \n        let s = c[k].replace(/'/g, \"'\"+\"'\")\n        value = '\"'+s+'\"'\n        \n    } else {\n        value = c[k]\n    }\n    \n        \n        cValues = cValues + value +\" ,\"\n        \n    })\n    \n    cValues = cValues.slice(0,-1);\n    cValues = cValues + \" ),\"\n    \n    values = values +cValues;\n    \n})\n\nvalues = values.slice(0,-1);\n /*\nobj.forEach( entry => {\n    \n    \n    let seasonId = entry[\"season_id\"] && entry[\"season_id\"] !== undefined ? entry[\"season_id\"] : null\n    let leagueId = entry[\"league_id\"] && entry[\"league_id\"] !== undefined ? entry[\"league_id\"] : null\n    \n    \n    \n\n    entry[\"name\"] = (entry[\"name\"] && entry[\"name\"] !== undefined) ? entry[\"name\"].replace(regex, \"'\"+\"'\") : entry[\"name\"]\n    entry[\"first_name\"] = (entry[\"first_name\"] && entry[\"first_name\"] !== undefined) ? entry[\"first_name\"].replace(regex, \"'\"+\"'\") : entry[\"first_name\"]\n    entry[\"second_name\"] = (entry[\"second_name\"] && entry[\"second_name\"] !== undefined) ? entry[\"second_name\"].replace(regex, \"'\"+\"'\") : entry[\"second_name\"]\n    entry[\"third_name\"] = (entry[\"third_name\"] && entry[\"third_name\"] !== undefined) ? entry[\"third_name\"].replace(regex, \"'\"+\"'\") : entry[\"third_name\"]\n        entry[\"last_name\"] = (entry[\"last_name\"] && entry[\"last_name\"] !== undefined) ? entry[\"last_name\"].replace(regex, \"'\"+\"'\") : entry[\"last_name\"]\n\n    \n    entry[\"nationality\"] = (entry[\"nationality\"] && entry[\"nationality\"] !== undefined) ? entry[\"nationality\"].replace(regex, \"'\"+\"'\") : entry[\"nationality\"]\n\n\n\n    let entryValues = \"( \"\n    \n        entryValues = entryValues +\"'\"+entry[\"name\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"position_code\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"id\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"first_name\"]+\"' ,\"\n        \n        entryValues = entryValues +\"'\"+entry[\"second_name\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"third_name\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"last_name\"]+\"' ,\"\n        entryValues = entry[\"dob\"] ? entryValues +\"STR_TO_DATE('\"+entry[\"dob\"].slice(0, 10)+\"','%Y-%m-%d'),\" : entryValues + \"null ,\"\n        \n        entryValues = entryValues +\"'\"+entry[\"nationality\"]+\"',\"\n        entryValues = entryValues +\"'\"+entry[\"nationality_id\"]+\"',\"\n        entryValues = entryValues +\"'\"+entry[\"transfermarkt_id\"]+\"',\"\n        entryValues = entryValues +\"'\"+entry[\"opta_id\"]+\"',\"\n        entryValues = entryValues +\"'\"+entry[\"fbref_id\"]+\"',\"\n        entryValues = entryValues +\"'\"+entry[\"statsbomb_id\"]+\"') ,\"\n\n        values = values + entryValues\n    \n    \n})\n\nvalues = values.slice(0,-1)\n\n*/\n\nmsg.topic = topic + values;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1830,
        "y": 720,
        "wires": [
            [
                "3367b41e14dd345c"
            ]
        ]
    },
    {
        "id": "3367b41e14dd345c",
        "type": "mysql",
        "z": "fe8bd8efceb20d5b",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 2040,
        "y": 720,
        "wires": [
            [
                "fa2e75d71ec9fa80"
            ]
        ]
    },
    {
        "id": "fa2e75d71ec9fa80",
        "type": "debug",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2270,
        "y": 720,
        "wires": []
    },
    {
        "id": "307fd99eb1ace783",
        "type": "function",
        "z": "fe8bd8efceb20d5b",
        "name": "set headers and url",
        "func": "msg.headers = {};\nmsg.headers['x-api-key'] = '0e72210681854a94b0b36897ddd15365';\n\nmsg.url=msg.payload;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 720,
        "wires": [
            [
                "348c7b69e3ec342a"
            ]
        ]
    },
    {
        "id": "348c7b69e3ec342a",
        "type": "http request",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1350,
        "y": 720,
        "wires": [
            [
                "a3a3ad37b1b06e5c",
                "2588d695ffcb2008",
                "11c43834fa9270ed"
            ]
        ]
    },
    {
        "id": "85b4b087014b1039",
        "type": "json",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1670,
        "y": 720,
        "wires": [
            [
                "89f1f0ac8071a64d"
            ]
        ]
    },
    {
        "id": "f06905f6a48f95d1",
        "type": "comment",
        "z": "fe8bd8efceb20d5b",
        "name": "CAPOLOGY Contracts",
        "info": "",
        "x": 220,
        "y": 660,
        "wires": []
    },
    {
        "id": "12ac351663277af1",
        "type": "function",
        "z": "fe8bd8efceb20d5b",
        "name": "Leagues and run ",
        "func": "msg.topic=\"select cl.id, cl.country_id, (select max(run) from capology_contracts) as run from capology_leagues cl\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 840,
        "wires": [
            [
                "c86c44c1df76a0e4"
            ]
        ]
    },
    {
        "id": "c86c44c1df76a0e4",
        "type": "mysql",
        "z": "fe8bd8efceb20d5b",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 400,
        "y": 720,
        "wires": [
            [
                "694a5cba4ad17f82"
            ]
        ]
    },
    {
        "id": "ae870c7802c95b5c",
        "type": "debug",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1720,
        "y": 900,
        "wires": []
    },
    {
        "id": "694a5cba4ad17f82",
        "type": "function",
        "z": "fe8bd8efceb20d5b",
        "name": "url array",
        "func": "let leagues = msg.payload;\n\nmsg.run=msg.payload[0].run+1\n\nlet urlArr = []\n\nlet season_id = \"2022-2023\"\n\nlet seasons = [\n\"2009-2010\",\n\"2010-2011\",\n\"2011-2012\",\n\"2012-2013\",\n\"2013-2014\",\n\"2014-2015\",\n\"2015-2016\",\n\"2016-2017\",\n\"2017-2018\",\n\"2018-2019\",\n\"2019-2020\",\n\"2020-2021\",\n\"2021-2022\",\n\"2022-2023\",\n\"2023-2024\",\n\"2024-2025\"\n]\n\nlet years = [\n\"2009\",\n\"2010\",\n\"2011\",\n\"2012\",\n\"2013\",\n\"2014\",\n\"2015\",\n\"2016\",\n\"2017\",\n\"2018\",\n\"2019\",\n\"2020\",\n\"2021\",\n\"2022\",\n\"2023\",\n\"2024\",\n\"2025\"\n]\n\nseasons.forEach( season => {\n       leagues.forEach( league => {\n        \n        let url = \"https://www.capology.com/api/v2/soccer/contracts/\"+league.country_id+\"/\"+league.id+\"/\"+season+\"/\"\n        \n       urlArr.push(url)\n    }) \n})\n\nyears.forEach( year => {\n       leagues.forEach( league => {\n        \n        let url = \"https://www.capology.com/api/v2/soccer/contracts/\"+league.country_id+\"/\"+league.id+\"/\"+year+\"/\"\n        \n       urlArr.push(url)\n    }) \n})\n\n\n   msg.payload=urlArr;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 720,
        "wires": [
            [
                "4e19ce0364612ff7"
            ]
        ]
    },
    {
        "id": "4e19ce0364612ff7",
        "type": "split",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 750,
        "y": 720,
        "wires": [
            [
                "838fd9ada3991b42"
            ]
        ]
    },
    {
        "id": "838fd9ada3991b42",
        "type": "delay",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "pauseType": "rate",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 910,
        "y": 720,
        "wires": [
            [
                "307fd99eb1ace783"
            ]
        ]
    },
    {
        "id": "a3a3ad37b1b06e5c",
        "type": "switch",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1510,
        "y": 720,
        "wires": [
            [
                "85b4b087014b1039"
            ],
            [
                "216ea5b60bf4eb6c"
            ]
        ]
    },
    {
        "id": "271224410ea482f1",
        "type": "function",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "func": "\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 1680,
        "wires": [
            []
        ]
    },
    {
        "id": "216ea5b60bf4eb6c",
        "type": "function",
        "z": "fe8bd8efceb20d5b",
        "name": "log error",
        "func": "let url = msg.url\n\nlet urlParams = url.split(\"/\")\n\nlet country = urlParams[7]\nlet league = urlParams[8]\nlet season = urlParams[9]\n\nmsg.payload  = urlParams\n\n\nlet topic = \"insert into capology_invalid_url_contracts values ('\"+url+\"','\"+country+\"','\"+league+\"','\"+season+\"')\"\n\nmsg.topic = topic;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1480,
        "y": 840,
        "wires": [
            [
                "ae870c7802c95b5c",
                "0c0e5034b5a097cf"
            ]
        ]
    },
    {
        "id": "0c0e5034b5a097cf",
        "type": "mysql",
        "z": "fe8bd8efceb20d5b",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 1660,
        "y": 980,
        "wires": [
            [
                "021263d106f91fec"
            ]
        ]
    },
    {
        "id": "021263d106f91fec",
        "type": "debug",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1890,
        "y": 980,
        "wires": []
    },
    {
        "id": "96475aa0e8bde0da",
        "type": "http in",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "url": "/capology/contracts",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 230,
        "y": 840,
        "wires": [
            [
                "12ac351663277af1"
            ]
        ]
    },
    {
        "id": "2588d695ffcb2008",
        "type": "function",
        "z": "fe8bd8efceb20d5b",
        "name": "Log",
        "func": "let url = msg.url\n\nlet urlParams = url.split(\"/\")\n\nlet country = urlParams[7]\nlet league = urlParams[8]\nlet season = urlParams[9]\n\nlet logmsg = {}\n\n\n\n\n\n    \n    \n        \n        logmsg.type = \"db\"\n        logmsg.taskType = \"capology contracts\"\n        logmsg.taskId = msg.run\n        logmsg.message = country + \" - \"+league+\" - \"+season+\" | \"+msg.parts.index+\" of \"+msg.parts.count\n      \n        \n\n    \n\n\nnode.log(logmsg)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 660,
        "wires": [
            []
        ]
    },
    {
        "id": "11c43834fa9270ed",
        "type": "debug",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1990,
        "y": 680,
        "wires": []
    },
    {
        "id": "3205affb1240f67d",
        "type": "inject",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select cl.id, cl.country_id, (select max(run) from capology_salaries) as run from capology_leagues cl",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 1180,
        "wires": [
            [
                "9390703613dcbbe7"
            ]
        ]
    },
    {
        "id": "33b45cd7b6d2394f",
        "type": "function",
        "z": "fe8bd8efceb20d5b",
        "name": "Insert builder",
        "func": "let contracts = msg.payload;\n\n\n\nfunction padTo2Digits(num) {\n  return num.toString().padStart(2, '0');\n}\n\nfunction formatDate(date) {\n  return [\n    padTo2Digits(date.getDate()),\n    padTo2Digits(date.getMonth() + 1),\n    date.getFullYear(),\n  ].join('/');\n}\n\nlet today = formatDate(new Date())\nlet topic = \"INSERT INTO capology_salaries ( run, update_date, \"\nlet kArr = []\nObject.keys(contracts[0]).forEach( k => {\n    \n        topic = topic + ' '+k+\",\"\n    \n        kArr.push(k)\n})\n\ntopic = topic.slice(0,-1)\ntopic = topic + \")\"\n\n\n\nlet values = \" VALUES \"\n\nconst regex = /'/g;\n\n\ncontracts.forEach( c => {\n    \n    \n    let cValues = \" ( \"+msg.run+\", STR_TO_DATE('\"+today.toString()+\"','%d/%m/%Y'), \" ;\n    \n    \n    kArr.forEach( k => {\n        \n        let value;\n    \n    if (typeof c[k] === \"string\" ) {\n        \n        let s = c[k].replace(/'/g, \"'\"+\"'\")\n        value = '\"'+s+'\"'\n        \n    } else {\n        value = c[k]\n    }\n    \n        \n        cValues = cValues + value +\" ,\"\n        \n    })\n    \n    cValues = cValues.slice(0,-1);\n    cValues = cValues + \" ),\"\n    \n    values = values +cValues;\n    \n})\n\nvalues = values.slice(0,-1);\n /*\nobj.forEach( entry => {\n    \n    \n    let seasonId = entry[\"season_id\"] && entry[\"season_id\"] !== undefined ? entry[\"season_id\"] : null\n    let leagueId = entry[\"league_id\"] && entry[\"league_id\"] !== undefined ? entry[\"league_id\"] : null\n    \n    \n    \n\n    entry[\"name\"] = (entry[\"name\"] && entry[\"name\"] !== undefined) ? entry[\"name\"].replace(regex, \"'\"+\"'\") : entry[\"name\"]\n    entry[\"first_name\"] = (entry[\"first_name\"] && entry[\"first_name\"] !== undefined) ? entry[\"first_name\"].replace(regex, \"'\"+\"'\") : entry[\"first_name\"]\n    entry[\"second_name\"] = (entry[\"second_name\"] && entry[\"second_name\"] !== undefined) ? entry[\"second_name\"].replace(regex, \"'\"+\"'\") : entry[\"second_name\"]\n    entry[\"third_name\"] = (entry[\"third_name\"] && entry[\"third_name\"] !== undefined) ? entry[\"third_name\"].replace(regex, \"'\"+\"'\") : entry[\"third_name\"]\n        entry[\"last_name\"] = (entry[\"last_name\"] && entry[\"last_name\"] !== undefined) ? entry[\"last_name\"].replace(regex, \"'\"+\"'\") : entry[\"last_name\"]\n\n    \n    entry[\"nationality\"] = (entry[\"nationality\"] && entry[\"nationality\"] !== undefined) ? entry[\"nationality\"].replace(regex, \"'\"+\"'\") : entry[\"nationality\"]\n\n\n\n    let entryValues = \"( \"\n    \n        entryValues = entryValues +\"'\"+entry[\"name\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"position_code\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"id\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"first_name\"]+\"' ,\"\n        \n        entryValues = entryValues +\"'\"+entry[\"second_name\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"third_name\"]+\"' ,\"\n        entryValues = entryValues +\"'\"+entry[\"last_name\"]+\"' ,\"\n        entryValues = entry[\"dob\"] ? entryValues +\"STR_TO_DATE('\"+entry[\"dob\"].slice(0, 10)+\"','%Y-%m-%d'),\" : entryValues + \"null ,\"\n        \n        entryValues = entryValues +\"'\"+entry[\"nationality\"]+\"',\"\n        entryValues = entryValues +\"'\"+entry[\"nationality_id\"]+\"',\"\n        entryValues = entryValues +\"'\"+entry[\"transfermarkt_id\"]+\"',\"\n        entryValues = entryValues +\"'\"+entry[\"opta_id\"]+\"',\"\n        entryValues = entryValues +\"'\"+entry[\"fbref_id\"]+\"',\"\n        entryValues = entryValues +\"'\"+entry[\"statsbomb_id\"]+\"') ,\"\n\n        values = values + entryValues\n    \n    \n})\n\nvalues = values.slice(0,-1)\n\n*/\n\nmsg.topic = topic + values;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1850,
        "y": 1180,
        "wires": [
            [
                "85431a94daf7f614"
            ]
        ]
    },
    {
        "id": "85431a94daf7f614",
        "type": "mysql",
        "z": "fe8bd8efceb20d5b",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 2060,
        "y": 1180,
        "wires": [
            [
                "ef785817d5e062d8"
            ]
        ]
    },
    {
        "id": "ef785817d5e062d8",
        "type": "debug",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 2290,
        "y": 1180,
        "wires": []
    },
    {
        "id": "dac05e4cb5fb7919",
        "type": "function",
        "z": "fe8bd8efceb20d5b",
        "name": "set headers and url",
        "func": "msg.headers = {};\nmsg.headers['x-api-key'] = '0e72210681854a94b0b36897ddd15365';\n\nmsg.url=msg.payload;\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1170,
        "y": 1180,
        "wires": [
            [
                "7ccc7da21f9ad305"
            ]
        ]
    },
    {
        "id": "7ccc7da21f9ad305",
        "type": "http request",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1370,
        "y": 1180,
        "wires": [
            [
                "94238d91994d9daf",
                "a6d19a25908faf26",
                "7e1d88fb2c1ee230"
            ]
        ]
    },
    {
        "id": "4d183c05fa311c7f",
        "type": "json",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 1690,
        "y": 1180,
        "wires": [
            [
                "33b45cd7b6d2394f"
            ]
        ]
    },
    {
        "id": "a346a64e3e1a45ad",
        "type": "comment",
        "z": "fe8bd8efceb20d5b",
        "name": "CAPOLOGY Salaries",
        "info": "",
        "x": 240,
        "y": 1120,
        "wires": []
    },
    {
        "id": "8c5aaa765e901c68",
        "type": "function",
        "z": "fe8bd8efceb20d5b",
        "name": "Leagues and run ",
        "func": "msg.topic=\"select cl.id, cl.country_id, (select max(run) from capology_salaries) as run from capology_leagues cl\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1300,
        "wires": [
            [
                "9390703613dcbbe7"
            ]
        ]
    },
    {
        "id": "9390703613dcbbe7",
        "type": "mysql",
        "z": "fe8bd8efceb20d5b",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 420,
        "y": 1180,
        "wires": [
            [
                "7e4599fafb971d9c"
            ]
        ]
    },
    {
        "id": "a4c3c8edafaf4972",
        "type": "debug",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "topic",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1760,
        "y": 1300,
        "wires": []
    },
    {
        "id": "7e4599fafb971d9c",
        "type": "function",
        "z": "fe8bd8efceb20d5b",
        "name": "url array",
        "func": "let leagues = msg.payload;\n\nmsg.run=msg.payload[0].run+1\n\nlet urlArr = []\n\nlet season_id = \"2022-2023\"\n\nlet seasons = [\n\"2009-2010\",\n\"2010-2011\",\n\"2011-2012\",\n\"2012-2013\",\n\"2013-2014\",\n\"2014-2015\",\n\"2015-2016\",\n\"2016-2017\",\n\"2017-2018\",\n\"2018-2019\",\n\"2019-2020\",\n\"2020-2021\",\n\"2021-2022\",\n\"2022-2023\",\n\"2023-2024\"\n]\n\nlet years = [\n\"2009\",\n\"2010\",\n\"2011\",\n\"2012\",\n\"2013\",\n\"2014\",\n\"2015\",\n\"2016\",\n\"2017\",\n\"2018\",\n\"2019\",\n\"2020\",\n\"2021\",\n\"2022\",\n\"2023\",\n\"2024\"\n]\n\nseasons.forEach( season => {\n       leagues.forEach( league => {\n        \n        let url = \"https://www.capology.com/api/v2/salaries/\"+league.country_id+\"/\"+league.id+\"/\"+season+\"/\"\n        \n       urlArr.push(url)\n    }) \n})\n\nyears.forEach( year => {\n       leagues.forEach( league => {\n        \n        let url = \"https://www.capology.com/api/v2/salaries/\"+league.country_id+\"/\"+league.id+\"/\"+year+\"/\"\n        \n       urlArr.push(url)\n    })\n})\n\n\n   msg.payload=urlArr;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 1180,
        "wires": [
            [
                "3b402155d3ef02de"
            ]
        ]
    },
    {
        "id": "3b402155d3ef02de",
        "type": "split",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1180,
        "wires": [
            [
                "8504bd53f6b635c2"
            ]
        ]
    },
    {
        "id": "8504bd53f6b635c2",
        "type": "delay",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "pauseType": "rate",
        "timeout": "3",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 930,
        "y": 1180,
        "wires": [
            [
                "dac05e4cb5fb7919"
            ]
        ]
    },
    {
        "id": "7e1d88fb2c1ee230",
        "type": "switch",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "200",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1610,
        "y": 1140,
        "wires": [
            [
                "4d183c05fa311c7f"
            ],
            [
                "0475f6c07c428a57"
            ]
        ]
    },
    {
        "id": "0475f6c07c428a57",
        "type": "function",
        "z": "fe8bd8efceb20d5b",
        "name": "log error",
        "func": "let url = msg.url\n\nlet urlParams = url.split(\"/\")\n\nlet country = urlParams[7]\nlet league = urlParams[8]\nlet season = urlParams[9]\n\nmsg.payload  = urlParams\n\n\nlet topic = \"insert into capology_invalid_url_salaries values ('\"+url+\"','\"+country+\"','\"+league+\"','\"+season+\"')\"\n\nmsg.topic = topic;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1560,
        "y": 1300,
        "wires": [
            [
                "a4c3c8edafaf4972",
                "b542f230286b8245"
            ]
        ]
    },
    {
        "id": "b542f230286b8245",
        "type": "mysql",
        "z": "fe8bd8efceb20d5b",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 1680,
        "y": 1440,
        "wires": [
            [
                "a45fa4e3eb795f6b"
            ]
        ]
    },
    {
        "id": "a45fa4e3eb795f6b",
        "type": "debug",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1910,
        "y": 1440,
        "wires": []
    },
    {
        "id": "1b632b95b1f0481a",
        "type": "http in",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "url": "/capology/contracts",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 1300,
        "wires": [
            [
                "8c5aaa765e901c68"
            ]
        ]
    },
    {
        "id": "94238d91994d9daf",
        "type": "function",
        "z": "fe8bd8efceb20d5b",
        "name": "Log",
        "func": "let url = msg.url\n\nlet urlParams = url.split(\"/\")\n\nlet country = urlParams[7]\nlet league = urlParams[8]\nlet season = urlParams[9]\n\nlet logmsg = {}\n\n\n\n\n\n    \n    \n        \n        logmsg.type = \"db\"\n        logmsg.taskType = \"capology contracts\"\n        logmsg.taskId = msg.run\n        logmsg.message = country + \" - \"+league+\" - \"+season+\" | \"+msg.parts.index+\" of \"+msg.parts.count\n      \n        \n\n    \n\n\nnode.log(logmsg)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1380,
        "wires": [
            []
        ]
    },
    {
        "id": "a6d19a25908faf26",
        "type": "debug",
        "z": "fe8bd8efceb20d5b",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1510,
        "y": 1060,
        "wires": []
    },
    {
        "id": "14370407cc7e4615",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Authenticate",
        "func": "let     access_token = null;\nconst   outlet_auth_key = '3ojq7by6593f19j82edut01zd';\nconst   secret_1 = 'vv3836ero532zg49ub095o4h';\nconst   secret_2 = 'p9j58goyx0hd1hhot674pefh0';\nconst   api_url = 'https://api.performfeeds.com/soccerdata/';\nconst   auth_url = 'https://oauth.performgroup.com/oauth/token/';\n\nlet     timestamp = Date.now()\n\nlet     hash = sha512(outlet_auth_key+timestamp+secret_1).toString();\n    msg.payload=hash;\n\nmsg.url = 'https://oauth.performgroup.com/oauth/token/' + outlet_auth_key +'?_fmt=json&_rt=b';\n\nmsg.headers = {};\nmsg.headers['Content-Type'] = 'application/x-www-form-urlencoded';\nmsg.headers['Authorization'] = 'Basic '+hash;\nmsg.headers['Timestamp'] = ''+timestamp+'';\n \nlet body = {\n    'grant_type' : 'client_credentials',\n    'scope' : 'b2b-feeds-auth'\n}\n\nmsg.payload=body\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "sha512",
                "module": "crypto-js/sha512"
            }
        ],
        "x": 710,
        "y": 120,
        "wires": [
            [
                "015179c5c87008b6"
            ]
        ]
    },
    {
        "id": "3a2fe53da2ec0c3c",
        "type": "inject",
        "z": "0e387015cbd38445",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 200,
        "y": 120,
        "wires": [
            [
                "7008a348ad6dca43"
            ]
        ]
    },
    {
        "id": "7008a348ad6dca43",
        "type": "switch",
        "z": "0e387015cbd38445",
        "name": "",
        "property": "Bearer",
        "propertyType": "flow",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 120,
        "wires": [
            [
                "14370407cc7e4615"
            ],
            [
                "14370407cc7e4615"
            ]
        ]
    },
    {
        "id": "015179c5c87008b6",
        "type": "http request",
        "z": "0e387015cbd38445",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 910,
        "y": 120,
        "wires": [
            [
                "adeedc229f2a398f"
            ]
        ]
    },
    {
        "id": "adeedc229f2a398f",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Set token",
        "func": "if (msg.payload && msg.payload.access_token) {\n    \n    flow.set(\"Bearer\", msg.payload.access_token )\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1100,
        "y": 120,
        "wires": [
            [
                "8c9c501d96fdfa89"
            ]
        ]
    },
    {
        "id": "bb15079af13c7814",
        "type": "debug",
        "z": "0e387015cbd38445",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1670,
        "y": 400,
        "wires": []
    },
    {
        "id": "468eb9c15aecb9f3",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Areas (OT4)",
        "func": "msg.url=\"https://api.performfeeds.com/soccerdata/areas/3ojq7by6593f19j82edut01zd?_rt=b&_fmt=json\"\nmsg.headers = {\n    Authorization: \"Bearer \"+flow.get(\"Bearer\")\n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1350,
        "y": 300,
        "wires": [
            [
                "3c676426438e3a9f"
            ]
        ]
    },
    {
        "id": "3c676426438e3a9f",
        "type": "http request",
        "z": "0e387015cbd38445",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1510,
        "y": 300,
        "wires": [
            [
                "f269d023b0dae2b8"
            ]
        ]
    },
    {
        "id": "f269d023b0dae2b8",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Area Processing",
        "func": "let L0 = msg.payload;\nlet countries = []\n\nif (L0.area && L0.area.length>0) { //\n    \n    L0.area.forEach(world => { //continent\n        \n        if (world.area && world.area.length>0) {\n            \n            world.area.forEach(continent => {\n                \n                if (continent.area && continent.area.length>0) {\n                    \n                    continent.area.forEach(country => {\n                        \n                        if(country.id) countries.push(country)\n                        \n                        \n                    })\n                }\n                \n                \n            })\n        }\n    })\n    \n}\n\n\n\n\nmsg.payload = countries;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1700,
        "y": 300,
        "wires": [
            [
                "7bcef758815f9f59"
            ]
        ]
    },
    {
        "id": "7bcef758815f9f59",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Insert Builder",
        "func": "let countries = msg.payload;\n\nlet topic = \"insert into OPTA_countries (countryId, countryCode, name) values \";\n\nlet cObj = {};\n\ncountries.forEach( country => {\n    \n    if (cObj[country.id]=== undefined) {\n         let value = \" ('\"+country.id+\"','\"+country.countryCode+\"','\"+country.name.replace(/'/g, \"'\"+\"'\")+\"'),\";\n    \n        topic = topic + value;\n        cObj[country.id] = country.countryCode;\n    }\n   \n    \n    \n    \n})\n\ntopic = topic.slice(0,-1) //rimuoviamo la virgola finale\n\nmsg.topic=topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 300,
        "wires": [
            [
                "bcf109a8a2fa22d4"
            ]
        ]
    },
    {
        "id": "bcf109a8a2fa22d4",
        "type": "mysql",
        "z": "0e387015cbd38445",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 1460,
        "y": 400,
        "wires": [
            [
                "bb15079af13c7814"
            ]
        ]
    },
    {
        "id": "c82d1b1d757c04ce",
        "type": "debug",
        "z": "0e387015cbd38445",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 1080,
        "wires": []
    },
    {
        "id": "c3fee72b3e8c39cf",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Teams (TM1)",
        "func": "/*\n\tSHN\tSt. Helena\n\tESH\tWestern Sahara\n\tSEU\tSint Eustatius\n\tUMI\tUnited States Minor Outlying Islands\n\tFLK\tFalkland Islands (Malvinas)\n\tPCN\tPitcairn\n\tTKL\tTokelau\n\tSCO\tScotland\n\tSCG\tSerbia and Montenegro\n\tSJM\tSvalbard and Jan Mayen Islands/\n\n\n\n\n*/\n\n// italia 25f2cmb2r8mk5rj92tzer6kvv\n\nmsg.url=\"https://api.performfeeds.com/soccerdata/team/3ojq7by6593f19j82edut01zd?_rt=b&_fmt=json&detailed=yes&ctry=\"+msg.payload.countryId\n\nmsg.headers = {\n    Authorization: \"Bearer \"+flow.get(\"Bearer\")\n}\n\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 500,
        "wires": [
            [
                "c0cee7c4e456a822"
            ]
        ]
    },
    {
        "id": "c0cee7c4e456a822",
        "type": "http request",
        "z": "0e387015cbd38445",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 430,
        "y": 500,
        "wires": [
            [
                "ea5a9d258156c051"
            ]
        ]
    },
    {
        "id": "3eea45891e98c2d4",
        "type": "mysql",
        "z": "0e387015cbd38445",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 680,
        "y": 580,
        "wires": [
            [
                "2ae54dddbf9e51f9"
            ]
        ]
    },
    {
        "id": "ea5a9d258156c051",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Area Processing",
        "func": "let res = msg.payload;\n\nlet teams = msg.payload && msg.payload.contestant && msg.payload.contestant.length>0 ? msg.payload.contestant : [];\n\nlet topic = \"insert into OPTA_teams (id,name,shortName,officialName,code,type,teamType,countryId,country,status,city,postalAddress,addressNumber,addressZip,founded,lastUpdated ) values \"\n//id,name,shortName,officialName,code,type,teamType,countryId,country,status,city,postalAddress,addressNumber,addressZip,founded,lastUpdated\n\nif(teams.length>0) {\n    \n    teams.forEach( team => {\n    \n    \n        let id = team.id\n        let name            = team.name ? team.name.replace(/'/g, \"'\"+\"'\") : \"\";\n        let shortName       = team.shortName ? team.shortName.replace(/'/g, \"'\"+\"'\") : \"\";\n        let officialName    = team.officialName ? team.officialName.replace(/'/g, \"'\"+\"'\") : \"\";\n        let code            = team.code ? team.code.replace(/'/g, \"'\"+\"'\") : \"\";\n        let type            = team.type ? team.type.replace(/'/g, \"'\"+\"'\") : \"\";\n        let teamType        = team.teamType ? team.teamType.replace(/'/g, \"'\"+\"'\") : \"\";\n        let countryId       = team.countryId ? team.countryId.replace(/'/g, \"'\"+\"'\") : \"\";\n        let country         = team.country ? team.country.replace(/'/g, \"'\"+\"'\") : \"\";\n        let status          = team.status ? team.status.replace(/'/g, \"'\"+\"'\") : \"\";\n        let city            = team.city ? team.city.replace(/'/g, \"'\"+\"'\") : \"\";\n        let postalAddress   = team.postalAddress ? team.postalAddress.replace(/'/g, \"'\"+\"'\") : \"\";\n        let addressNumber   = team.addressNumber ? team.addressNumber.replace(/'/g, \"'\"+\"'\") : \"\";\n        let addressZip      = team.addressZip ? team.addressZip.replace(/'/g, \"'\"+\"'\") : \"\";\n        let founded         = team.founded ? team.founded.replace(/'/g, \"'\"+\"'\") : \"\";\n        let lastUpdated     = team.lastUpdated ? team.lastUpdated.replace(/'/g, \"'\"+\"'\") : \"\";\n        \n        \n        \n        let value = \"( '\"+id+\"','\"\n                        +name+\"','\"\n                        +shortName+\"','\"\n                        +officialName+\"','\"\n                        +code+\"','\"\n                        +type+\"','\"\n                        +teamType+\"','\"\n                        +countryId+\"','\"\n                        +country+\"','\"\n                        +status+\"','\"\n                        +city+\"','\"\n                        +postalAddress+\"','\"\n                        +addressNumber+\"','\"\n                        +addressZip+\"','\"\n                        +founded+\"','\"\n                        +lastUpdated+\"'),\"\n    \n    topic = topic+value;\n    \n})\n\ntopic = topic.slice(0,-1) //rimuoviamo la virgola finale\n\nmsg.topic=topic;\n\n\nmsg.teams = teams;\nreturn msg;\n    \n} else {\n    \n    //do nothing\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 620,
        "y": 500,
        "wires": [
            [
                "3eea45891e98c2d4"
            ]
        ]
    },
    {
        "id": "a45c0a3b0fd2da17",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Get Countries",
        "func": "msg.topic=\"select * from OPTA_countries\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 280,
        "wires": [
            [
                "5c3ac10ec1fdcb93"
            ]
        ]
    },
    {
        "id": "5c3ac10ec1fdcb93",
        "type": "mysql",
        "z": "0e387015cbd38445",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 580,
        "y": 280,
        "wires": [
            [
                "2f9cf4c6dbca68e5"
            ]
        ]
    },
    {
        "id": "0ff6e7adbe91c609",
        "type": "inject",
        "z": "0e387015cbd38445",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 280,
        "wires": [
            [
                "a45c0a3b0fd2da17"
            ]
        ]
    },
    {
        "id": "2f9cf4c6dbca68e5",
        "type": "split",
        "z": "0e387015cbd38445",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 750,
        "y": 280,
        "wires": [
            [
                "8c6277463b815647"
            ]
        ]
    },
    {
        "id": "8c6277463b815647",
        "type": "delay",
        "z": "0e387015cbd38445",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 910,
        "y": 280,
        "wires": [
            [
                "c3fee72b3e8c39cf"
            ]
        ]
    },
    {
        "id": "2ae54dddbf9e51f9",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Errro debunker",
        "func": "\n\nif (msg.error) {\n    \n    let payload = {\n        \n        topic : msg.topic,\n        error : msg.error,\n        teams : msg.teams\n        \n    }\n    \n    msg.payload=payload\nreturn msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 920,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "831efa8ab5d492bf",
        "type": "inject",
        "z": "0e387015cbd38445",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 320,
        "y": 400,
        "wires": [
            []
        ]
    },
    {
        "id": "3a13b6eb6733a87e",
        "type": "catch",
        "z": "0e387015cbd38445",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 1480,
        "y": 600,
        "wires": [
            [
                "a71805f8a59aa28c"
            ]
        ]
    },
    {
        "id": "a71805f8a59aa28c",
        "type": "debug",
        "z": "0e387015cbd38445",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1710,
        "y": 600,
        "wires": []
    },
    {
        "id": "16464338358aef5a",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Get Contestant IDs",
        "func": "msg.topic=\"select id from OPTA_teams\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 900,
        "wires": [
            [
                "c41956e51f216e92"
            ]
        ]
    },
    {
        "id": "c41956e51f216e92",
        "type": "mysql",
        "z": "0e387015cbd38445",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 560,
        "y": 900,
        "wires": [
            [
                "eeac17c8706248c9"
            ]
        ]
    },
    {
        "id": "eeac17c8706248c9",
        "type": "split",
        "z": "0e387015cbd38445",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 900,
        "wires": [
            [
                "6d8f8fa81204aef1"
            ]
        ]
    },
    {
        "id": "6d8f8fa81204aef1",
        "type": "delay",
        "z": "0e387015cbd38445",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "5",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 950,
        "y": 900,
        "wires": [
            []
        ]
    },
    {
        "id": "914851f97daa8b51",
        "type": "inject",
        "z": "0e387015cbd38445",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 900,
        "wires": [
            [
                "16464338358aef5a"
            ]
        ]
    },
    {
        "id": "bd76a44e0871421f",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Teams (TM1)",
        "func": "/*\n\tSHN\tSt. Helena\n\tESH\tWestern Sahara\n\tSEU\tSint Eustatius\n\tUMI\tUnited States Minor Outlying Islands\n\tFLK\tFalkland Islands (Malvinas)\n\tPCN\tPitcairn\n\tTKL\tTokelau\n\tSCO\tScotland\n\tSCG\tSerbia and Montenegro\n\tSJM\tSvalbard and Jan Mayen Islands/\n\n\n\n\n*/\n\n// italia 25f2cmb2r8mk5rj92tzer6kvv\n//10eyb18v5puw4ez03ocaug09m \n\nmsg.url=\"https://api.performfeeds.com/soccerdata/transfers/3ojq7by6593f19j82edut01zd?_rt=b&_fmt=json&ctst=\"+msg.payload.id\nmsg.url=\"https://api.performfeeds.com/soccerdata/transfers/3ojq7by6593f19j82edut01zd?_rt=b&_fmt=json&ctst=10eyb18v5puw4ez03ocaug09m\"\n\n\nmsg.url=\"https://api.performfeeds.com/soccerdata/tournamentcalendar/3ojq7by6593f19j82edut01zd/authorized?_rt=b&_fmt=json\"\n\n//917vbkpe5rs8mnwskj4jz7ys\n\n//msg.url=\"https://api.performfeeds.com/soccerdata/predictions/seasonsimulations/3ojq7by6593f19j82edut01zd?_rt=b&_fmt=json&tmcl=917vbkpe5rs8mnwskj4jz7ys\";\n\n// neymar 779rrkp47akkd5usq53begatx\nmsg.url=\"https://api.performfeeds.com/soccerdata/playercareer/3ojq7by6593f19j82edut01zd?_rt=b&_fmt=json&prsn=8qgbxff7xlg0zjtyees7ljljp\"\nmsg.url=\"https://api.performfeeds.com/soccerdata/playercareer/3ojq7by6593f19j82edut01zd?_rt=b&_fmt=json&prsn=c9lu69xk59a75bnpzgalh1kut\"\n\n//msg.url=\"https://api.performfeeds.com/soccerdata/squads/3ojq7by6593f19j82edut01zd?_rt=b&_fmt=json&ctst=3vo5mpj7catp66nrwwqiuhuup\"\n\nmsg.headers = {\n    Authorization: \"Bearer \"+flow.get(\"Bearer\")\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 1040,
        "wires": [
            [
                "add78ffa69c0d308"
            ]
        ]
    },
    {
        "id": "add78ffa69c0d308",
        "type": "http request",
        "z": "0e387015cbd38445",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 670,
        "y": 1040,
        "wires": [
            [
                "c82d1b1d757c04ce"
            ]
        ]
    },
    {
        "id": "8c9c501d96fdfa89",
        "type": "debug",
        "z": "0e387015cbd38445",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1090,
        "y": 60,
        "wires": []
    },
    {
        "id": "8aabcf6687f6e9a8",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Authenticate",
        "func": "let     access_token = null;\nconst   outlet_auth_key = '3ojq7by6593f19j82edut01zd';\nconst   secret_1 = 'vv3836ero532zg49ub095o4h';\nconst   secret_2 = 'p9j58goyx0hd1hhot674pefh0';\nconst   api_url = 'https://api.performfeeds.com/soccerdata/';\nconst   auth_url = 'https://oauth.performgroup.com/oauth/token/';\n\nlet     timestamp = Date.now()\n\nlet     hash = sha512(outlet_auth_key+timestamp+secret_1).toString();\n    msg.payload=hash;\n\nmsg.url = 'https://oauth.performgroup.com/oauth/token/' + outlet_auth_key +'?_fmt=json&_rt=b';\n\nmsg.headers = {};\nmsg.headers['Content-Type'] = 'application/x-www-form-urlencoded';\nmsg.headers['Authorization'] = 'Basic '+hash;\nmsg.headers['Timestamp'] = ''+timestamp+'';\n \nlet body = {\n    'grant_type' : 'client_credentials',\n    'scope' : 'b2b-feeds-auth'\n}\n\nmsg.payload=body\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "sha512",
                "module": "crypto-js/sha512"
            }
        ],
        "x": 490,
        "y": 1340,
        "wires": [
            [
                "c0d96836baeeddad"
            ]
        ]
    },
    {
        "id": "50b8306616511a5b",
        "type": "inject",
        "z": "0e387015cbd38445",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1340,
        "wires": [
            [
                "487572fe22baaafc"
            ]
        ]
    },
    {
        "id": "487572fe22baaafc",
        "type": "switch",
        "z": "0e387015cbd38445",
        "name": "",
        "property": "Bearer",
        "propertyType": "flow",
        "rules": [
            {
                "t": "null"
            },
            {
                "t": "nnull"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 330,
        "y": 1340,
        "wires": [
            [
                "8aabcf6687f6e9a8"
            ],
            [
                "8aabcf6687f6e9a8"
            ]
        ]
    },
    {
        "id": "c0d96836baeeddad",
        "type": "http request",
        "z": "0e387015cbd38445",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 650,
        "y": 1340,
        "wires": [
            [
                "7b96071ebd2453d5"
            ]
        ]
    },
    {
        "id": "7b96071ebd2453d5",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Set token",
        "func": "if (msg.payload && msg.payload.access_token) {\n    \n    flow.set(\"Bearer\", msg.payload.access_token )\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 1340,
        "wires": [
            [
                "0ac43ba41643ddc1"
            ]
        ]
    },
    {
        "id": "0ac43ba41643ddc1",
        "type": "debug",
        "z": "0e387015cbd38445",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1010,
        "y": 1340,
        "wires": []
    },
    {
        "id": "a3054ff7eb68d062",
        "type": "comment",
        "z": "0e387015cbd38445",
        "name": "Set Token",
        "info": "",
        "x": 140,
        "y": 1260,
        "wires": []
    },
    {
        "id": "1e407bf67dc5ba84",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Player's Career (PE2)",
        "func": "\n\n// neymar 779rrkp47akkd5usq53begatx\n//msg.url=\"https://api.performfeeds.com/soccerdata/playercareer/3ojq7by6593f19j82edut01zd?_rt=b&_fmt=json&prsn=8qgbxff7xlg0zjtyees7ljljp\"\n//msg.url=\"https://api.performfeeds.com/soccerdata/playercareer/3ojq7by6593f19j82edut01zd?_rt=b&_fmt=json&prsn=c9lu69xk59a75bnpzgalh1kut\"\n\nmsg.url=\"https://api.performfeeds.com/soccerdata/playercareer/3ojq7by6593f19j82edut01zd?_rt=b&_fmt=json&prsn=\"+msg.payload\n\nmsg.headers = {\n    Authorization: \"Bearer \"+flow.get(\"Bearer\")\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1560,
        "wires": [
            [
                "7e9907efcd51ff06"
            ]
        ]
    },
    {
        "id": "7e9907efcd51ff06",
        "type": "http request",
        "z": "0e387015cbd38445",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 770,
        "y": 1560,
        "wires": [
            [
                "d7a8ccf6f967b7b1",
                "1ddaae522b09db47"
            ]
        ]
    },
    {
        "id": "8e01a3366327fc0f",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "plist  Array",
        "func": "let res = msg.payload;\n\nlet list = [];\n\nres.forEach( r => list.push(r.playerId))\nmsg.payload=list;\n\nflow.set(\"plist\",list)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1480,
        "wires": [
            [
                "a549b75e31954571"
            ]
        ]
    },
    {
        "id": "7db4078f4be195c7",
        "type": "inject",
        "z": "0e387015cbd38445",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select playerId from plist_view",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1480,
        "wires": [
            [
                "ca49b5bd50d1d5a0"
            ]
        ]
    },
    {
        "id": "ca49b5bd50d1d5a0",
        "type": "mysql",
        "z": "0e387015cbd38445",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 360,
        "y": 1480,
        "wires": [
            [
                "8e01a3366327fc0f"
            ]
        ]
    },
    {
        "id": "629f76fe7c572251",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Array popper",
        "func": "\n\nlet plist = flow.get(\"plist\")\n\nif (plist && plist.length>0) {\n    msg.payload = flow.get(\"plist\").pop()\n    msg.continue = true\n    msg.missing = flow.get(\"plist\").length;\n    return msg;\n}\n\nmsg.continue = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1560,
        "wires": [
            [
                "01bc8c4f891d0abd"
            ]
        ]
    },
    {
        "id": "01bc8c4f891d0abd",
        "type": "switch",
        "z": "0e387015cbd38445",
        "name": "Continue?",
        "property": "continue",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 1560,
        "wires": [
            [
                "1e407bf67dc5ba84"
            ],
            []
        ]
    },
    {
        "id": "d7a8ccf6f967b7b1",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Check payload",
        "func": "if (msg.payload && msg.payload.person && msg.payload.person[0] && msg.payload.person[0].id ) {\n    \n    msg.payload = msg.payload.person[0];\n    msg.save = true\n    return msg;\n}\n\n msg.save = false\n    return msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1560,
        "wires": [
            [
                "c2560ff9813ca848"
            ]
        ]
    },
    {
        "id": "c2560ff9813ca848",
        "type": "switch",
        "z": "0e387015cbd38445",
        "name": "Save?",
        "property": "save",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1130,
        "y": 1560,
        "wires": [
            [
                "3508f9efb35d54b9"
            ],
            [
                "2b7bd7613817a5ec"
            ]
        ]
    },
    {
        "id": "710aa1121b53e0c9",
        "type": "link in",
        "z": "0e387015cbd38445",
        "name": "PC_ARRIN",
        "links": [
            "2b7bd7613817a5ec",
            "a549b75e31954571",
            "dd69bb0a4ae850e9"
        ],
        "x": 95,
        "y": 1560,
        "wires": [
            [
                "629f76fe7c572251"
            ]
        ]
    },
    {
        "id": "2b7bd7613817a5ec",
        "type": "link out",
        "z": "0e387015cbd38445",
        "name": "",
        "mode": "link",
        "links": [
            "710aa1121b53e0c9"
        ],
        "x": 1215,
        "y": 1620,
        "wires": []
    },
    {
        "id": "3508f9efb35d54b9",
        "type": "link out",
        "z": "0e387015cbd38445",
        "name": "",
        "mode": "link",
        "links": [
            "e4401d6839abff2f"
        ],
        "x": 1225,
        "y": 1500,
        "wires": []
    },
    {
        "id": "ca0946f004dc66c9",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Pcareer insert builder",
        "func": "let cArr = [\"id\"\n,\"ocId\"\n,\"opId\"\n,\"firstName\"\n,\"lastName\"\n,\"shortFirstName\"\n,\"shortLastName\"\n,\"knownName\"\n,\"matchName\"\n,\"type\"\n,\"position\"\n,\"nationality\"\n,\"nationalityId\"\n,\"opNationalityId\"\n,\"ocNationalityId\"\n,\"dateOfBirth\"\n,\"dateOfDeath\"\n,\"placeOfBirth\"\n,\"countryOfBirthId\"\n,\"countryOfBirth\"\n,\"height\"\n,\"weight\"\n,\"foot\"\n,\"gender\"\n,\"status\"\n,\"lastUpdated\"]\n\n\nlet ptopic=\"insert into OPTA_players (id, ocId, opId, firstName, lastName, shortFirstName, shortLastName, knownName, matchName, type, position, nationality, nationalityId, opNationalityId, ocNationalityId, dateOfBirth, dateOfDeath, placeOfBirth, countryOfBirthId, countryOfBirth, height, weight, foot, gender, status, lastUpdated)\";\nlet pvalues = \" values ( \"\n\nlet player = msg.payload;\nlet pvalue;\n\ncArr.forEach(c => {\n    \n    \n    pvalue = player[c] !== undefined ? \"'\"+player[c].replace(/'/g, \"'\"+\"'\")+\"'\" : \"null\"\n    \n    pvalues = pvalues + pvalue + \",\"\n    \n})\n\npvalues = pvalues.slice(0,-1)//rimuove l'ultima virgola\npvalues = pvalues+\") ON DUPLICATE KEY UPDATE `id`='\"+player.id+\"'; \"\n\nptopic =  ptopic + pvalues;\n\n\n// MEMEBERSHIPS\n\nlet mArr = [\"contestantId\"\n,\"opContestantId\"\n,\"ocContestantId\"\n,\"contestantType\"\n,\"contestantName\"\n,\"active\"\n,\"startDate\"\n,\"endDate\"\n,\"role\"\n,\"type\"\n,\"transferType\"\n]\n\nlet mtopic = \"\";\nlet mvalues = \"\";\n\nif (player.membership && player.membership.length>0) {\n    \n\n    mtopic=\" insert into OPTA_playersmemberships (playerId, contestantId,opContestantId,ocContestantId,contestantType,contestantName,active,startDate,endDate,role,type,transferType) \"\n    mvalues=\" values \"\n    \n    player.membership.forEach( membership => {\n        \n        \n        mvalues= mvalues +\"( '\"+player.id+\"',\"\n        mArr.forEach(m => {\n            \n            \n                let mvalue = membership[m] !== undefined ? \"'\"+membership[m].replace(/'/g, \"'\"+\"'\")+\"'\" : \"null\"\n    \n                mvalues = mvalues + mvalue + \",\"\n    \n        })\n        \n        mvalues = mvalues.slice(0,-1)//rimuove l'ultima virgola\n        mvalues = mvalues+\"),\"\n        \n    }) \n    \n    mvalues = mvalues.slice(0,-1)//rimuove l'ultima virgola\n\n}\n\nmtopic = mtopic + mvalues;\n\nmsg.topic=ptopic + mtopic;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1640,
        "wires": [
            [
                "1d454fce9bb19ff6"
            ]
        ]
    },
    {
        "id": "e4401d6839abff2f",
        "type": "link in",
        "z": "0e387015cbd38445",
        "name": "PC_INSB",
        "links": [
            "3508f9efb35d54b9"
        ],
        "x": 105,
        "y": 1640,
        "wires": [
            [
                "ca0946f004dc66c9"
            ]
        ]
    },
    {
        "id": "a549b75e31954571",
        "type": "link out",
        "z": "0e387015cbd38445",
        "name": "",
        "mode": "link",
        "links": [
            "710aa1121b53e0c9"
        ],
        "x": 825,
        "y": 1480,
        "wires": []
    },
    {
        "id": "1d454fce9bb19ff6",
        "type": "mysql",
        "z": "0e387015cbd38445",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 500,
        "y": 1640,
        "wires": [
            [
                "dd69bb0a4ae850e9"
            ]
        ]
    },
    {
        "id": "dd69bb0a4ae850e9",
        "type": "link out",
        "z": "0e387015cbd38445",
        "name": "",
        "mode": "link",
        "links": [
            "710aa1121b53e0c9"
        ],
        "x": 655,
        "y": 1640,
        "wires": []
    },
    {
        "id": "53e34be260abf193",
        "type": "comment",
        "z": "0e387015cbd38445",
        "name": "Players Career  from plist",
        "info": "",
        "x": 190,
        "y": 1420,
        "wires": []
    },
    {
        "id": "1a8fafcd66ee9328",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Transfers (TM1)",
        "func": "\n\n// neymar 779rrkp47akkd5usq53begatx\n//msg.url=\"https://api.performfeeds.com/soccerdata/playercareer/3ojq7by6593f19j82edut01zd?_rt=b&_fmt=json&prsn=8qgbxff7xlg0zjtyees7ljljp\"\n//msg.url=\"https://api.performfeeds.com/soccerdata/playercareer/3ojq7by6593f19j82edut01zd?_rt=b&_fmt=json&prsn=c9lu69xk59a75bnpzgalh1kut\"\n\nmsg.url=\"https://api.performfeeds.com/soccerdata/transfers/3ojq7by6593f19j82edut01zd?_rt=b&_fmt=json&prsn=\"+msg.payload\n\nmsg.headers = {\n    Authorization: \"Bearer \"+flow.get(\"Bearer\")\n}\n\nmsg.Bearer = flow.get(\"Bearer\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 1880,
        "wires": [
            [
                "258c8fc57b54330c"
            ]
        ]
    },
    {
        "id": "258c8fc57b54330c",
        "type": "http request",
        "z": "0e387015cbd38445",
        "name": "TM1 Http Request",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 790,
        "y": 1880,
        "wires": [
            [
                "56c0eee45fae2016"
            ]
        ]
    },
    {
        "id": "61fdd03dddd3f4b6",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "plist  Array",
        "func": "let res = msg.payload;\n\nmsg.run = msg.payload[0].run + 1;\nlet list = [];\n\nres.forEach( r => list.push(r.playerId))\nmsg.payload=list;\nmsg.ok =0;\nmsg.ko=0;\n\nflow.set(\"plist\",list)\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 1800,
        "wires": [
            [
                "c7074b8e90ce2fe3"
            ]
        ]
    },
    {
        "id": "27e492218841e513",
        "type": "inject",
        "z": "0e387015cbd38445",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "select playerId,(select max(run) from OPTA_transfers) as run from all_player_list;",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 1800,
        "wires": [
            [
                "0fd77a0e47739c2d",
                "098aff6afa060e38"
            ]
        ]
    },
    {
        "id": "53e1e93b9e3c32b7",
        "type": "mysql",
        "z": "0e387015cbd38445",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 640,
        "y": 1800,
        "wires": [
            [
                "61fdd03dddd3f4b6",
                "41b614244d906597"
            ]
        ]
    },
    {
        "id": "d73dbc2e7892d136",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Array popper",
        "func": "\n\nlet plist = flow.get(\"plist\")\n\nif (plist && plist.length>0) {\n    msg.payload = flow.get(\"plist\").pop() // \"6o78gbvlo2oxw3ccbnzgzyor9\" \n    msg.continue = true\n    msg.missing = flow.get(\"plist\").length;\n    \n    return msg;\n}\n\nmsg.continue = false\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 1880,
        "wires": [
            [
                "18b1fe29eb34104f"
            ]
        ]
    },
    {
        "id": "18b1fe29eb34104f",
        "type": "switch",
        "z": "0e387015cbd38445",
        "name": "Continue?",
        "property": "continue",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 370,
        "y": 1880,
        "wires": [
            [
                "1a8fafcd66ee9328"
            ],
            []
        ]
    },
    {
        "id": "56c0eee45fae2016",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Check payload",
        "func": "if (msg.payload && msg.payload.person && msg.payload.person[0] && msg.payload.person[0].id ) {\n    \n    msg.payload = msg.payload.person[0];\n    msg.save = true\n    msg.ok++;\n    return msg;\n}\n\n msg.save = false\n msg.ko++;\n    return msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 1880,
        "wires": [
            [
                "928f591ad4b38671",
                "3aa04bc7f9cc02e6",
                "f3584bc9550718d8"
            ]
        ]
    },
    {
        "id": "928f591ad4b38671",
        "type": "switch",
        "z": "0e387015cbd38445",
        "name": "Save?",
        "property": "save",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1230,
        "y": 1880,
        "wires": [
            [
                "d0b23eccfa44dff4"
            ],
            [
                "050f0f3dfda8e4f5"
            ]
        ]
    },
    {
        "id": "be2a0a88849e0464",
        "type": "link in",
        "z": "0e387015cbd38445",
        "name": "T_ARRIN",
        "links": [
            "050f0f3dfda8e4f5",
            "5150fb3363cb583d",
            "c7074b8e90ce2fe3",
            "3deb8fa653ac0e86"
        ],
        "x": 95,
        "y": 1880,
        "wires": [
            [
                "d73dbc2e7892d136"
            ]
        ]
    },
    {
        "id": "050f0f3dfda8e4f5",
        "type": "link out",
        "z": "0e387015cbd38445",
        "name": "",
        "mode": "link",
        "links": [
            "be2a0a88849e0464"
        ],
        "x": 1215,
        "y": 1940,
        "wires": []
    },
    {
        "id": "d0b23eccfa44dff4",
        "type": "link out",
        "z": "0e387015cbd38445",
        "name": "",
        "mode": "link",
        "links": [
            "6aa9053ae4e08b89"
        ],
        "x": 1225,
        "y": 1820,
        "wires": []
    },
    {
        "id": "117da6ad5a1a71ee",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Transfers insert builder",
        "func": "\nlet player = msg.payload;\n\nfunction padTo2Digits(num) {\n  return num.toString().padStart(2, '0');\n}\n\nfunction formatDate(date) {\n  return [\n    padTo2Digits(date.getDate()),\n    padTo2Digits(date.getMonth() + 1),\n    date.getFullYear(),\n  ].join('/');\n}\nlet today = formatDate(new Date())\n\n// MEMEBERSHIPS\n\nlet mArr = [\"contestantId\"\n,\"opContestantId\"\n,\"ocContestantId\"\n,\"contestantType\"\n,\"contestantName\"\n,\"active\"\n,\"startDate\"\n,\"endDate\"\n,\"transfer\"\n\n]\n\nlet tArr = [\n\"type\"\n,\"value\"\n,\"currency\"\n,\"announcedDate\"\n,\"fromContestantId\"\n,\"fromOcContestantId\"\n,\"fromOpContestantId\"\n,\"fromContestantName\"\n\n]\n\nlet mtopic = \"\";\nlet mvalues = \"\";\n\nif (player.membership && player.membership.length>0) {\n    \n\n    mtopic=\" insert into OPTA_transfers (run, update_date, playerId, contestantId,opContestantId,ocContestantId,contestantType,contestantName,active,startDate,endDate,type,value,currency,announcedDate,fromContestantId,fromOcContestantId,fromOpContestantId,fromContestantName) \"\n    mvalues=\" values \"\n    \n    player.membership.forEach( membership => {\n        \n        \n        mvalues= mvalues +\"( \"+msg.run+\",STR_TO_DATE('\"+today.toString()+\"','%d/%m/%Y'),'\"+player.id+\"',\"\n        mArr.forEach(m => {\n            \n                let mvalue = \"\";\n                \n                if(m==\"transfer\") {\n                    \n                    tArr.forEach(t => {\n                        mvalue = membership[m][t] !== undefined ? \"'\"+membership[m][t].replace(/'/g, \"'\"+\"'\")+\"'\" : \"null\"\n                        mvalues = mvalues + mvalue + \",\"\n                    })\n                    \n                } else  {\n                \n                    mvalue = membership[m] !== undefined ? \"'\"+membership[m].replace(/'/g, \"'\"+\"'\")+\"'\" : \"null\"\n                    mvalues = mvalues + mvalue + \",\"\n    \n                }\n            \n                \n        })\n        \n        mvalues = mvalues.slice(0,-1)//rimuove l'ultima virgola\n        mvalues = mvalues+\"),\"\n        \n    }) \n    \n    mvalues = mvalues.slice(0,-1)//rimuove l'ultima virgola\n\n}\n\nmtopic = mtopic + mvalues;\n\nmsg.topic= mtopic;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 260,
        "y": 1960,
        "wires": [
            [
                "2e0b6675955c95a7"
            ]
        ]
    },
    {
        "id": "6aa9053ae4e08b89",
        "type": "link in",
        "z": "0e387015cbd38445",
        "name": "T_INSB",
        "links": [
            "d0b23eccfa44dff4"
        ],
        "x": 105,
        "y": 1960,
        "wires": [
            [
                "117da6ad5a1a71ee"
            ]
        ]
    },
    {
        "id": "c7074b8e90ce2fe3",
        "type": "link out",
        "z": "0e387015cbd38445",
        "name": "",
        "mode": "link",
        "links": [
            "be2a0a88849e0464"
        ],
        "x": 1125,
        "y": 1800,
        "wires": []
    },
    {
        "id": "2e0b6675955c95a7",
        "type": "mysql",
        "z": "0e387015cbd38445",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 500,
        "y": 1960,
        "wires": [
            [
                "5150fb3363cb583d",
                "5d42e4abd98fa9b9"
            ]
        ]
    },
    {
        "id": "5150fb3363cb583d",
        "type": "link out",
        "z": "0e387015cbd38445",
        "name": "",
        "mode": "link",
        "links": [
            "be2a0a88849e0464"
        ],
        "x": 655,
        "y": 1960,
        "wires": []
    },
    {
        "id": "9664d0ce4071d949",
        "type": "comment",
        "z": "0e387015cbd38445",
        "name": "TRANSFERS (TM7) Players Transfer from plist",
        "info": "",
        "x": 260,
        "y": 1740,
        "wires": []
    },
    {
        "id": "5d42e4abd98fa9b9",
        "type": "debug",
        "z": "0e387015cbd38445",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 610,
        "y": 2040,
        "wires": []
    },
    {
        "id": "3aa04bc7f9cc02e6",
        "type": "debug",
        "z": "0e387015cbd38445",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 2180,
        "wires": []
    },
    {
        "id": "080b0ad3ef19a871",
        "type": "comment",
        "z": "0e387015cbd38445",
        "name": "Squads (TM3)",
        "info": "",
        "x": 1530,
        "y": 900,
        "wires": []
    },
    {
        "id": "b15b4a96abe7ed38",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Get Contestant IDs",
        "func": "msg.topic=\"select clubId, (select max(run) from OPTA_squads) as run from all_club_list\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1710,
        "y": 1000,
        "wires": [
            [
                "87da170c4c9f7dbb"
            ]
        ]
    },
    {
        "id": "87da170c4c9f7dbb",
        "type": "mysql",
        "z": "0e387015cbd38445",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 1940,
        "y": 1000,
        "wires": [
            [
                "c1b771443ce7d3f8"
            ]
        ]
    },
    {
        "id": "c1b771443ce7d3f8",
        "type": "split",
        "z": "0e387015cbd38445",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 2150,
        "y": 1000,
        "wires": [
            [
                "39fd34b0228e865a"
            ]
        ]
    },
    {
        "id": "39fd34b0228e865a",
        "type": "delay",
        "z": "0e387015cbd38445",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 2350,
        "y": 1000,
        "wires": [
            [
                "22e7b01dc0b9e223"
            ]
        ]
    },
    {
        "id": "aba896d55edf50dc",
        "type": "inject",
        "z": "0e387015cbd38445",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1520,
        "y": 1000,
        "wires": [
            [
                "b15b4a96abe7ed38"
            ]
        ]
    },
    {
        "id": "648b2ff0cc025212",
        "type": "http in",
        "z": "0e387015cbd38445",
        "name": "",
        "url": "/opta/transfers",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 2560,
        "wires": [
            [
                "74e5b26101ed1bf4"
            ]
        ]
    },
    {
        "id": "f3584bc9550718d8",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Log",
        "func": "let url = msg.url\n\nlet urlParams = url.split(\"=\")\n\nlet playerId = urlParams[3]\n\n\nlet logmsg = {}\n\n\n\n\n\n    \n    \n        \n        logmsg.type = \"db\"\n        logmsg.taskType = \"opta transfers requesting\"\n        logmsg.taskId = msg.run\n        logmsg.message = \"playerId: \"+playerId+\" | missing: \"+msg.missing+\" statuCode: \"+msg.statusCode+\" saving: \"+msg.save +\" ok: \"+msg.ok+\" ko: \"+msg.ko;\n      \n        \n\n    \n\n\nnode.log(logmsg)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "0fd77a0e47739c2d",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Log",
        "func": "\n\nlet logmsg = {}\n\n\n\n\n\n    \n    \n        \n        logmsg.type = \"db\"\n        logmsg.taskType = \"opta transfers loading players\"\n        logmsg.taskId =\n        logmsg.message = \n      \n        \n\n    \n\n\nnode.log(logmsg)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 130,
        "y": 2320,
        "wires": [
            []
        ]
    },
    {
        "id": "41b614244d906597",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Log",
        "func": "\n\nlet logmsg = {}\n\n\n\n\n\n    \n    \n        \n        logmsg.type = \"db\"\n        logmsg.taskType = \"opta transfers starting\"\n        logmsg.taskId = \n        logmsg.message = \"num of players: \"+msg.payload;\n      \n        \n\n    \n\n\nnode.log(logmsg)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 750,
        "y": 2280,
        "wires": [
            []
        ]
    },
    {
        "id": "098aff6afa060e38",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Query view",
        "func": "msg.topic=\"select playerId,(select max(run) from OPTA_transfers) as run from all_player_list;\";\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 1800,
        "wires": [
            [
                "53e1e93b9e3c32b7"
            ]
        ]
    },
    {
        "id": "74e5b26101ed1bf4",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Authenticate",
        "func": "let     access_token = null;\nconst   outlet_auth_key = '3ojq7by6593f19j82edut01zd';\nconst   secret_1 = 'vv3836ero532zg49ub095o4h';\nconst   secret_2 = 'p9j58goyx0hd1hhot674pefh0';\nconst   api_url = 'https://api.performfeeds.com/soccerdata/';\nconst   auth_url = 'https://oauth.performgroup.com/oauth/token/';\n\nlet     timestamp = Date.now()\n\nlet     hash = sha512(outlet_auth_key+timestamp+secret_1).toString();\n    msg.payload=hash;\n\nmsg.url = 'https://oauth.performgroup.com/oauth/token/' + outlet_auth_key +'?_fmt=json&_rt=b';\n\nmsg.headers = {};\nmsg.headers['Content-Type'] = 'application/x-www-form-urlencoded';\nmsg.headers['Authorization'] = 'Basic '+hash;\nmsg.headers['Timestamp'] = ''+timestamp+'';\n \nlet body = {\n    'grant_type' : 'client_credentials',\n    'scope' : 'b2b-feeds-auth'\n}\n\nmsg.payload=body\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "sha512",
                "module": "crypto-js/sha512"
            }
        ],
        "x": 410,
        "y": 2440,
        "wires": [
            [
                "1ed0b4e0ff4df393"
            ]
        ]
    },
    {
        "id": "1ed0b4e0ff4df393",
        "type": "http request",
        "z": "0e387015cbd38445",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 610,
        "y": 2440,
        "wires": [
            [
                "e3b833c9fb7c0e9f"
            ]
        ]
    },
    {
        "id": "e3b833c9fb7c0e9f",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Set token",
        "func": "if (msg.payload && msg.payload.access_token) {\n    \n    flow.set(\"Bearer\", msg.payload.access_token )\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 2440,
        "wires": [
            [
                "098aff6afa060e38"
            ]
        ]
    },
    {
        "id": "22e7b01dc0b9e223",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Squads (TM3)",
        "func": "\n\n// GET http://api.performfeeds.com/soccerdata/squads/{outletAuthKey}?_rt={mode}&_fmt={dataFormat}&ctst={contestantUuid}\n\nmsg.url=\"https://api.performfeeds.com/soccerdata/squads/3ojq7by6593f19j82edut01zd?_rt=b&_fmt=json&ctst=\"+msg.payload.clubId\nmsg.run=msg.payload.run +1;\n\nmsg.headers = {\n    Authorization: \"Bearer \"+flow.get(\"Bearer\")\n}\n\nmsg.Bearer = flow.get(\"Bearer\");\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1520,
        "y": 1160,
        "wires": [
            [
                "97898adf8aba2d40"
            ]
        ]
    },
    {
        "id": "97898adf8aba2d40",
        "type": "http request",
        "z": "0e387015cbd38445",
        "name": "TM3 Http Request",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1770,
        "y": 1160,
        "wires": [
            [
                "15c49b20a2e6c4f9"
            ]
        ]
    },
    {
        "id": "15c49b20a2e6c4f9",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Check payload",
        "func": "if (msg.payload && msg.payload.squad && msg.payload.squad[0].contestantId ) {\n    \n    msg.payload = msg.payload.squad[0];\n    msg.save = true\n    return msg;\n}\n\n msg.save = false\n    return msg;\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2000,
        "y": 1160,
        "wires": [
            [
                "79db1023387b10d2",
                "a02b3e954ae4749f",
                "bfe9933281649384"
            ]
        ]
    },
    {
        "id": "79db1023387b10d2",
        "type": "switch",
        "z": "0e387015cbd38445",
        "name": "Save?",
        "property": "save",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "false"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 2250,
        "y": 1160,
        "wires": [
            [
                "1229aa9f83dbaaf2"
            ],
            []
        ]
    },
    {
        "id": "1229aa9f83dbaaf2",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Squads insert builder",
        "func": "\nlet squad = msg.payload;\n\nfunction padTo2Digits(num) {\n  return num.toString().padStart(2, '0');\n}\n\nfunction formatDate(date) {\n  return [\n    padTo2Digits(date.getDate()),\n    padTo2Digits(date.getMonth() + 1),\n    date.getFullYear(),\n  ].join('/');\n}\nlet today = formatDate(new Date())\n\n\nlet tArr = [\n\"id\",\n\"firstName\",\n\"lastName\",\n\"shortFirstName\",\n\"shortLastName\",\n\"matchName\",\n\"nationality\",\n\"nationalityId\",\n\"position\",\n\"type\",\n\"placeOfBirth\",\n\"active\"\n\n]\n\nlet mtopic = \"\";\nlet mvalues = \"\";\n\nif (squad.person && squad.person.length>0) {\n    \n\n    mtopic=\" insert into OPTA_squads (run, update_date, contestantId, contestantName, contestantShortName, contestantClubName, contestantCode, venueName, venueId, id, firstName, lastName, shortFirstName, shortLastName, matchName, nationality, nationalityId, position, type, placeOfBirth, active) \"\n    mvalues=\" values \"\n    \n    squad.person.forEach( person => {\n\n        \n        mvalues= mvalues +\"( \"+msg.run+\",STR_TO_DATE('\"+today.toString()+\"','%d/%m/%Y'),'\"+squad.contestantId +\"','\"+squad.contestantName.replace(/'/g, \"'\"+\"'\")+\"','\"+squad.contestantShortName.replace(/'/g, \"'\"+\"'\")+\"','\"+squad.contestantClubName.replace(/'/g, \"'\"+\"'\")+\"','\"+squad.contestantCode+\"','\"+squad.venueName.replace(/'/g, \"'\"+\"'\")+\"','\"+squad.venueId+\"',\"\n        tArr.forEach(m => {\n            \n                let mvalue = \"\";\n                \n            \n                \n                    mvalue = person[m] !== undefined ? \"'\"+person[m].replace(/'/g, \"'\"+\"'\")+\"'\" : \"null\"\n                    mvalues = mvalues + mvalue + \",\"\n    \n                \n            \n                \n        })\n        \n        mvalues = mvalues.slice(0,-1)//rimuove l'ultima virgola\n        mvalues = mvalues+\"),\"\n        \n    }) \n    \n    mvalues = mvalues.slice(0,-1)//rimuove l'ultima virgola\n\n}\n\nmtopic = mtopic + mvalues;\n\nmsg.topic= mtopic;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1580,
        "y": 1340,
        "wires": [
            [
                "8c9a826de5823844"
            ]
        ]
    },
    {
        "id": "8c9a826de5823844",
        "type": "mysql",
        "z": "0e387015cbd38445",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 1820,
        "y": 1340,
        "wires": [
            [
                "3deb8fa653ac0e86",
                "f5530b541f5bab95"
            ]
        ]
    },
    {
        "id": "3deb8fa653ac0e86",
        "type": "link out",
        "z": "0e387015cbd38445",
        "name": "",
        "mode": "link",
        "links": [
            "be2a0a88849e0464"
        ],
        "x": 1975,
        "y": 1340,
        "wires": []
    },
    {
        "id": "f5530b541f5bab95",
        "type": "debug",
        "z": "0e387015cbd38445",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1930,
        "y": 1420,
        "wires": []
    },
    {
        "id": "bfe9933281649384",
        "type": "debug",
        "z": "0e387015cbd38445",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2530,
        "y": 1440,
        "wires": []
    },
    {
        "id": "a02b3e954ae4749f",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Log",
        "func": "let url = msg.url\n\nlet urlParams = url.split(\"=\")\n\nlet clubId = urlParams[3]\n\n\nlet logmsg = {}\n\n\n\n\n\n    \n    \n        \n        logmsg.type = \"db\"\n        logmsg.taskType = \"opta squads requesting\"\n        logmsg.taskId = msg.run\n        logmsg.message = \"clubId: \"+clubId+\" | doing: \"+msg.parts.index+\" of \"+msg.parts.count+\" statusCode: \"+msg.statusCode+\" saving: \"+msg.save\n      \n        \n\n    \n\n\nnode.log(logmsg)\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2090,
        "y": 1500,
        "wires": [
            []
        ]
    },
    {
        "id": "f3ac08afbb5a1db2",
        "type": "inject",
        "z": "0e387015cbd38445",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 120,
        "y": 1040,
        "wires": [
            [
                "bd76a44e0871421f"
            ]
        ]
    },
    {
        "id": "8b5e353ddc85143d",
        "type": "http in",
        "z": "0e387015cbd38445",
        "name": "",
        "url": "/opta/squads",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 1530,
        "y": 1700,
        "wires": [
            [
                "edebd1e3e78f8299"
            ]
        ]
    },
    {
        "id": "edebd1e3e78f8299",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Authenticate",
        "func": "let     access_token = null;\nconst   outlet_auth_key = '3ojq7by6593f19j82edut01zd';\nconst   secret_1 = 'vv3836ero532zg49ub095o4h';\nconst   secret_2 = 'p9j58goyx0hd1hhot674pefh0';\nconst   api_url = 'https://api.performfeeds.com/soccerdata/';\nconst   auth_url = 'https://oauth.performgroup.com/oauth/token/';\n\nlet     timestamp = Date.now()\n\nlet     hash = sha512(outlet_auth_key+timestamp+secret_1).toString();\n    msg.payload=hash;\n\nmsg.url = 'https://oauth.performgroup.com/oauth/token/' + outlet_auth_key +'?_fmt=json&_rt=b';\n\nmsg.headers = {};\nmsg.headers['Content-Type'] = 'application/x-www-form-urlencoded';\nmsg.headers['Authorization'] = 'Basic '+hash;\nmsg.headers['Timestamp'] = ''+timestamp+'';\n \nlet body = {\n    'grant_type' : 'client_credentials',\n    'scope' : 'b2b-feeds-auth'\n}\n\nmsg.payload=body\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [
            {
                "var": "sha512",
                "module": "crypto-js/sha512"
            }
        ],
        "x": 1760,
        "y": 1580,
        "wires": [
            [
                "09b14ec57c5f2350"
            ]
        ]
    },
    {
        "id": "09b14ec57c5f2350",
        "type": "http request",
        "z": "0e387015cbd38445",
        "name": "",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1960,
        "y": 1580,
        "wires": [
            [
                "665cc34d026b0e8a"
            ]
        ]
    },
    {
        "id": "665cc34d026b0e8a",
        "type": "function",
        "z": "0e387015cbd38445",
        "name": "Set token",
        "func": "if (msg.payload && msg.payload.access_token) {\n    \n    flow.set(\"Bearer\", msg.payload.access_token )\n}\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2150,
        "y": 1580,
        "wires": [
            [
                "b15b4a96abe7ed38"
            ]
        ]
    },
    {
        "id": "e37294da1f9147d5",
        "type": "mysql",
        "z": "0e387015cbd38445",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 940,
        "y": 2560,
        "wires": [
            []
        ]
    },
    {
        "id": "1ddaae522b09db47",
        "type": "debug",
        "z": "0e387015cbd38445",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 1680,
        "wires": []
    },
    {
        "id": "d5c8a13fcde97d16",
        "type": "function",
        "z": "051eacec663484e5",
        "name": "Query Vitual Teams",
        "func": "let filtri = msg.req.query\n\nmsg.status = 200;\n\nif (!filtri || filtri.length==0) {\n    \n    msg.status = 400; //Bad Request\n    msg.payload=\"Request body missing\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\nlet playerSetQuery = \"select ls.playerId, ls.name, ls.currentClubId, ls.currentClubName, ls.currentLeagueId, ls.currentLeagueName, ls.currentPosition, ls.currentRole, ls.potentialPrice, ls.salaryPotential, ls.salaryNet, ls.consumerValue, ls.effectiveness from latestplayers_staging ls where 1=1 \"\n\nplayerSetQuery = filtri.leagueId ? playerSetQuery+\"AND ls.currentLeagueId='\"+filtri.leagueId+\"' \" : playerSetQuery;\nplayerSetQuery = filtri.clubId ? playerSetQuery+\"AND ls.currentClubId='\"+filtri.clubId+\"' \" : playerSetQuery;\nplayerSetQuery = filtri.nationalityCode ? playerSetQuery+\"AND ls.nationalityCode='\"+filtri.nationalityCode+\"' \" : playerSetQuery;\nplayerSetQuery = filtri.orderBy ? playerSetQuery+\"ORDER BY ls.\"+filtri.orderBy+\" DESC\" : playerSetQuery;\n\nplayerSetQuery = playerSetQuery + \";\"\n\nmsg.topic = playerSetQuery;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 160,
        "wires": [
            [
                "f81b26d549357e37"
            ]
        ]
    },
    {
        "id": "9876ea4c73a6d989",
        "type": "http in",
        "z": "051eacec663484e5",
        "name": "/virtualteams",
        "url": "/virtualteams",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 160,
        "wires": [
            [
                "d5c8a13fcde97d16"
            ]
        ]
    },
    {
        "id": "7270f71d42a4c5ef",
        "type": "http response",
        "z": "051eacec663484e5",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1290,
        "y": 180,
        "wires": []
    },
    {
        "id": "f81b26d549357e37",
        "type": "mysql",
        "z": "051eacec663484e5",
        "mydb": "14f41b2b.4deca5",
        "name": "",
        "x": 690,
        "y": 160,
        "wires": [
            [
                "d7b9bcd77ac9675b"
            ]
        ]
    },
    {
        "id": "d7b9bcd77ac9675b",
        "type": "function",
        "z": "051eacec663484e5",
        "name": "Set players",
        "func": "msg.players=msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 160,
        "wires": [
            [
                "80e873d29d4aa5ea"
            ]
        ]
    },
    {
        "id": "10720dc15d708687",
        "type": "comment",
        "z": "051eacec663484e5",
        "name": "VIRTUAL TEAMS",
        "info": "",
        "x": 200,
        "y": 100,
        "wires": []
    },
    {
        "id": "80e873d29d4aa5ea",
        "type": "function",
        "z": "051eacec663484e5",
        "name": "Query Modules&Roles",
        "func": "\n\nmsg.topic = \"select * from fieldmodules; select * from role;\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 220,
        "wires": [
            [
                "6e03c900cfc323d8"
            ]
        ]
    },
    {
        "id": "6e03c900cfc323d8",
        "type": "mysql",
        "z": "051eacec663484e5",
        "mydb": "14f41b2b.4deca5",
        "name": "",
        "x": 690,
        "y": 220,
        "wires": [
            [
                "4bd51951f2d88e8a"
            ]
        ]
    },
    {
        "id": "4bd51951f2d88e8a",
        "type": "function",
        "z": "051eacec663484e5",
        "name": "Create Virtual Teams",
        "func": "let players = msg.players;\nlet modules = msg.payload[0];\nlet roles = msg.payload[1];\n\nlet vteams = [];\nlet errors = [];\n\nmodules.forEach( mod => {\n    \n    let vteam = {}\n    \n        //vteam.module = mod.module;\n        \n    \n        let vplayers = JSON.parse(JSON.stringify(players))\n    \n        for(i=1;i<12;i++) {\n            \n            let fieldZone = mod[i].split(\"-\")[1]\n            let fieldPosition = mod[i].split(\"-\")[0]\n            \n            let validRoles = roles.filter(r => r.fieldZone == fieldZone && r.fieldPosition == fieldPosition ).map(r => r.ruolo); \n            \n            if (!validRoles || validRoles.length < 1 ) {\n                 errors.push({ \"message\" : \"can't find role for position \"+fieldPosition+\" and zone \"+fieldZone});\n            } else {\n                 let player  = vplayers.filter( p => validRoles.includes(p.currentRole))[0];\n            \n            vteam = player && player.playerId ? JSON.parse(JSON.stringify(player)) : errors.push({ \"message\" : \"can't find player for roles\", \"roles\" : validRoles});\n            \n            if (vteam && vteam.playerId) {\n                \n                const objWithIdIndex = vplayers.findIndex((p) => p.playerId === vteam.playerId);\n\n                  if (objWithIdIndex > -1) {\n                    vplayers.splice(objWithIdIndex, 1);\n                  }\n\n            }\n            \n            vteam.number = i;\n            vteam.module = mod.module;\n            vteams.push(vteam)\n            }\n\n            \n           \n\n        }\n        \n    \n})\n\nmsg.payload=vteams;\nmsg.errors = errors;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1000,
        "y": 220,
        "wires": [
            [
                "f0ea0e45912d05fd",
                "7270f71d42a4c5ef"
            ]
        ]
    },
    {
        "id": "f0ea0e45912d05fd",
        "type": "debug",
        "z": "051eacec663484e5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1230,
        "y": 280,
        "wires": []
    },
    {
        "id": "8ce4331c0a7fd706",
        "type": "csv",
        "z": "051eacec663484e5",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "playerId,name,currentClubId,currentClubName,currentLeagueId,currentPosition,currentRole,potentialPrice,salaryPotential,salaryNet,effectivness ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1950,
        "y": 160,
        "wires": [
            []
        ]
    },
    {
        "id": "3e3b28a0ed6dac80",
        "type": "function",
        "z": "051eacec663484e5",
        "name": "Query Vitual Teams",
        "func": "\nif(flow.get(\"orderArr\").length > 0 ) {\n    \n    let clause = flow.get(\"orderArr\").pop();\n    msg.orderBy = clause.orderBy\n    msg.where = clause.where\n    let playerSetQuery = \"select ls.playerId, ls.name, ls.age, ls.currentClubId, ls.currentClubName, ls.currentLeagueId, ls.currentLeagueName, ls.currentPosition, ls.currentRole, ls.currentRole2,ls.potentialPrice, ls.salaryPotential, ls.consumerValue, ls.salaryNet, ls.performance, (select sfc.countryName from sf_countries sfc where sfc.countryCode = ls.nationalityCode ) as 'nationality', ls.nationalityCode, ls.elaborationNum from latestplayers_staging ls where  \"+clause.where+\" ORDER BY \"+clause.orderBy+\" DESC;\";\n    msg.topic = playerSetQuery;\n    \n    flow.get(\"logmsg\").message = \"Building Virtual teams by \"+clause.orderBy+\" where \"+clause.where\n    node.log(flow.get(\"logmsg\"))\n    \n    \n    return msg;\n} else {\n    \n    flow.get(\"logmsg\").message = \"Virtual Teams Completed\"\n    node.log(flow.get(\"logmsg\"))\n    \n    msg.payload=\"done\"\n        return msg;\n\n}\n\n\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 990,
        "y": 540,
        "wires": [
            [
                "6306d0f0a9829c03"
            ]
        ]
    },
    {
        "id": "3bbdf757cdfb2d6a",
        "type": "http in",
        "z": "051eacec663484e5",
        "name": "/virtualteams ORIGINAL [POST]",
        "url": "/virtualteams_ORIGINAL",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 540,
        "wires": [
            [
                "a1752de5c21d9631"
            ]
        ]
    },
    {
        "id": "d8e94141b7bcbc70",
        "type": "http response",
        "z": "051eacec663484e5",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "text/csv"
        },
        "x": 1970,
        "y": 340,
        "wires": []
    },
    {
        "id": "0e8dda809dd90b96",
        "type": "mysql",
        "z": "051eacec663484e5",
        "mydb": "14f41b2b.4deca5",
        "name": "",
        "x": 1350,
        "y": 580,
        "wires": [
            [
                "ebf7f02e841f58ee"
            ]
        ]
    },
    {
        "id": "ebf7f02e841f58ee",
        "type": "function",
        "z": "051eacec663484e5",
        "name": "Set players",
        "func": "const players = msg.payload;\nmsg.players = players;\n\nlet nationalities=[];\nlet leagues=[];\nlet clubs=[];\n\n\nplayers.forEach( p=> {\n    \n\n    if (!nationalities.includes(p.nationalityCode)) {nationalities.push(p.nationalityCode)}\n    if (!leagues.includes(p.currentLeagueId)) {leagues.push(p.currentLeagueId)}\n    if (!clubs.includes(p.currentClubId)) {clubs.push(p.currentClubId)}\n    \n})\n\nmsg.nationalities = nationalities;\nmsg.leagues = leagues;\nmsg.clubs = clubs;\n\n\nlet filteringEntitites = [];\n\nnationalities.forEach( n => {\n    \n    let et = {};\n    \n    et.entityType = \"nationalityCode\";\n    et.entityId = n\n    \n    filteringEntitites.push(et)\n})\n\nleagues.forEach( n => {\n    \n    let et = {};\n    \n    et.entityType = \"currentLeagueId\";\n    et.entityId = n\n    \n    filteringEntitites.push(et)\n})\n\nclubs.forEach( n => {\n    \n    let et = {};\n    \n    et.entityType = \"currentClubId\";\n    et.entityId = n\n    \n    filteringEntitites.push(et)\n})\n\n\nflow.get(\"logmsg\").message = \"Filtering entities created\"\nnode.log(flow.get(\"logmsg\"))\n\nmsg.filteringEntities = filteringEntitites\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1530,
        "y": 580,
        "wires": [
            [
                "68598a4593cdee2b"
            ]
        ]
    },
    {
        "id": "81586d846a5b5a17",
        "type": "comment",
        "z": "051eacec663484e5",
        "name": "VIRTUAL TEAMS GENERATION",
        "info": "",
        "x": 490,
        "y": 360,
        "wires": []
    },
    {
        "id": "68598a4593cdee2b",
        "type": "function",
        "z": "051eacec663484e5",
        "name": "Query Modules&Roles",
        "func": "\n\nmsg.topic = \"select * from fieldmodules; select idRuolo, TRIM(ruolo) as ruolo, TRIM(sigla) as sigla, gruppo, peso,TRIM(ruoloris) as ruoloris, TRIM(fieldPosition) as fieldPosition, TRIM(fieldZone) as fieldZone from role;\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1760,
        "y": 580,
        "wires": [
            [
                "ca29f0683a7c4f84"
            ]
        ]
    },
    {
        "id": "ca29f0683a7c4f84",
        "type": "mysql",
        "z": "051eacec663484e5",
        "mydb": "14f41b2b.4deca5",
        "name": "",
        "x": 1970,
        "y": 580,
        "wires": [
            [
                "f2028bc9157c5a5f"
            ]
        ]
    },
    {
        "id": "f2028bc9157c5a5f",
        "type": "function",
        "z": "051eacec663484e5",
        "name": "Create Virtual Teams",
        "func": "const players = msg.players;\nconst modules = msg.payload[0];\nconst roles = msg.payload[1];\nconst filteringEntities = msg.filteringEntities;\n\nlet vteams = [];\nlet errors = [];\n\n\nmodules.forEach( mod => {\n    flow.get(\"logmsg\").message = \"orderBy \"+ msg.orderBy +\" - where \"+msg.where+\" - module \"+mod.module;\n    node.log(flow.get(\"logmsg\"))\n    \n    filteringEntities.forEach( fe => {\n        \n        let feplayers = players.filter(p => p[fe.entityType]=== fe.entityId)\n        \n        if (feplayers && feplayers.length>0) {\n            \n           /* if (fe.entityId == '1r097lpxe0xn03ihb7wi98kao') {\n                           msg.feplayers = feplayers;\n                        }*/\n            \n            \n            \n            let vplayers = JSON.parse(JSON.stringify(feplayers))\n            let vplayer = {}\n            \n            for(i=1;i<12;i++) {\n            \n                let options = mod[i].split(\"?\")\n                for(l=0; l<options.length;l++) {\n                   \n                    let fieldZone = options[l].split(\"-\")[1]\n                    let fieldPosition = options[l].split(\"-\")[0]\n                \n                    \n                    let validRoles = roles.filter(r => r.fieldZone.trim() == fieldZone.trim() && r.fieldPosition == fieldPosition ).map(r => r.ruolo); \n                \n                   \n                \n                    if (!validRoles || validRoles.length < 1 ) {\n                        errors.push({ \"message\" : \"can't find role for position \"+fieldPosition+\" and zone \"+fieldZone});\n                    } else {\n                         \n                        let player  = vplayers.filter( p => ( validRoles.includes(p.currentRole) || validRoles.includes(p.currentRole2)))[0];\n                    \n                        if (fe.entityId == '1r097lpxe0xn03ihb7wi98kao' && fieldPosition == \"Lateral Defender\" && fieldZone == \"L\") {\n                           // console.log(vplayers.filter( p => validRoles.includes(p.currentRole)))\n                        }\n                    \n                        vplayer = player && player.playerId ? JSON.parse(JSON.stringify(player)) : null;\n                    \n                        if (vplayer && vplayer.playerId) {\n                            \n                            const objWithIdIndex = vplayers.findIndex((p) => p.playerId === vplayer.playerId);\n            \n                             if (objWithIdIndex > -1) {\n                                vplayers.splice(objWithIdIndex, 1);\n                              }\n                              \n                              \n                            vplayer.number = i;\n                            vplayer.module = mod.module;\n                            vplayer.entityType = fe.entityType\n                            vplayer.entityId = fe.entityId\n                            vplayer.orderBy = msg.orderBy\n                            vplayer.where = msg.where\n                            vteams.push(vplayer)\n                            \n                            break;\n            \n                        }\n                \n                    } \n                }\n            \n                \n\n            \n           \n\n        }\n    }\n        \n        \n    })\n    \n \n\n        \n    \n})\n\nflow.get(\"logmsg\").message = \"Building vteams for orderBy \"+ msg.orderBy +\" and where \"+msg.where+\" completed\"\nnode.log(flow.get(\"logmsg\"))\n\nmsg.payload=vteams;\n// msg.errors = errors;\n// msg.positions = positions;\n// msg.zones = zones;\n// msg.roles = roles;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2200,
        "y": 580,
        "wires": [
            [
                "3583ec79ca3dfe38"
            ]
        ]
    },
    {
        "id": "0eaa8c74e68fa2a2",
        "type": "csv",
        "z": "051eacec663484e5",
        "name": "",
        "sep": ",",
        "hdrin": "",
        "hdrout": "all",
        "multi": "one",
        "ret": "\\n",
        "temp": "playerId,name,currentClubId,currentClubName,currentLeagueId,currentPosition,currentRole,potentialPrice,salaryPotential,salaryNet,effectivness ",
        "skip": "0",
        "strings": true,
        "include_empty_strings": "",
        "include_null_values": "",
        "x": 1770,
        "y": 260,
        "wires": [
            [
                "d8e94141b7bcbc70"
            ]
        ]
    },
    {
        "id": "3583ec79ca3dfe38",
        "type": "link out",
        "z": "051eacec663484e5",
        "name": "",
        "mode": "link",
        "links": [
            "ab2bb234a98818f4"
        ],
        "x": 2355,
        "y": 580,
        "wires": []
    },
    {
        "id": "ab2bb234a98818f4",
        "type": "link in",
        "z": "051eacec663484e5",
        "name": "STOREVTEAMS",
        "links": [
            "3583ec79ca3dfe38"
        ],
        "x": 305,
        "y": 860,
        "wires": [
            [
                "383d5f241b8c5e4e"
            ]
        ]
    },
    {
        "id": "a1752de5c21d9631",
        "type": "function",
        "z": "051eacec663484e5",
        "name": "Delete vteams;",
        "func": "let logmsg = global.get(\"logmsg\");\n\nif(!logmsg) {\n    \n    logmsg = {}\n    logmsg.type = \"db\"\n    logmsg.taskType = \"virtual teams\"\n    logmsg.taskId = Math.floor(Math.random() * 1000001);\n    logmsg.message = \"virtual teams building started\"\n    logmsg.taskRunning = true\n}\n\n\n\nflow.set(\"logmsg\",logmsg)\n\nmsg.payload = logmsg;\n    \n\n\nnode.log(logmsg)\n\n\n\nmsg.topic = \"delete from virtualteams;\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 540,
        "wires": [
            [
                "27868117946e9490"
            ]
        ]
    },
    {
        "id": "27868117946e9490",
        "type": "mysql",
        "z": "051eacec663484e5",
        "mydb": "14f41b2b.4deca5",
        "name": "",
        "x": 530,
        "y": 540,
        "wires": [
            [
                "18f371085b2eb806"
            ]
        ]
    },
    {
        "id": "84f2a3d70eafd572",
        "type": "function",
        "z": "051eacec663484e5",
        "name": "Stats insert builder",
        "func": "let vplayers = msg.payload;\n\nlet keysArr = [\"entityType\",\"entityId\",\"where\",\"orderBy\",\"module\",\"number\",\"playerId\",\"name\",\"age\",\"currentClubId\",\"currentClubName\",\"currentLeagueId\",\"currentLeagueName\",\"nationalityCode\",\"nationality\",\"currentPosition\",\"currentRole\",\"potentialPrice\",\"salaryPotential\",\"consumerValue\",\"salaryNet\",\"performance\",\"elaborationNum\"];\n\nlet topic = \"INSERT INTO virtualteams ( entityType,entityId,`where`,orderBy,module,number,playerId,name,age,currentClubId,currentClubName,currentLeagueId,currentLeagueName,nationalityCode,nationality,currentPosition,currentRole,potentialPrice,salaryPotential,consumerValue,salaryNet,performance,elaborationNum) \"\n\nlet values = \"VALUES  \"\n\nvplayers.forEach( vp => {\n    \n    let vpvalue = \"(\"\n    \n    keysArr.forEach( k => {\n        \n        let value;\n        \n        if (typeof vp[k] === \"string\" ) {\n        \n        let s = vp[k].replace(/'/g, \"'\"+\"'\")\n        value = '\"'+s+'\"'\n        \n        } else {\n            value = vp[k]\n        }\n        \n        //if(k==\"nationality\") { value = \"'na'\" }\n    \n        vpvalue = vpvalue + value + \",\"\n    \n    })\n    vpvalue = vpvalue.slice(0,-1) //rimuoviamo la virgola finale\n\n    vpvalue = vpvalue + \"),\"\n    \n    values = values + vpvalue\n\n})\n\n\nvalues = values.slice(0,-1) //rimuoviamo la virgola finale\n\n\nmsg.topic = topic + values;\n let part = msg.parts.index+1;\n\nflow.get(\"logmsg\").message = \"Inserting teams part \"+ part +\" of \"+ msg.parts.count;\nnode.log(flow.get(\"logmsg\"))\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 890,
        "y": 860,
        "wires": [
            [
                "1d2939b8f0ac0d50"
            ]
        ]
    },
    {
        "id": "1d2939b8f0ac0d50",
        "type": "mysql",
        "z": "051eacec663484e5",
        "mydb": "14f41b2b.4deca5",
        "name": "",
        "x": 1130,
        "y": 860,
        "wires": [
            [
                "1672855e3eb67004"
            ]
        ]
    },
    {
        "id": "18f371085b2eb806",
        "type": "function",
        "z": "051eacec663484e5",
        "name": "Array Popper Setter",
        "func": "\nflow.get(\"logmsg\").message = \"Virtual teams deleted\"\nnode.log(flow.get(\"logmsg\"))\n\nlet orderArr = [\n    {\n        where :  \"1=1\",\n        orderBy : \"performance\"\n    },\n    {\n        where : \"1=1\",\n        orderBy : \"potentialPrice\"\n    },\n    \n     {\n        where :  \"age < 24\",\n        orderBy : \"potentialPrice\"\n    },\n    {\n        where : \"1=1\",\n        orderBy : \"consumerValue\"\n    },\n    \n     {\n        where :  \"age < 24\",\n        orderBy : \"consumerValue\"\n    }\n    \n    ]\n    \n\n/*orderArr = [\n    \n    {\n        where :  \"1=1\",\n        orderBy : \"effectiveness\"\n    }\n    \n    ]*/\n    \n    \n//[\"potentialPrice\",\"salaryNet\",\"salaryPotential\",\"effectiveness\"] \nflow.set(\"orderArr\",orderArr)\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 540,
        "wires": [
            [
                "3e3b28a0ed6dac80"
            ]
        ]
    },
    {
        "id": "f23b4ee5006bcbc7",
        "type": "http response",
        "z": "051eacec663484e5",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "text/csv"
        },
        "x": 1350,
        "y": 480,
        "wires": []
    },
    {
        "id": "6306d0f0a9829c03",
        "type": "switch",
        "z": "051eacec663484e5",
        "name": "",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "done",
                "vt": "str"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1190,
        "y": 540,
        "wires": [
            [
                "f23b4ee5006bcbc7"
            ],
            [
                "0e8dda809dd90b96"
            ]
        ]
    },
    {
        "id": "383d5f241b8c5e4e",
        "type": "split",
        "z": "051eacec663484e5",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": "5000",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 410,
        "y": 860,
        "wires": [
            [
                "33b4459c5080383a"
            ]
        ]
    },
    {
        "id": "33b4459c5080383a",
        "type": "delay",
        "z": "051eacec663484e5",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 600,
        "y": 860,
        "wires": [
            [
                "84f2a3d70eafd572"
            ]
        ]
    },
    {
        "id": "0174e6ec95adc7d2",
        "type": "inject",
        "z": "051eacec663484e5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 440,
        "wires": [
            [
                "a1752de5c21d9631"
            ]
        ]
    },
    {
        "id": "1672855e3eb67004",
        "type": "function",
        "z": "051eacec663484e5",
        "name": "Check if completed",
        "func": "if (msg.parts.count==msg.parts.index+1)\n{\n    msg.payload=null;\n    msg.topic=null;\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1330,
        "y": 860,
        "wires": [
            [
                "3e3b28a0ed6dac80"
            ]
        ]
    },
    {
        "id": "b7e2f093164f6e9f",
        "type": "catch",
        "z": "051eacec663484e5",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 1780,
        "y": 80,
        "wires": [
            [
                "05ba15c00dd8f261"
            ]
        ]
    },
    {
        "id": "94ad5264b9b269c6",
        "type": "debug",
        "z": "051eacec663484e5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 2070,
        "y": 80,
        "wires": []
    },
    {
        "id": "05ba15c00dd8f261",
        "type": "function",
        "z": "051eacec663484e5",
        "name": "Log",
        "func": "\nflow.get(\"logmsg\").message = mgs.error\nnode.log(flow.get(\"logmsg\"))\n//return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1930,
        "y": 80,
        "wires": [
            [
                "94ad5264b9b269c6"
            ]
        ]
    },
    {
        "id": "f0d6cdc5bac4b7b6",
        "type": "function",
        "z": "051eacec663484e5",
        "name": "Query Vitual Teams",
        "func": "\nmsg.modules = msg.payload[0];\nmsg.roles = msg.payload[1];\n\nconst where = msg.where;\nconst orderBy = msg.orderBy;\nconst playerSetQuery = \"select ls.playerId, ls.name, ls.age, ls.currentClubId, ls.currentClubName, ls.currentLeagueId, ls.currentLeagueName, ls.currentPosition, ls.currentRole, ls.currentRole2,ls.potentialPrice, ls.salaryPotential, ls.consumerValue, ls.salaryNet, ls.performance, (select sfc.countryName from sf_countries sfc where sfc.countryCode = ls.nationalityCode ) as 'nationality', ls.nationalityCode, ls.elaborationNum from latestplayers_staging ls where  \"+where+\" ORDER BY \"+orderBy+\" DESC;\";\n\nflow.get(\"logmsg\").message = \"Building Virtual teams by \"+orderBy+\" where \"+ where\nnode.log(flow.get(\"logmsg\"))\n\nmsg.topic = playerSetQuery;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 2140,
        "wires": [
            [
                "11c50aa957cf51d8",
                "cdf035906f3204d5"
            ]
        ]
    },
    {
        "id": "11c50aa957cf51d8",
        "type": "mysql",
        "z": "051eacec663484e5",
        "mydb": "14f41b2b.4deca5",
        "name": "",
        "x": 910,
        "y": 2140,
        "wires": [
            [
                "e05ae77f4379b1fa"
            ]
        ]
    },
    {
        "id": "e05ae77f4379b1fa",
        "type": "function",
        "z": "051eacec663484e5",
        "name": "Set players",
        "func": "// Usa il payload direttamente senza creare una copia\nconst players = msg.payload;\n\n// Usa Set invece di array per evitare duplicati in modo efficiente\nconst nationalities = new Set();\nconst leagues = new Set();\nconst clubs = new Set();\n\n// Aggiungi controlli per valori nulli o undefined\nplayers.forEach(p => {\n    if (p.nationalityCode) nationalities.add(p.nationalityCode);\n    if (p.currentLeagueId) leagues.add(p.currentLeagueId);\n    if (p.currentClubId) clubs.add(p.currentClubId);\n});\n\n// Converti i Set in array e assegnali all'oggetto msg\nmsg.nationalities = [...nationalities];\nmsg.leagues = [...leagues];\nmsg.clubs = [...clubs];\n\n// Pre-alloca l'array per le entità di filtraggio con la dimensione appropriata\nconst filteringEntities = [];\nconst totalEntities = nationalities.size + leagues.size + clubs.size;\nfilteringEntities.length = totalEntities;\n\n// Popola l'array delle entità di filtraggio in modo più efficiente\nlet index = 0;\n\nnationalities.forEach(n => {\n    filteringEntities[index++] = {\n        entityType: \"nationalityCode\",\n        entityId: n\n    };\n});\n\nleagues.forEach(n => {\n    filteringEntities[index++] = {\n        entityType: \"currentLeagueId\",\n        entityId: n\n    };\n});\n\nclubs.forEach(n => {\n    filteringEntities[index++] = {\n        entityType: \"currentClubId\",\n        entityId: n\n    };\n});\n\n// Aggiorna il messaggio di log\nflow.get(\"logmsg\").message = \"Filtering entities created\";\nnode.log(flow.get(\"logmsg\"));\n\n// Assegna l'array delle entità di filtraggio all'oggetto msg\nmsg.filteringEntities = filteringEntities;\n\n// Non memorizzare la copia dei players se non necessario\n// Decommentare solo se serve davvero mantenere questa copia\n// msg.players = players;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 2140,
        "wires": [
            [
                "9281b1db3a19a67c"
            ]
        ]
    },
    {
        "id": "9281b1db3a19a67c",
        "type": "function",
        "z": "051eacec663484e5",
        "name": "Create Virtual Teams",
        "func": "// Riferimenti diretti ai dati in input\nconst players = msg.payload;\nconst modules = msg.modules;\nconst roles = msg.roles;\nconst filteringEntities = msg.filteringEntities;\nconst logMsg = flow.get(\"logmsg\");\n\n// Verifica validità input\nif (!Array.isArray(players) ) {\n    node.error(\"ERRORE: players non è array valido\");\n    msg.error = \"Dati di input non validi\";\n    return msg;\n}\n\n// Verifica validità input\nif (!Array.isArray(modules) ) {\n    node.error(\"ERRORE: modules non è array valido\");\n    msg.error = \"Dati di input non validi\";\n    return msg;\n}\n\n// Verifica validità input\nif (!Array.isArray(roles)) {\n    node.error(\"ERRORE: roles non è array valido\");\n    msg.error = \"Dati di input non validi\";\n    return msg;\n}\n\n// Verifica validità input\nif (!Array.isArray(filteringEntities)) {\n    node.error(\"ERRORE: filteringEntities non è array valido\");\n    msg.error = \"Dati di input non validi\";\n    return msg;\n}\n\n// Pre-allocazione dell'array dei risultati e degli errori\nconst vteams = [];\nconst errors = [];\n\n// Log iniziale\nnode.log(`INFO: Inizio elaborazione - ${modules.length} moduli, ${filteringEntities.length} entità, ${players.length} giocatori`);\n\n// Preparo una mappa dei ruoli validi per ottimizzare le ricerche\nconst roleMap = new Map();\ntry {\n    roles.forEach(r => {\n        if (!r.fieldPosition || !r.fieldZone) return; // Skip questo ruolo\n        \n        const key = `${r.fieldPosition}-${r.fieldZone.trim()}`;\n        if (!roleMap.has(key)) {\n            roleMap.set(key, []);\n        }\n        roleMap.get(key).push(r.ruolo);\n    });\n} catch (error) {\n    node.error(`ERRORE nella creazione della roleMap: ${error.message}`);\n    msg.error = error.message;\n    return msg;\n}\n\n// Elaborazione per ogni modulo\ntry {\n    // Contatori per log di progresso\n    let modulesCompleted = 0;\n    const totalModules = modules.length;\n    const logInterval = Math.max(1, Math.floor(totalModules / 5)); // Log ogni 20% circa\n    \n    for (let modIndex = 0; modIndex < modules.length; modIndex++) {\n        const mod = modules[modIndex];\n        \n        // Log di progressione solo ogni X moduli\n        if (modIndex % logInterval === 0 || modIndex === 0) {\n            logMsg.message = `Elaborazione modulo ${modIndex+1}/${totalModules}: ${mod.module}`;\n            node.log(logMsg);\n        }\n        \n        // Elaborazione per ogni entità di filtraggio\n        for (let feIndex = 0; feIndex < filteringEntities.length; feIndex++) {\n            const fe = filteringEntities[feIndex];\n            \n            // Filtro i giocatori per entità\n            const feplayers = players.filter(p => p[fe.entityType] === fe.entityId);\n            \n            if (feplayers && feplayers.length > 0) {\n                try {\n                    // Crea una copia dei giocatori filtrati\n                    const vplayers = JSON.parse(JSON.stringify(feplayers));\n                    \n                    // Itera sulle posizioni del modulo (da 1 a 11)\n                    for (let i = 1; i < 12; i++) {\n                        if (!mod[i]) continue; // Salta se la posizione non è definita\n                        \n                        const options = mod[i].split(\"?\");\n                        let playerFound = false;\n                        \n                        for (let l = 0; l < options.length && !playerFound; l++) {\n                            const parts = options[l].split(\"-\");\n                            if (parts.length < 2) continue; // Salta opzioni malformate\n                            \n                            const fieldPosition = parts[0];\n                            const fieldZone = parts[1].trim();\n                            \n                            // Ottieni i ruoli validi dalla mappa\n                            const roleKey = `${fieldPosition}-${fieldZone}`;\n                            const validRoles = roleMap.get(roleKey);\n                            \n                            if (!validRoles || validRoles.length < 1) {\n                                errors.push({ \n                                    \"message\": `Can't find role for position ${fieldPosition} and zone ${fieldZone}` \n                                });\n                                continue;\n                            }\n                            \n                            // Trova un giocatore adatto\n                            const playerIndex = vplayers.findIndex(p => \n                                (p.currentRole && validRoles.includes(p.currentRole)) || \n                                (p.currentRole2 && validRoles.includes(p.currentRole2))\n                            );\n                            \n                            if (playerIndex !== -1) {\n                                // Estrai il giocatore e rimuovilo dall'array\n                                const player = vplayers.splice(playerIndex, 1)[0];\n                                \n                                // Aggiungi le proprietà necessarie\n                                player.number = i;\n                                player.module = mod.module;\n                                player.entityType = fe.entityType;\n                                player.entityId = fe.entityId;\n                                player.orderBy = msg.orderBy;\n                                player.where = msg.where;\n                                \n                                // Aggiungi alla lista dei team virtuali\n                                vteams.push(player);\n                                playerFound = true;\n                            }\n                        }\n                    }\n                } catch (parseError) {\n                    node.error(`ERRORE nell'elaborazione dei giocatori: ${parseError.message}`);\n                    errors.push({ \"message\": parseError.message });\n                }\n            }\n        }\n        \n        // Incrementa e controlla il contatore di moduli completati\n        modulesCompleted++;\n        if (modulesCompleted % logInterval === 0 || modulesCompleted === totalModules) {\n            node.log(`INFO: Completati ${modulesCompleted}/${totalModules} moduli (${Math.round(modulesCompleted/totalModules*100)}%)`);\n        }\n    }\n} catch (moduleError) {\n    node.error(`ERRORE nell'elaborazione dei moduli: ${moduleError.message}`);\n    msg.error = moduleError.message;\n    errors.push({ \"message\": moduleError.message });\n}\n\n// Log finale\nlogMsg.message = `Building vteams for orderBy ${msg.orderBy} and where ${msg.where} completed - ${vteams.length} team creati`;\nnode.log(logMsg);\n\n// Output\nmsg.payload = vteams;\nif (errors.length > 0) {\n    msg.errors = errors;\n    node.warn(`ATTENZIONE: ${errors.length} errori durante l'elaborazione`);\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 2140,
        "wires": [
            [
                "502369f3fb936de4",
                "b4b39182479f9404"
            ]
        ]
    },
    {
        "id": "86a573109f470917",
        "type": "function",
        "z": "051eacec663484e5",
        "name": "Stats insert builder",
        "func": "// Riferimento diretto all'array di giocatori\nconst vplayers = msg.payload;\n// Chiavi da utilizzare nella query (immutabile)\nconst keysArr = [\n    \"entityType\", \"entityId\", \"where\", \"orderBy\", \"module\", \"number\", \n    \"playerId\", \"name\", \"age\", \"currentClubId\", \"currentClubName\", \n    \"currentLeagueId\", \"currentLeagueName\", \"nationalityCode\", \"nationality\", \n    \"currentPosition\", \"currentRole\", \"potentialPrice\", \"salaryPotential\", \n    \"consumerValue\", \"salaryNet\", \"performance\", \"elaborationNum\"\n];\n\n// Costruzione dell'intestazione della query una sola volta\nconst topic = \"INSERT INTO virtualteams (\" + keysArr.map(k => {\n    // Gestione speciale per la parola chiave 'where'\n    return k === \"where\" ? \"`where`\" : k;\n}).join(\",\") + \") VALUES \";\n\n// Pre-allocazione di un array di stringhe per i valori\n// Questo è più efficiente che concatenare stringhe\nconst valueRows = new Array(vplayers.length);\n\n// Funzione di escape per stringhe SQL\nfunction escapeSqlString(str) {\n    if (str === null || str === undefined) return \"NULL\";\n    return '\"' + String(str).replace(/\"/g, '\"\"') + '\"';\n}\n\n// Elaborazione di ogni giocatore\nfor (let i = 0; i < vplayers.length; i++) {\n    const vp = vplayers[i];\n    const valueColumns = new Array(keysArr.length);\n    \n    // Elaborazione di ogni campo\n    for (let j = 0; j < keysArr.length; j++) {\n        const k = keysArr[j];\n        const value = vp[k];\n        \n        // Gestione appropriata del tipo di valore\n        if (value === null || value === undefined) {\n            valueColumns[j] = \"NULL\";\n        } else if (typeof value === \"string\") {\n            valueColumns[j] = escapeSqlString(value);\n        } else if (typeof value === \"number\") {\n            valueColumns[j] = isNaN(value) ? \"NULL\" : value;\n        } else if (typeof value === \"boolean\") {\n            valueColumns[j] = value ? 1 : 0;\n        } else {\n            // Per altri tipi (date, oggetti) convertiamo in stringa\n            valueColumns[j] = escapeSqlString(String(value));\n        }\n    }\n    \n    // Costruzione della riga dei valori\n    valueRows[i] = \"(\" + valueColumns.join(\",\") + \")\";\n}\n\n// Costruzione della query completa\nmsg.topic = topic + valueRows.join(\",\");\n\n// Logging\nconst part = msg.parts.index + 1;\nconst logMsg = flow.get(\"logmsg\");\nlogMsg.message = \"Inserting teams part \" + part + \" of \" + msg.parts.count;\nnode.log(logMsg);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1870,
        "y": 2140,
        "wires": [
            [
                "4703b2360d73abf9"
            ]
        ]
    },
    {
        "id": "4703b2360d73abf9",
        "type": "mysql",
        "z": "051eacec663484e5",
        "mydb": "14f41b2b.4deca5",
        "name": "",
        "x": 2050,
        "y": 2140,
        "wires": [
            [
                "ed01232edaf53084"
            ]
        ]
    },
    {
        "id": "502369f3fb936de4",
        "type": "split",
        "z": "051eacec663484e5",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": "5000",
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1490,
        "y": 2140,
        "wires": [
            [
                "c76a677a9bbf7472"
            ]
        ]
    },
    {
        "id": "c76a677a9bbf7472",
        "type": "delay",
        "z": "051eacec663484e5",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1660,
        "y": 2140,
        "wires": [
            [
                "86a573109f470917"
            ]
        ]
    },
    {
        "id": "ed01232edaf53084",
        "type": "function",
        "z": "051eacec663484e5",
        "name": "Check if completed",
        "func": "if (msg.parts.count==msg.parts.index+1)\n{\n    msg.payload=null;\n    msg.topic=null;\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2230,
        "y": 2140,
        "wires": [
            [
                "bc720168d6f79c06"
            ]
        ]
    },
    {
        "id": "cdf035906f3204d5",
        "type": "function",
        "z": "051eacec663484e5",
        "name": "Delete vteams;",
        "func": "// Ottieni valori dalle proprietà del messaggio\nconst where = msg.where;\nconst orderBy = msg.orderBy;\n\n// Escape delle stringhe per prevenire SQL injection\nfunction escapeSqlString(str) {\n    if (str === null || str === undefined) return \"NULL\";\n    return '\"' + String(str).replace(/\"/g, '\"\"') + '\"';\n}\n\n// Costruisci la query con i valori correttamente formattati\nmsg.topic = `DELETE FROM virtualteams WHERE \\`where\\` = ${escapeSqlString(where)} AND orderBy = ${escapeSqlString(orderBy)}`;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 960,
        "y": 2080,
        "wires": [
            [
                "94f32f6d847e3f33"
            ]
        ]
    },
    {
        "id": "94f32f6d847e3f33",
        "type": "mysql",
        "z": "051eacec663484e5",
        "mydb": "14f41b2b.4deca5",
        "name": "",
        "x": 1130,
        "y": 2080,
        "wires": [
            []
        ]
    },
    {
        "id": "d00d2fd960790eef",
        "type": "function",
        "z": "051eacec663484e5",
        "name": "Init",
        "func": "let logmsg = global.get(\"logmsg\");\n\nif(!logmsg) {\n    \n    logmsg = {}\n    logmsg.type = \"db\"\n    logmsg.taskType = \"virtual teams\"\n    logmsg.taskId = Math.floor(Math.random() * 1000001);\n    logmsg.message = \"virtual teams building started\"\n    logmsg.taskRunning = true\n}\n\n\n\nflow.set(\"logmsg\",logmsg)\n\nnode.log(logmsg)\n\n\n\n\n\n\n// Inizializza l'elaborazione\nconst pairs = [\n    {\n        where :  \"1=1\",\n        orderBy : \"performance\"\n    },\n    {\n        where : \"1=1\",\n        orderBy : \"potentialPrice\"\n    },\n    \n     {\n        where :  \"age < 24\",\n        orderBy : \"potentialPrice\"\n    },\n    {\n        where : \"1=1\",\n        orderBy : \"consumerValue\"\n    },\n    \n     {\n        where :  \"age < 24\",\n        orderBy : \"consumerValue\"\n    }\n    \n    ]\n\n// Salva l'elenco completo nel flow context\nflow.set(\"processing_pairs\", pairs);\nflow.set(\"current_pair_index\", 0);\nflow.set(\"processing_results\", []);\n\n// Imposta il primo elemento da elaborare\nif (pairs.length > 0) {\n    msg.where = pairs[0].where;\n    msg.orderBy = pairs[0].orderBy;\n    return msg;  // Invia al sottoflusso\n} else {\n    // Nessun elemento da elaborare\n    return null;\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 2000,
        "wires": [
            [
                "1289906e6037fd32"
            ]
        ]
    },
    {
        "id": "bc720168d6f79c06",
        "type": "function",
        "z": "051eacec663484e5",
        "name": "Callback",
        "func": "// Recupera lo stato corrente\nconst pairs = flow.get(\"processing_pairs\") || [];\nlet currentIndex = flow.get(\"current_pair_index\") || 0;\nconst results = flow.get(\"processing_results\") || [];\n\n// Salva il risultato dell'elaborazione corrente\nresults.push({ \n    where: msg.where, \n    orderBy: msg.orderBy, \n    result: msg.payload \n});\nflow.set(\"processing_results\", results);\n\n// Incrementa l'indice per il prossimo elemento\ncurrentIndex++;\nflow.set(\"current_pair_index\", currentIndex);\n\n// Verifica se ci sono altri elementi da elaborare\nif (currentIndex < pairs.length) {\n    // Prepara il prossimo elemento\n    const nextPair = pairs[currentIndex];\n    msg.where = nextPair.where;\n    msg.orderBy = nextPair.orderBy;\n    \n    // Aggiorna lo stato di avanzamento\n    node.status({fill:\"blue\", shape:\"dot\", text:`Elaborazione ${currentIndex+1}/${pairs.length}`});\n    \n    return msg;  // Invia al sottoflusso\n} else {\n    // Elaborazione completata\n    node.status({fill:\"green\", shape:\"dot\", text:\"Completato\"});\n    \n    // Prepara il messaggio finale con tutti i risultati\n    msg.payload = results;\n    \n    // Pulisci il contesto se non serve più\n    flow.set(\"current_pair_index\", 0);\n    \n    return [null, msg];  // [output1, output2] - output2 va al nodo finale\n}",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1280,
        "y": 2460,
        "wires": [
            [
                "1289906e6037fd32"
            ],
            [
                "d46309aa469e4f9c"
            ]
        ]
    },
    {
        "id": "d46309aa469e4f9c",
        "type": "function",
        "z": "051eacec663484e5",
        "name": "End",
        "func": "flow.get(\"logmsg\").message = \"Virtual Teams Completed\"\n    node.log(flow.get(\"logmsg\"))\n    \n    msg.payload=\"done\"\n        return msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1630,
        "y": 2480,
        "wires": [
            []
        ]
    },
    {
        "id": "66eb0a9356f68ac8",
        "type": "inject",
        "z": "051eacec663484e5",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 220,
        "y": 1840,
        "wires": [
            [
                "d00d2fd960790eef"
            ]
        ]
    },
    {
        "id": "b4b39182479f9404",
        "type": "debug",
        "z": "051eacec663484e5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1630,
        "y": 1900,
        "wires": []
    },
    {
        "id": "1289906e6037fd32",
        "type": "function",
        "z": "051eacec663484e5",
        "name": "Query Modules&Roles",
        "func": "\n\nmsg.topic = \"select * from fieldmodules; select idRuolo, TRIM(ruolo) as ruolo, TRIM(sigla) as sigla, gruppo, peso,TRIM(ruoloris) as ruoloris, TRIM(fieldPosition) as fieldPosition, TRIM(fieldZone) as fieldZone from role;\"\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2140,
        "wires": [
            [
                "23c9190967e22149"
            ]
        ]
    },
    {
        "id": "23c9190967e22149",
        "type": "mysql",
        "z": "051eacec663484e5",
        "mydb": "14f41b2b.4deca5",
        "name": "",
        "x": 530,
        "y": 2140,
        "wires": [
            [
                "f0d6cdc5bac4b7b6"
            ]
        ]
    },
    {
        "id": "636f79e051e7b8fd",
        "type": "http in",
        "z": "051eacec663484e5",
        "name": "/virtualteams [POST]",
        "url": "/virtualteams",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 2040,
        "wires": [
            [
                "d00d2fd960790eef"
            ]
        ]
    },
    {
        "id": "d07c2148d6d8a557",
        "type": "function",
        "z": "338f2da8419b9555",
        "name": "Query Builder Statistiche",
        "func": "let filtri = {};\n\nif (msg.entityType && msg.entityId) {\n\n    filtri[msg[\"entityType\"]] = msg[\"entityId\"]\n} else {\n    filtri = msg.req.query;\n\n}\n\n\nmsg.filtri = filtri;\n\n\nmsg.status = 200;\n\nif (!filtri || filtri.length == 0) {\n\n    msg.status = 400; //Bad Request\n    msg.payload = \"Request body missing\";\n    console.log(msg.payload)\n    return msg;\n}\n\n/*\n\n{\n\n    \"leagueClusters\" : [],\n    \"leagues\" : [],\n    \"clubClusters\" : [],\n    \"clubs\" : [],\n    \"roles\" : [],\n    \"rolesRis\" : [],\n    \"nationalities\" : [],\n    \"players\" : [],\n }\n\n*/\n\nlet leagueClusterClause = \" \"\n\nif (filtri.leagueClusters) {\n    leagueClusterClause = \" and currentLeagueCluster in ( \" + filtri.leagueClusters + \")\"\n}\n\nlet leagueClause = \" \"\n\nif (filtri.leagues) {\n\n    let q = []\n    if (Array.isArray(filtri.leagues)) {\n        q = filtri.leagues\n    } else {\n        q.push(filtri.leagues)\n    }\n\n    leagueClause = \" and currentLeagueId in ( \" + q.map(l => '\"' + l + '\"') + \")\"\n}\n\nlet clubClusterClause = \" \"\nlet clusterClauseForClub = ''\n\nif (filtri.clubClusters) {\n    clubClusterClause = \" and currentClubCluster in ( \" + filtri.clubClusters + \")\"\n    clusterClauseForClub = \" and cluster in ( \" + filtri.clubClusters + \")\"\n}\n\nlet clubsClause = \" \"\n\nif (filtri.clubs) {\n\n    let q = []\n    if (Array.isArray(filtri.clubs)) {\n        q = filtri.clubs\n    } else {\n        q.push(filtri.clubs)\n    }\n\n    clubsClause = \" and currentClubId in ( \" + q.map(l => '\"' + l + '\"') + \")\"\n}\n\nlet rolesClause = \" \"\n\nif (filtri.roles) {\n    rolesClause = \" and latestRoleGroup in ( \" + filtri.roles + \")\"\n}\n\nlet rolesRisClause = \" \"\n\nif (filtri.rolesRis) {\n\n    let q = []\n    if (Array.isArray(filtri.rolesRis)) {\n        q = filtri.rolesRis\n    } else {\n        q.push(filtri.rolesRis)\n    }\n    rolesRisClause = \" and latestRoleRis in ( \" + q.map(l => '\"' + l + '\"') + \")\"\n}\n\nlet nationaltiesClause = \" \"\n\nif (filtri.nationalities) {\n\n    let q = []\n    if (Array.isArray(filtri.nationalities)) {\n        q = filtri.nationalities\n    } else {\n        q.push(filtri.nationalities)\n    }\n    nationaltiesClause = \" and nationality in ( \" + q.map(l => '\"' + l + '\"') + \")\"\n}\n\nlet playersClause = \" \"\n\nif (filtri.players) {\n\n    let q = []\n    if (Array.isArray(filtri.players)) {\n        q = filtri.players\n    } else {\n        q.push(filtri.players)\n    }\n\n    playersClause = \" and playerId in ( \" + q.map(l => '\"' + l + '\"') + \")\"\n}\n\nlet minAgeClause = \" \"\n\nif (filtri.minAge) {\n\n    minAgeClause = \" and age >= ( \" + filtri.minAge + \")\"\n}\n\nlet maxAgeClause = \" \"\n\nif (filtri.maxAge) {\n\n    maxAgeClause = \" and age <= ( \" + filtri.maxAge + \")\"\n}\n\n\nlet minFairSalaryClause = \" \"\n\nif (filtri.minFairSalary) {\n\n    minFairSalaryClause = \" and salaryPotential >= ( \" + filtri.minFairSalary + \")\"\n}\n\nlet maxFairSalaryClause = \" \"\n\nif (filtri.maxFairSalary) {\n\n    maxFairSalaryClause = \" and salaryPotential <= ( \" + filtri.maxFairSalary + \")\"\n}\n\nlet minFairPriceClause = \" \"\n\nif (filtri.minFairPrice) {\n\n    minFairSalaryClause = \" and potentialPrice >= ( \" + filtri.minFairPrice + \")\"\n}\n\nlet maxFairPricelause = \" \"\n\nif (filtri.maxFairPrice) {\n\n    maxFairPricelause = \" and potentialPrice <= ( \" + filtri.maxFairPrice + \")\"\n}\n\nlet minExpectedPriceClause = \" \"\n\nif (filtri.minExpectedPrice) {\n\n    minExpectedPriceClause = \" and expectedPrice >= ( \" + filtri.minExpectedPrice + \")\"\n}\n\nlet maxExpectedPriceClause = \" \"\n\nif (filtri.maxExpectedPrice) {\n\n    maxExpectedPriceClause = \" and expectedPrice <= ( \" + filtri.maxExpectedPrice + \")\"\n}\n\nlet minSalaryNetClause = \" \"\n\nif (filtri.minSalaryNet) {\n\n    minSalaryNetClause = \" and salaryNet >= ( \" + filtri.minSalaryNet + \")\"\n}\n\nlet maxSalaryNetClause = \" \"\n\nif (filtri.maxSalaryNet) {\n\n    maxExpectedPriceClause = \" and salaryNet <= ( \" + filtri.maxSalaryNet + \")\"\n}\n\nlet minEffectivenessClause = \" \"\n\nif (filtri.minEffectiveness) {\n\n    minEffectivenessClause = \" and effectiveness >= ( \" + filtri.minEffectiveness + \")\"\n}\n\nlet maxEffectivenessClause = \" \"\n\nif (filtri.maxEffectiveness) {\n\n    maxEffectivenessClause = \" and effectivness <= ( \" + filtri.maxEffectiveness + \")\"\n}\n\nlet minVolatilityClause = \" \"\n\nif (filtri.minVolatility) {\n\n    minVolatilityClause = \" and latestMicroVolatility >= ( \" + filtri.minVolatility + \")\"\n}\n\nlet maxVolatilityClause = \" \"\n\nif (filtri.maxVolatility) {\n\n    maxVolatilityClause = \" and latestMicroVolatility <= ( \" + filtri.maxVolatility + \")\"\n}\n\nlet dataSetQuery = \"select * from latestplayers_staging where 1=1\"\n    + leagueClusterClause\n    + leagueClause\n    + clubClusterClause\n    + clubsClause\n    + rolesClause\n    + rolesRisClause\n    + nationaltiesClause\n    + playersClause\n    + minAgeClause\n    + maxAgeClause\n    + minFairSalaryClause\n    + maxFairSalaryClause\n    + minFairPriceClause\n    + maxFairPricelause\n    + minExpectedPriceClause\n    + maxExpectedPriceClause\n    + minSalaryNetClause\n    + maxSalaryNetClause\n    + minEffectivenessClause\n    + maxEffectivenessClause\n    + minVolatilityClause\n    + maxVolatilityClause\n\nlet clubSetQuery = \"select * from latestclubs_staging where 1=1\"\n    + clusterClauseForClub\n\nlet clubWithQuery = \"clubFilter as ( \" + clubSetQuery + \" ) \"\n\nlet whithQuery = \"with filtered as ( \" + dataSetQuery + \" ), \"\n    + clubWithQuery\n\nlet statQuery =\n\n    \" select \"\n    // NUMERI ed ENTITA'\n    + \"\t(SELECT count(distinct currentLeagueId) FROM `filtered`) as numOfLeagues,\"\n    + \"\t(SELECT  GROUP_CONCAT(distinct currentLeagueId,';', currentLeagueName SEPARATOR ',') FROM `filtered`) as leagues,\"\n    + \"\t(SELECT count(distinct currentClubId) FROM `filtered`) as numOfClubs,\"\n    + \"\t(SELECT   CONCAT('id,name','\\r\\n',GROUP_CONCAT(distinct currentClubId,',', currentClubName SEPARATOR '\\r\\n'))  FROM `filtered`) as clubs,\"\n    + \"\t(SELECT @pnum:=count(distinct playerId) FROM `filtered`) as numOfPlayers,\"\n\n    //Foreign Players\n    + \"\t(SELECT @fpnam:=count(distinct playerId) FROM `filtered` where currentLeagueCountryCode <> nationalityCode) as numOfForeignPlayers,\"\n    + \"\t(@fpnam/@pnum)  as numOfForeignPlayersRatio,\"\n    + \"  (select nationalityCode from filtered where currentLeagueCountryCode <> nationalityCode GROUP BY nationalityCode order by count(nationalityCode) desc limit 1) as topExporter,\"\n    + \"  (select count(nationalityCode) from filtered where currentLeagueCountryCode <> nationalityCode GROUP BY nationalityCode order by count(nationalityCode) desc limit 1) as topExporterNum,\"\n    + \"  (select currentLeagueCountryCode from filtered where currentLeagueCountryCode <> nationalityCode GROUP BY currentLeagueCountryCode order by count(currentLeagueCountryCode) desc limit 1) as topImporter,\"\n    + \"  (select count(currentLeagueCountryCode) from filtered where currentLeagueCountryCode <> nationalityCode GROUP BY currentLeagueCountryCode order by count(currentLeagueCountryCode) desc limit 1) as topImporterNum,\"\n\n\n    // ETA'\n    + \"\t(select round(avg(age),2) from filtered) as avgAge, \"\n    + \"\t(select @maxage:=max(age) from filtered) as maxAge,\"\n    + \"\t(select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where age=@maxage group by age) as playerMaxAge,\"\n    + \"\t(select @minage:=min(age) from filtered ) as minAge, \"\n    + \"\t(select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where age=@minage) as playerMinAge,\"\n    + \"  (select count(*) from filtered where age <= 20 ) as under20NumOfPlayers,\"\n    + \"  (select count(*) from filtered where age <= 23 ) as under23NumOfPlayers,\"\n    + \"  (select count(*) from filtered where age > 20 and age <= 30 ) as 20to30NumOfPlayers,\"\n    + \"  (select count(*) from filtered where age > 30) as over30NumOfPlayers,\"\n\n    //  CONTRATTI \n    + \"\t(select @maxtmoc:=max(totalMonthsOfContract) from filtered) as maxTotalMonthsOfContract,\"\n    + \"\t(select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where totalMonthsOfContract=@maxtmoc ) as playerMaxTotalMonthsOfContract,\"\n    + \"  (select round(avg(totalMonthsOfContract),2) from filtered) as avgTotalMonthsOfContract,\"\n    + \"  (select round(avg(remainingMonthsOfContract),2) from filtered) as avgRemainingMonthsOfContract,\"\n    + \"  (select count(*) from filtered where remainingMonthsOfContract <  13 ) as playersWithExpiringContracts,\"\n    + \"  (select count(*) from filtered where contractType NOT LIKE '%estito' ) as borrowedOrLoanedPlayers,\"\n    + \"  (select count(*) from filtered where nationalTeamPlayer = 1 ) as nationalTeamPlayers,\"\n\n    //TRANSFER FEE\n    + \"\t(select @maxtf:=max(transferPrice) from filtered) as maxTransferPrice,\"\n    + \"\t(select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where transferPrice=@maxtf ) as playerMaxTransferPrice,\"\n    + \"\t(select round(avg(transferPrice),2) from filtered) as avgTransferPrice,\"\n    + \"\t(select round(sum(transferPrice),2) from filtered) as totalTransferPrice,\"\n\n    //POTENTIAL PRICE=FAIR PRICE\n    + \"  (select round(@maxpp:=max(potentialPrice),2) from filtered) as maxPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxpp ) as playerMaxPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered) as avgPotentialPrice,\"\n    + \"  (select round(sum(potentialPrice),2) from filtered) as totalPotentialPrice,\"\n\n    //CLUB POTENTIAL PRICE\n    + \"  (select round(@maxpp:=max(potentialPrice),2) from clubFilter) as maxClubPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from clubFilter where potentialPrice=@maxpp ) as clubMaxPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from clubFilter) as avgClubPotentialPrice,\"\n    + \"  (select round(sum(potentialPrice),2) from clubFilter) as totalClubPotentialPrice,\"\n\n    //EXPECTED PRICE\n    + \"  (select round(@maxep:=max(expectedPrice),2) from filtered) as maxExpectedPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where expectedPrice=@maxep ) as playerMaxExpectedPrice,\"\n    + \"  (select round(avg(expectedPrice),2) from filtered) as avgExpectedPrice,\"\n    + \"  (select round(sum(expectedPrice),2) from filtered) as totalExpectedPrice,\"\n\n    //CLUB EXPECTED PRICE\n    + \"  (select round(@maxep:=max(expectedPrice),2) from clubFilter) as maxClubExpectedPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from clubFilter where expectedPrice=@maxep ) as clubMaxExpectedPrice,\"\n    + \"  (select round(avg(expectedPrice),2) from clubFilter) as avgClubExpectedPrice,\"\n    + \"  (select round(sum(expectedPrice),2) from clubFilter) as totalClubExpectedPrice,\"\n\n    //FAIR SALARY=SALARY POTENTIAL\n    + \"  (select round(@maxsp:=max(salaryPotential),2) from filtered) as maxSalaryPotential,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where salaryPotential=@maxsp ) as playerMaxSalaryPotential,\"\n    + \"  (select round(avg(salaryPotential),2) from filtered ) as avgSalaryPotential,\"\n    + \"  (select round(sum(salaryPotential),2) from filtered ) as totalSalaryPotential,\"\n\n\n    //SALARY NET = PRESUMED SALARY\n    + \"  (select round(@maxsn:=max(salaryNet),2) from filtered) as maxSalaryNet,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where salaryNet=@maxsn ) as playerMaxSalaryNet,\"\n    + \"  (select round(avg(salaryNet),2) from filtered ) as avgSalaryNet,\"\n    + \"  (select round(sum(salaryNet),2) from filtered ) as totalSalaryNet,\"\n\n\n    // SALARY OPTIMAL\n    + \"  (select round(@maxso:=max(salaryOptimal),2) from filtered) as maxSalaryOptimal,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where salaryOptimal=@maxso ) as playerMaxSalaryOptimal,\"\n    + \"  (select round(avg(salaryOptimal),2) from filtered ) as avgSalaryOptimal,\"\n    + \"  (select round(sum(salaryOptimal),2) from filtered ) as totalSalaryOptimal,\"\n\n    // RESIDUAL VALUE\n    + \"  (select round(@maxrv:=max(residualValue),2) from filtered) as maxResidualValue,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where residualValue=@maxrv ) as playerMaxResidualValue,\"\n    + \"  (select round(avg(residualValue),2) from filtered ) as avgResidualValue,\"\n    + \"  (select round(sum(residualValue),2) from filtered ) as totalResidualValue,\"\n\n    // CLUB RESIDUAL VALUE\n    + \"  (select round(@maxrv:=max(residualValue),2) from clubFilter) as maxClubResidualValue,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from clubFilter where residualValue=@maxrv ) as clubMaxResidualValue,\"\n    + \"  (select round(avg(residualValue),2) from clubFilter ) as avgClubResidualValue,\"\n    + \"  (select round(sum(residualValue),2) from clubFilter ) as totalClubResidualValue,\"\n\n    // RESIDUAL BOOK VALUE\n    + \"  (select round(@maxrbv:=max(residualBookValue),2) from filtered) as maxResidualBookValue,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where residualBookValue=@maxrbv ) as playerMaxResidualBookValue,\"\n    + \"  (select round(avg(residualBookValue),2) from filtered ) as avgResidualBookValue,\"\n    + \"  (select round(sum(residualBookValue),2) from filtered ) as totalResidualBookValue,\"\n\n\n    // EFFECTIVENESS\n    + \"  (select round(@maxef:=max(effectiveness),2) from filtered) as maxEffectiveness,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where effectiveness=@maxef ) as playerMaxEffectiveness,\"\n    + \"  (select round(avg(effectiveness),2) from filtered ) as avgEffectiveness,\"\n\n    // Performance\n    + \"  (select round(@maxperf:=max(performance),2) from filtered) as maxPerformance,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where performance=@maxperf ) as playerMaxPerformance,\"\n    + \"  (select round(avg(performance),2) from filtered ) as avgPerformance,\"\n\n    // UNIQUENESS\n    + \"  (select round(@maxuniq:=max(latestUniqueness),2) from filtered) as maxUniqueness,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where latestUniqueness=@maxuniq ) as playerMaxUniqueness,\"\n    + \"  (select round(avg(latestUniqueness),2) from filtered ) as avgUniqueness,\"\n\n    // VOLATILITY\n    + \"  (select round(@maxvolatil:=max(latestMicroVolatility),2) from filtered) as maxVolatility,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where latestMicroVolatility=@maxvolatil ) as playerMaxVolatility,\"\n    + \"  (select round(avg(latestMicroVolatility),2) from filtered ) as avgVolatility,\"\n\n    // CLUB VOLATILITY\n    + \"  (select round(@maxvolatil:=max(avgLatestMicroVolatility),2) from clubFilter) as maxClubVolatility,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from clubFilter where avgLatestMicroVolatility=@maxvolatil ) as clubMaxVolatility,\"\n    + \"  (select round(avg(avgLatestMicroVolatility),2) from clubFilter ) as avgClubVolatility,\"\n\n    // SUPERSTAR + POTENTIAL PRICE=FAIR PRICE\n    + \"  (select count(*) from filtered where superstar = 1 ) as numOfSuperstars,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where superstar = 1 ) as superStars,\"\n    + \"  (select round(@maxsspp:=max(potentialPrice),2) from filtered where superstar = 1 ) as maxSuperStarPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxsspp and superstar = 1 ) as playerSuperStarMaxPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where superstar = 1 ) as avgSuperStarPotentialPrice,\"\n\n    // RISINGSTAR + POTENTIAL PRICE=FAIR PRICE\n    + \"  (select count(*) from filtered where risingStar = 1 ) as numOfRisingStars,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where risingStar = 1 ) as risingStars,\"\n    + \"  (select round(@maxrspp:=max(potentialPrice),2) from filtered where risingStar = 1 ) as maxRisingStarPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxrspp and risingStar = 1 ) as playerRisingStarMaxPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where risingStar = 1 ) as avgRisingStarPotentialPrice,\"\n\n    // OVERPERFORMES + POTENTIAL PRICE=FAIR PRICE\n    + \"  (select count(*) from filtered where emerging = 1 ) as numOfOverperformers,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where emerging = 1 ) as overperformers,\"\n    + \"  (select round(@maxepp:=max(potentialPrice),2) from filtered where emerging = 1 ) as maxOverperformerPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxepp and emerging = 1 ) as playerOverperformerMaxPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where emerging = 1 ) as avgOverperformerPotentialPrice,\"\n\n    // REGULARS + POTENTIAL PRICE=FAIR PRICE\n    + \"  (select count(*) from filtered where superstar = 0 and risingStar = 0  and emerging = 0 ) as numOfRegulars,\"\n    + \"  (select round(@maxregpp:=max(potentialPrice),2) from filtered where superstar = 0 and risingStar = 0  and emerging = 0  ) as maxRegularPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxregpp and superstar = 0 and risingStar = 0  and emerging = 0  ) as playerRegularMaxPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where superstar = 0 and risingStar = 0  and emerging = 0  ) as avgRegularPotentialPrice,\"\n\n    // GOALKEEPERS + POTENTIAL PRICE=FAIR PRICE\n    + \"  (select count(*) from filtered where latestRoleRis = 'Goalkeeper' ) as numOfGoalkeepers,\"\n    + \"  (select round(@maxgkpp:=max(potentialPrice),2) from filtered where  latestRoleRis = 'Goalkeeper' ) as maxGoalkeeperPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxgkpp and  latestRoleRis = 'Goalkeeper' ) as playerGoalkeeperMaxPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where  latestRoleRis = 'Goalkeeper' ) as avgGoalkeeperPotentialPrice,\"\n\n    // Defender + POTENTIAL PRICE=FAIR PRICE\n    + \"  (select count(*) from filtered where latestRoleRis = 'Defender' ) as numOfDefenders,\"\n    + \"  (select round(@maxdefpp:=max(potentialPrice),2) from filtered where  latestRoleRis = 'Defender' ) as maxDefenderPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxdefpp and  latestRoleRis = 'Defender' ) as playerDefenderMaxPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where  latestRoleRis = 'Defender' ) as avgDefenderPotentialPrice,\"\n\n    // Midfielder + POTENTIAL PRICE=FAIR PRICE\n    + \"  (select count(*) from filtered where latestRoleRis = 'Midfielder' ) as numOfMidfielders,\"\n    + \"  (select round(@maxmidfpp:=max(potentialPrice),2) from filtered where  latestRoleRis = 'Midfielder' ) as maxMidfielderPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxmidfpp and  latestRoleRis = 'Midfielder' ) as playerMidfielderMaxPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where  latestRoleRis = 'Midfielder' ) as avgMidfielderPotentialPrice,\"\n\n    // Attacker + POTENTIAL PRICE=FAIR PRICE\n    + \"  (select count(*) from filtered where latestRoleRis = 'Attacker' ) as numOfAttackers,\"\n    + \"  (select round(@maxattpp:=max(potentialPrice),2) from filtered where  latestRoleRis = 'Attacker' ) as maxAttackerPotentialPrice,\"\n    + \"  (select GROUP_CONCAT(DISTINCT playerId ,';', fullName SEPARATOR ', ') from filtered where potentialPrice=@maxattpp and  latestRoleRis = 'Attacker' ) as playerAttackerMaxPotentialPrice,\"\n    + \"  (select round(avg(potentialPrice),2) from filtered where  latestRoleRis = 'Attacker' ) as avgAttackerPotentialPrice,\"\n\n\n    // REVENUES\n    + \"  (select round(@maxrev:=max(revenues),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered) ) as maxRevenues,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from latestclubs_staging where revenues=@maxrev and clubId in (select distinct @clubSet:=currentClubId from filtered) ) as clubMaxRevenues,\"\n    + \"  (select round(@minrev:=min(revenues),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered) ) as minRevenues,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from latestclubs_staging where revenues=@minrev and clubId in (select distinct @clubSet:=currentClubId from filtered) ) as clubMinRevenues,\"\n    + \"  (select round(avg(revenues),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered) ) as avgRevenues,\"\n\n    // PORTFOLIO\n    + \"  (select round(@maxportcost:=max(portfolioCost),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered) ) as maxPortfolioCost,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from latestclubs_staging where portfolioCost=@maxportcost and clubId in (select distinct @clubSet:=currentClubId from filtered) ) as clubMaxPortfolioCost,\"\n    + \"  (select round(@minportcost:=min(portfolioCost),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered) ) as minPortfolioCost,\"\n    + \"  (select GROUP_CONCAT(DISTINCT clubId ,';', name SEPARATOR ', ') from latestclubs_staging where portfolioCost=@minportcost and clubId in (select distinct @clubSet:=currentClubId from filtered) ) as clubMinPortfolioCost,\"\n    + \"  (select round(avg(portfolioCost),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered) ) as avgPortfolioCost,\"\n    + \"  (select round(sum(portfolioCost),2) from latestclubs_staging where clubId in (select distinct @clubSet:=currentClubId from filtered) ) as totalPortfolioCost\"\n\n    + \" from dual;\"\n\n\nmsg.topic = whithQuery + statQuery\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 220,
        "wires": [
            [
                "812cf9115ecf2d6e"
            ]
        ]
    },
    {
        "id": "8103ee733fa6fa85",
        "type": "http in",
        "z": "338f2da8419b9555",
        "name": "/statistiche",
        "url": "/statistiche",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 420,
        "y": 220,
        "wires": [
            [
                "d07c2148d6d8a557"
            ]
        ]
    },
    {
        "id": "bf21548b605510d4",
        "type": "http response",
        "z": "338f2da8419b9555",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1470,
        "y": 220,
        "wires": []
    },
    {
        "id": "812cf9115ecf2d6e",
        "type": "mysql",
        "z": "338f2da8419b9555",
        "mydb": "14f41b2b.4deca5",
        "name": "",
        "x": 930,
        "y": 220,
        "wires": [
            [
                "faec1f3bcacbadc9"
            ]
        ]
    },
    {
        "id": "faec1f3bcacbadc9",
        "type": "function",
        "z": "338f2da8419b9555",
        "name": "From array to object",
        "func": "msg.payload=msg.payload[0]\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 220,
        "wires": [
            [
                "bf21548b605510d4"
            ]
        ]
    },
    {
        "id": "0f6c126e00cd2fc4",
        "type": "function",
        "z": "338f2da8419b9555",
        "name": "Query Similar players",
        "func": "let playerId = msg.req.params.id;\n\n\n\n \nmsg.status = 200;\n\nif (!playerId || playerId.length==0) {\n    \n    msg.status = 400; //Bad Request\n    msg.payload=\"Played id missing\";\n    console.log(msg.payload)\n    return msg;\n}\n\n\nlet whithQuery = \"with benchmark as ( SELECT playerId, fullName, age, currentClubCluster, latestRoleGroup, fatmol, max( fatmol ) AS maxfatmol, salaryNet, remainingMonthsOfContract, expectedPrice, transferPrice FROM `latestplayers_staging` WHERE playerId = '\"+playerId+\"') \"\n\nlet similarQuery = \" SELECT \"\n\t+\" ls.playerId, \"\n\t+\" ls.fullName, \"\n\t+\" ls.age, \"\n\t+\" ( ls.age - benchmark.age ) AS ageDiff, \"\n\t+\" ls.currentClubCluster, \"\n\t+\" ( ls.currentClubCluster - benchmark.currentClubCluster ) AS clusterDiff, \"\n\t+\" ls.latestRoleGroup, \"\n\t+\" ls.fatmol AS performance, \"\n\t+\" ( ls.fatmol - benchmark.fatmol ) AS performanceDiff, \"\n\t+\" ls.currentLeagueCluster, \"\n\t+\" ls.currentLeagueId, \"\n\t+\" ls.salaryNet, \"\n\t+\" ( ls.salaryNet - benchmark.salaryNet) as salaryDiff, \"\n\t+\" ls.remainingMonthsOfContract, \"\n\t+\" ( ls.remainingMonthsOfContract - benchmark.remainingMonthsOfContract) as rmcDiff, \"\n\t+\" ls.expectedPrice, \"\n\t+\" ( ls.expectedPrice - benchmark.expectedPrice) as expectedPriceDiff, \"\n\t+\" ls.transferPrice, \"\n\t+\" ( ls.transferPrice - benchmark.transferPrice) as transferPriceDiff \"\n+\" FROM \"\n\t+\" `latestplayers_staging` ls, \"\n\t+\" benchmark  \"\n+\" WHERE \"\n\t+\" 1 = 1  \"\n\t+\" AND ABS( ls.age - benchmark.age ) <= 3  \"\n\t+\" AND ABS( ls.currentClubCluster - benchmark.currentClubCluster ) <= 2  \"\n\t+\" AND ls.latestRoleGroup = benchmark.latestRoleGroup  \"\n\t+\" AND ABS( ls.fatmol - benchmark.fatmol ) <= ( maxfatmol * 0.25 )  \"\n\t+\" AND ls.playerId <> benchmark.playerId; \"\n\n\n\nmsg.topic = whithQuery + similarQuery\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 380,
        "wires": [
            [
                "71f2dc413328359e"
            ]
        ]
    },
    {
        "id": "b51bf58a34bcf4d2",
        "type": "http in",
        "z": "338f2da8419b9555",
        "name": "/players/:id/similarplayers",
        "url": "/players/:id/similarplayers",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 470,
        "y": 380,
        "wires": [
            [
                "0f6c126e00cd2fc4"
            ]
        ]
    },
    {
        "id": "934315f2262a84d9",
        "type": "http response",
        "z": "338f2da8419b9555",
        "name": "",
        "statusCode": "",
        "headers": {
            "content-type": "application/json"
        },
        "x": 1470,
        "y": 380,
        "wires": []
    },
    {
        "id": "71f2dc413328359e",
        "type": "mysql",
        "z": "338f2da8419b9555",
        "mydb": "14f41b2b.4deca5",
        "name": "",
        "x": 930,
        "y": 380,
        "wires": [
            [
                "9a55c3f6e75b6a1d"
            ]
        ]
    },
    {
        "id": "9a55c3f6e75b6a1d",
        "type": "function",
        "z": "338f2da8419b9555",
        "name": "From array to object",
        "func": "msg.payload=msg.payload\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1240,
        "y": 380,
        "wires": [
            [
                "934315f2262a84d9"
            ]
        ]
    },
    {
        "id": "a40b9c01b7b7b212",
        "type": "comment",
        "z": "338f2da8419b9555",
        "name": "STATISTICHE",
        "info": "",
        "x": 430,
        "y": 160,
        "wires": []
    },
    {
        "id": "ba23cc64a627c379",
        "type": "comment",
        "z": "338f2da8419b9555",
        "name": "GIOCATORI SIMILI",
        "info": "",
        "x": 450,
        "y": 320,
        "wires": []
    },
    {
        "id": "0377289986ef9ebd",
        "type": "comment",
        "z": "da26e15afb7659ec",
        "name": "Countries",
        "info": "",
        "x": 180,
        "y": 260,
        "wires": []
    },
    {
        "id": "34ac618487f16ecc",
        "type": "comment",
        "z": "da26e15afb7659ec",
        "name": "Continents",
        "info": "",
        "x": 180,
        "y": 140,
        "wires": []
    },
    {
        "id": "431e7baf685558d9",
        "type": "inject",
        "z": "da26e15afb7659ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 180,
        "wires": [
            [
                "6999620cee703f1a"
            ]
        ]
    },
    {
        "id": "6999620cee703f1a",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Get All Continents /core/continents",
        "func": "const end_point = \"core/continents\"\nconst include = null\nconst table = \"SPORTSMONK_continents\";\n\n//page è già presente nel messaggio\n\nmsg.end_point = end_point;\nmsg.include = include;\nmsg.table=table;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 180,
        "wires": [
            [
                "a69e8b5dbfd6e34a"
            ]
        ]
    },
    {
        "id": "5fd8e098d5f55925",
        "type": "http request",
        "z": "da26e15afb7659ec",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1050,
        "y": 80,
        "wires": [
            [
                "42043145262a8399",
                "63be1c610addf09a",
                "ba3fa2eb13acc126"
            ]
        ]
    },
    {
        "id": "ce4809f095bf7b7e",
        "type": "comment",
        "z": "da26e15afb7659ec",
        "name": "API TOKEN",
        "info": "",
        "x": 190,
        "y": 40,
        "wires": []
    },
    {
        "id": "4228e0c34f80ecf6",
        "type": "inject",
        "z": "da26e15afb7659ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 300,
        "wires": [
            [
                "b9a33086ba5d785e"
            ]
        ]
    },
    {
        "id": "b9a33086ba5d785e",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Get All Countires /core/countries",
        "func": "const end_point = \"core/countries\"\nconst include = null\nconst table = \"SPORTSMONK_countries\";\n\n//page è già presente nel messaggio\n\nmsg.end_point = end_point;\nmsg.include = include;\nmsg.table=table;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 300,
        "wires": [
            [
                "9fb45c97fcd228c4"
            ]
        ]
    },
    {
        "id": "c8050b2c55e7a307",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Base url builder with pagination",
        "func": "\nlet next_page = 1;\n\nif( msg.payload && msg.payload.pagination && msg.payload.pagination.has_more) {\n    \n    next_page=msg.payload.pagination.current_page+1;\n}\n\n\nconst end_point = msg.end_point;\nconst page = next_page ? \"&page=\"+next_page : \"&page=1\";\nconst include = msg.include ? \"&include=\"+msg.include : \"\";\n\nconst token = flow.get(\"SM_TOKEN\");\nconst base_url = \"https://api.sportmonks.com/v3/\";\nconst api_token=\"api_token=\"+token;\n\nconst params = \"?\" + api_token + page + include +\"&per_page=50\"\n\n\nconst url = base_url + end_point + params\n\nmsg.url = url;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 80,
        "wires": [
            [
                "5fd8e098d5f55925"
            ]
        ]
    },
    {
        "id": "a69e8b5dbfd6e34a",
        "type": "link out",
        "z": "da26e15afb7659ec",
        "name": "",
        "mode": "link",
        "links": [
            "b52c369319a06a92"
        ],
        "x": 645,
        "y": 180,
        "wires": []
    },
    {
        "id": "b52c369319a06a92",
        "type": "link in",
        "z": "da26e15afb7659ec",
        "name": "",
        "links": [
            "a69e8b5dbfd6e34a",
            "9fb45c97fcd228c4",
            "15d61b211474879b",
            "e64dbaeeed512fad",
            "1cc45777af5219e3",
            "f1cbd203d833d649",
            "9813799366307476",
            "e24317f1404cd1f2",
            "5e2b1888207bafe2",
            "d353ef8887b12824",
            "ebc5740aa6435d6a",
            "be6f035baf90acfd",
            "12da1c3bd09fb766",
            "7b2d31f06abc6c88",
            "cee5f94c9af4cead"
        ],
        "x": 455,
        "y": 80,
        "wires": [
            [
                "902f448233b8ec14"
            ]
        ]
    },
    {
        "id": "9fb45c97fcd228c4",
        "type": "link out",
        "z": "da26e15afb7659ec",
        "name": "",
        "mode": "link",
        "links": [
            "b52c369319a06a92"
        ],
        "x": 645,
        "y": 300,
        "wires": []
    },
    {
        "id": "1f73a2e46951307f",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Generic Response Handler",
        "func": "msg.skipDb=false;\nif (msg.payload.data===undefined) {\n    \n    msg.skipDb=true;\n    return msg;\n}\n\nlet data = []\nif (!Array.isArray(msg.payload.data)) {\n    \n    \n    data.push(msg.payload.data);\n    \n} else {\n     \n    data = msg.payload.data\n}\n\n\n\nconst table =  msg.table;\nconst clause = \" ON DUPLICATE KEY UPDATE `id`=\"\n\nmsg.topic=\"\";\n\nmsg.sidelined= [];\nmsg.players= [];\n\ndata.forEach( obj =>{\n    \n    let topic = \"INSERT INTO \"+table+\" ( \"\n    let values = \"VALUES ( \" \n    \n     Object.keys(obj).forEach( k => {\n     \n    //SIDELINED\n     if ( typeof obj[k] === \"object\" && k===\"sidelined\") {\n            \n          \n            \n            if (obj[k].length>0) {\n                \n                \n                obj[k].forEach(sl => {\n                    \n                     msg.sidelined.push(sl);\n                })\n                \n                \n            }\n            \n            return;\n        }\n         \n         \n      //PLAYERS\n     if ( typeof obj[k] === \"object\" && k===\"players\") {\n            \n          \n            \n            if (obj[k].length>0) {\n                \n                \n                obj[k].forEach(sl => {\n                    \n                     msg.players.push(sl);\n                })\n                \n                \n            }\n            \n            return;\n        }\n         \n         \n         \n     \n       \n        topic = topic + \"`\"+k + \"`,\"\n        \n        \n        let value;\n        \n        if (typeof obj[k] === \"string\" ) {\n            \n            let s = obj[k].replace(/'/g, \"'\"+\"'\")\n            value = '\"'+s+'\"'\n            \n        } \n        \n            //STATISTICS PLAYERS\n        else if ( typeof obj[k] === \"object\" && k===\"details\") {\n            \n           value = \"null\"\n            \n            if (obj[k].length>0) {\n                \n                \n                obj[k].forEach(dt => {\n                    \n                     if (dt.type_id == 119) {\n                         \n                        topic = topic + \"`\"+\"detail_id`,`player_statistic_id`,`type_id`,`value_total\" + \"`,\"\n                        value = value+\",\"+dt.id+\",\"+dt.player_statistic_id+\",\"+ dt.type_id+\",\"+dt.value.total\n\n                     }\n                })\n                \n                \n            }\n            \n            \n            \n            \n        }\n        \n        else if ( typeof obj[k] === \"object\") {\n            \n           \n                value = \"null\";\n                \n            \n            \n        }\n        \n        else {\n            value = obj[k]\n        }\n        \n        values = values + value + \",\"\n        \n        console.log(k ,  typeof obj[k])\n        \n            //SIDELINED\n    \n\n        \n    } ) \n    \n    // Aggiorniamo TOPIC:\n   \n     if(msg.additionalField!==undefined) {\n         \n         topic = topic +\"`\"+msg.additionalField.field + \"`,\"\n     }\n     topic = topic.slice(0,-1) //rimuoviamo la virgola finale\n    \n    topic = topic + \")\"\n    values = values.slice(0,-1) //rimuoviamo la virgola finale\n    \n    //Aggiungiamo da msg se presente\n    \n    if(msg.additionalField!==undefined) {\n        \n        let value;\n        \n        if (msg.additionalField.value === \"string\" ) {\n            \n            let s = msg.additionalField.value.replace(/'/g, \"'\"+\"'\")\n            value = '\"'+s+'\"'\n            \n        } \n        \n        else if ( msg.additionalField.value === \"object\") {\n            \n            value = \"null\";\n        }\n        \n        else {\n            value = msg.additionalField.value\n        }\n        \n        \n        values = values + \",\"+ value\n    } \n    \n    values = values + \")\"\n    \n    msg.topic = msg.topic + topic + values + clause+obj['id']+\";\"\n    \n    \n\n    \n})\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1160,
        "y": 280,
        "wires": [
            [
                "a736881ae6f9cb6c",
                "ba3fa2eb13acc126"
            ]
        ]
    },
    {
        "id": "b1ff5778869a6fb4",
        "type": "link in",
        "z": "da26e15afb7659ec",
        "name": "",
        "links": [
            "247ca427bfc14d4f"
        ],
        "x": 995,
        "y": 280,
        "wires": [
            [
                "1f73a2e46951307f"
            ]
        ]
    },
    {
        "id": "247ca427bfc14d4f",
        "type": "link out",
        "z": "da26e15afb7659ec",
        "name": "",
        "mode": "link",
        "links": [
            "b1ff5778869a6fb4"
        ],
        "x": 1435,
        "y": 60,
        "wires": []
    },
    {
        "id": "902f448233b8ec14",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Set API TOKEN",
        "func": "flow.set(\"SM_TOKEN\",\"z7qUp2Vo68p4LecWVEzQ7cJ12wTNCeN3EKb984FTa7GgwJnuSBsesZzUcdG2\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 80,
        "wires": [
            [
                "c8050b2c55e7a307"
            ]
        ]
    },
    {
        "id": "019ddd798d91557f",
        "type": "mysql",
        "z": "da26e15afb7659ec",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 1840,
        "y": 260,
        "wires": [
            []
        ]
    },
    {
        "id": "e62f8b5f65e3595d",
        "type": "debug",
        "z": "da26e15afb7659ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "sidelined_types",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 2000,
        "y": 500,
        "wires": []
    },
    {
        "id": "42043145262a8399",
        "type": "switch",
        "z": "da26e15afb7659ec",
        "name": "has more?",
        "property": "payload.pagination.has_more",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 1230,
        "y": 140,
        "wires": [
            [
                "722212e9959d59c2"
            ]
        ]
    },
    {
        "id": "15d61b211474879b",
        "type": "link out",
        "z": "da26e15afb7659ec",
        "name": "",
        "mode": "link",
        "links": [
            "b52c369319a06a92"
        ],
        "x": 1635,
        "y": 140,
        "wires": []
    },
    {
        "id": "d11652997022cca7",
        "type": "comment",
        "z": "da26e15afb7659ec",
        "name": "Players",
        "info": "",
        "x": 170,
        "y": 380,
        "wires": []
    },
    {
        "id": "4a4f731e07eb811a",
        "type": "inject",
        "z": "da26e15afb7659ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 420,
        "wires": [
            [
                "0d98514d124bde45"
            ]
        ]
    },
    {
        "id": "0d98514d124bde45",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Get All Players football/players",
        "func": "const end_point = \"football/players\"\nconst include = null\nconst table = \"SPORTSMONK_players\";\n\n//page è già presente nel messaggio\n\nmsg.end_point = end_point;\nmsg.include = include;\nmsg.table=table;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 420,
        "wires": [
            [
                "e64dbaeeed512fad"
            ]
        ]
    },
    {
        "id": "e64dbaeeed512fad",
        "type": "link out",
        "z": "da26e15afb7659ec",
        "name": "",
        "mode": "link",
        "links": [
            "b52c369319a06a92"
        ],
        "x": 645,
        "y": 420,
        "wires": []
    },
    {
        "id": "bd5e12d0b4c3246a",
        "type": "comment",
        "z": "da26e15afb7659ec",
        "name": "Teams with Sidelined",
        "info": "",
        "x": 220,
        "y": 480,
        "wires": []
    },
    {
        "id": "08087ff6ffd7983f",
        "type": "inject",
        "z": "da26e15afb7659ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 520,
        "wires": [
            [
                "6885d980bc979aad"
            ]
        ]
    },
    {
        "id": "6885d980bc979aad",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Get All Teams football/teams",
        "func": "const end_point = \"football/teams\"\nconst include = \"sidelined.type\"\nconst table = \"SPORTSMONK_teams\";\n\n//page è già presente nel messaggio\n\nmsg.end_point = end_point;\nmsg.include = include;\nmsg.table=table;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 520,
        "wires": [
            [
                "1cc45777af5219e3"
            ]
        ]
    },
    {
        "id": "1cc45777af5219e3",
        "type": "link out",
        "z": "da26e15afb7659ec",
        "name": "",
        "mode": "link",
        "links": [
            "b52c369319a06a92"
        ],
        "x": 645,
        "y": 520,
        "wires": []
    },
    {
        "id": "e66f8f159a113a27",
        "type": "comment",
        "z": "da26e15afb7659ec",
        "name": "Leagues",
        "info": "",
        "x": 180,
        "y": 820,
        "wires": []
    },
    {
        "id": "401343f59e1bf506",
        "type": "inject",
        "z": "da26e15afb7659ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 860,
        "wires": [
            [
                "c06045d480463cfc"
            ]
        ]
    },
    {
        "id": "c06045d480463cfc",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Get All Leagues football/leagues",
        "func": "const end_point = \"football/leagues\"\nconst include = null\nconst table = \"SPORTSMONK_leagues\";\n\n//page è già presente nel messaggio\n\nmsg.end_point = end_point;\nmsg.include = include;\nmsg.table=table;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 860,
        "wires": [
            [
                "f1cbd203d833d649"
            ]
        ]
    },
    {
        "id": "f1cbd203d833d649",
        "type": "link out",
        "z": "da26e15afb7659ec",
        "name": "",
        "mode": "link",
        "links": [
            "b52c369319a06a92"
        ],
        "x": 645,
        "y": 860,
        "wires": []
    },
    {
        "id": "337ed86269dfdda5",
        "type": "comment",
        "z": "da26e15afb7659ec",
        "name": "Venues",
        "info": "",
        "x": 170,
        "y": 940,
        "wires": []
    },
    {
        "id": "2776ece18983119c",
        "type": "inject",
        "z": "da26e15afb7659ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 980,
        "wires": [
            [
                "d9bcf7deeb7d4826"
            ]
        ]
    },
    {
        "id": "d9bcf7deeb7d4826",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Get All Venues football/venues",
        "func": "const end_point = \"football/venues\"\nconst include = null\nconst table = \"SPORTSMONK_venues\";\n\n//page è già presente nel messaggio\n\nmsg.end_point = end_point;\nmsg.include = include;\nmsg.table=table;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 410,
        "y": 980,
        "wires": [
            [
                "9813799366307476"
            ]
        ]
    },
    {
        "id": "9813799366307476",
        "type": "link out",
        "z": "da26e15afb7659ec",
        "name": "",
        "mode": "link",
        "links": [
            "b52c369319a06a92"
        ],
        "x": 645,
        "y": 980,
        "wires": []
    },
    {
        "id": "3f90adfd2e968aef",
        "type": "comment",
        "z": "da26e15afb7659ec",
        "name": "Seasons",
        "info": "",
        "x": 180,
        "y": 1060,
        "wires": []
    },
    {
        "id": "9fbc5dbc05f7d934",
        "type": "inject",
        "z": "da26e15afb7659ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1100,
        "wires": [
            [
                "adb43cb038fb6377"
            ]
        ]
    },
    {
        "id": "adb43cb038fb6377",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Get All Seasons football/seasons",
        "func": "const end_point = \"football/seasons\"\nconst include = null\nconst table = \"SPORTSMONK_seasons\";\n\n//page è già presente nel messaggio\n\nmsg.end_point = end_point;\nmsg.include = include;\nmsg.table=table;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1100,
        "wires": [
            [
                "e24317f1404cd1f2"
            ]
        ]
    },
    {
        "id": "e24317f1404cd1f2",
        "type": "link out",
        "z": "da26e15afb7659ec",
        "name": "",
        "mode": "link",
        "links": [
            "b52c369319a06a92"
        ],
        "x": 645,
        "y": 1100,
        "wires": []
    },
    {
        "id": "722212e9959d59c2",
        "type": "delay",
        "z": "da26e15afb7659ec",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1400,
        "y": 140,
        "wires": [
            [
                "15d61b211474879b"
            ]
        ]
    },
    {
        "id": "94d2a192110f4874",
        "type": "comment",
        "z": "da26e15afb7659ec",
        "name": "Squads by team and season",
        "info": "",
        "x": 220,
        "y": 1580,
        "wires": []
    },
    {
        "id": "c9197c150e5118df",
        "type": "inject",
        "z": "da26e15afb7659ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1320,
        "wires": [
            [
                "ebac24cb1f1fb66b"
            ]
        ]
    },
    {
        "id": "8009776d7e1ab4c5",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "GET Team Squad by Team and Season ID",
        "func": "\n\nlet season=msg.payload.season_id\nlet team=msg.payload.team_id\nconst end_point = \"football/squads/seasons/\"+season+\"/teams/\"+team\nconst include = null\nconst table = \"SPORTSMONK_squads_by_team_and_season\";\n\n//page è già presente nel messaggio\n//msg.additionalField={ field : \"team_id\", value : team};\n\nmsg.end_point = end_point;\nmsg.include = include;\nmsg.table=table;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1450,
        "y": 1620,
        "wires": [
            [
                "5e2b1888207bafe2"
            ]
        ]
    },
    {
        "id": "5e2b1888207bafe2",
        "type": "link out",
        "z": "da26e15afb7659ec",
        "name": "",
        "mode": "link",
        "links": [
            "b52c369319a06a92"
        ],
        "x": 1665,
        "y": 1620,
        "wires": []
    },
    {
        "id": "bf1b9bf4f3a02721",
        "type": "mysql",
        "z": "da26e15afb7659ec",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 600,
        "y": 1400,
        "wires": [
            [
                "066931ffc074442b"
            ]
        ]
    },
    {
        "id": "ebac24cb1f1fb66b",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Select Seasons",
        "func": "let topic;\n\n/*let topic= 'SELECT SPORTSMONK_seasons.id from SPORTSMONK_seasons,SPORTSMONK_leagues where SPORTSMONK_leagues.country_id in (SELECT distinct id from SPORTSMONK_countries where continent_id = 1) and SPORTSMONK_seasons.league_id=SPORTSMONK_leagues.id and SPORTSMONK_seasons.name in (\"2023/2024\");'\n            +'select id from SPORTSMONK_teams where SPORTSMONK_teams.country_id in (11);'*/\n\n\n\n//Stagioni 2023/2024 delle leghe dei campionati europei\n\ntopic= 'SELECT SPORTSMONK_seasons.id from SPORTSMONK_seasons,SPORTSMONK_leagues where SPORTSMONK_leagues.country_id in (SELECT distinct id from SPORTSMONK_countries where continent_id = 1) and SPORTSMONK_seasons.league_id=SPORTSMONK_leagues.id and SPORTSMONK_seasons.name in (\"2023/2024\", \"2024/2025\");'\n\n//Stagioni 2022/2023 delle leghe dei campionati europei\n\ntopic= 'SELECT SPORTSMONK_seasons.id from SPORTSMONK_seasons,SPORTSMONK_leagues where SPORTSMONK_leagues.country_id in (SELECT distinct id from SPORTSMONK_countries where continent_id = 1) and SPORTSMONK_seasons.league_id=SPORTSMONK_leagues.id and SPORTSMONK_seasons.name in (\"2022/2023\");'\n     \n     \n//Stagioni 2022/2023 delle leghe dei campionati sud americani\n\ntopic= 'SELECT SPORTSMONK_seasons.id from SPORTSMONK_seasons,SPORTSMONK_leagues where SPORTSMONK_leagues.country_id in (SELECT distinct id from SPORTSMONK_countries where continent_id = 7) and SPORTSMONK_seasons.league_id=SPORTSMONK_leagues.id and SPORTSMONK_seasons.name in (\"2023\", \"2023/2024\", \"2024\");'\n\ntopic= 'SELECT SPORTSMONK_seasons.id from SPORTSMONK_seasons,SPORTSMONK_leagues where SPORTSMONK_leagues.country_id in (SELECT distinct id from SPORTSMONK_countries where continent_id in(  2,3,4,5,6)) and SPORTSMONK_seasons.league_id=SPORTSMONK_leagues.id and SPORTSMONK_seasons.name in (\"2023\", \"2023/2024\", \"2024\", \"2024/2025\");'\n\n\ntopic =\"SELECT distinct season_id as id from SPORTSMONK_leagues_seasons_2024;\"\nmsg.topic=topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1320,
        "wires": [
            [
                "bf1b9bf4f3a02721"
            ]
        ]
    },
    {
        "id": "066931ffc074442b",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Combination Array",
        "func": "\n\nlet seasons = [];\n\nmsg.payload.forEach(s =>{\n    \n    \n    seasons.push(s.id)\n})\n\n\n \nmsg.seasons=seasons;\n\nmsg.payload=[];\nseasons.forEach( s => {\n    \n    msg.payload.push({ season: s })\n    \n    \n})\n \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1400,
        "wires": [
            [
                "0f916200792b11fa"
            ]
        ]
    },
    {
        "id": "0f916200792b11fa",
        "type": "split",
        "z": "da26e15afb7659ec",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1030,
        "y": 1400,
        "wires": [
            [
                "46f3989e72e09040"
            ]
        ]
    },
    {
        "id": "46f3989e72e09040",
        "type": "delay",
        "z": "da26e15afb7659ec",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1180,
        "y": 1400,
        "wires": [
            [
                "dfc7fdfd63fc34b5",
                "7dad43e32b52eeb1"
            ]
        ]
    },
    {
        "id": "a736881ae6f9cb6c",
        "type": "switch",
        "z": "da26e15afb7659ec",
        "name": "",
        "property": "skipDb",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            },
            {
                "t": "else"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1450,
        "y": 280,
        "wires": [
            [],
            [
                "019ddd798d91557f"
            ]
        ]
    },
    {
        "id": "dfc7fdfd63fc34b5",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Get Teams by season",
        "func": "\n\nlet season=msg.payload.season\nlet team=msg.payload.team\nconst end_point = \"football/teams/seasons/\"+season\nconst include = null\nconst table = \"SPORTSMONK_teams_by_season\";\n\n//page è già presente nel messaggio\n\nmsg.additionalField={ field : \"season_id\", value : season}\n\nmsg.end_point = end_point;\nmsg.include = include;\nmsg.table=table;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1420,
        "y": 1400,
        "wires": [
            [
                "d353ef8887b12824"
            ]
        ]
    },
    {
        "id": "d353ef8887b12824",
        "type": "link out",
        "z": "da26e15afb7659ec",
        "name": "",
        "mode": "link",
        "links": [
            "b52c369319a06a92"
        ],
        "x": 1545,
        "y": 1400,
        "wires": []
    },
    {
        "id": "7951819f4f6936af",
        "type": "inject",
        "z": "da26e15afb7659ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1620,
        "wires": [
            [
                "9d5ef4a44475f1db"
            ]
        ]
    },
    {
        "id": "5958d30d44c49175",
        "type": "comment",
        "z": "da26e15afb7659ec",
        "name": "Teams by  season - Leagues",
        "info": "",
        "x": 240,
        "y": 1280,
        "wires": []
    },
    {
        "id": "ceb0a7c81c64a412",
        "type": "mysql",
        "z": "da26e15afb7659ec",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 660,
        "y": 1620,
        "wires": [
            [
                "6515c334601b3d42"
            ]
        ]
    },
    {
        "id": "9d5ef4a44475f1db",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Select Seasons and Teams",
        "func": "let topic= 'SELECT distinct id as team_id, season_id FROM `SPORTSMONK_teams_by_season` where season_id not in (select season_id from SPORTSMONK_squads_by_team_and_season);'\n\n topic= 'SELECT distinct id as team_id, season_id FROM `SPORTSMONK_teams_by_season`;'\n\n\nmsg.topic=topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 1620,
        "wires": [
            [
                "ceb0a7c81c64a412"
            ]
        ]
    },
    {
        "id": "6515c334601b3d42",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Combination Array",
        "func": "\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1620,
        "wires": [
            [
                "4333ff248f5b910d"
            ]
        ]
    },
    {
        "id": "4333ff248f5b910d",
        "type": "split",
        "z": "da26e15afb7659ec",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1030,
        "y": 1620,
        "wires": [
            [
                "0b1c7e0b36d5bb84"
            ]
        ]
    },
    {
        "id": "0b1c7e0b36d5bb84",
        "type": "delay",
        "z": "da26e15afb7659ec",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1170,
        "y": 1620,
        "wires": [
            [
                "8009776d7e1ab4c5"
            ]
        ]
    },
    {
        "id": "ac6cdab565e129a2",
        "type": "comment",
        "z": "da26e15afb7659ec",
        "name": "Players by ID",
        "info": "",
        "x": 170,
        "y": 1700,
        "wires": []
    },
    {
        "id": "def9faa1515993aa",
        "type": "inject",
        "z": "da26e15afb7659ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1740,
        "wires": [
            [
                "1dd6484c7da9f018"
            ]
        ]
    },
    {
        "id": "e0a421b16faa11aa",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "GET Player by ID",
        "func": "\nlet player_id=msg.payload.player_id\n\nconst end_point = \"football/players/\"+player_id\nconst include = null\nconst table = \"SPORTSMONK_players\";\n\n//page è già presente nel messaggio\n\nmsg.end_point = end_point;\nmsg.include = include;\nmsg.table=table;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1390,
        "y": 1740,
        "wires": [
            [
                "ebc5740aa6435d6a"
            ]
        ]
    },
    {
        "id": "ebc5740aa6435d6a",
        "type": "link out",
        "z": "da26e15afb7659ec",
        "name": "",
        "mode": "link",
        "links": [
            "b52c369319a06a92"
        ],
        "x": 1625,
        "y": 1740,
        "wires": []
    },
    {
        "id": "1dd6484c7da9f018",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Select Players",
        "func": "let topic= 'select DISTINCT player_id from SPORTSMONK_squads_by_team_and_season where player_id not in (select id from SPORTSMONK_players );'\n topic= 'select DISTINCT player_id from SPORTSMONK_players_by_team where player_id not in (select id from SPORTSMONK_players );'\nmsg.topic=topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1740,
        "wires": [
            [
                "177f8513cf3161f8"
            ]
        ]
    },
    {
        "id": "177f8513cf3161f8",
        "type": "mysql",
        "z": "da26e15afb7659ec",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 660,
        "y": 1740,
        "wires": [
            [
                "1a1a03395349d8e6"
            ]
        ]
    },
    {
        "id": "1a1a03395349d8e6",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Combination Array",
        "func": "\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1740,
        "wires": [
            [
                "0687ca2a6a162cd9"
            ]
        ]
    },
    {
        "id": "0687ca2a6a162cd9",
        "type": "split",
        "z": "da26e15afb7659ec",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1030,
        "y": 1740,
        "wires": [
            [
                "d0070689933ffa72"
            ]
        ]
    },
    {
        "id": "d0070689933ffa72",
        "type": "delay",
        "z": "da26e15afb7659ec",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "0.5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1170,
        "y": 1740,
        "wires": [
            [
                "e0a421b16faa11aa"
            ]
        ]
    },
    {
        "id": "5054ef21f59d77fc",
        "type": "comment",
        "z": "da26e15afb7659ec",
        "name": "FootballMap Fixtures by Venue Id",
        "info": "",
        "x": 230,
        "y": 1860,
        "wires": []
    },
    {
        "id": "3789a6d6222889b8",
        "type": "inject",
        "z": "da26e15afb7659ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1900,
        "wires": [
            [
                "e71eaf24063ffa37"
            ]
        ]
    },
    {
        "id": "b1ca8ae337a9b1bd",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "GET Player by ID",
        "func": "\nlet venue_id=msg.payload.id\n\nlet startDate = new Date();\nlet endDate = new Date();\nendDate.setDate(endDate.getDate() + 60);\n\n\n// You can format the date if needed\nvar startYear = startDate.getFullYear();\nvar startMonth = startDate.getMonth() + 1; // Months are zero-based\nvar startDay = startDate.getDate();\n\n// Format the date as YYYY-MM-DD\nvar formattedStartDate = startYear + '-' + (startMonth < 10 ? '0' : '') + startMonth + '-' + (startDay < 10 ? '0' : '') + startDay;\n\n// You can format the date if needed\nvar endYear = endDate.getFullYear();\nvar endMonth = endDate.getMonth() + 1; // Months are zero-based\nvar endDay = endDate.getDate();\n\n// Format the date as YYYY-MM-DD\nvar formattedEndDate = endYear + '-' + (endMonth < 10 ? '0' : '') + endMonth + '-' + (endDay < 10 ? '0' : '') + endDay;\n\nconst end_point = \"football/fixtures/between/\"+formattedStartDate+\"/\"+formattedEndDate+\"?include=venue;participants;round;league;season;tvStations;odds&filters=venues:\"+venue_id\nconst include = null\nconst table = \"SPORTSMONK_players\";\n\n//page è già presente nel messaggio\n\nmsg.end_point = end_point;\nmsg.include = include;\nmsg.table=table;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1370,
        "y": 1900,
        "wires": [
            [
                "be6f035baf90acfd"
            ]
        ]
    },
    {
        "id": "be6f035baf90acfd",
        "type": "link out",
        "z": "da26e15afb7659ec",
        "name": "",
        "mode": "link",
        "links": [
            "b52c369319a06a92"
        ],
        "x": 1585,
        "y": 1900,
        "wires": []
    },
    {
        "id": "e71eaf24063ffa37",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Select Venues",
        "func": "let topic= 'select DISTINCT id from SPORTSMONK_venues;'\n\nmsg.topic=topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 1900,
        "wires": [
            [
                "1718585d4b4c5835"
            ]
        ]
    },
    {
        "id": "1718585d4b4c5835",
        "type": "mysql",
        "z": "da26e15afb7659ec",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 620,
        "y": 1900,
        "wires": [
            [
                "5d6090e56eae13e7"
            ]
        ]
    },
    {
        "id": "5d6090e56eae13e7",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Combination Array",
        "func": "\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 870,
        "y": 1900,
        "wires": [
            [
                "8b9f33ddea8d687b"
            ]
        ]
    },
    {
        "id": "8b9f33ddea8d687b",
        "type": "split",
        "z": "da26e15afb7659ec",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1030,
        "y": 1900,
        "wires": [
            [
                "334ca41e3a6c79eb"
            ]
        ]
    },
    {
        "id": "334ca41e3a6c79eb",
        "type": "delay",
        "z": "da26e15afb7659ec",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1.5",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1180,
        "y": 1900,
        "wires": [
            [
                "b1ca8ae337a9b1bd"
            ]
        ]
    },
    {
        "id": "4bb128c4ccd7f2e0",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Sidelined and Types",
        "func": "let data=msg.sidelined;\n\nlet table=\"SPORTSMONK_sidelined\";\n\nconst clause = \" ON DUPLICATE KEY UPDATE `id`=\"\n\nmsg.topic=\"\";\n\nmsg.sidelined_types= [];\n\ndata.forEach( obj =>{\n    \n    let topic = \"INSERT INTO \"+table+\" ( \"\n    let values = \"VALUES ( \" \n    \n     Object.keys(obj).forEach( k => {\n     \n    //SIDELINED\n     if ( typeof obj[k] === \"object\" && k===\"type\") {\n            \n          \n            msg.sidelined_types.push(obj[k]);\n            \n            \n            return;\n        }\n         \n         \n         \n         \n         \n         \n     \n       \n        topic = topic + \"`\"+k + \"`,\"\n        \n        \n        let value;\n        \n        if (typeof obj[k] === \"string\" ) {\n            \n            let s = obj[k].replace(/'/g, \"'\"+\"'\")\n            value = '\"'+s+'\"'\n            \n        } \n        \n        else if ( typeof obj[k] === \"object\") {\n            \n           \n                value = \"null\";\n                \n            \n            \n        }\n        \n        else {\n            value = obj[k]\n        }\n        \n        values = values + value + \",\"\n        \n        console.log(k ,  typeof obj[k])\n        \n\n        \n    } ) \n    \n    // Aggiorniamo TOPIC:\n   \n \n     topic = topic.slice(0,-1) //rimuoviamo la virgola finale\n    \n    topic = topic + \")\"\n    values = values.slice(0,-1) //rimuoviamo la virgola finale\n    \n    //Aggiungiamo da msg se presente\n    \n\n    values = values + \")\"\n    \n    msg.topic = msg.topic + topic + values + clause+obj['id']+\";\"\n    \n    \n\n    \n})\n\n\n\n\nreturn msg;\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1820,
        "y": 380,
        "wires": [
            [
                "e62f8b5f65e3595d",
                "019ddd798d91557f"
            ]
        ]
    },
    {
        "id": "d4bc09e433183115",
        "type": "comment",
        "z": "da26e15afb7659ec",
        "name": "Players Statistics",
        "info": "",
        "x": 200,
        "y": 1160,
        "wires": []
    },
    {
        "id": "e75094cce56fa001",
        "type": "inject",
        "z": "da26e15afb7659ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 1200,
        "wires": [
            [
                "b860a2c5be5c5539"
            ]
        ]
    },
    {
        "id": "2f03aeb2dad7cafe",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Get Statistics Players",
        "func": "let player_id=msg.payload.sportsmonk_id\n\n//player_id = 96611;\n\nconst end_point = \"football/statistics/seasons/players/\"+player_id;\nconst include = null\nconst table = \"SPORTSMONK_players_statistics\";\n\n//page è già presente nel messaggio\n\nmsg.end_point = end_point;\nmsg.include = include;\nmsg.table=table;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1400,
        "y": 1200,
        "wires": [
            [
                "12da1c3bd09fb766"
            ]
        ]
    },
    {
        "id": "12da1c3bd09fb766",
        "type": "link out",
        "z": "da26e15afb7659ec",
        "name": "",
        "mode": "link",
        "links": [
            "b52c369319a06a92"
        ],
        "x": 1545,
        "y": 1200,
        "wires": []
    },
    {
        "id": "b860a2c5be5c5539",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Select Players",
        "func": "let topic= 'select DISTINCT sportsmonk_id from players_id_match where sportsmonk_id not in (SELECT distinct player_id from SPORTSMONK_players_statistics);'\n\nmsg.topic=topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 1200,
        "wires": [
            [
                "0c76362ea0f41335"
            ]
        ]
    },
    {
        "id": "0c76362ea0f41335",
        "type": "mysql",
        "z": "da26e15afb7659ec",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 620,
        "y": 1200,
        "wires": [
            [
                "a64205706df96f56"
            ]
        ]
    },
    {
        "id": "a64205706df96f56",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Combination Array",
        "func": "\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 1200,
        "wires": [
            [
                "a5840a3c204b7833"
            ]
        ]
    },
    {
        "id": "a5840a3c204b7833",
        "type": "split",
        "z": "da26e15afb7659ec",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1010,
        "y": 1200,
        "wires": [
            [
                "5047c25940c8d256"
            ]
        ]
    },
    {
        "id": "5047c25940c8d256",
        "type": "delay",
        "z": "da26e15afb7659ec",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1170,
        "y": 1200,
        "wires": [
            [
                "2f03aeb2dad7cafe"
            ]
        ]
    },
    {
        "id": "ba3fa2eb13acc126",
        "type": "debug",
        "z": "da26e15afb7659ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1650,
        "y": 620,
        "wires": []
    },
    {
        "id": "5d97bf6d8895a361",
        "type": "inject",
        "z": "da26e15afb7659ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 1180,
        "y": 1080,
        "wires": [
            [
                "2f03aeb2dad7cafe"
            ]
        ]
    },
    {
        "id": "5987eb220b101be9",
        "type": "comment",
        "z": "da26e15afb7659ec",
        "name": "Teams with Players",
        "info": "",
        "x": 210,
        "y": 600,
        "wires": []
    },
    {
        "id": "513106dc7883ac8b",
        "type": "inject",
        "z": "da26e15afb7659ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 640,
        "wires": [
            [
                "7a0e6a66048de003"
            ]
        ]
    },
    {
        "id": "7a0e6a66048de003",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Get All Teams football/teams",
        "func": "const end_point = \"football/teams\"\nconst include = \"players.player\"\nconst table = \"SPORTSMONK_players_by_team\";\n\n//page è già presente nel messaggio\n\nmsg.end_point = end_point;\nmsg.include = include;\nmsg.table=table;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 640,
        "wires": [
            [
                "7b2d31f06abc6c88"
            ]
        ]
    },
    {
        "id": "7b2d31f06abc6c88",
        "type": "link out",
        "z": "da26e15afb7659ec",
        "name": "",
        "mode": "link",
        "links": [
            "b52c369319a06a92"
        ],
        "x": 645,
        "y": 640,
        "wires": []
    },
    {
        "id": "63be1c610addf09a",
        "type": "switch",
        "z": "da26e15afb7659ec",
        "name": "Players by Team?",
        "property": "include",
        "propertyType": "msg",
        "rules": [
            {
                "t": "neq",
                "v": "players.player",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "players.player",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 1270,
        "y": 80,
        "wires": [
            [
                "247ca427bfc14d4f"
            ],
            [
                "e0227c8180fcccec"
            ]
        ]
    },
    {
        "id": "4e33b9a8448c6d7f",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Players by Teams Handler",
        "func": "msg.skipDb=false;\nif (msg.payload.data===undefined) {\n    \n    msg.skipDb=true;\n    return msg;\n}\n\nlet data = []\nif (!Array.isArray(msg.payload.data)) {\n    \n    \n    data.push(msg.payload.data);\n    \n} else {\n     \n    data = msg.payload.data\n}\n\n\n\nconst table =  msg.table;\nconst clause = \" ON DUPLICATE KEY UPDATE `id`=\"\n\nmsg.topic=\"\";\n\n\n// associazione team-player\ndata.forEach( teamObj =>{\n    \n    let players = teamObj.players;\n    \n    players.forEach( obj =>{\n    \n    \n    let topic = \"INSERT INTO \"+table+\" ( \"\n    let values = \"VALUES ( \" \n    \n     Object.keys(obj).forEach( k => {\n     \n    \n        topic = topic + \"`\"+k + \"`,\"\n        \n        \n        let value;\n        \n        if (typeof obj[k] === \"string\" ) {\n            \n            let s = obj[k].replace(/'/g, \"'\"+\"'\")\n            value = '\"'+s+'\"'\n            \n        } else if ( typeof obj[k] === \"object\") {\n           \n            value = \"null\";\n            \n        } else {\n            value = obj[k]\n        }\n        \n        values = values + value + \",\"\n        \n        console.log(k ,  typeof obj[k])\n        \n\n    } ) \n    \n    // Aggiorniamo TOPIC:\n   \n     if(msg.additionalField!==undefined) {\n         \n         topic = topic +\"`\"+msg.additionalField.field + \"`,\"\n     }\n     topic = topic.slice(0,-1) //rimuoviamo la virgola finale\n    \n    topic = topic + \")\"\n    values = values.slice(0,-1) //rimuoviamo la virgola finale\n    \n    //Aggiungiamo da msg se presente\n    \n    if(msg.additionalField!==undefined) {\n        \n        let value;\n        \n        if (msg.additionalField.value === \"string\" ) {\n            \n            let s = msg.additionalField.value.replace(/'/g, \"'\"+\"'\")\n            value = '\"'+s+'\"'\n            \n        } \n        \n        else if ( msg.additionalField.value === \"object\") {\n            \n            value = \"null\";\n        }\n        \n        else {\n            value = msg.additionalField.value\n        }\n        \n        \n        values = values + \",\"+ value\n    } \n    \n    values = values + \")\"\n    \n    msg.topic = msg.topic + topic + values + clause+obj['id']+\";\"\n    \n    \n})// PLayers loop ends\n    \n})// team Loop Ends\n\n\n//ritroviamo i player\n\ndata.forEach( teamObj =>{\n    \n    let players = teamObj.players;\n    \n    players.forEach( obj =>{\n    \n    player = obj.player;\n    \n    let topic = \"INSERT INTO SPORTSMONK_players ( \"\n    let values = \"VALUES ( \" \n    \n     Object.keys(obj.player).forEach( k => {\n     \n    \n        topic = topic + \"`\"+k + \"`,\"\n        \n        \n        let value;\n        \n        if (typeof obj.player[k] === \"string\" ) {\n            \n            let s = obj.player[k].replace(/'/g, \"'\"+\"'\")\n            value = '\"'+s+'\"'\n            \n        } else if ( typeof obj.player[k] === \"object\") {\n           \n            value = \"null\";\n            \n        } else {\n            value = obj.player[k]\n        }\n        \n        values = values + value + \",\"\n        \n        console.log(k ,  typeof obj.player[k])\n        \n\n    } ) \n    \n    // Aggiorniamo TOPIC:\n   \n     if(msg.additionalField!==undefined) {\n         \n         topic = topic +\"`\"+msg.additionalField.field + \"`,\"\n     }\n     topic = topic.slice(0,-1) //rimuoviamo la virgola finale\n    \n    topic = topic + \")\"\n    values = values.slice(0,-1) //rimuoviamo la virgola finale\n    \n    //Aggiungiamo da msg se presente\n    \n    if(msg.additionalField!==undefined) {\n        \n        let value;\n        \n        if (msg.additionalField.value === \"string\" ) {\n            \n            let s = msg.additionalField.value.replace(/'/g, \"'\"+\"'\")\n            value = '\"'+s+'\"'\n            \n        } \n        \n        else if ( msg.additionalField.value === \"object\") {\n            \n            value = \"null\";\n        }\n        \n        else {\n            value = msg.additionalField.value\n        }\n        \n        \n        values = values + \",\"+ value\n    } \n    \n    values = values + \")\"\n    \n    msg.topic = msg.topic + topic + values + clause+obj.player['id']+\";\"\n    \n    \n})// PLayers loop ends\n    \n})// team Loop Ends\n\n\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1150,
        "y": 400,
        "wires": [
            [
                "ba3fa2eb13acc126",
                "019ddd798d91557f"
            ]
        ]
    },
    {
        "id": "7d9002587f82a51f",
        "type": "link in",
        "z": "da26e15afb7659ec",
        "name": "",
        "links": [
            "e0227c8180fcccec"
        ],
        "x": 995,
        "y": 400,
        "wires": [
            [
                "4e33b9a8448c6d7f"
            ]
        ]
    },
    {
        "id": "e0227c8180fcccec",
        "type": "link out",
        "z": "da26e15afb7659ec",
        "name": "",
        "mode": "link",
        "links": [
            "7d9002587f82a51f"
        ],
        "x": 1435,
        "y": 100,
        "wires": []
    },
    {
        "id": "7dad43e32b52eeb1",
        "type": "debug",
        "z": "da26e15afb7659ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1370,
        "y": 1340,
        "wires": []
    },
    {
        "id": "c0a7ccbc1c81cc72",
        "type": "mysql",
        "z": "da26e15afb7659ec",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 560,
        "y": 2200,
        "wires": [
            [
                "c74bea96cfb8b38e"
            ]
        ]
    },
    {
        "id": "c74bea96cfb8b38e",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Combination Array",
        "func": "\n\nlet seasons = [];\n\nmsg.payload.forEach(s =>{\n    \n    \n    seasons.push(s.id)\n})\n\n\n \nmsg.seasons=seasons;\n\nmsg.payload=[];\nseasons.forEach( s => {\n    \n    msg.payload.push({ season: s })\n    \n    \n})\n \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 810,
        "y": 2200,
        "wires": [
            [
                "3c73da7f8293bed5"
            ]
        ]
    },
    {
        "id": "3c73da7f8293bed5",
        "type": "split",
        "z": "da26e15afb7659ec",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 990,
        "y": 2200,
        "wires": [
            [
                "4cdb44992f73b780"
            ]
        ]
    },
    {
        "id": "4cdb44992f73b780",
        "type": "delay",
        "z": "da26e15afb7659ec",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1160,
        "y": 2200,
        "wires": [
            [
                "7ec08119a24f0f7c",
                "f80188ac93eb89e6"
            ]
        ]
    },
    {
        "id": "f80188ac93eb89e6",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Get Teams by season",
        "func": "\n\nlet season=msg.payload.season\nlet team=msg.payload.team\nconst end_point = \"football/teams/seasons/\"+season\nconst include = null\nconst table = \"SPORTSMONK_teams_by_season_cups\";\n\n//page è già presente nel messaggio\n\nmsg.additionalField={ field : \"season_id\", value : season}\n\nmsg.end_point = end_point;\nmsg.include = include;\nmsg.table=table;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1440,
        "y": 2220,
        "wires": [
            [
                "cee5f94c9af4cead"
            ]
        ]
    },
    {
        "id": "cee5f94c9af4cead",
        "type": "link out",
        "z": "da26e15afb7659ec",
        "name": "",
        "mode": "link",
        "links": [
            "b52c369319a06a92"
        ],
        "x": 1725,
        "y": 2040,
        "wires": []
    },
    {
        "id": "e2a5c4c595e0664c",
        "type": "inject",
        "z": "da26e15afb7659ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 2200,
        "wires": [
            [
                "9163f62a039f9f2a"
            ]
        ]
    },
    {
        "id": "8af6d5b8fd77dea9",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Select Seasons",
        "func": "let topic;\n\n/*let topic= 'SELECT SPORTSMONK_seasons.id from SPORTSMONK_seasons,SPORTSMONK_leagues where SPORTSMONK_leagues.country_id in (SELECT distinct id from SPORTSMONK_countries where continent_id = 1) and SPORTSMONK_seasons.league_id=SPORTSMONK_leagues.id and SPORTSMONK_seasons.name in (\"2023/2024\");'\n            +'select id from SPORTSMONK_teams where SPORTSMONK_teams.country_id in (11);'*/\n\n\n\n//Stagioni 2023/2024 delle leghe dei campionati europei\n\ntopic= 'SELECT SPORTSMONK_seasons.id from SPORTSMONK_seasons,SPORTSMONK_leagues where SPORTSMONK_leagues.country_id in (SELECT distinct id from SPORTSMONK_countries where continent_id = 1) and SPORTSMONK_seasons.league_id=SPORTSMONK_leagues.id and SPORTSMONK_seasons.name in (\"2023/2024\");'\n\n//Stagioni 2022/2023 delle leghe dei campionati europei\n\ntopic= 'SELECT SPORTSMONK_seasons.id from SPORTSMONK_seasons,SPORTSMONK_leagues where SPORTSMONK_leagues.country_id in (SELECT distinct id from SPORTSMONK_countries where continent_id = 1) and SPORTSMONK_seasons.league_id=SPORTSMONK_leagues.id and SPORTSMONK_seasons.name in (\"2022/2023\");'\n     \n     \n//Stagioni 2022/2023 delle leghe dei campionati sud americani\n\ntopic= 'SELECT SPORTSMONK_seasons.id from SPORTSMONK_seasons,SPORTSMONK_leagues where SPORTSMONK_leagues.country_id in (SELECT distinct id from SPORTSMONK_countries where continent_id = 7) and SPORTSMONK_seasons.league_id=SPORTSMONK_leagues.id and SPORTSMONK_seasons.name in (\"2023\", \"2023/2024\", \"2024\");'\n\ntopic= 'SELECT SPORTSMONK_seasons.id from SPORTSMONK_seasons,SPORTSMONK_leagues where SPORTSMONK_leagues.country_id in (SELECT distinct id from SPORTSMONK_countries where continent_id in(  2,3,4,5,6)) and SPORTSMONK_seasons.league_id=SPORTSMONK_leagues.id and SPORTSMONK_seasons.name in (\"2023\", \"2023/2024\", \"2024\");'\n\n\ntopic = \n\"Select id from SPORTSMONK_seasons where league_id IN\\n\" +\n\"(2\\n\" +\n\",5\\n\" +\n\",714\\n\" +\n\",717\\n\" +\n\",720\\n\" +\n\",723\\n\" +\n\",726\\n\" +\n\",729\\n\" +\n\",732\\n\" +\n\",1085\\n\" +\n\",1088\\n\" +\n\",1105\\n\" +\n\",1106\\n\" +\n\",1107\\n\" +\n\",1114\\n\" +\n\",1116\\n\" +\n\",1117\\n\" +\n\",1118\\n\" +\n\",1122\\n\" +\n\",1123\\n\" +\n\",1325\\n\" +\n\",1326\\n\" +\n\",1328\\n\" +\n\",1452\\n\" +\n\",1538\\n\" +\n\",2286,3412) and ( `name` like \\\"%2022%\\\" OR  `name` like \\\"%2023%\\\" OR  `name` like \\\"%2024%\\\" OR  `name` like \\\"%2025%\\\" OR  `name` like \\\"%2026%\\\");\"\n\n\n\ntopic = `SELECT id \nFROM SPORTSMONK_seasons \nWHERE league_id IN (\n    2,\n    5,\n    711,\n    714,\n    717,\n    720,\n    723,\n    726,\n    729,\n    732,\n    1085,\n    1088,\n    1105,\n    1106,\n    1107,\n    1111,\n    1114,\n    1116,\n    1117,\n    1118,\n    1122,\n    1123,\n    1325,\n    1326,\n    1328,\n    1452,\n    1479,\n    1538,\n    1742,\n    2286,\n    3412\n) \nAND (\n    name LIKE '%2022%' \n    OR name LIKE '%2023%' \n    OR name LIKE '%2024%' \n    OR name LIKE '%2025%' \n    OR name LIKE '%2026%'\n);`;\n\nmsg.topic=topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2200,
        "wires": [
            [
                "c0a7ccbc1c81cc72"
            ]
        ]
    },
    {
        "id": "0749c8ef59337f72",
        "type": "comment",
        "z": "da26e15afb7659ec",
        "name": "Teams by  season - Cups and Nationals",
        "info": "",
        "x": 230,
        "y": 2140,
        "wires": []
    },
    {
        "id": "7ec08119a24f0f7c",
        "type": "debug",
        "z": "da26e15afb7659ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1410,
        "y": 2140,
        "wires": []
    },
    {
        "id": "ecf6a2bc79a862bd",
        "type": "mysql",
        "z": "da26e15afb7659ec",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 560,
        "y": 2320,
        "wires": [
            [
                "8af6d5b8fd77dea9"
            ]
        ]
    },
    {
        "id": "9163f62a039f9f2a",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Delete records",
        "func": "\n\ntopic = `delete from SPORTSMONK_teams_by_season_cups;`;\n\nmsg.topic=topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 2320,
        "wires": [
            [
                "ecf6a2bc79a862bd"
            ]
        ]
    },
    {
        "id": "dee923214dd38f2c",
        "type": "comment",
        "z": "da26e15afb7659ec",
        "name": "Stendings by  season",
        "info": "",
        "x": 170,
        "y": 2580,
        "wires": []
    },
    {
        "id": "f7fa5926777af1fc",
        "type": "inject",
        "z": "da26e15afb7659ec",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 160,
        "y": 2680,
        "wires": [
            [
                "b6e6c0f329feb311"
            ]
        ]
    },
    {
        "id": "71fbb62e336e58c1",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Select Seasons",
        "func": "topic = `SELECT id \nFROM SPORTSMONK_seasons \nWHERE league_id IN (\n    2,\n    5,\n    711,\n    714,\n    717,\n    720,\n    723,\n    726,\n    729,\n    732,\n    1085,\n    1088,\n    1105,\n    1106,\n    1107,\n    1111,\n    1114,\n    1116,\n    1117,\n    1118,\n    1122,\n    1123,\n    1325,\n    1326,\n    1328,\n    1452,\n    1479,\n    1538,\n    1742,\n    2286,\n    3412\n) \nAND (\n    name LIKE '%2022%' \n    OR name LIKE '%2023%' \n    OR name LIKE '%2024%' \n    OR name LIKE '%2025%' \n    OR name LIKE '%2026%'\n);`;\n\nmsg.topic=topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 400,
        "y": 2660,
        "wires": [
            [
                "67f78cfdb041b66f"
            ]
        ]
    },
    {
        "id": "67f78cfdb041b66f",
        "type": "mysql",
        "z": "da26e15afb7659ec",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 680,
        "y": 2640,
        "wires": [
            [
                "5b75b743bb397ac6"
            ]
        ]
    },
    {
        "id": "5b75b743bb397ac6",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Combination Array",
        "func": "\n\nlet seasons = [];\n\nmsg.payload.forEach(s =>{\n    \n    \n    seasons.push(s.id)\n})\n\n\n \nmsg.seasons=seasons;\n\nmsg.payload=[];\nseasons.forEach( s => {\n    \n    msg.payload.push({ season: s })\n    \n    \n})\n \n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 850,
        "y": 2680,
        "wires": [
            [
                "10b49d717157ba09"
            ]
        ]
    },
    {
        "id": "10b49d717157ba09",
        "type": "split",
        "z": "da26e15afb7659ec",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 1030,
        "y": 2680,
        "wires": [
            [
                "e7ec9e2f834037cc"
            ]
        ]
    },
    {
        "id": "e7ec9e2f834037cc",
        "type": "delay",
        "z": "da26e15afb7659ec",
        "name": "",
        "pauseType": "rate",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "2",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1200,
        "y": 2680,
        "wires": [
            [
                "1a9870d222ea19fd"
            ]
        ]
    },
    {
        "id": "bec07527810fb98b",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Get Standings by season",
        "func": "function generateStandingsInserts(standingsData) {\n    // Se il dato in input è una stringa JSON, la parsifichiamo\n    if (typeof standingsData === 'string') {\n        try {\n            standingsData = JSON.parse(standingsData);\n        } catch (e) {\n            throw new Error('Invalid JSON string provided');\n        }\n    }\n\n    // Verifica che standingsData sia un array\n    if (!Array.isArray(standingsData)) {\n        throw new Error('Input must be an array of standings');\n    }\n\n    const fields = [\n        'id', 'participant_id', 'sport_id', 'league_id',\n        'season_id', 'stage_id', 'group_id', 'round_id',\n        'standing_rule_id', 'position', 'result', 'points'\n    ];\n\n    // Genera una singola query INSERT con VALUES multiple\n    let insertQuery = `INSERT INTO SPORTSMONK_standings_by_season (\\n    ${fields.join(', ')}\\n) VALUES\\n`;\n\n    const values = standingsData.map(standing => {\n        const rowValues = fields.map(field => {\n            const value = standing[field];\n            // Gestisce i valori null, stringhe e numeri appropriatamente\n            if (value === null) {\n                return 'NULL';\n            } else if (typeof value === 'string') {\n                return `'${value.replace(/'/g, \"''\")}'`; // Escape single quotes\n            } else {\n                return value;\n            }\n        });\n        return `(${rowValues.join(', ')})`;\n    });\n\n    insertQuery += values.join(',\\n') + ';';\n\n    // Se vuoi anche query separate per ogni record\n    const individualQueries = standingsData.map(standing => {\n        const rowValues = fields.map(field => {\n            const value = standing[field];\n            if (value === null) {\n                return 'NULL';\n            } else if (typeof value === 'string') {\n                return `'${value.replace(/'/g, \"''\")}'`;\n            } else {\n                return value;\n            }\n        });\n        \n        return `INSERT INTO standings (\\n    ${fields.join(', ')}\\n) VALUES (${rowValues.join(', ')});`;\n    });\n\n    return {\n        bulkInsert: insertQuery,\n        individualInserts: individualQueries\n    };\n}\n\n\nconst data = msg.payload.data;\n\nconst inserts = generateStandingsInserts(data);\n\nconst topic = inserts.bulkInsert\n\nmsg.topic=topic;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 2190,
        "y": 2680,
        "wires": [
            [
                "1c48506e191d7193"
            ]
        ]
    },
    {
        "id": "2353a4b09e729ef9",
        "type": "debug",
        "z": "da26e15afb7659ec",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1350,
        "y": 2480,
        "wires": []
    },
    {
        "id": "de6492c69ac0a28f",
        "type": "http request",
        "z": "da26e15afb7659ec",
        "name": "",
        "method": "GET",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 1850,
        "y": 2680,
        "wires": [
            [
                "bec07527810fb98b",
                "2353a4b09e729ef9"
            ]
        ]
    },
    {
        "id": "beaa0cb63d6e1026",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Base url builder with pagination",
        "func": "\nlet next_page = 1;\n\nif( msg.payload && msg.payload.pagination && msg.payload.pagination.has_more) {\n    \n    next_page=msg.payload.pagination.current_page+1;\n}\n\n\nconst end_point = \"football/standings/seasons/\" + msg.payload.season\n\n\nconst token = flow.get(\"SM_TOKEN\");\nconst base_url = \"https://api.sportmonks.com/v3/\";\nconst api_token=\"api_token=\"+token;\n\nconst params = \"?\" + api_token \n\nconst url = base_url + end_point +params\n\nmsg.url = url;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1610,
        "y": 2840,
        "wires": [
            [
                "de6492c69ac0a28f"
            ]
        ]
    },
    {
        "id": "1a9870d222ea19fd",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Set API TOKEN",
        "func": "flow.set(\"SM_TOKEN\",\"z7qUp2Vo68p4LecWVEzQ7cJ12wTNCeN3EKb984FTa7GgwJnuSBsesZzUcdG2\")\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1380,
        "y": 2840,
        "wires": [
            [
                "beaa0cb63d6e1026"
            ]
        ]
    },
    {
        "id": "1c48506e191d7193",
        "type": "mysql",
        "z": "da26e15afb7659ec",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 2000,
        "y": 2600,
        "wires": [
            [
                "2353a4b09e729ef9"
            ]
        ]
    },
    {
        "id": "e9adf0f7cb7a1bdc",
        "type": "mysql",
        "z": "da26e15afb7659ec",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 540,
        "y": 2840,
        "wires": [
            [
                "71fbb62e336e58c1"
            ]
        ]
    },
    {
        "id": "b6e6c0f329feb311",
        "type": "function",
        "z": "da26e15afb7659ec",
        "name": "Delete records",
        "func": "\n\ntopic = `delete from SPORTSMONK_standings_by_season;`;\n\nmsg.topic=topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 2840,
        "wires": [
            [
                "e9adf0f7cb7a1bdc"
            ]
        ]
    },
    {
        "id": "8a9e137a5bba19f8",
        "type": "function",
        "z": "82045ad13ed5120a",
        "name": "Query",
        "func": "let topic = \"\";\n\n// FAIRVALUE\n\nif (msg.req.originalUrl.includes(\"/dominance/fairvalue\")) {\n    \n    if (msg.req.params.playerId) {\n        \n        topic = \"SELECT playerId,fullName,potentialPrice as 'fairValue' FROM `latestplayers_staging` where playerId = '\"+msg.req.params.playerId+\"';\" \n\n    } else {\n         topic = \"SELECT playerId,fullName,potentialPrice as 'fairValue' FROM `latestplayers_staging`;\"\n    }\n    \n    \n}\n\n\n// TRANSFERS\nif (msg.req.originalUrl.includes(\"/dominance/transfers\")) {\n    \n    if (msg.req.params.playerId) {\n        \n        topic = \"SELECT * FROM `OPTA_transfers` where playerId = '\"+msg.req.params.playerId+\"' and run = (SELECT max(run) from OPTA_transfers where playerId = '\"+msg.req.params.playerId+\"'  ) ORDER BY startDate desc;\"\n\n    } else if (msg.req.params.page) {\n        \n        let offset = 10000 * msg.req.params.page;\n        \n         topic = \"SELECT * FROM `OPTA_transfers` where run = (SELECT max(run) from OPTA_transfers ) ORDER BY playerId,startDate desc limit 10000 offset \"+offset+\";\"\n    \n        \n    }  else {\n        \n         topic = \"SELECT * FROM `OPTA_transfers` where run = (SELECT max(run) from OPTA_transfers ) ORDER BY playerId,startDate desc;\"\n    }\n    \n   \n}\n\n\nmsg.topic = topic;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1190,
        "y": 400,
        "wires": [
            [
                "da7c91dd97da8cc8",
                "fa2ec5267ce3e2e7"
            ]
        ]
    },
    {
        "id": "3a7573382a390464",
        "type": "http in",
        "z": "82045ad13ed5120a",
        "name": "/dominance/transfers",
        "url": "/dominance/transfers",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 360,
        "y": 100,
        "wires": [
            [
                "074dab571566766f"
            ]
        ]
    },
    {
        "id": "da7c91dd97da8cc8",
        "type": "mysql",
        "z": "82045ad13ed5120a",
        "mydb": "14f41b2b.4deca5",
        "name": "SF STAGE TUNNEL",
        "x": 1420,
        "y": 400,
        "wires": [
            [
                "f83cd16c50399f9e"
            ]
        ]
    },
    {
        "id": "f83cd16c50399f9e",
        "type": "http response",
        "z": "82045ad13ed5120a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1630,
        "y": 340,
        "wires": []
    },
    {
        "id": "fa2ec5267ce3e2e7",
        "type": "debug",
        "z": "82045ad13ed5120a",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 1190,
        "y": 560,
        "wires": []
    },
    {
        "id": "b47d5b7d9783a62a",
        "type": "http in",
        "z": "82045ad13ed5120a",
        "name": "/dominance/fairvalue",
        "url": "/dominance/fairvalue",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 350,
        "y": 160,
        "wires": [
            [
                "074dab571566766f"
            ]
        ]
    },
    {
        "id": "074dab571566766f",
        "type": "function",
        "z": "82045ad13ed5120a",
        "name": "Auth Checker",
        "func": "const token = \"eyJhbGciOiJIUzI1NiJ9\"\n\nmsg.auth=false;\n\nif (msg && msg.req && msg.req.headers && msg.req.headers.authorization) {\n    \n    \n        let authorization =  msg.req.headers.authorization;\n        \n        if (authorization.includes(\"Bearer\")) {\n            \n           \n            if (authorization.split(\" \")[1] === token) {\n                \n                msg.auth=true;\n            }\n        }\n    \n}\n\n   msg.auth=true;\n\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 640,
        "y": 160,
        "wires": [
            [
                "d8191eaf777da12a"
            ]
        ]
    },
    {
        "id": "d8191eaf777da12a",
        "type": "switch",
        "z": "82045ad13ed5120a",
        "name": "",
        "property": "auth",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 810,
        "y": 160,
        "wires": [
            [
                "f3c11667e738e220"
            ],
            [
                "8a9e137a5bba19f8"
            ]
        ]
    },
    {
        "id": "f3c11667e738e220",
        "type": "function",
        "z": "82045ad13ed5120a",
        "name": "Unauthorized",
        "func": "msg.payload=\"Unauthorized\"\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 970,
        "y": 160,
        "wires": [
            [
                "ae77402e62e91f3c"
            ]
        ]
    },
    {
        "id": "ae77402e62e91f3c",
        "type": "http response",
        "z": "82045ad13ed5120a",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 1150,
        "y": 160,
        "wires": []
    },
    {
        "id": "ad0b5abbd0970dc0",
        "type": "http in",
        "z": "82045ad13ed5120a",
        "name": "/dominance/transfers/:playerId",
        "url": "/dominance/transfers/:playerId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 280,
        "y": 220,
        "wires": [
            [
                "074dab571566766f"
            ]
        ]
    },
    {
        "id": "a2b393c2298ea606",
        "type": "http in",
        "z": "82045ad13ed5120a",
        "name": "/dominance/fairvalue/:playerId",
        "url": "/dominance/fairvalue/:playerId",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 220,
        "y": 300,
        "wires": [
            [
                "074dab571566766f"
            ]
        ]
    },
    {
        "id": "de5ababadac3c133",
        "type": "http in",
        "z": "82045ad13ed5120a",
        "name": "/dominance/transfers/:page",
        "url": "/dominance/transfers/:page",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 250,
        "y": 480,
        "wires": [
            []
        ]
    }
]